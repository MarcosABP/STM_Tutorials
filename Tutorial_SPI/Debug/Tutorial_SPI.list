
Tutorial_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800a340  0800a340  0000b340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a41c  0800a41c  0000b41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a424  0800a424  0000b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a428  0800a428  0000b428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800a42c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007c8  24000060  0800a48c  0000c060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000828  0800a48c  0000c828  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a28b  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003087  00000000  00000000  00026319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001328  00000000  00000000  000293a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f0b  00000000  00000000  0002a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038331  00000000  00000000  0002b5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c9c6  00000000  00000000  00063904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016082f  00000000  00000000  000802ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e0af9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000575c  00000000  00000000  001e0b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001e6298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a328 	.word	0x0800a328

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800a328 	.word	0x0800a328

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <MAX7219_SendData>:
const uint8_t char_L[8] = {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF};

const uint8_t char_plus[8] = {0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00};
const uint8_t char_minus[8] = {0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00};

void MAX7219_SendData(uint8_t reg, uint8_t data) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	460a      	mov	r2, r1
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	4613      	mov	r3, r2
 80006ae:	71bb      	strb	r3, [r7, #6]
	uint8_t txData[2] = {reg, data};
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	733b      	strb	r3, [r7, #12]
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <MAX7219_SendData+0x44>)
 80006be:	f002 f8d3 	bl	8002868 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY);
 80006c2:	f107 010c 	add.w	r1, r7, #12
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	2202      	movs	r2, #2
 80006cc:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <MAX7219_SendData+0x48>)
 80006ce:	f005 ff7d 	bl	80065cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2140      	movs	r1, #64	@ 0x40
 80006d6:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <MAX7219_SendData+0x44>)
 80006d8:	f002 f8c6 	bl	8002868 <HAL_GPIO_WritePin>
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58020000 	.word	0x58020000
 80006e8:	240000d0 	.word	0x240000d0

080006ec <MAX7219_init>:

void MAX7219_init(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	MAX7219_SendData(0x09,0x00);
 80006f2:	2100      	movs	r1, #0
 80006f4:	2009      	movs	r0, #9
 80006f6:	f7ff ffd3 	bl	80006a0 <MAX7219_SendData>
	MAX7219_SendData(0x0A,0x00);
 80006fa:	2100      	movs	r1, #0
 80006fc:	200a      	movs	r0, #10
 80006fe:	f7ff ffcf 	bl	80006a0 <MAX7219_SendData>
	MAX7219_SendData(0x0B,0x07);
 8000702:	2107      	movs	r1, #7
 8000704:	200b      	movs	r0, #11
 8000706:	f7ff ffcb 	bl	80006a0 <MAX7219_SendData>
	MAX7219_SendData(0x0C,0x01);
 800070a:	2101      	movs	r1, #1
 800070c:	200c      	movs	r0, #12
 800070e:	f7ff ffc7 	bl	80006a0 <MAX7219_SendData>
	MAX7219_SendData(0x0F,0x00);
 8000712:	2100      	movs	r1, #0
 8000714:	200f      	movs	r0, #15
 8000716:	f7ff ffc3 	bl	80006a0 <MAX7219_SendData>

    for (int i = 1; i <= 8; i++) {
 800071a:	2301      	movs	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e008      	b.n	8000732 <MAX7219_init+0x46>
        MAX7219_SendData(i, 0x00);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffba 	bl	80006a0 <MAX7219_SendData>
    for (int i = 1; i <= 8; i++) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3301      	adds	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b08      	cmp	r3, #8
 8000736:	ddf3      	ble.n	8000720 <MAX7219_init+0x34>
    }
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <Display_Char>:

void Display_Char(const uint8_t *char_pattern) {
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	MAX7219_init();
 800074a:	f7ff ffcf 	bl	80006ec <MAX7219_init>
    for (int i = 0; i < 8; i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	e00d      	b.n	8000770 <Display_Char+0x2e>
    	MAX7219_SendData(i + 1, char_pattern[i]);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	3301      	adds	r3, #1
 800075a:	b2d8      	uxtb	r0, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	f7ff ff9b 	bl	80006a0 <MAX7219_SendData>
    for (int i = 0; i < 8; i++) {
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3301      	adds	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b07      	cmp	r3, #7
 8000774:	ddee      	ble.n	8000754 <Display_Char+0x12>
    }
}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Display_Alternating>:

void Display_Alternating(const uint8_t *char_pattern, const uint8_t *sign_pattern, uint16_t delay_ms) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	4613      	mov	r3, r2
 800078c:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < 10; i++){
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	e010      	b.n	80007b6 <Display_Alternating+0x36>
		Display_Char(char_pattern);
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	f7ff ffd4 	bl	8000742 <Display_Char>
		HAL_Delay(delay_ms);
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	4618      	mov	r0, r3
 800079e:	f001 f80f 	bl	80017c0 <HAL_Delay>
		Display_Char(sign_pattern);
 80007a2:	68b8      	ldr	r0, [r7, #8]
 80007a4:	f7ff ffcd 	bl	8000742 <Display_Char>
		HAL_Delay(delay_ms);
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 f808 	bl	80017c0 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	3301      	adds	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	2b09      	cmp	r3, #9
 80007ba:	ddeb      	ble.n	8000794 <Display_Alternating+0x14>
	}
	for (int i = 1; i <= 8; i++) {
 80007bc:	2301      	movs	r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	e008      	b.n	80007d4 <Display_Alternating+0x54>
		MAX7219_SendData(i, 0x00);
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff69 	bl	80006a0 <MAX7219_SendData>
	for (int i = 1; i <= 8; i++) {
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	3301      	adds	r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	2b08      	cmp	r3, #8
 80007d8:	ddf3      	ble.n	80007c2 <Display_Alternating+0x42>
	}
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <clean_command_buffer>:


char * clean_command_buffer(char *command) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    while (*command == '\r' || *command == '\n') {
 80007ec:	e002      	b.n	80007f4 <clean_command_buffer+0x10>
        command++;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3301      	adds	r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
    while (*command == '\r' || *command == '\n') {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b0d      	cmp	r3, #13
 80007fa:	d0f8      	beq.n	80007ee <clean_command_buffer+0xa>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b0a      	cmp	r3, #10
 8000802:	d0f4      	beq.n	80007ee <clean_command_buffer+0xa>
    }
    size_t len = strlen(command);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff fd75 	bl	80002f4 <strlen>
 800080a:	60f8      	str	r0, [r7, #12]
        while (len > 0 && command[len - 1] == '\r') {
 800080c:	e007      	b.n	800081e <clean_command_buffer+0x3a>
            command[--len] = '\0';
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3b01      	subs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4413      	add	r3, r2
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
        while (len > 0 && command[len - 1] == '\r') {
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d006      	beq.n	8000832 <clean_command_buffer+0x4e>
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3b01      	subs	r3, #1
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b0d      	cmp	r3, #13
 8000830:	d0ed      	beq.n	800080e <clean_command_buffer+0x2a>
        }

	return command;
 8000832:	687b      	ldr	r3, [r7, #4]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <Read_PCF8591>:

uint8_t Read_PCF8591(uint8_t channel) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af02      	add	r7, sp, #8
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
    uint8_t command_ain;
    uint8_t data;

    switch (channel) {
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b03      	cmp	r3, #3
 800084a:	d00c      	beq.n	8000866 <Read_PCF8591+0x2a>
 800084c:	2b03      	cmp	r3, #3
 800084e:	dc0d      	bgt.n	800086c <Read_PCF8591+0x30>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <Read_PCF8591+0x1e>
 8000854:	2b01      	cmp	r3, #1
 8000856:	d003      	beq.n	8000860 <Read_PCF8591+0x24>
 8000858:	e008      	b.n	800086c <Read_PCF8591+0x30>
        case 0: command_ain = 0x40; break;
 800085a:	2340      	movs	r3, #64	@ 0x40
 800085c:	73fb      	strb	r3, [r7, #15]
 800085e:	e007      	b.n	8000870 <Read_PCF8591+0x34>
        case 1: command_ain = 0x41; break;
 8000860:	2341      	movs	r3, #65	@ 0x41
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e004      	b.n	8000870 <Read_PCF8591+0x34>
        case 3: command_ain = 0x43; break;
 8000866:	2343      	movs	r3, #67	@ 0x43
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	e001      	b.n	8000870 <Read_PCF8591+0x34>
        default: return 0xFF;
 800086c:	23ff      	movs	r3, #255	@ 0xff
 800086e:	e014      	b.n	800089a <Read_PCF8591+0x5e>
    }

    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)PCF8591_ADDRESS, &command_ain, 1, HAL_MAX_DELAY);
 8000870:	f107 020f 	add.w	r2, r7, #15
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	2190      	movs	r1, #144	@ 0x90
 800087e:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <Read_PCF8591+0x68>)
 8000880:	f002 f8a8 	bl	80029d4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, (uint16_t)PCF8591_ADDRESS, &data, 1, HAL_MAX_DELAY);
 8000884:	f107 020e 	add.w	r2, r7, #14
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2301      	movs	r3, #1
 8000890:	2190      	movs	r1, #144	@ 0x90
 8000892:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <Read_PCF8591+0x68>)
 8000894:	f002 f9b6 	bl	8002c04 <HAL_I2C_Master_Receive>

    return data;
 8000898:	7bbb      	ldrb	r3, [r7, #14]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2400007c 	.word	0x2400007c

080008a8 <process_command>:

void process_command(char *command) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    char msg[20];
    command = clean_command_buffer(command);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff97 	bl	80007e4 <clean_command_buffer>
 80008b6:	6078      	str	r0, [r7, #4]

    if (strcmp(command, "Temp") == 0) {
 80008b8:	494d      	ldr	r1, [pc, #308]	@ (80009f0 <process_command+0x148>)
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fd10 	bl	80002e0 <strcmp>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d12b      	bne.n	800091e <process_command+0x76>
        uint8_t temp = Read_PCF8591(0);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffb8 	bl	800083c <Read_PCF8591>
 80008cc:	4603      	mov	r3, r0
 80008ce:	777b      	strb	r3, [r7, #29]
        sprintf(msg, "Temperature: %d\n", temp);
 80008d0:	7f7a      	ldrb	r2, [r7, #29]
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4947      	ldr	r1, [pc, #284]	@ (80009f4 <process_command+0x14c>)
 80008d8:	4618      	mov	r0, r3
 80008da:	f009 f885 	bl	80099e8 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fd06 	bl	80002f4 <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f107 0108 	add.w	r1, r7, #8
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295
 80008f4:	4840      	ldr	r0, [pc, #256]	@ (80009f8 <process_command+0x150>)
 80008f6:	f006 f990 	bl	8006c1a <HAL_UART_Transmit>
        if (temp < 128) {
 80008fa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db06      	blt.n	8000910 <process_command+0x68>
                    Display_Alternating(char_T, char_minus, 500);
 8000902:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000906:	493d      	ldr	r1, [pc, #244]	@ (80009fc <process_command+0x154>)
 8000908:	483d      	ldr	r0, [pc, #244]	@ (8000a00 <process_command+0x158>)
 800090a:	f7ff ff39 	bl	8000780 <Display_Alternating>
                    Display_Alternating(char_L, char_minus, 500);
                } else {
                    Display_Alternating(char_L, char_plus, 500);
                }
    }
}
 800090e:	e06b      	b.n	80009e8 <process_command+0x140>
                    Display_Alternating(char_T, char_plus, 500);
 8000910:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000914:	493b      	ldr	r1, [pc, #236]	@ (8000a04 <process_command+0x15c>)
 8000916:	483a      	ldr	r0, [pc, #232]	@ (8000a00 <process_command+0x158>)
 8000918:	f7ff ff32 	bl	8000780 <Display_Alternating>
}
 800091c:	e064      	b.n	80009e8 <process_command+0x140>
    } else if (strcmp(command, "Volt") == 0) {
 800091e:	493a      	ldr	r1, [pc, #232]	@ (8000a08 <process_command+0x160>)
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fcdd 	bl	80002e0 <strcmp>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d12b      	bne.n	8000984 <process_command+0xdc>
        uint8_t volt = Read_PCF8591(1);
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff ff85 	bl	800083c <Read_PCF8591>
 8000932:	4603      	mov	r3, r0
 8000934:	77bb      	strb	r3, [r7, #30]
        sprintf(msg, "Voltage: %d\n", volt);
 8000936:	7fba      	ldrb	r2, [r7, #30]
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4933      	ldr	r1, [pc, #204]	@ (8000a0c <process_command+0x164>)
 800093e:	4618      	mov	r0, r3
 8000940:	f009 f852 	bl	80099e8 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fcd3 	bl	80002f4 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	f107 0108 	add.w	r1, r7, #8
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	4827      	ldr	r0, [pc, #156]	@ (80009f8 <process_command+0x150>)
 800095c:	f006 f95d 	bl	8006c1a <HAL_UART_Transmit>
        if (volt < 128) {
 8000960:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db06      	blt.n	8000976 <process_command+0xce>
                    Display_Alternating(char_V, char_minus, 500);
 8000968:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800096c:	4923      	ldr	r1, [pc, #140]	@ (80009fc <process_command+0x154>)
 800096e:	4828      	ldr	r0, [pc, #160]	@ (8000a10 <process_command+0x168>)
 8000970:	f7ff ff06 	bl	8000780 <Display_Alternating>
}
 8000974:	e038      	b.n	80009e8 <process_command+0x140>
                    Display_Alternating(char_V, char_plus, 500);
 8000976:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800097a:	4922      	ldr	r1, [pc, #136]	@ (8000a04 <process_command+0x15c>)
 800097c:	4824      	ldr	r0, [pc, #144]	@ (8000a10 <process_command+0x168>)
 800097e:	f7ff feff 	bl	8000780 <Display_Alternating>
}
 8000982:	e031      	b.n	80009e8 <process_command+0x140>
    } else if (strcmp(command, "LDR") == 0) {
 8000984:	4923      	ldr	r1, [pc, #140]	@ (8000a14 <process_command+0x16c>)
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff fcaa 	bl	80002e0 <strcmp>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d12a      	bne.n	80009e8 <process_command+0x140>
        uint8_t ldr = Read_PCF8591(3);
 8000992:	2003      	movs	r0, #3
 8000994:	f7ff ff52 	bl	800083c <Read_PCF8591>
 8000998:	4603      	mov	r3, r0
 800099a:	77fb      	strb	r3, [r7, #31]
        sprintf(msg, "Luminosity: %d\n", ldr);
 800099c:	7ffa      	ldrb	r2, [r7, #31]
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	491d      	ldr	r1, [pc, #116]	@ (8000a18 <process_command+0x170>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f009 f81f 	bl	80099e8 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fca0 	bl	80002f4 <strlen>
 80009b4:	4603      	mov	r3, r0
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	f107 0108 	add.w	r1, r7, #8
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	480d      	ldr	r0, [pc, #52]	@ (80009f8 <process_command+0x150>)
 80009c2:	f006 f92a 	bl	8006c1a <HAL_UART_Transmit>
        if (ldr < 128) {
 80009c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db06      	blt.n	80009dc <process_command+0x134>
                    Display_Alternating(char_L, char_minus, 500);
 80009ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009d2:	490a      	ldr	r1, [pc, #40]	@ (80009fc <process_command+0x154>)
 80009d4:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <process_command+0x174>)
 80009d6:	f7ff fed3 	bl	8000780 <Display_Alternating>
}
 80009da:	e005      	b.n	80009e8 <process_command+0x140>
                    Display_Alternating(char_L, char_plus, 500);
 80009dc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009e0:	4908      	ldr	r1, [pc, #32]	@ (8000a04 <process_command+0x15c>)
 80009e2:	480e      	ldr	r0, [pc, #56]	@ (8000a1c <process_command+0x174>)
 80009e4:	f7ff fecc 	bl	8000780 <Display_Alternating>
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	0800a340 	.word	0x0800a340
 80009f4:	0800a348 	.word	0x0800a348
 80009f8:	24000158 	.word	0x24000158
 80009fc:	0800a3a8 	.word	0x0800a3a8
 8000a00:	0800a388 	.word	0x0800a388
 8000a04:	0800a3a0 	.word	0x0800a3a0
 8000a08:	0800a35c 	.word	0x0800a35c
 8000a0c:	0800a364 	.word	0x0800a364
 8000a10:	0800a390 	.word	0x0800a390
 8000a14:	0800a374 	.word	0x0800a374
 8000a18:	0800a378 	.word	0x0800a378
 8000a1c:	0800a398 	.word	0x0800a398

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f000 fe3a 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f81a 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f000 f9ae 	bl	8000d8c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a30:	f000 f92e 	bl	8000c90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a34:	f000 f978 	bl	8000d28 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000a38:	f000 f892 	bl	8000b60 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a3c:	f000 f8d0 	bl	8000be0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  memset(command_buffer, 0, sizeof(command_buffer));
 8000a40:	2206      	movs	r2, #6
 8000a42:	2100      	movs	r1, #0
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <main+0x38>)
 8000a46:	f008 ffef 	bl	8009a28 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      HAL_UART_Receive_IT(&huart3, (uint8_t*)command_buffer, sizeof(command_buffer) - 1);
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	4902      	ldr	r1, [pc, #8]	@ (8000a58 <main+0x38>)
 8000a4e:	4803      	ldr	r0, [pc, #12]	@ (8000a5c <main+0x3c>)
 8000a50:	f006 f972 	bl	8006d38 <HAL_UART_Receive_IT>
 8000a54:	e7f9      	b.n	8000a4a <main+0x2a>
 8000a56:	bf00      	nop
 8000a58:	240006d0 	.word	0x240006d0
 8000a5c:	24000158 	.word	0x24000158

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	@ 0x70
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6a:	224c      	movs	r2, #76	@ 0x4c
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f008 ffda 	bl	8009a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2220      	movs	r2, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f008 ffd4 	bl	8009a28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a80:	2002      	movs	r0, #2
 8000a82:	f002 fe23 	bl	80036cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <SystemClock_Config+0xf8>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8e:	4a32      	ldr	r2, [pc, #200]	@ (8000b58 <SystemClock_Config+0xf8>)
 8000a90:	f023 0301 	bic.w	r3, r3, #1
 8000a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a96:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <SystemClock_Config+0xf8>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <SystemClock_Config+0xfc>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8000b5c <SystemClock_Config+0xfc>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <SystemClock_Config+0xfc>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000abc:	bf00      	nop
 8000abe:	4b27      	ldr	r3, [pc, #156]	@ (8000b5c <SystemClock_Config+0xfc>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aca:	d1f8      	bne.n	8000abe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000acc:	2303      	movs	r3, #3
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ada:	2340      	movs	r3, #64	@ 0x40
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 19;
 8000aea:	2313      	movs	r3, #19
 8000aec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000af2:	2303      	movs	r3, #3
 8000af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000afa:	230c      	movs	r3, #12
 8000afc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000afe:	2302      	movs	r3, #2
 8000b00:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fe28 	bl	8003760 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b16:	f000 fa89 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	233f      	movs	r3, #63	@ 0x3f
 8000b1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b2e:	2340      	movs	r3, #64	@ 0x40
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fa68 	bl	8004014 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b4a:	f000 fa6f 	bl	800102c <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3770      	adds	r7, #112	@ 0x70
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	58000400 	.word	0x58000400
 8000b5c:	58024800 	.word	0x58024800

08000b60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <MX_I2C1_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <MX_I2C1_Init+0x7c>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9a:	480e      	ldr	r0, [pc, #56]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b9c:	f001 fe7e 	bl	800289c <HAL_I2C_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ba6:	f000 fa41 	bl	800102c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bae:	f002 fbc5 	bl	800333c <HAL_I2CEx_ConfigAnalogFilter>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb8:	f000 fa38 	bl	800102c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bc0:	f002 fc07 	bl	80033d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bca:	f000 fa2f 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2400007c 	.word	0x2400007c
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	00707cbb 	.word	0x00707cbb

08000be0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be4:	4b28      	ldr	r3, [pc, #160]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000be6:	4a29      	ldr	r2, [pc, #164]	@ (8000c8c <MX_SPI1_Init+0xac>)
 8000be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bea:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000bec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000bf4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bf8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bfa:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c00:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c06:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c0e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c16:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000c1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_SPI1_Init+0xa8>)
 8000c74:	f005 fb86 	bl	8006384 <HAL_SPI_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000c7e:	f000 f9d5 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	240000d0 	.word	0x240000d0
 8000c8c:	40013000 	.word	0x40013000

08000c90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000c96:	4a23      	ldr	r2, [pc, #140]	@ (8000d24 <MX_USART3_UART_Init+0x94>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd8:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cda:	f005 ff4e 	bl	8006b7a <HAL_UART_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ce4:	f000 f9a2 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cec:	f008 faa9 	bl	8009242 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf6:	f000 f999 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cfe:	f008 fade 	bl	80092be <HAL_UARTEx_SetRxFifoThreshold>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d08:	f000 f990 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_USART3_UART_Init+0x90>)
 8000d0e:	f008 fa5f 	bl	80091d0 <HAL_UARTEx_DisableFifoMode>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f000 f988 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000158 	.word	0x24000158
 8000d24:	40004800 	.word	0x40004800

08000d28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2e:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d34:	2209      	movs	r2, #9
 8000d36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d70:	f002 fb7b 	bl	800346a <HAL_PCD_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d7a:	f000 f957 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	240001ec 	.word	0x240001ec
 8000d88:	40080000 	.word	0x40080000

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	@ 0x30
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b8c      	ldr	r3, [pc, #560]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da8:	4a8a      	ldr	r2, [pc, #552]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db2:	4b88      	ldr	r3, [pc, #544]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc0:	4b84      	ldr	r3, [pc, #528]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	4a83      	ldr	r2, [pc, #524]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd0:	4b80      	ldr	r3, [pc, #512]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b7d      	ldr	r3, [pc, #500]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	4a7b      	ldr	r2, [pc, #492]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dee:	4b79      	ldr	r3, [pc, #484]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b75      	ldr	r3, [pc, #468]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	4a74      	ldr	r2, [pc, #464]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0c:	4b71      	ldr	r3, [pc, #452]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b6e      	ldr	r3, [pc, #440]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	4a6c      	ldr	r2, [pc, #432]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e38:	4b66      	ldr	r3, [pc, #408]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	4a65      	ldr	r2, [pc, #404]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e48:	4b62      	ldr	r3, [pc, #392]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	4b5f      	ldr	r3, [pc, #380]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e66:	4b5b      	ldr	r3, [pc, #364]	@ (8000fd4 <MX_GPIO_Init+0x248>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2140      	movs	r1, #64	@ 0x40
 8000e78:	4857      	ldr	r0, [pc, #348]	@ (8000fd8 <MX_GPIO_Init+0x24c>)
 8000e7a:	f001 fcf5 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f244 0141 	movw	r1, #16449	@ 0x4041
 8000e84:	4855      	ldr	r0, [pc, #340]	@ (8000fdc <MX_GPIO_Init+0x250>)
 8000e86:	f001 fcef 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e90:	4853      	ldr	r0, [pc, #332]	@ (8000fe0 <MX_GPIO_Init+0x254>)
 8000e92:	f001 fce9 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4852      	ldr	r0, [pc, #328]	@ (8000fe4 <MX_GPIO_Init+0x258>)
 8000e9c:	f001 fce4 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ea0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	484c      	ldr	r0, [pc, #304]	@ (8000fe8 <MX_GPIO_Init+0x25c>)
 8000eb6:	f001 fb27 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000eba:	2332      	movs	r3, #50	@ 0x32
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4844      	ldr	r0, [pc, #272]	@ (8000fe8 <MX_GPIO_Init+0x25c>)
 8000ed6:	f001 fb17 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000eda:	2306      	movs	r3, #6
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eea:	230b      	movs	r3, #11
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4838      	ldr	r0, [pc, #224]	@ (8000fd8 <MX_GPIO_Init+0x24c>)
 8000ef6:	f001 fb07 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000efa:	2340      	movs	r3, #64	@ 0x40
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4831      	ldr	r0, [pc, #196]	@ (8000fd8 <MX_GPIO_Init+0x24c>)
 8000f12:	f001 faf9 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB6 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_6;
 8000f16:	f244 0341 	movw	r3, #16449	@ 0x4041
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	482b      	ldr	r0, [pc, #172]	@ (8000fdc <MX_GPIO_Init+0x250>)
 8000f30:	f001 faea 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f46:	230b      	movs	r3, #11
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4822      	ldr	r0, [pc, #136]	@ (8000fdc <MX_GPIO_Init+0x250>)
 8000f52:	f001 fad9 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	481c      	ldr	r0, [pc, #112]	@ (8000fe0 <MX_GPIO_Init+0x254>)
 8000f70:	f001 faca 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000f74:	2380      	movs	r3, #128	@ 0x80
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f78:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4818      	ldr	r0, [pc, #96]	@ (8000fec <MX_GPIO_Init+0x260>)
 8000f8a:	f001 fabd 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f8e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa0:	230b      	movs	r3, #11
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4810      	ldr	r0, [pc, #64]	@ (8000fec <MX_GPIO_Init+0x260>)
 8000fac:	f001 faac 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4807      	ldr	r0, [pc, #28]	@ (8000fe4 <MX_GPIO_Init+0x258>)
 8000fc8:	f001 fa9e 	bl	8002508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fcc:	bf00      	nop
 8000fce:	3730      	adds	r7, #48	@ 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	58020400 	.word	0x58020400
 8000fe0:	58020c00 	.word	0x58020c00
 8000fe4:	58021000 	.word	0x58021000
 8000fe8:	58020800 	.word	0x58020800
 8000fec:	58021800 	.word	0x58021800

08000ff0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_UART_RxCpltCallback+0x34>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d10c      	bne.n	800101a <HAL_UART_RxCpltCallback+0x2a>
		process_command(command_buffer);
 8001000:	4809      	ldr	r0, [pc, #36]	@ (8001028 <HAL_UART_RxCpltCallback+0x38>)
 8001002:	f7ff fc51 	bl	80008a8 <process_command>
		memset(command_buffer, 0, sizeof(command_buffer));
 8001006:	2206      	movs	r2, #6
 8001008:	2100      	movs	r1, #0
 800100a:	4807      	ldr	r0, [pc, #28]	@ (8001028 <HAL_UART_RxCpltCallback+0x38>)
 800100c:	f008 fd0c 	bl	8009a28 <memset>
        HAL_UART_Receive_IT(&huart3, (uint8_t*)command_buffer, sizeof(command_buffer) - 1);
 8001010:	2205      	movs	r2, #5
 8001012:	4905      	ldr	r1, [pc, #20]	@ (8001028 <HAL_UART_RxCpltCallback+0x38>)
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <HAL_UART_RxCpltCallback+0x34>)
 8001016:	f005 fe8f 	bl	8006d38 <HAL_UART_Receive_IT>
	}
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	24000158 	.word	0x24000158
 8001028:	240006d0 	.word	0x240006d0

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <Error_Handler+0x8>

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_MspInit+0x30>)
 8001040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001044:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <HAL_MspInit+0x30>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_MspInit+0x30>)
 8001050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	58024400 	.word	0x58024400

0800106c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0ba      	sub	sp, #232	@ 0xe8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	22c0      	movs	r2, #192	@ 0xc0
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f008 fccb 	bl	8009a28 <memset>
  if(hi2c->Instance==I2C1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a27      	ldr	r2, [pc, #156]	@ (8001134 <HAL_I2C_MspInit+0xc8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d146      	bne.n	800112a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800109c:	f04f 0208 	mov.w	r2, #8
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fb3a 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010be:	f7ff ffb5 	bl	800102c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <HAL_I2C_MspInit+0xcc>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001138 <HAL_I2C_MspInit+0xcc>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_I2C_MspInit+0xcc>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e8:	2312      	movs	r3, #18
 80010ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010fa:	2304      	movs	r3, #4
 80010fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	@ (800113c <HAL_I2C_MspInit+0xd0>)
 8001108:	f001 f9fe 	bl	8002508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110c:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_I2C_MspInit+0xcc>)
 800110e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001112:	4a09      	ldr	r2, [pc, #36]	@ (8001138 <HAL_I2C_MspInit+0xcc>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001118:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_I2C_MspInit+0xcc>)
 800111e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800112a:	bf00      	nop
 800112c:	37e8      	adds	r7, #232	@ 0xe8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40005400 	.word	0x40005400
 8001138:	58024400 	.word	0x58024400
 800113c:	58020400 	.word	0x58020400

08001140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b0bc      	sub	sp, #240	@ 0xf0
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	22c0      	movs	r2, #192	@ 0xc0
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f008 fc61 	bl	8009a28 <memset>
  if(hspi->Instance==SPI1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a40      	ldr	r2, [pc, #256]	@ (800126c <HAL_SPI_MspInit+0x12c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d179      	bne.n	8001264 <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001170:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001180:	2313      	movs	r3, #19
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001184:	2302      	movs	r3, #2
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001188:	2302      	movs	r3, #2
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001190:	23c0      	movs	r3, #192	@ 0xc0
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001194:	2320      	movs	r3, #32
 8001196:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800119c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 fac0 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 80011b2:	f7ff ff3b 	bl	800102c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <HAL_SPI_MspInit+0x130>)
 80011b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001270 <HAL_SPI_MspInit+0x130>)
 80011be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001270 <HAL_SPI_MspInit+0x130>)
 80011c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <HAL_SPI_MspInit+0x130>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011da:	4a25      	ldr	r2, [pc, #148]	@ (8001270 <HAL_SPI_MspInit+0x130>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e4:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <HAL_SPI_MspInit+0x130>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <HAL_SPI_MspInit+0x130>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_SPI_MspInit+0x130>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <HAL_SPI_MspInit+0x130>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001210:	2320      	movs	r3, #32
 8001212:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001228:	2305      	movs	r3, #5
 800122a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001232:	4619      	mov	r1, r3
 8001234:	480f      	ldr	r0, [pc, #60]	@ (8001274 <HAL_SPI_MspInit+0x134>)
 8001236:	f001 f967 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800123a:	2320      	movs	r3, #32
 800123c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001252:	2305      	movs	r3, #5
 8001254:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <HAL_SPI_MspInit+0x138>)
 8001260:	f001 f952 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001264:	bf00      	nop
 8001266:	37f0      	adds	r7, #240	@ 0xf0
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40013000 	.word	0x40013000
 8001270:	58024400 	.word	0x58024400
 8001274:	58020000 	.word	0x58020000
 8001278:	58020400 	.word	0x58020400

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0ba      	sub	sp, #232	@ 0xe8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	22c0      	movs	r2, #192	@ 0xc0
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f008 fbc3 	bl	8009a28 <memset>
  if(huart->Instance==USART3)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001354 <HAL_UART_MspInit+0xd8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d14e      	bne.n	800134a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ac:	f04f 0202 	mov.w	r2, #2
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fa32 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012ce:	f7ff fead 	bl	800102c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d2:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <HAL_UART_MspInit+0xdc>)
 80012d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001358 <HAL_UART_MspInit+0xdc>)
 80012da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001358 <HAL_UART_MspInit+0xdc>)
 80012e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <HAL_UART_MspInit+0xdc>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f6:	4a18      	ldr	r2, [pc, #96]	@ (8001358 <HAL_UART_MspInit+0xdc>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001300:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_UART_MspInit+0xdc>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800130e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001328:	2307      	movs	r3, #7
 800132a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001332:	4619      	mov	r1, r3
 8001334:	4809      	ldr	r0, [pc, #36]	@ (800135c <HAL_UART_MspInit+0xe0>)
 8001336:	f001 f8e7 	bl	8002508 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2101      	movs	r1, #1
 800133e:	2027      	movs	r0, #39	@ 0x27
 8001340:	f000 fb49 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001344:	2027      	movs	r0, #39	@ 0x27
 8001346:	f000 fb60 	bl	8001a0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800134a:	bf00      	nop
 800134c:	37e8      	adds	r7, #232	@ 0xe8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40004800 	.word	0x40004800
 8001358:	58024400 	.word	0x58024400
 800135c:	58020c00 	.word	0x58020c00

08001360 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0ba      	sub	sp, #232	@ 0xe8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	22c0      	movs	r2, #192	@ 0xc0
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f008 fb51 	bl	8009a28 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a30      	ldr	r2, [pc, #192]	@ (800144c <HAL_PCD_MspInit+0xec>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d159      	bne.n	8001444 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001390:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800139c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 f9bf 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80013b4:	f7ff fe3a 	bl	800102c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013b8:	f002 f9c2 	bl	8003740 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <HAL_PCD_MspInit+0xf0>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	4a23      	ldr	r2, [pc, #140]	@ (8001450 <HAL_PCD_MspInit+0xf0>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_PCD_MspInit+0xf0>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013da:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80013de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013f4:	230a      	movs	r3, #10
 80013f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013fe:	4619      	mov	r1, r3
 8001400:	4814      	ldr	r0, [pc, #80]	@ (8001454 <HAL_PCD_MspInit+0xf4>)
 8001402:	f001 f881 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800140a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <HAL_PCD_MspInit+0xf4>)
 8001422:	f001 f871 	bl	8002508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <HAL_PCD_MspInit+0xf0>)
 8001428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800142c:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_PCD_MspInit+0xf0>)
 800142e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001432:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_PCD_MspInit+0xf0>)
 8001438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800143c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001444:	bf00      	nop
 8001446:	37e8      	adds	r7, #232	@ 0xe8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40080000 	.word	0x40080000
 8001450:	58024400 	.word	0x58024400
 8001454:	58020000 	.word	0x58020000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <NMI_Handler+0x4>

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <UsageFault_Handler+0x4>

08001480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ae:	f000 f967 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <USART3_IRQHandler+0x10>)
 80014be:	f005 fc87 	bl	8006dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  /* USER CODE END USART3_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	24000158 	.word	0x24000158

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	@ (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f008 fa9c 	bl	8009a38 <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	@ (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	24080000 	.word	0x24080000
 800152c:	00000400 	.word	0x00000400
 8001530:	240006d8 	.word	0x240006d8
 8001534:	24000828 	.word	0x24000828

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800153c:	4b37      	ldr	r3, [pc, #220]	@ (800161c <SystemInit+0xe4>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001542:	4a36      	ldr	r2, [pc, #216]	@ (800161c <SystemInit+0xe4>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800154c:	4b34      	ldr	r3, [pc, #208]	@ (8001620 <SystemInit+0xe8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	2b06      	cmp	r3, #6
 8001556:	d807      	bhi.n	8001568 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001558:	4b31      	ldr	r3, [pc, #196]	@ (8001620 <SystemInit+0xe8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 030f 	bic.w	r3, r3, #15
 8001560:	4a2f      	ldr	r2, [pc, #188]	@ (8001620 <SystemInit+0xe8>)
 8001562:	f043 0307 	orr.w	r3, r3, #7
 8001566:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001568:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <SystemInit+0xec>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a2d      	ldr	r2, [pc, #180]	@ (8001624 <SystemInit+0xec>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001574:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <SystemInit+0xec>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800157a:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <SystemInit+0xec>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4929      	ldr	r1, [pc, #164]	@ (8001624 <SystemInit+0xec>)
 8001580:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <SystemInit+0xf0>)
 8001582:	4013      	ands	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <SystemInit+0xe8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001592:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <SystemInit+0xe8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 030f 	bic.w	r3, r3, #15
 800159a:	4a21      	ldr	r2, [pc, #132]	@ (8001620 <SystemInit+0xe8>)
 800159c:	f043 0307 	orr.w	r3, r3, #7
 80015a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <SystemInit+0xec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <SystemInit+0xec>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <SystemInit+0xec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <SystemInit+0xec>)
 80015b6:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <SystemInit+0xf4>)
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <SystemInit+0xec>)
 80015bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001630 <SystemInit+0xf8>)
 80015be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <SystemInit+0xec>)
 80015c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001634 <SystemInit+0xfc>)
 80015c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015c6:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <SystemInit+0xec>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <SystemInit+0xec>)
 80015ce:	4a19      	ldr	r2, [pc, #100]	@ (8001634 <SystemInit+0xfc>)
 80015d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <SystemInit+0xec>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <SystemInit+0xec>)
 80015da:	4a16      	ldr	r2, [pc, #88]	@ (8001634 <SystemInit+0xfc>)
 80015dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <SystemInit+0xec>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <SystemInit+0xec>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <SystemInit+0xec>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <SystemInit+0xec>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <SystemInit+0x100>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <SystemInit+0x104>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001602:	d202      	bcs.n	800160a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001604:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <SystemInit+0x108>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <SystemInit+0x10c>)
 800160c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001610:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00
 8001620:	52002000 	.word	0x52002000
 8001624:	58024400 	.word	0x58024400
 8001628:	eaf6ed7f 	.word	0xeaf6ed7f
 800162c:	02020200 	.word	0x02020200
 8001630:	01ff0000 	.word	0x01ff0000
 8001634:	01010280 	.word	0x01010280
 8001638:	5c001000 	.word	0x5c001000
 800163c:	ffff0000 	.word	0xffff0000
 8001640:	51008108 	.word	0x51008108
 8001644:	52004000 	.word	0x52004000

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001680 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800164c:	f7ff ff74 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f008 f9e5 	bl	8009a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff f9d1 	bl	8000a20 <main>
  bx  lr
 800167e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001684:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001688:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 800168c:	0800a42c 	.word	0x0800a42c
  ldr r2, =_sbss
 8001690:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001694:	24000828 	.word	0x24000828

08001698 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC3_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a2:	2003      	movs	r0, #3
 80016a4:	f000 f98c 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016a8:	f002 fe6a 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 80016ac:	4602      	mov	r2, r0
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <HAL_Init+0x68>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	4913      	ldr	r1, [pc, #76]	@ (8001708 <HAL_Init+0x6c>)
 80016ba:	5ccb      	ldrb	r3, [r1, r3]
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	fa22 f303 	lsr.w	r3, r2, r3
 80016c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_Init+0x68>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001708 <HAL_Init+0x6c>)
 80016d0:	5cd3      	ldrb	r3, [r2, r3]
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	4a0b      	ldr	r2, [pc, #44]	@ (800170c <HAL_Init+0x70>)
 80016de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <HAL_Init+0x74>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e6:	2000      	movs	r0, #0
 80016e8:	f000 f814 	bl	8001714 <HAL_InitTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e002      	b.n	80016fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016f6:	f7ff fc9f 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	58024400 	.word	0x58024400
 8001708:	0800a3b0 	.word	0x0800a3b0
 800170c:	24000004 	.word	0x24000004
 8001710:	24000000 	.word	0x24000000

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <HAL_InitTick+0x60>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e021      	b.n	800176c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001728:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <HAL_InitTick+0x64>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <HAL_InitTick+0x60>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f971 	bl	8001a26 <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f000 f93b 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4a06      	ldr	r2, [pc, #24]	@ (800177c <HAL_InitTick+0x68>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2400000c 	.word	0x2400000c
 8001778:	24000000 	.word	0x24000000
 800177c:	24000008 	.word	0x24000008

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2400000c 	.word	0x2400000c
 80017a4:	240006dc 	.word	0x240006dc

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	240006dc 	.word	0x240006dc

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff ffee 	bl	80017a8 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d005      	beq.n	80017e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_Delay+0x44>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e6:	bf00      	nop
 80017e8:	f7ff ffde 	bl	80017a8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d8f7      	bhi.n	80017e8 <HAL_Delay+0x28>
  {
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2400000c 	.word	0x2400000c

08001808 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800180c:	4b03      	ldr	r3, [pc, #12]	@ (800181c <HAL_GetREVID+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0c1b      	lsrs	r3, r3, #16
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	5c001000 	.word	0x5c001000

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <__NVIC_SetPriorityGrouping+0x40>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	4313      	orrs	r3, r2
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <__NVIC_SetPriorityGrouping+0x40>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00
 8001864:	05fa0000 	.word	0x05fa0000

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	@ (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	@ (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	@ (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	@ 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	@ 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff29 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff40 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff90 	bl	8001914 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5f 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff33 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffa4 	bl	800197c <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff feae 	bl	80017a8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e2dc      	b.n	8002012 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d008      	beq.n	8001a76 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2280      	movs	r2, #128	@ 0x80
 8001a68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e2cd      	b.n	8002012 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a76      	ldr	r2, [pc, #472]	@ (8001c54 <HAL_DMA_Abort+0x214>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d04a      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a74      	ldr	r2, [pc, #464]	@ (8001c58 <HAL_DMA_Abort+0x218>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d045      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a73      	ldr	r2, [pc, #460]	@ (8001c5c <HAL_DMA_Abort+0x21c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d040      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a71      	ldr	r2, [pc, #452]	@ (8001c60 <HAL_DMA_Abort+0x220>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d03b      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a70      	ldr	r2, [pc, #448]	@ (8001c64 <HAL_DMA_Abort+0x224>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d036      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6e      	ldr	r2, [pc, #440]	@ (8001c68 <HAL_DMA_Abort+0x228>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d031      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6d      	ldr	r2, [pc, #436]	@ (8001c6c <HAL_DMA_Abort+0x22c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d02c      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6b      	ldr	r2, [pc, #428]	@ (8001c70 <HAL_DMA_Abort+0x230>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d027      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6a      	ldr	r2, [pc, #424]	@ (8001c74 <HAL_DMA_Abort+0x234>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d022      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a68      	ldr	r2, [pc, #416]	@ (8001c78 <HAL_DMA_Abort+0x238>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01d      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a67      	ldr	r2, [pc, #412]	@ (8001c7c <HAL_DMA_Abort+0x23c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d018      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a65      	ldr	r2, [pc, #404]	@ (8001c80 <HAL_DMA_Abort+0x240>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a64      	ldr	r2, [pc, #400]	@ (8001c84 <HAL_DMA_Abort+0x244>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00e      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a62      	ldr	r2, [pc, #392]	@ (8001c88 <HAL_DMA_Abort+0x248>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d009      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a61      	ldr	r2, [pc, #388]	@ (8001c8c <HAL_DMA_Abort+0x24c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d004      	beq.n	8001b16 <HAL_DMA_Abort+0xd6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a5f      	ldr	r2, [pc, #380]	@ (8001c90 <HAL_DMA_Abort+0x250>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d101      	bne.n	8001b1a <HAL_DMA_Abort+0xda>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_DMA_Abort+0xdc>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 021e 	bic.w	r2, r2, #30
 8001b2e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b3e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e00a      	b.n	8001b5e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 020e 	bic.w	r2, r2, #14
 8001b56:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a3c      	ldr	r2, [pc, #240]	@ (8001c54 <HAL_DMA_Abort+0x214>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d072      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c58 <HAL_DMA_Abort+0x218>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d06d      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a39      	ldr	r2, [pc, #228]	@ (8001c5c <HAL_DMA_Abort+0x21c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d068      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a37      	ldr	r2, [pc, #220]	@ (8001c60 <HAL_DMA_Abort+0x220>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d063      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a36      	ldr	r2, [pc, #216]	@ (8001c64 <HAL_DMA_Abort+0x224>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d05e      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a34      	ldr	r2, [pc, #208]	@ (8001c68 <HAL_DMA_Abort+0x228>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d059      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a33      	ldr	r2, [pc, #204]	@ (8001c6c <HAL_DMA_Abort+0x22c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d054      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a31      	ldr	r2, [pc, #196]	@ (8001c70 <HAL_DMA_Abort+0x230>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d04f      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a30      	ldr	r2, [pc, #192]	@ (8001c74 <HAL_DMA_Abort+0x234>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d04a      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c78 <HAL_DMA_Abort+0x238>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d045      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c7c <HAL_DMA_Abort+0x23c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d040      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001c80 <HAL_DMA_Abort+0x240>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d03b      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a2a      	ldr	r2, [pc, #168]	@ (8001c84 <HAL_DMA_Abort+0x244>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d036      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a28      	ldr	r2, [pc, #160]	@ (8001c88 <HAL_DMA_Abort+0x248>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d031      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a27      	ldr	r2, [pc, #156]	@ (8001c8c <HAL_DMA_Abort+0x24c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d02c      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a25      	ldr	r2, [pc, #148]	@ (8001c90 <HAL_DMA_Abort+0x250>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d027      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a24      	ldr	r2, [pc, #144]	@ (8001c94 <HAL_DMA_Abort+0x254>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d022      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a22      	ldr	r2, [pc, #136]	@ (8001c98 <HAL_DMA_Abort+0x258>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01d      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a21      	ldr	r2, [pc, #132]	@ (8001c9c <HAL_DMA_Abort+0x25c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d018      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca0 <HAL_DMA_Abort+0x260>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca4 <HAL_DMA_Abort+0x264>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00e      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca8 <HAL_DMA_Abort+0x268>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d009      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cac <HAL_DMA_Abort+0x26c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d004      	beq.n	8001c4e <HAL_DMA_Abort+0x20e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a19      	ldr	r2, [pc, #100]	@ (8001cb0 <HAL_DMA_Abort+0x270>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d132      	bne.n	8001cb4 <HAL_DMA_Abort+0x274>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e031      	b.n	8001cb6 <HAL_DMA_Abort+0x276>
 8001c52:	bf00      	nop
 8001c54:	40020010 	.word	0x40020010
 8001c58:	40020028 	.word	0x40020028
 8001c5c:	40020040 	.word	0x40020040
 8001c60:	40020058 	.word	0x40020058
 8001c64:	40020070 	.word	0x40020070
 8001c68:	40020088 	.word	0x40020088
 8001c6c:	400200a0 	.word	0x400200a0
 8001c70:	400200b8 	.word	0x400200b8
 8001c74:	40020410 	.word	0x40020410
 8001c78:	40020428 	.word	0x40020428
 8001c7c:	40020440 	.word	0x40020440
 8001c80:	40020458 	.word	0x40020458
 8001c84:	40020470 	.word	0x40020470
 8001c88:	40020488 	.word	0x40020488
 8001c8c:	400204a0 	.word	0x400204a0
 8001c90:	400204b8 	.word	0x400204b8
 8001c94:	58025408 	.word	0x58025408
 8001c98:	5802541c 	.word	0x5802541c
 8001c9c:	58025430 	.word	0x58025430
 8001ca0:	58025444 	.word	0x58025444
 8001ca4:	58025458 	.word	0x58025458
 8001ca8:	5802546c 	.word	0x5802546c
 8001cac:	58025480 	.word	0x58025480
 8001cb0:	58025494 	.word	0x58025494
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6d      	ldr	r2, [pc, #436]	@ (8001e84 <HAL_DMA_Abort+0x444>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d04a      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6b      	ldr	r2, [pc, #428]	@ (8001e88 <HAL_DMA_Abort+0x448>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d045      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6a      	ldr	r2, [pc, #424]	@ (8001e8c <HAL_DMA_Abort+0x44c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d040      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a68      	ldr	r2, [pc, #416]	@ (8001e90 <HAL_DMA_Abort+0x450>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d03b      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a67      	ldr	r2, [pc, #412]	@ (8001e94 <HAL_DMA_Abort+0x454>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d036      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a65      	ldr	r2, [pc, #404]	@ (8001e98 <HAL_DMA_Abort+0x458>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d031      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a64      	ldr	r2, [pc, #400]	@ (8001e9c <HAL_DMA_Abort+0x45c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d02c      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a62      	ldr	r2, [pc, #392]	@ (8001ea0 <HAL_DMA_Abort+0x460>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d027      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a61      	ldr	r2, [pc, #388]	@ (8001ea4 <HAL_DMA_Abort+0x464>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d022      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a5f      	ldr	r2, [pc, #380]	@ (8001ea8 <HAL_DMA_Abort+0x468>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01d      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5e      	ldr	r2, [pc, #376]	@ (8001eac <HAL_DMA_Abort+0x46c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d018      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a5c      	ldr	r2, [pc, #368]	@ (8001eb0 <HAL_DMA_Abort+0x470>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb4 <HAL_DMA_Abort+0x474>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00e      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a59      	ldr	r2, [pc, #356]	@ (8001eb8 <HAL_DMA_Abort+0x478>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <HAL_DMA_Abort+0x47c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d004      	beq.n	8001d6a <HAL_DMA_Abort+0x32a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a56      	ldr	r2, [pc, #344]	@ (8001ec0 <HAL_DMA_Abort+0x480>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d108      	bne.n	8001d7c <HAL_DMA_Abort+0x33c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e007      	b.n	8001d8c <HAL_DMA_Abort+0x34c>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d8c:	e013      	b.n	8001db6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8e:	f7ff fd0b 	bl	80017a8 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d90c      	bls.n	8001db6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2203      	movs	r2, #3
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e12d      	b.n	8002012 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1e5      	bne.n	8001d8e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8001e84 <HAL_DMA_Abort+0x444>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d04a      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8001e88 <HAL_DMA_Abort+0x448>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d045      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a2c      	ldr	r2, [pc, #176]	@ (8001e8c <HAL_DMA_Abort+0x44c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d040      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2a      	ldr	r2, [pc, #168]	@ (8001e90 <HAL_DMA_Abort+0x450>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d03b      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a29      	ldr	r2, [pc, #164]	@ (8001e94 <HAL_DMA_Abort+0x454>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d036      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a27      	ldr	r2, [pc, #156]	@ (8001e98 <HAL_DMA_Abort+0x458>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d031      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a26      	ldr	r2, [pc, #152]	@ (8001e9c <HAL_DMA_Abort+0x45c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d02c      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ea0 <HAL_DMA_Abort+0x460>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d027      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <HAL_DMA_Abort+0x464>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d022      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <HAL_DMA_Abort+0x468>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01d      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a20      	ldr	r2, [pc, #128]	@ (8001eac <HAL_DMA_Abort+0x46c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d018      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb0 <HAL_DMA_Abort+0x470>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb4 <HAL_DMA_Abort+0x474>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00e      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb8 <HAL_DMA_Abort+0x478>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d009      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1a      	ldr	r2, [pc, #104]	@ (8001ebc <HAL_DMA_Abort+0x47c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d004      	beq.n	8001e62 <HAL_DMA_Abort+0x422>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a18      	ldr	r2, [pc, #96]	@ (8001ec0 <HAL_DMA_Abort+0x480>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_DMA_Abort+0x426>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_DMA_Abort+0x428>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d02b      	beq.n	8001ec4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	223f      	movs	r2, #63	@ 0x3f
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	e02a      	b.n	8001eda <HAL_DMA_Abort+0x49a>
 8001e84:	40020010 	.word	0x40020010
 8001e88:	40020028 	.word	0x40020028
 8001e8c:	40020040 	.word	0x40020040
 8001e90:	40020058 	.word	0x40020058
 8001e94:	40020070 	.word	0x40020070
 8001e98:	40020088 	.word	0x40020088
 8001e9c:	400200a0 	.word	0x400200a0
 8001ea0:	400200b8 	.word	0x400200b8
 8001ea4:	40020410 	.word	0x40020410
 8001ea8:	40020428 	.word	0x40020428
 8001eac:	40020440 	.word	0x40020440
 8001eb0:	40020458 	.word	0x40020458
 8001eb4:	40020470 	.word	0x40020470
 8001eb8:	40020488 	.word	0x40020488
 8001ebc:	400204a0 	.word	0x400204a0
 8001ec0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a4f      	ldr	r2, [pc, #316]	@ (800201c <HAL_DMA_Abort+0x5dc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d072      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8002020 <HAL_DMA_Abort+0x5e0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d06d      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a4c      	ldr	r2, [pc, #304]	@ (8002024 <HAL_DMA_Abort+0x5e4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d068      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a4a      	ldr	r2, [pc, #296]	@ (8002028 <HAL_DMA_Abort+0x5e8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d063      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a49      	ldr	r2, [pc, #292]	@ (800202c <HAL_DMA_Abort+0x5ec>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d05e      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a47      	ldr	r2, [pc, #284]	@ (8002030 <HAL_DMA_Abort+0x5f0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d059      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a46      	ldr	r2, [pc, #280]	@ (8002034 <HAL_DMA_Abort+0x5f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d054      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a44      	ldr	r2, [pc, #272]	@ (8002038 <HAL_DMA_Abort+0x5f8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d04f      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a43      	ldr	r2, [pc, #268]	@ (800203c <HAL_DMA_Abort+0x5fc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d04a      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a41      	ldr	r2, [pc, #260]	@ (8002040 <HAL_DMA_Abort+0x600>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d045      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a40      	ldr	r2, [pc, #256]	@ (8002044 <HAL_DMA_Abort+0x604>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d040      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a3e      	ldr	r2, [pc, #248]	@ (8002048 <HAL_DMA_Abort+0x608>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d03b      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3d      	ldr	r2, [pc, #244]	@ (800204c <HAL_DMA_Abort+0x60c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d036      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a3b      	ldr	r2, [pc, #236]	@ (8002050 <HAL_DMA_Abort+0x610>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d031      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a3a      	ldr	r2, [pc, #232]	@ (8002054 <HAL_DMA_Abort+0x614>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d02c      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a38      	ldr	r2, [pc, #224]	@ (8002058 <HAL_DMA_Abort+0x618>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d027      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a37      	ldr	r2, [pc, #220]	@ (800205c <HAL_DMA_Abort+0x61c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d022      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a35      	ldr	r2, [pc, #212]	@ (8002060 <HAL_DMA_Abort+0x620>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01d      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a34      	ldr	r2, [pc, #208]	@ (8002064 <HAL_DMA_Abort+0x624>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d018      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a32      	ldr	r2, [pc, #200]	@ (8002068 <HAL_DMA_Abort+0x628>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a31      	ldr	r2, [pc, #196]	@ (800206c <HAL_DMA_Abort+0x62c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00e      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8002070 <HAL_DMA_Abort+0x630>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2e      	ldr	r2, [pc, #184]	@ (8002074 <HAL_DMA_Abort+0x634>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d004      	beq.n	8001fca <HAL_DMA_Abort+0x58a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8002078 <HAL_DMA_Abort+0x638>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_DMA_Abort+0x58e>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_DMA_Abort+0x590>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d015      	beq.n	8002000 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fdc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ff0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ffe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40020010 	.word	0x40020010
 8002020:	40020028 	.word	0x40020028
 8002024:	40020040 	.word	0x40020040
 8002028:	40020058 	.word	0x40020058
 800202c:	40020070 	.word	0x40020070
 8002030:	40020088 	.word	0x40020088
 8002034:	400200a0 	.word	0x400200a0
 8002038:	400200b8 	.word	0x400200b8
 800203c:	40020410 	.word	0x40020410
 8002040:	40020428 	.word	0x40020428
 8002044:	40020440 	.word	0x40020440
 8002048:	40020458 	.word	0x40020458
 800204c:	40020470 	.word	0x40020470
 8002050:	40020488 	.word	0x40020488
 8002054:	400204a0 	.word	0x400204a0
 8002058:	400204b8 	.word	0x400204b8
 800205c:	58025408 	.word	0x58025408
 8002060:	5802541c 	.word	0x5802541c
 8002064:	58025430 	.word	0x58025430
 8002068:	58025444 	.word	0x58025444
 800206c:	58025458 	.word	0x58025458
 8002070:	5802546c 	.word	0x5802546c
 8002074:	58025480 	.word	0x58025480
 8002078:	58025494 	.word	0x58025494

0800207c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e237      	b.n	80024fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d004      	beq.n	80020a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2280      	movs	r2, #128	@ 0x80
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e22c      	b.n	80024fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a5c      	ldr	r2, [pc, #368]	@ (800221c <HAL_DMA_Abort_IT+0x1a0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d04a      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002220 <HAL_DMA_Abort_IT+0x1a4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d045      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a59      	ldr	r2, [pc, #356]	@ (8002224 <HAL_DMA_Abort_IT+0x1a8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d040      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a58      	ldr	r2, [pc, #352]	@ (8002228 <HAL_DMA_Abort_IT+0x1ac>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d03b      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a56      	ldr	r2, [pc, #344]	@ (800222c <HAL_DMA_Abort_IT+0x1b0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d036      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a55      	ldr	r2, [pc, #340]	@ (8002230 <HAL_DMA_Abort_IT+0x1b4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d031      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a53      	ldr	r2, [pc, #332]	@ (8002234 <HAL_DMA_Abort_IT+0x1b8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02c      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a52      	ldr	r2, [pc, #328]	@ (8002238 <HAL_DMA_Abort_IT+0x1bc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d027      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a50      	ldr	r2, [pc, #320]	@ (800223c <HAL_DMA_Abort_IT+0x1c0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d022      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a4f      	ldr	r2, [pc, #316]	@ (8002240 <HAL_DMA_Abort_IT+0x1c4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d01d      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4d      	ldr	r2, [pc, #308]	@ (8002244 <HAL_DMA_Abort_IT+0x1c8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d018      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a4c      	ldr	r2, [pc, #304]	@ (8002248 <HAL_DMA_Abort_IT+0x1cc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a4a      	ldr	r2, [pc, #296]	@ (800224c <HAL_DMA_Abort_IT+0x1d0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00e      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a49      	ldr	r2, [pc, #292]	@ (8002250 <HAL_DMA_Abort_IT+0x1d4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d009      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a47      	ldr	r2, [pc, #284]	@ (8002254 <HAL_DMA_Abort_IT+0x1d8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_DMA_Abort_IT+0xc8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a46      	ldr	r2, [pc, #280]	@ (8002258 <HAL_DMA_Abort_IT+0x1dc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_DMA_Abort_IT+0xcc>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_DMA_Abort_IT+0xce>
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8086 	beq.w	800225c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2204      	movs	r2, #4
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2f      	ldr	r2, [pc, #188]	@ (800221c <HAL_DMA_Abort_IT+0x1a0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d04a      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2e      	ldr	r2, [pc, #184]	@ (8002220 <HAL_DMA_Abort_IT+0x1a4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d045      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2c      	ldr	r2, [pc, #176]	@ (8002224 <HAL_DMA_Abort_IT+0x1a8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d040      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2b      	ldr	r2, [pc, #172]	@ (8002228 <HAL_DMA_Abort_IT+0x1ac>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d03b      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a29      	ldr	r2, [pc, #164]	@ (800222c <HAL_DMA_Abort_IT+0x1b0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d036      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a28      	ldr	r2, [pc, #160]	@ (8002230 <HAL_DMA_Abort_IT+0x1b4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d031      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a26      	ldr	r2, [pc, #152]	@ (8002234 <HAL_DMA_Abort_IT+0x1b8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02c      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a25      	ldr	r2, [pc, #148]	@ (8002238 <HAL_DMA_Abort_IT+0x1bc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d027      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a23      	ldr	r2, [pc, #140]	@ (800223c <HAL_DMA_Abort_IT+0x1c0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d022      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a22      	ldr	r2, [pc, #136]	@ (8002240 <HAL_DMA_Abort_IT+0x1c4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d01d      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a20      	ldr	r2, [pc, #128]	@ (8002244 <HAL_DMA_Abort_IT+0x1c8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d018      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002248 <HAL_DMA_Abort_IT+0x1cc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1d      	ldr	r2, [pc, #116]	@ (800224c <HAL_DMA_Abort_IT+0x1d0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00e      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1c      	ldr	r2, [pc, #112]	@ (8002250 <HAL_DMA_Abort_IT+0x1d4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002254 <HAL_DMA_Abort_IT+0x1d8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x17c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a19      	ldr	r2, [pc, #100]	@ (8002258 <HAL_DMA_Abort_IT+0x1dc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d108      	bne.n	800220a <HAL_DMA_Abort_IT+0x18e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e178      	b.n	80024fc <HAL_DMA_Abort_IT+0x480>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e16f      	b.n	80024fc <HAL_DMA_Abort_IT+0x480>
 800221c:	40020010 	.word	0x40020010
 8002220:	40020028 	.word	0x40020028
 8002224:	40020040 	.word	0x40020040
 8002228:	40020058 	.word	0x40020058
 800222c:	40020070 	.word	0x40020070
 8002230:	40020088 	.word	0x40020088
 8002234:	400200a0 	.word	0x400200a0
 8002238:	400200b8 	.word	0x400200b8
 800223c:	40020410 	.word	0x40020410
 8002240:	40020428 	.word	0x40020428
 8002244:	40020440 	.word	0x40020440
 8002248:	40020458 	.word	0x40020458
 800224c:	40020470 	.word	0x40020470
 8002250:	40020488 	.word	0x40020488
 8002254:	400204a0 	.word	0x400204a0
 8002258:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 020e 	bic.w	r2, r2, #14
 800226a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a6c      	ldr	r2, [pc, #432]	@ (8002424 <HAL_DMA_Abort_IT+0x3a8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d04a      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6b      	ldr	r2, [pc, #428]	@ (8002428 <HAL_DMA_Abort_IT+0x3ac>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d045      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a69      	ldr	r2, [pc, #420]	@ (800242c <HAL_DMA_Abort_IT+0x3b0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d040      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a68      	ldr	r2, [pc, #416]	@ (8002430 <HAL_DMA_Abort_IT+0x3b4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d03b      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a66      	ldr	r2, [pc, #408]	@ (8002434 <HAL_DMA_Abort_IT+0x3b8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d036      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a65      	ldr	r2, [pc, #404]	@ (8002438 <HAL_DMA_Abort_IT+0x3bc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d031      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a63      	ldr	r2, [pc, #396]	@ (800243c <HAL_DMA_Abort_IT+0x3c0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02c      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a62      	ldr	r2, [pc, #392]	@ (8002440 <HAL_DMA_Abort_IT+0x3c4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d027      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a60      	ldr	r2, [pc, #384]	@ (8002444 <HAL_DMA_Abort_IT+0x3c8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d022      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002448 <HAL_DMA_Abort_IT+0x3cc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d01d      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a5d      	ldr	r2, [pc, #372]	@ (800244c <HAL_DMA_Abort_IT+0x3d0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d018      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a5c      	ldr	r2, [pc, #368]	@ (8002450 <HAL_DMA_Abort_IT+0x3d4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d013      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002454 <HAL_DMA_Abort_IT+0x3d8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00e      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a59      	ldr	r2, [pc, #356]	@ (8002458 <HAL_DMA_Abort_IT+0x3dc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a57      	ldr	r2, [pc, #348]	@ (800245c <HAL_DMA_Abort_IT+0x3e0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_DMA_Abort_IT+0x290>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a56      	ldr	r2, [pc, #344]	@ (8002460 <HAL_DMA_Abort_IT+0x3e4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <HAL_DMA_Abort_IT+0x2a2>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e007      	b.n	800232e <HAL_DMA_Abort_IT+0x2b2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a3c      	ldr	r2, [pc, #240]	@ (8002424 <HAL_DMA_Abort_IT+0x3a8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d072      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a3a      	ldr	r2, [pc, #232]	@ (8002428 <HAL_DMA_Abort_IT+0x3ac>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d06d      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a39      	ldr	r2, [pc, #228]	@ (800242c <HAL_DMA_Abort_IT+0x3b0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d068      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a37      	ldr	r2, [pc, #220]	@ (8002430 <HAL_DMA_Abort_IT+0x3b4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d063      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a36      	ldr	r2, [pc, #216]	@ (8002434 <HAL_DMA_Abort_IT+0x3b8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d05e      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a34      	ldr	r2, [pc, #208]	@ (8002438 <HAL_DMA_Abort_IT+0x3bc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d059      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a33      	ldr	r2, [pc, #204]	@ (800243c <HAL_DMA_Abort_IT+0x3c0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d054      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a31      	ldr	r2, [pc, #196]	@ (8002440 <HAL_DMA_Abort_IT+0x3c4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d04f      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a30      	ldr	r2, [pc, #192]	@ (8002444 <HAL_DMA_Abort_IT+0x3c8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d04a      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2e      	ldr	r2, [pc, #184]	@ (8002448 <HAL_DMA_Abort_IT+0x3cc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d045      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2d      	ldr	r2, [pc, #180]	@ (800244c <HAL_DMA_Abort_IT+0x3d0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d040      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002450 <HAL_DMA_Abort_IT+0x3d4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d03b      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002454 <HAL_DMA_Abort_IT+0x3d8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d036      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a28      	ldr	r2, [pc, #160]	@ (8002458 <HAL_DMA_Abort_IT+0x3dc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d031      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a27      	ldr	r2, [pc, #156]	@ (800245c <HAL_DMA_Abort_IT+0x3e0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d02c      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a25      	ldr	r2, [pc, #148]	@ (8002460 <HAL_DMA_Abort_IT+0x3e4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d027      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a24      	ldr	r2, [pc, #144]	@ (8002464 <HAL_DMA_Abort_IT+0x3e8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d022      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a22      	ldr	r2, [pc, #136]	@ (8002468 <HAL_DMA_Abort_IT+0x3ec>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01d      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a21      	ldr	r2, [pc, #132]	@ (800246c <HAL_DMA_Abort_IT+0x3f0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d018      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002470 <HAL_DMA_Abort_IT+0x3f4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002474 <HAL_DMA_Abort_IT+0x3f8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00e      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1c      	ldr	r2, [pc, #112]	@ (8002478 <HAL_DMA_Abort_IT+0x3fc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d009      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1b      	ldr	r2, [pc, #108]	@ (800247c <HAL_DMA_Abort_IT+0x400>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d004      	beq.n	800241e <HAL_DMA_Abort_IT+0x3a2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a19      	ldr	r2, [pc, #100]	@ (8002480 <HAL_DMA_Abort_IT+0x404>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d132      	bne.n	8002484 <HAL_DMA_Abort_IT+0x408>
 800241e:	2301      	movs	r3, #1
 8002420:	e031      	b.n	8002486 <HAL_DMA_Abort_IT+0x40a>
 8002422:	bf00      	nop
 8002424:	40020010 	.word	0x40020010
 8002428:	40020028 	.word	0x40020028
 800242c:	40020040 	.word	0x40020040
 8002430:	40020058 	.word	0x40020058
 8002434:	40020070 	.word	0x40020070
 8002438:	40020088 	.word	0x40020088
 800243c:	400200a0 	.word	0x400200a0
 8002440:	400200b8 	.word	0x400200b8
 8002444:	40020410 	.word	0x40020410
 8002448:	40020428 	.word	0x40020428
 800244c:	40020440 	.word	0x40020440
 8002450:	40020458 	.word	0x40020458
 8002454:	40020470 	.word	0x40020470
 8002458:	40020488 	.word	0x40020488
 800245c:	400204a0 	.word	0x400204a0
 8002460:	400204b8 	.word	0x400204b8
 8002464:	58025408 	.word	0x58025408
 8002468:	5802541c 	.word	0x5802541c
 800246c:	58025430 	.word	0x58025430
 8002470:	58025444 	.word	0x58025444
 8002474:	58025458 	.word	0x58025458
 8002478:	5802546c 	.word	0x5802546c
 800247c:	58025480 	.word	0x58025480
 8002480:	58025494 	.word	0x58025494
 8002484:	2300      	movs	r3, #0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d028      	beq.n	80024dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002494:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002498:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	2201      	movs	r2, #1
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00c      	beq.n	80024dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	@ 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002516:	4b89      	ldr	r3, [pc, #548]	@ (800273c <HAL_GPIO_Init+0x234>)
 8002518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800251a:	e194      	b.n	8002846 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8186 	beq.w	8002840 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d005      	beq.n	800254c <HAL_GPIO_Init+0x44>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d130      	bne.n	80025ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002582:	2201      	movs	r2, #1
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 0201 	and.w	r2, r3, #1
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d017      	beq.n	80025ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d123      	bne.n	800263e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	08da      	lsrs	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3208      	adds	r2, #8
 8002638:	69b9      	ldr	r1, [r7, #24]
 800263a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	2203      	movs	r2, #3
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0203 	and.w	r2, r3, #3
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80e0 	beq.w	8002840 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002680:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <HAL_GPIO_Init+0x238>)
 8002682:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002686:	4a2e      	ldr	r2, [pc, #184]	@ (8002740 <HAL_GPIO_Init+0x238>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002690:	4b2b      	ldr	r3, [pc, #172]	@ (8002740 <HAL_GPIO_Init+0x238>)
 8002692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269e:	4a29      	ldr	r2, [pc, #164]	@ (8002744 <HAL_GPIO_Init+0x23c>)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	220f      	movs	r2, #15
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a20      	ldr	r2, [pc, #128]	@ (8002748 <HAL_GPIO_Init+0x240>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d052      	beq.n	8002770 <HAL_GPIO_Init+0x268>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1f      	ldr	r2, [pc, #124]	@ (800274c <HAL_GPIO_Init+0x244>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d031      	beq.n	8002736 <HAL_GPIO_Init+0x22e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002750 <HAL_GPIO_Init+0x248>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d02b      	beq.n	8002732 <HAL_GPIO_Init+0x22a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002754 <HAL_GPIO_Init+0x24c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d025      	beq.n	800272e <HAL_GPIO_Init+0x226>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002758 <HAL_GPIO_Init+0x250>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01f      	beq.n	800272a <HAL_GPIO_Init+0x222>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a1b      	ldr	r2, [pc, #108]	@ (800275c <HAL_GPIO_Init+0x254>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d019      	beq.n	8002726 <HAL_GPIO_Init+0x21e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002760 <HAL_GPIO_Init+0x258>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_GPIO_Init+0x21a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a19      	ldr	r2, [pc, #100]	@ (8002764 <HAL_GPIO_Init+0x25c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00d      	beq.n	800271e <HAL_GPIO_Init+0x216>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a18      	ldr	r2, [pc, #96]	@ (8002768 <HAL_GPIO_Init+0x260>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <HAL_GPIO_Init+0x212>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a17      	ldr	r2, [pc, #92]	@ (800276c <HAL_GPIO_Init+0x264>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d101      	bne.n	8002716 <HAL_GPIO_Init+0x20e>
 8002712:	2309      	movs	r3, #9
 8002714:	e02d      	b.n	8002772 <HAL_GPIO_Init+0x26a>
 8002716:	230a      	movs	r3, #10
 8002718:	e02b      	b.n	8002772 <HAL_GPIO_Init+0x26a>
 800271a:	2308      	movs	r3, #8
 800271c:	e029      	b.n	8002772 <HAL_GPIO_Init+0x26a>
 800271e:	2307      	movs	r3, #7
 8002720:	e027      	b.n	8002772 <HAL_GPIO_Init+0x26a>
 8002722:	2306      	movs	r3, #6
 8002724:	e025      	b.n	8002772 <HAL_GPIO_Init+0x26a>
 8002726:	2305      	movs	r3, #5
 8002728:	e023      	b.n	8002772 <HAL_GPIO_Init+0x26a>
 800272a:	2304      	movs	r3, #4
 800272c:	e021      	b.n	8002772 <HAL_GPIO_Init+0x26a>
 800272e:	2303      	movs	r3, #3
 8002730:	e01f      	b.n	8002772 <HAL_GPIO_Init+0x26a>
 8002732:	2302      	movs	r3, #2
 8002734:	e01d      	b.n	8002772 <HAL_GPIO_Init+0x26a>
 8002736:	2301      	movs	r3, #1
 8002738:	e01b      	b.n	8002772 <HAL_GPIO_Init+0x26a>
 800273a:	bf00      	nop
 800273c:	58000080 	.word	0x58000080
 8002740:	58024400 	.word	0x58024400
 8002744:	58000400 	.word	0x58000400
 8002748:	58020000 	.word	0x58020000
 800274c:	58020400 	.word	0x58020400
 8002750:	58020800 	.word	0x58020800
 8002754:	58020c00 	.word	0x58020c00
 8002758:	58021000 	.word	0x58021000
 800275c:	58021400 	.word	0x58021400
 8002760:	58021800 	.word	0x58021800
 8002764:	58021c00 	.word	0x58021c00
 8002768:	58022000 	.word	0x58022000
 800276c:	58022400 	.word	0x58022400
 8002770:	2300      	movs	r3, #0
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	f002 0203 	and.w	r2, r2, #3
 8002778:	0092      	lsls	r2, r2, #2
 800277a:	4093      	lsls	r3, r2
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002782:	4938      	ldr	r1, [pc, #224]	@ (8002864 <HAL_GPIO_Init+0x35c>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	3301      	adds	r3, #1
 8002844:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	f47f ae63 	bne.w	800251c <HAL_GPIO_Init+0x14>
  }
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	3724      	adds	r7, #36	@ 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	58000400 	.word	0x58000400

08002868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	807b      	strh	r3, [r7, #2]
 8002874:	4613      	mov	r3, r2
 8002876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002878:	787b      	ldrb	r3, [r7, #1]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002884:	e003      	b.n	800288e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002886:	887b      	ldrh	r3, [r7, #2]
 8002888:	041a      	lsls	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	619a      	str	r2, [r3, #24]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e08b      	b.n	80029c6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fbd2 	bl	800106c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	@ 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	e006      	b.n	8002924 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002922:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d108      	bne.n	800293e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	e007      	b.n	800294e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800294c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <HAL_I2C_Init+0x134>)
 800295a:	430b      	orrs	r3, r1
 800295c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800296c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69d9      	ldr	r1, [r3, #28]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	02008000 	.word	0x02008000

080029d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	461a      	mov	r2, r3
 80029e0:	460b      	mov	r3, r1
 80029e2:	817b      	strh	r3, [r7, #10]
 80029e4:	4613      	mov	r3, r2
 80029e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 80fd 	bne.w	8002bf0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_I2C_Master_Transmit+0x30>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e0f6      	b.n	8002bf2 <HAL_I2C_Master_Transmit+0x21e>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fecc 	bl	80017a8 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2319      	movs	r3, #25
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fa0a 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0e1      	b.n	8002bf2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2221      	movs	r2, #33	@ 0x21
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	893a      	ldrh	r2, [r7, #8]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2bff      	cmp	r3, #255	@ 0xff
 8002a5e:	d906      	bls.n	8002a6e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	22ff      	movs	r2, #255	@ 0xff
 8002a64:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e007      	b.n	8002a7e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a7c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d024      	beq.n	8002ad0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	8979      	ldrh	r1, [r7, #10]
 8002ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8002bfc <HAL_I2C_Master_Transmit+0x228>)
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fc05 	bl	80032d8 <I2C_TransferConfig>
 8002ace:	e066      	b.n	8002b9e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	8979      	ldrh	r1, [r7, #10]
 8002ad8:	4b48      	ldr	r3, [pc, #288]	@ (8002bfc <HAL_I2C_Master_Transmit+0x228>)
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fbfa 	bl	80032d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ae4:	e05b      	b.n	8002b9e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	6a39      	ldr	r1, [r7, #32]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f9fd 	bl	8002eea <I2C_WaitOnTXISFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07b      	b.n	8002bf2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d034      	beq.n	8002b9e <HAL_I2C_Master_Transmit+0x1ca>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d130      	bne.n	8002b9e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	2200      	movs	r2, #0
 8002b44:	2180      	movs	r1, #128	@ 0x80
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f976 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e04d      	b.n	8002bf2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2bff      	cmp	r3, #255	@ 0xff
 8002b5e:	d90e      	bls.n	8002b7e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	22ff      	movs	r2, #255	@ 0xff
 8002b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	8979      	ldrh	r1, [r7, #10]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fbae 	bl	80032d8 <I2C_TransferConfig>
 8002b7c:	e00f      	b.n	8002b9e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	8979      	ldrh	r1, [r7, #10]
 8002b90:	2300      	movs	r3, #0
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fb9d 	bl	80032d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d19e      	bne.n	8002ae6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	6a39      	ldr	r1, [r7, #32]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f9e3 	bl	8002f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e01a      	b.n	8002bf2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <HAL_I2C_Master_Transmit+0x22c>)
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	80002000 	.word	0x80002000
 8002c00:	fe00e800 	.word	0xfe00e800

08002c04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	460b      	mov	r3, r1
 8002c12:	817b      	strh	r3, [r7, #10]
 8002c14:	4613      	mov	r3, r2
 8002c16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	f040 80db 	bne.w	8002ddc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2C_Master_Receive+0x30>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e0d4      	b.n	8002dde <HAL_I2C_Master_Receive+0x1da>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fdb4 	bl	80017a8 <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2319      	movs	r3, #25
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f8f2 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0bf      	b.n	8002dde <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2222      	movs	r2, #34	@ 0x22
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	893a      	ldrh	r2, [r7, #8]
 8002c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2bff      	cmp	r3, #255	@ 0xff
 8002c8e:	d90e      	bls.n	8002cae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	22ff      	movs	r2, #255	@ 0xff
 8002c94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	4b52      	ldr	r3, [pc, #328]	@ (8002de8 <HAL_I2C_Master_Receive+0x1e4>)
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fb16 	bl	80032d8 <I2C_TransferConfig>
 8002cac:	e06d      	b.n	8002d8a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	8979      	ldrh	r1, [r7, #10]
 8002cc0:	4b49      	ldr	r3, [pc, #292]	@ (8002de8 <HAL_I2C_Master_Receive+0x1e4>)
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fb05 	bl	80032d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002cce:	e05c      	b.n	8002d8a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	6a39      	ldr	r1, [r7, #32]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f993 	bl	8003000 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e07c      	b.n	8002dde <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d034      	beq.n	8002d8a <HAL_I2C_Master_Receive+0x186>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d130      	bne.n	8002d8a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2180      	movs	r1, #128	@ 0x80
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f880 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e04d      	b.n	8002dde <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2bff      	cmp	r3, #255	@ 0xff
 8002d4a:	d90e      	bls.n	8002d6a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	22ff      	movs	r2, #255	@ 0xff
 8002d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	8979      	ldrh	r1, [r7, #10]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fab8 	bl	80032d8 <I2C_TransferConfig>
 8002d68:	e00f      	b.n	8002d8a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	8979      	ldrh	r1, [r7, #10]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 faa7 	bl	80032d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d19d      	bne.n	8002cd0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	6a39      	ldr	r1, [r7, #32]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f8ed 	bl	8002f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e01a      	b.n	8002dde <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2220      	movs	r2, #32
 8002dae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6859      	ldr	r1, [r3, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <HAL_I2C_Master_Receive+0x1e8>)
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e000      	b.n	8002dde <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
  }
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	80002400 	.word	0x80002400
 8002dec:	fe00e800 	.word	0xfe00e800

08002df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d103      	bne.n	8002e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d007      	beq.n	8002e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	619a      	str	r2, [r3, #24]
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e48:	e03b      	b.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f962 	bl	8003118 <I2C_IsErrorOccurred>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e041      	b.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d02d      	beq.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fc9f 	bl	80017a8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d122      	bne.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4013      	ands	r3, r2
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d113      	bne.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00f      	b.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d0b4      	beq.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ef6:	e033      	b.n	8002f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f90b 	bl	8003118 <I2C_IsErrorOccurred>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e031      	b.n	8002f70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d025      	beq.n	8002f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f14:	f7fe fc48 	bl	80017a8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d302      	bcc.n	8002f2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11a      	bne.n	8002f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d013      	beq.n	8002f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e007      	b.n	8002f70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d1c4      	bne.n	8002ef8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f84:	e02f      	b.n	8002fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f8c4 	bl	8003118 <I2C_IsErrorOccurred>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e02d      	b.n	8002ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7fe fc05 	bl	80017a8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d11a      	bne.n	8002fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d013      	beq.n	8002fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e007      	b.n	8002ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d1c8      	bne.n	8002f86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003010:	e071      	b.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f87e 	bl	8003118 <I2C_IsErrorOccurred>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b20      	cmp	r3, #32
 8003032:	d13b      	bne.n	80030ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d138      	bne.n	80030ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b04      	cmp	r3, #4
 8003046:	d105      	bne.n	8003054 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b10      	cmp	r3, #16
 8003060:	d121      	bne.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2210      	movs	r2, #16
 8003068:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2204      	movs	r2, #4
 800306e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2220      	movs	r2, #32
 8003076:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4b24      	ldr	r3, [pc, #144]	@ (8003114 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003084:	400b      	ands	r3, r1
 8003086:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
 80030a4:	e002      	b.n	80030ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80030ac:	f7fe fb7c 	bl	80017a8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d302      	bcc.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d119      	bne.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d116      	bne.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d00f      	beq.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b04      	cmp	r3, #4
 8003102:	d002      	beq.n	800310a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d083      	beq.n	8003012 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800310a:	7dfb      	ldrb	r3, [r7, #23]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	fe00e800 	.word	0xfe00e800

08003118 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d068      	beq.n	8003216 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2210      	movs	r2, #16
 800314a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800314c:	e049      	b.n	80031e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d045      	beq.n	80031e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7fe fb27 	bl	80017a8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_IsErrorOccurred+0x54>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d13a      	bne.n	80031e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003176:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800317e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800318a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800318e:	d121      	bne.n	80031d4 <I2C_IsErrorOccurred+0xbc>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003196:	d01d      	beq.n	80031d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	2b20      	cmp	r3, #32
 800319c:	d01a      	beq.n	80031d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031ae:	f7fe fafb 	bl	80017a8 <HAL_GetTick>
 80031b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b4:	e00e      	b.n	80031d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031b6:	f7fe faf7 	bl	80017a8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b19      	cmp	r3, #25
 80031c2:	d907      	bls.n	80031d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f043 0320 	orr.w	r3, r3, #32
 80031ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80031d2:	e006      	b.n	80031e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d1e9      	bne.n	80031b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d003      	beq.n	80031f8 <I2C_IsErrorOccurred+0xe0>
 80031f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0aa      	beq.n	800314e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d103      	bne.n	8003208 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2220      	movs	r2, #32
 8003206:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f043 0308 	orr.w	r3, r3, #8
 8003250:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800325a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800327c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01c      	beq.n	80032c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fdaf 	bl	8002df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <I2C_IsErrorOccurred+0x1bc>)
 800329e:	400b      	ands	r3, r1
 80032a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80032c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3728      	adds	r7, #40	@ 0x28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	fe00e800 	.word	0xfe00e800

080032d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	817b      	strh	r3, [r7, #10]
 80032e6:	4613      	mov	r3, r2
 80032e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032f0:	7a7b      	ldrb	r3, [r7, #9]
 80032f2:	041b      	lsls	r3, r3, #16
 80032f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	4313      	orrs	r3, r2
 8003302:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003306:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	0d5b      	lsrs	r3, r3, #21
 8003312:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003316:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <I2C_TransferConfig+0x60>)
 8003318:	430b      	orrs	r3, r1
 800331a:	43db      	mvns	r3, r3
 800331c:	ea02 0103 	and.w	r1, r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	03ff63ff 	.word	0x03ff63ff

0800333c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b20      	cmp	r3, #32
 8003350:	d138      	bne.n	80033c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800335c:	2302      	movs	r3, #2
 800335e:	e032      	b.n	80033c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	@ 0x24
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800338e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d139      	bne.n	800345c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e033      	b.n	800345e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2224      	movs	r2, #36	@ 0x24
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003424:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af02      	add	r7, sp, #8
 8003470:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0fe      	b.n	800367a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7fd ff65 	bl	8001360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f006 f80a 	bl	80094bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7c1a      	ldrb	r2, [r3, #16]
 80034b0:	f88d 2000 	strb.w	r2, [sp]
 80034b4:	3304      	adds	r3, #4
 80034b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b8:	f005 ff8e 	bl	80093d8 <USB_CoreInit>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0d5      	b.n	800367a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f006 f802 	bl	80094de <USB_SetCurrentMode>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0c6      	b.n	800367a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e04a      	b.n	8003588 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	3315      	adds	r3, #21
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	3314      	adds	r3, #20
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	b298      	uxth	r0, r3
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	332e      	adds	r3, #46	@ 0x2e
 800352e:	4602      	mov	r2, r0
 8003530:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3318      	adds	r3, #24
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	331c      	adds	r3, #28
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3320      	adds	r3, #32
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3324      	adds	r3, #36	@ 0x24
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	3301      	adds	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	791b      	ldrb	r3, [r3, #4]
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	429a      	cmp	r2, r3
 8003590:	d3af      	bcc.n	80034f2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	e044      	b.n	8003622 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	3301      	adds	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	791b      	ldrb	r3, [r3, #4]
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	429a      	cmp	r2, r3
 800362a:	d3b5      	bcc.n	8003598 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7c1a      	ldrb	r2, [r3, #16]
 8003634:	f88d 2000 	strb.w	r2, [sp]
 8003638:	3304      	adds	r3, #4
 800363a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800363c:	f005 ff9c 	bl	8009578 <USB_DevInit>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e013      	b.n	800367a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	7b1b      	ldrb	r3, [r3, #12]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d102      	bne.n	800366e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f80b 	bl	8003684 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f006 f957 	bl	8009926 <USB_DevDisconnect>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036b2:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	10000003 	.word	0x10000003

080036cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80036d4:	4b19      	ldr	r3, [pc, #100]	@ (800373c <HAL_PWREx_ConfigSupply+0x70>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d00a      	beq.n	80036f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036e0:	4b16      	ldr	r3, [pc, #88]	@ (800373c <HAL_PWREx_ConfigSupply+0x70>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d001      	beq.n	80036f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e01f      	b.n	8003732 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e01d      	b.n	8003732 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036f6:	4b11      	ldr	r3, [pc, #68]	@ (800373c <HAL_PWREx_ConfigSupply+0x70>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f023 0207 	bic.w	r2, r3, #7
 80036fe:	490f      	ldr	r1, [pc, #60]	@ (800373c <HAL_PWREx_ConfigSupply+0x70>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4313      	orrs	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003706:	f7fe f84f 	bl	80017a8 <HAL_GetTick>
 800370a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800370c:	e009      	b.n	8003722 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800370e:	f7fe f84b 	bl	80017a8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800371c:	d901      	bls.n	8003722 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e007      	b.n	8003732 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_PWREx_ConfigSupply+0x70>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800372a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372e:	d1ee      	bne.n	800370e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	58024800 	.word	0x58024800

08003740 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a04      	ldr	r2, [pc, #16]	@ (800375c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800374a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800374e:	60d3      	str	r3, [r2, #12]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	58024800 	.word	0x58024800

08003760 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08c      	sub	sp, #48	@ 0x30
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f000 bc48 	b.w	8004004 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8088 	beq.w	8003892 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003782:	4b99      	ldr	r3, [pc, #612]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800378c:	4b96      	ldr	r3, [pc, #600]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003794:	2b10      	cmp	r3, #16
 8003796:	d007      	beq.n	80037a8 <HAL_RCC_OscConfig+0x48>
 8003798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379a:	2b18      	cmp	r3, #24
 800379c:	d111      	bne.n	80037c2 <HAL_RCC_OscConfig+0x62>
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	4b8f      	ldr	r3, [pc, #572]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d06d      	beq.n	8003890 <HAL_RCC_OscConfig+0x130>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d169      	bne.n	8003890 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f000 bc21 	b.w	8004004 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x7a>
 80037cc:	4b86      	ldr	r3, [pc, #536]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a85      	ldr	r2, [pc, #532]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e02e      	b.n	8003838 <HAL_RCC_OscConfig+0xd8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x9c>
 80037e2:	4b81      	ldr	r3, [pc, #516]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a80      	ldr	r2, [pc, #512]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b7e      	ldr	r3, [pc, #504]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a7d      	ldr	r2, [pc, #500]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80037f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e01d      	b.n	8003838 <HAL_RCC_OscConfig+0xd8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0xc0>
 8003806:	4b78      	ldr	r3, [pc, #480]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a77      	ldr	r2, [pc, #476]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b75      	ldr	r3, [pc, #468]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a74      	ldr	r2, [pc, #464]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0xd8>
 8003820:	4b71      	ldr	r3, [pc, #452]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a70      	ldr	r2, [pc, #448]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b6e      	ldr	r3, [pc, #440]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6d      	ldr	r2, [pc, #436]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fd ffb2 	bl	80017a8 <HAL_GetTick>
 8003844:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003848:	f7fd ffae 	bl	80017a8 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	@ 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e3d4      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800385a:	4b63      	ldr	r3, [pc, #396]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0xe8>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd ff9e 	bl	80017a8 <HAL_GetTick>
 800386c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7fd ff9a 	bl	80017a8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e3c0      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003882:	4b59      	ldr	r3, [pc, #356]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x110>
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80ca 	beq.w	8003a34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a0:	4b51      	ldr	r3, [pc, #324]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038aa:	4b4f      	ldr	r3, [pc, #316]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80038ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_RCC_OscConfig+0x166>
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	2b18      	cmp	r3, #24
 80038ba:	d156      	bne.n	800396a <HAL_RCC_OscConfig+0x20a>
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d151      	bne.n	800396a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c6:	4b48      	ldr	r3, [pc, #288]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x17e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e392      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038de:	4b42      	ldr	r3, [pc, #264]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 0219 	bic.w	r2, r3, #25
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	493f      	ldr	r1, [pc, #252]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fd ff5a 	bl	80017a8 <HAL_GetTick>
 80038f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f8:	f7fd ff56 	bl	80017a8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e37c      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800390a:	4b37      	ldr	r3, [pc, #220]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	f7fd ff77 	bl	8001808 <HAL_GetREVID>
 800391a:	4603      	mov	r3, r0
 800391c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003920:	4293      	cmp	r3, r2
 8003922:	d817      	bhi.n	8003954 <HAL_RCC_OscConfig+0x1f4>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b40      	cmp	r3, #64	@ 0x40
 800392a:	d108      	bne.n	800393e <HAL_RCC_OscConfig+0x1de>
 800392c:	4b2e      	ldr	r3, [pc, #184]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003934:	4a2c      	ldr	r2, [pc, #176]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800393a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800393c:	e07a      	b.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393e:	4b2a      	ldr	r3, [pc, #168]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	031b      	lsls	r3, r3, #12
 800394c:	4926      	ldr	r1, [pc, #152]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003952:	e06f      	b.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003954:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	4921      	ldr	r1, [pc, #132]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003968:	e064      	b.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d047      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003972:	4b1d      	ldr	r3, [pc, #116]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0219 	bic.w	r2, r3, #25
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	491a      	ldr	r1, [pc, #104]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fd ff10 	bl	80017a8 <HAL_GetTick>
 8003988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398c:	f7fd ff0c 	bl	80017a8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e332      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800399e:	4b12      	ldr	r3, [pc, #72]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	f7fd ff2d 	bl	8001808 <HAL_GetREVID>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d819      	bhi.n	80039ec <HAL_RCC_OscConfig+0x28c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b40      	cmp	r3, #64	@ 0x40
 80039be:	d108      	bne.n	80039d2 <HAL_RCC_OscConfig+0x272>
 80039c0:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80039c8:	4a07      	ldr	r2, [pc, #28]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ce:	6053      	str	r3, [r2, #4]
 80039d0:	e030      	b.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
 80039d2:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	031b      	lsls	r3, r3, #12
 80039e0:	4901      	ldr	r1, [pc, #4]	@ (80039e8 <HAL_RCC_OscConfig+0x288>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
 80039e6:	e025      	b.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
 80039e8:	58024400 	.word	0x58024400
 80039ec:	4b9a      	ldr	r3, [pc, #616]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	4997      	ldr	r1, [pc, #604]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	e018      	b.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a02:	4b95      	ldr	r3, [pc, #596]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a94      	ldr	r2, [pc, #592]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fd fecb 	bl	80017a8 <HAL_GetTick>
 8003a12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a16:	f7fd fec7 	bl	80017a8 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e2ed      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a28:	4b8b      	ldr	r3, [pc, #556]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a9 	beq.w	8003b94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a42:	4b85      	ldr	r3, [pc, #532]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a4c:	4b82      	ldr	r3, [pc, #520]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d007      	beq.n	8003a68 <HAL_RCC_OscConfig+0x308>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b18      	cmp	r3, #24
 8003a5c:	d13a      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x374>
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d135      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a68:	4b7b      	ldr	r3, [pc, #492]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_OscConfig+0x320>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	2b80      	cmp	r3, #128	@ 0x80
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e2c1      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a80:	f7fd fec2 	bl	8001808 <HAL_GetREVID>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d817      	bhi.n	8003abe <HAL_RCC_OscConfig+0x35e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d108      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x348>
 8003a96:	4b70      	ldr	r3, [pc, #448]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a9e:	4a6e      	ldr	r2, [pc, #440]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003aa0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003aa4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aa6:	e075      	b.n	8003b94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003aa8:	4b6b      	ldr	r3, [pc, #428]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	069b      	lsls	r3, r3, #26
 8003ab6:	4968      	ldr	r1, [pc, #416]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003abc:	e06a      	b.n	8003b94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003abe:	4b66      	ldr	r3, [pc, #408]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	4962      	ldr	r1, [pc, #392]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ad2:	e05f      	b.n	8003b94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d042      	beq.n	8003b62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003adc:	4b5e      	ldr	r3, [pc, #376]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fe5e 	bl	80017a8 <HAL_GetTick>
 8003aec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003af0:	f7fd fe5a 	bl	80017a8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e280      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b02:	4b55      	ldr	r3, [pc, #340]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b0e:	f7fd fe7b 	bl	8001808 <HAL_GetREVID>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d817      	bhi.n	8003b4c <HAL_RCC_OscConfig+0x3ec>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d108      	bne.n	8003b36 <HAL_RCC_OscConfig+0x3d6>
 8003b24:	4b4c      	ldr	r3, [pc, #304]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003b2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b32:	6053      	str	r3, [r2, #4]
 8003b34:	e02e      	b.n	8003b94 <HAL_RCC_OscConfig+0x434>
 8003b36:	4b48      	ldr	r3, [pc, #288]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	069b      	lsls	r3, r3, #26
 8003b44:	4944      	ldr	r1, [pc, #272]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
 8003b4a:	e023      	b.n	8003b94 <HAL_RCC_OscConfig+0x434>
 8003b4c:	4b42      	ldr	r3, [pc, #264]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	493f      	ldr	r1, [pc, #252]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60cb      	str	r3, [r1, #12]
 8003b60:	e018      	b.n	8003b94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b62:	4b3d      	ldr	r3, [pc, #244]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a3c      	ldr	r2, [pc, #240]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003b68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fd fe1b 	bl	80017a8 <HAL_GetTick>
 8003b72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b76:	f7fd fe17 	bl	80017a8 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e23d      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b88:	4b33      	ldr	r3, [pc, #204]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d036      	beq.n	8003c0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d019      	beq.n	8003bdc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bac:	4a2a      	ldr	r2, [pc, #168]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fd fdf8 	bl	80017a8 <HAL_GetTick>
 8003bb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fd fdf4 	bl	80017a8 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e21a      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bce:	4b22      	ldr	r3, [pc, #136]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x45c>
 8003bda:	e018      	b.n	8003c0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be8:	f7fd fdde 	bl	80017a8 <HAL_GetTick>
 8003bec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf0:	f7fd fdda 	bl	80017a8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e200      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c02:	4b15      	ldr	r3, [pc, #84]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d039      	beq.n	8003c8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01c      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c22:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a0c      	ldr	r2, [pc, #48]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003c28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fdbb 	bl	80017a8 <HAL_GetTick>
 8003c32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c36:	f7fd fdb7 	bl	80017a8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e1dd      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <HAL_RCC_OscConfig+0x4f8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x4d6>
 8003c54:	e01b      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
 8003c56:	bf00      	nop
 8003c58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c5c:	4b9b      	ldr	r3, [pc, #620]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a9a      	ldr	r2, [pc, #616]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003c62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c68:	f7fd fd9e 	bl	80017a8 <HAL_GetTick>
 8003c6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c70:	f7fd fd9a 	bl	80017a8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1c0      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c82:	4b92      	ldr	r3, [pc, #584]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8081 	beq.w	8003d9e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c9c:	4b8c      	ldr	r3, [pc, #560]	@ (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a8b      	ldr	r2, [pc, #556]	@ (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca8:	f7fd fd7e 	bl	80017a8 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb0:	f7fd fd7a 	bl	80017a8 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	@ 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e1a0      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cc2:	4b83      	ldr	r3, [pc, #524]	@ (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d106      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x584>
 8003cd6:	4b7d      	ldr	r3, [pc, #500]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	4a7c      	ldr	r2, [pc, #496]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce2:	e02d      	b.n	8003d40 <HAL_RCC_OscConfig+0x5e0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10c      	bne.n	8003d06 <HAL_RCC_OscConfig+0x5a6>
 8003cec:	4b77      	ldr	r3, [pc, #476]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf0:	4a76      	ldr	r2, [pc, #472]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf8:	4b74      	ldr	r3, [pc, #464]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfc:	4a73      	ldr	r2, [pc, #460]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003cfe:	f023 0304 	bic.w	r3, r3, #4
 8003d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d04:	e01c      	b.n	8003d40 <HAL_RCC_OscConfig+0x5e0>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x5c8>
 8003d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d12:	4a6e      	ldr	r2, [pc, #440]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1a:	4b6c      	ldr	r3, [pc, #432]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	4a6b      	ldr	r2, [pc, #428]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d26:	e00b      	b.n	8003d40 <HAL_RCC_OscConfig+0x5e0>
 8003d28:	4b68      	ldr	r3, [pc, #416]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2c:	4a67      	ldr	r2, [pc, #412]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d34:	4b65      	ldr	r3, [pc, #404]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d38:	4a64      	ldr	r2, [pc, #400]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003d3a:	f023 0304 	bic.w	r3, r3, #4
 8003d3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d015      	beq.n	8003d74 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7fd fd2e 	bl	80017a8 <HAL_GetTick>
 8003d4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d50:	f7fd fd2a 	bl	80017a8 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e14e      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d66:	4b59      	ldr	r3, [pc, #356]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0ee      	beq.n	8003d50 <HAL_RCC_OscConfig+0x5f0>
 8003d72:	e014      	b.n	8003d9e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fd fd18 	bl	80017a8 <HAL_GetTick>
 8003d78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7fd fd14 	bl	80017a8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e138      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d92:	4b4e      	ldr	r3, [pc, #312]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ee      	bne.n	8003d7c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 812d 	beq.w	8004002 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003da8:	4b48      	ldr	r3, [pc, #288]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003db0:	2b18      	cmp	r3, #24
 8003db2:	f000 80bd 	beq.w	8003f30 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	f040 809e 	bne.w	8003efc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc0:	4b42      	ldr	r3, [pc, #264]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a41      	ldr	r2, [pc, #260]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fd fcec 	bl	80017a8 <HAL_GetTick>
 8003dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fd fce8 	bl	80017a8 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e10e      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003de6:	4b39      	ldr	r3, [pc, #228]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df2:	4b36      	ldr	r3, [pc, #216]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003df6:	4b37      	ldr	r3, [pc, #220]	@ (8003ed4 <HAL_RCC_OscConfig+0x774>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	430a      	orrs	r2, r1
 8003e06:	4931      	ldr	r1, [pc, #196]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	3b01      	subs	r3, #1
 8003e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	025b      	lsls	r3, r3, #9
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	3b01      	subs	r3, #1
 8003e28:	041b      	lsls	r3, r3, #16
 8003e2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e34:	3b01      	subs	r3, #1
 8003e36:	061b      	lsls	r3, r3, #24
 8003e38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e3c:	4923      	ldr	r1, [pc, #140]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e42:	4b22      	ldr	r3, [pc, #136]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	4a21      	ldr	r2, [pc, #132]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e52:	4b21      	ldr	r3, [pc, #132]	@ (8003ed8 <HAL_RCC_OscConfig+0x778>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e5a:	00d2      	lsls	r2, r2, #3
 8003e5c:	491b      	ldr	r1, [pc, #108]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e66:	f023 020c 	bic.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	4917      	ldr	r1, [pc, #92]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e74:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	f023 0202 	bic.w	r2, r3, #2
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e80:	4912      	ldr	r1, [pc, #72]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e86:	4b11      	ldr	r3, [pc, #68]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8a:	4a10      	ldr	r2, [pc, #64]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e92:	4b0e      	ldr	r3, [pc, #56]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	4a0d      	ldr	r2, [pc, #52]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003eaa:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	4a07      	ldr	r2, [pc, #28]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a04      	ldr	r2, [pc, #16]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003ebc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fd fc71 	bl	80017a8 <HAL_GetTick>
 8003ec6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ec8:	e011      	b.n	8003eee <HAL_RCC_OscConfig+0x78e>
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	58024800 	.word	0x58024800
 8003ed4:	fffffc0c 	.word	0xfffffc0c
 8003ed8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fd fc64 	bl	80017a8 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e08a      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003eee:	4b47      	ldr	r3, [pc, #284]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x77c>
 8003efa:	e082      	b.n	8004002 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efc:	4b43      	ldr	r3, [pc, #268]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a42      	ldr	r2, [pc, #264]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fc4e 	bl	80017a8 <HAL_GetTick>
 8003f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fd fc4a 	bl	80017a8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e070      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f22:	4b3a      	ldr	r3, [pc, #232]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x7b0>
 8003f2e:	e068      	b.n	8004002 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f30:	4b36      	ldr	r3, [pc, #216]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f36:	4b35      	ldr	r3, [pc, #212]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d031      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f003 0203 	and.w	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d12a      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d122      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d11a      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	0a5b      	lsrs	r3, r3, #9
 8003f76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f7e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d111      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d108      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	0e1b      	lsrs	r3, r3, #24
 8003f9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e02b      	b.n	8004004 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fac:	4b17      	ldr	r3, [pc, #92]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb0:	08db      	lsrs	r3, r3, #3
 8003fb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fb6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d01f      	beq.n	8004002 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003fc2:	4b12      	ldr	r3, [pc, #72]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	4a11      	ldr	r2, [pc, #68]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fce:	f7fd fbeb 	bl	80017a8 <HAL_GetTick>
 8003fd2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003fd4:	bf00      	nop
 8003fd6:	f7fd fbe7 	bl	80017a8 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d0f9      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <HAL_RCC_OscConfig+0x8b0>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fee:	00d2      	lsls	r2, r2, #3
 8003ff0:	4906      	ldr	r1, [pc, #24]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ff6:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	4a04      	ldr	r2, [pc, #16]	@ (800400c <HAL_RCC_OscConfig+0x8ac>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3730      	adds	r7, #48	@ 0x30
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	58024400 	.word	0x58024400
 8004010:	ffff0007 	.word	0xffff0007

08004014 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e19c      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004028:	4b8a      	ldr	r3, [pc, #552]	@ (8004254 <HAL_RCC_ClockConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d910      	bls.n	8004058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b87      	ldr	r3, [pc, #540]	@ (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 020f 	bic.w	r2, r3, #15
 800403e:	4985      	ldr	r1, [pc, #532]	@ (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b83      	ldr	r3, [pc, #524]	@ (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e184      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d010      	beq.n	8004086 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	4b7b      	ldr	r3, [pc, #492]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004070:	429a      	cmp	r2, r3
 8004072:	d908      	bls.n	8004086 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004074:	4b78      	ldr	r3, [pc, #480]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	4975      	ldr	r1, [pc, #468]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004082:	4313      	orrs	r3, r2
 8004084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d010      	beq.n	80040b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	4b70      	ldr	r3, [pc, #448]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800409e:	429a      	cmp	r2, r3
 80040a0:	d908      	bls.n	80040b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	496a      	ldr	r1, [pc, #424]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699a      	ldr	r2, [r3, #24]
 80040c4:	4b64      	ldr	r3, [pc, #400]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d908      	bls.n	80040e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040d0:	4b61      	ldr	r3, [pc, #388]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	495e      	ldr	r1, [pc, #376]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	4b59      	ldr	r3, [pc, #356]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d908      	bls.n	8004110 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040fe:	4b56      	ldr	r3, [pc, #344]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	4953      	ldr	r1, [pc, #332]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 800410c:	4313      	orrs	r3, r2
 800410e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d010      	beq.n	800413e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	4b4d      	ldr	r3, [pc, #308]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	429a      	cmp	r2, r3
 800412a:	d908      	bls.n	800413e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412c:	4b4a      	ldr	r3, [pc, #296]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f023 020f 	bic.w	r2, r3, #15
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4947      	ldr	r1, [pc, #284]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 800413a:	4313      	orrs	r3, r2
 800413c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d055      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800414a:	4b43      	ldr	r3, [pc, #268]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	4940      	ldr	r1, [pc, #256]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004158:	4313      	orrs	r3, r2
 800415a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d107      	bne.n	8004174 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004164:	4b3c      	ldr	r3, [pc, #240]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d121      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0f6      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d107      	bne.n	800418c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800417c:	4b36      	ldr	r3, [pc, #216]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d115      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0ea      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004194:	4b30      	ldr	r3, [pc, #192]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0de      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0d6      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041b4:	4b28      	ldr	r3, [pc, #160]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f023 0207 	bic.w	r2, r3, #7
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4925      	ldr	r1, [pc, #148]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c6:	f7fd faef 	bl	80017a8 <HAL_GetTick>
 80041ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041cc:	e00a      	b.n	80041e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ce:	f7fd faeb 	bl	80017a8 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e0be      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d1eb      	bne.n	80041ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d010      	beq.n	8004224 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	4b14      	ldr	r3, [pc, #80]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	429a      	cmp	r2, r3
 8004210:	d208      	bcs.n	8004224 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004212:	4b11      	ldr	r3, [pc, #68]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f023 020f 	bic.w	r2, r3, #15
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	490e      	ldr	r1, [pc, #56]	@ (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004220:	4313      	orrs	r3, r2
 8004222:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004224:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d214      	bcs.n	800425c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b08      	ldr	r3, [pc, #32]	@ (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 020f 	bic.w	r2, r3, #15
 800423a:	4906      	ldr	r1, [pc, #24]	@ (8004254 <HAL_RCC_ClockConfig+0x240>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e086      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
 8004254:	52002000 	.word	0x52002000
 8004258:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	4b3f      	ldr	r3, [pc, #252]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004274:	429a      	cmp	r2, r3
 8004276:	d208      	bcs.n	800428a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004278:	4b3c      	ldr	r3, [pc, #240]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	4939      	ldr	r1, [pc, #228]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 8004286:	4313      	orrs	r3, r2
 8004288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d010      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	4b34      	ldr	r3, [pc, #208]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d208      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042a6:	4b31      	ldr	r3, [pc, #196]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	492e      	ldr	r1, [pc, #184]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	4b28      	ldr	r3, [pc, #160]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d208      	bcs.n	80042e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042d4:	4b25      	ldr	r3, [pc, #148]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	4922      	ldr	r1, [pc, #136]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d010      	beq.n	8004314 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	4b1d      	ldr	r3, [pc, #116]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042fe:	429a      	cmp	r2, r3
 8004300:	d208      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004302:	4b1a      	ldr	r3, [pc, #104]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	4917      	ldr	r1, [pc, #92]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 8004310:	4313      	orrs	r3, r2
 8004312:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004314:	f000 f834 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b14      	ldr	r3, [pc, #80]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	4912      	ldr	r1, [pc, #72]	@ (8004370 <HAL_RCC_ClockConfig+0x35c>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
 8004330:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004332:	4b0e      	ldr	r3, [pc, #56]	@ (800436c <HAL_RCC_ClockConfig+0x358>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	4a0d      	ldr	r2, [pc, #52]	@ (8004370 <HAL_RCC_ClockConfig+0x35c>)
 800433c:	5cd3      	ldrb	r3, [r2, r3]
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	4a0a      	ldr	r2, [pc, #40]	@ (8004374 <HAL_RCC_ClockConfig+0x360>)
 800434a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800434c:	4a0a      	ldr	r2, [pc, #40]	@ (8004378 <HAL_RCC_ClockConfig+0x364>)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004352:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <HAL_RCC_ClockConfig+0x368>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fd f9dc 	bl	8001714 <HAL_InitTick>
 800435c:	4603      	mov	r3, r0
 800435e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	58024400 	.word	0x58024400
 8004370:	0800a3b0 	.word	0x0800a3b0
 8004374:	24000004 	.word	0x24000004
 8004378:	24000000 	.word	0x24000000
 800437c:	24000008 	.word	0x24000008

08004380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	@ 0x24
 8004384:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004386:	4bb3      	ldr	r3, [pc, #716]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800438e:	2b18      	cmp	r3, #24
 8004390:	f200 8155 	bhi.w	800463e <HAL_RCC_GetSysClockFreq+0x2be>
 8004394:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	08004401 	.word	0x08004401
 80043a0:	0800463f 	.word	0x0800463f
 80043a4:	0800463f 	.word	0x0800463f
 80043a8:	0800463f 	.word	0x0800463f
 80043ac:	0800463f 	.word	0x0800463f
 80043b0:	0800463f 	.word	0x0800463f
 80043b4:	0800463f 	.word	0x0800463f
 80043b8:	0800463f 	.word	0x0800463f
 80043bc:	08004427 	.word	0x08004427
 80043c0:	0800463f 	.word	0x0800463f
 80043c4:	0800463f 	.word	0x0800463f
 80043c8:	0800463f 	.word	0x0800463f
 80043cc:	0800463f 	.word	0x0800463f
 80043d0:	0800463f 	.word	0x0800463f
 80043d4:	0800463f 	.word	0x0800463f
 80043d8:	0800463f 	.word	0x0800463f
 80043dc:	0800442d 	.word	0x0800442d
 80043e0:	0800463f 	.word	0x0800463f
 80043e4:	0800463f 	.word	0x0800463f
 80043e8:	0800463f 	.word	0x0800463f
 80043ec:	0800463f 	.word	0x0800463f
 80043f0:	0800463f 	.word	0x0800463f
 80043f4:	0800463f 	.word	0x0800463f
 80043f8:	0800463f 	.word	0x0800463f
 80043fc:	08004433 	.word	0x08004433
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004400:	4b94      	ldr	r3, [pc, #592]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800440c:	4b91      	ldr	r3, [pc, #580]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	4a90      	ldr	r2, [pc, #576]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
 800441c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800441e:	e111      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004420:	4b8d      	ldr	r3, [pc, #564]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004422:	61bb      	str	r3, [r7, #24]
      break;
 8004424:	e10e      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004426:	4b8d      	ldr	r3, [pc, #564]	@ (800465c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004428:	61bb      	str	r3, [r7, #24]
      break;
 800442a:	e10b      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800442c:	4b8c      	ldr	r3, [pc, #560]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800442e:	61bb      	str	r3, [r7, #24]
      break;
 8004430:	e108      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004432:	4b88      	ldr	r3, [pc, #544]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800443c:	4b85      	ldr	r3, [pc, #532]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004446:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004448:	4b82      	ldr	r3, [pc, #520]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004452:	4b80      	ldr	r3, [pc, #512]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004456:	08db      	lsrs	r3, r3, #3
 8004458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80e1 	beq.w	8004638 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b02      	cmp	r3, #2
 800447a:	f000 8083 	beq.w	8004584 <HAL_RCC_GetSysClockFreq+0x204>
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b02      	cmp	r3, #2
 8004482:	f200 80a1 	bhi.w	80045c8 <HAL_RCC_GetSysClockFreq+0x248>
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0x114>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d056      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004492:	e099      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004494:	4b6f      	ldr	r3, [pc, #444]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b00      	cmp	r3, #0
 800449e:	d02d      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	08db      	lsrs	r3, r3, #3
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
 80044b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	ee07 3a90 	vmov	s15, r3
 80044b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ca:	4b62      	ldr	r3, [pc, #392]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044da:	ed97 6a02 	vldr	s12, [r7, #8]
 80044de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80044fa:	e087      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004668 <HAL_RCC_GetSysClockFreq+0x2e8>
 800450a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450e:	4b51      	ldr	r3, [pc, #324]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004522:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004664 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800453e:	e065      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800466c <HAL_RCC_GetSysClockFreq+0x2ec>
 800454e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004552:	4b40      	ldr	r3, [pc, #256]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004562:	ed97 6a02 	vldr	s12, [r7, #8]
 8004566:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004664 <HAL_RCC_GetSysClockFreq+0x2e4>
 800456a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004582:	e043      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004670 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b2f      	ldr	r3, [pc, #188]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045c6:	e021      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800466c <HAL_RCC_GetSysClockFreq+0x2ec>
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b1e      	ldr	r3, [pc, #120]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800460a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800460c:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004610:	0a5b      	lsrs	r3, r3, #9
 8004612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004616:	3301      	adds	r3, #1
 8004618:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	ee07 3a90 	vmov	s15, r3
 8004620:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004624:	edd7 6a07 	vldr	s13, [r7, #28]
 8004628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800462c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004630:	ee17 3a90 	vmov	r3, s15
 8004634:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004636:	e005      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	61bb      	str	r3, [r7, #24]
      break;
 800463c:	e002      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800463e:	4b07      	ldr	r3, [pc, #28]	@ (800465c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004640:	61bb      	str	r3, [r7, #24]
      break;
 8004642:	bf00      	nop
  }

  return sysclockfreq;
 8004644:	69bb      	ldr	r3, [r7, #24]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3724      	adds	r7, #36	@ 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	58024400 	.word	0x58024400
 8004658:	03d09000 	.word	0x03d09000
 800465c:	003d0900 	.word	0x003d0900
 8004660:	007a1200 	.word	0x007a1200
 8004664:	46000000 	.word	0x46000000
 8004668:	4c742400 	.word	0x4c742400
 800466c:	4a742400 	.word	0x4a742400
 8004670:	4af42400 	.word	0x4af42400

08004674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800467a:	f7ff fe81 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 800467e:	4602      	mov	r2, r0
 8004680:	4b10      	ldr	r3, [pc, #64]	@ (80046c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	0a1b      	lsrs	r3, r3, #8
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	490f      	ldr	r1, [pc, #60]	@ (80046c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800468c:	5ccb      	ldrb	r3, [r1, r3]
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	fa22 f303 	lsr.w	r3, r2, r3
 8004696:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004698:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	4a09      	ldr	r2, [pc, #36]	@ (80046c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80046a2:	5cd3      	ldrb	r3, [r2, r3]
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	fa22 f303 	lsr.w	r3, r2, r3
 80046ae:	4a07      	ldr	r2, [pc, #28]	@ (80046cc <HAL_RCC_GetHCLKFreq+0x58>)
 80046b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046b2:	4a07      	ldr	r2, [pc, #28]	@ (80046d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80046b8:	4b04      	ldr	r3, [pc, #16]	@ (80046cc <HAL_RCC_GetHCLKFreq+0x58>)
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	58024400 	.word	0x58024400
 80046c8:	0800a3b0 	.word	0x0800a3b0
 80046cc:	24000004 	.word	0x24000004
 80046d0:	24000000 	.word	0x24000000

080046d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80046d8:	f7ff ffcc 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 80046dc:	4602      	mov	r2, r0
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	4904      	ldr	r1, [pc, #16]	@ (80046fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ea:	5ccb      	ldrb	r3, [r1, r3]
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	58024400 	.word	0x58024400
 80046fc:	0800a3b0 	.word	0x0800a3b0

08004700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004704:	f7ff ffb6 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4904      	ldr	r1, [pc, #16]	@ (8004728 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	58024400 	.word	0x58024400
 8004728:	0800a3b0 	.word	0x0800a3b0

0800472c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800472c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004730:	b0ca      	sub	sp, #296	@ 0x128
 8004732:	af00      	add	r7, sp, #0
 8004734:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004738:	2300      	movs	r3, #0
 800473a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800473e:	2300      	movs	r3, #0
 8004740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004750:	2500      	movs	r5, #0
 8004752:	ea54 0305 	orrs.w	r3, r4, r5
 8004756:	d049      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800475e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004762:	d02f      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004764:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004768:	d828      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800476a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800476e:	d01a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004774:	d822      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800477a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800477e:	d007      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004780:	e01c      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004782:	4bb8      	ldr	r3, [pc, #736]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	4ab7      	ldr	r2, [pc, #732]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800478c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800478e:	e01a      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	3308      	adds	r3, #8
 8004796:	2102      	movs	r1, #2
 8004798:	4618      	mov	r0, r3
 800479a:	f001 fc8f 	bl	80060bc <RCCEx_PLL2_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047a4:	e00f      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	3328      	adds	r3, #40	@ 0x28
 80047ac:	2102      	movs	r1, #2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 fd36 	bl	8006220 <RCCEx_PLL3_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047ba:	e004      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047c2:	e000      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80047c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047ce:	4ba5      	ldr	r3, [pc, #660]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047dc:	4aa1      	ldr	r2, [pc, #644]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047de:	430b      	orrs	r3, r1
 80047e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80047e2:	e003      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80047f8:	f04f 0900 	mov.w	r9, #0
 80047fc:	ea58 0309 	orrs.w	r3, r8, r9
 8004800:	d047      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004808:	2b04      	cmp	r3, #4
 800480a:	d82a      	bhi.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800480c:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004829 	.word	0x08004829
 8004818:	08004837 	.word	0x08004837
 800481c:	0800484d 	.word	0x0800484d
 8004820:	0800486b 	.word	0x0800486b
 8004824:	0800486b 	.word	0x0800486b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004828:	4b8e      	ldr	r3, [pc, #568]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482c:	4a8d      	ldr	r2, [pc, #564]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800482e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004834:	e01a      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483a:	3308      	adds	r3, #8
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f001 fc3c 	bl	80060bc <RCCEx_PLL2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800484a:	e00f      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004850:	3328      	adds	r3, #40	@ 0x28
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f001 fce3 	bl	8006220 <RCCEx_PLL3_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004860:	e004      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004868:	e000      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800486a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004874:	4b7b      	ldr	r3, [pc, #492]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	f023 0107 	bic.w	r1, r3, #7
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004882:	4a78      	ldr	r2, [pc, #480]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004884:	430b      	orrs	r3, r1
 8004886:	6513      	str	r3, [r2, #80]	@ 0x50
 8004888:	e003      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800489e:	f04f 0b00 	mov.w	fp, #0
 80048a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80048a6:	d04c      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b2:	d030      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80048b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b8:	d829      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80048bc:	d02d      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80048be:	2bc0      	cmp	r3, #192	@ 0xc0
 80048c0:	d825      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048c2:	2b80      	cmp	r3, #128	@ 0x80
 80048c4:	d018      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80048c6:	2b80      	cmp	r3, #128	@ 0x80
 80048c8:	d821      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80048ce:	2b40      	cmp	r3, #64	@ 0x40
 80048d0:	d007      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80048d2:	e01c      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d4:	4b63      	ldr	r3, [pc, #396]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	4a62      	ldr	r2, [pc, #392]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80048e0:	e01c      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	3308      	adds	r3, #8
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 fbe6 	bl	80060bc <RCCEx_PLL2_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80048f6:	e011      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fc:	3328      	adds	r3, #40	@ 0x28
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f001 fc8d 	bl	8006220 <RCCEx_PLL3_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800490c:	e006      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004914:	e002      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004916:	bf00      	nop
 8004918:	e000      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800491a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004924:	4b4f      	ldr	r3, [pc, #316]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004928:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004932:	4a4c      	ldr	r2, [pc, #304]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004934:	430b      	orrs	r3, r1
 8004936:	6513      	str	r3, [r2, #80]	@ 0x50
 8004938:	e003      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800494e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004958:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800495c:	460b      	mov	r3, r1
 800495e:	4313      	orrs	r3, r2
 8004960:	d053      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800496a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800496e:	d035      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004970:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004974:	d82e      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004976:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800497a:	d031      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800497c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004980:	d828      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004986:	d01a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800498c:	d822      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004992:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004996:	d007      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004998:	e01c      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499a:	4b32      	ldr	r3, [pc, #200]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800499c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499e:	4a31      	ldr	r2, [pc, #196]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049a6:	e01c      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ac:	3308      	adds	r3, #8
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f001 fb83 	bl	80060bc <RCCEx_PLL2_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049bc:	e011      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c2:	3328      	adds	r3, #40	@ 0x28
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 fc2a 	bl	8006220 <RCCEx_PLL3_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049d2:	e006      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049da:	e002      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80049e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a00:	e003      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a24:	460b      	mov	r3, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	d056      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a36:	d038      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a3c:	d831      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a42:	d034      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004a44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a48:	d82b      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a4e:	d01d      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004a50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a54:	d825      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d006      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004a5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004a60:	e01f      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a68:	4ba2      	ldr	r3, [pc, #648]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	4aa1      	ldr	r2, [pc, #644]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a74:	e01c      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f001 fb1c 	bl	80060bc <RCCEx_PLL2_Config>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a8a:	e011      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a90:	3328      	adds	r3, #40	@ 0x28
 8004a92:	2100      	movs	r1, #0
 8004a94:	4618      	mov	r0, r3
 8004a96:	f001 fbc3 	bl	8006220 <RCCEx_PLL3_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004aa0:	e006      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aa8:	e002      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004aaa:	bf00      	nop
 8004aac:	e000      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10b      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ab8:	4b8e      	ldr	r3, [pc, #568]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ac8:	4a8a      	ldr	r2, [pc, #552]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aca:	430b      	orrs	r3, r1
 8004acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ace:	e003      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004aee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	d03a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afe:	2b30      	cmp	r3, #48	@ 0x30
 8004b00:	d01f      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b02:	2b30      	cmp	r3, #48	@ 0x30
 8004b04:	d819      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d00c      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d815      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d019      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d111      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b16:	4b77      	ldr	r3, [pc, #476]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1a:	4a76      	ldr	r2, [pc, #472]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b22:	e011      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b28:	3308      	adds	r3, #8
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fac5 	bl	80060bc <RCCEx_PLL2_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b38:	e006      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b40:	e002      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b42:	bf00      	nop
 8004b44:	e000      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b50:	4b68      	ldr	r3, [pc, #416]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b5e:	4a65      	ldr	r2, [pc, #404]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b60:	430b      	orrs	r3, r1
 8004b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b64:	e003      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004b7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	d051      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b98:	d035      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004b9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b9e:	d82e      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ba0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ba4:	d031      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ba6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004baa:	d828      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb0:	d01a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb6:	d822      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc0:	d007      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004bc2:	e01c      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bd0:	e01c      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fa6e 	bl	80060bc <RCCEx_PLL2_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004be6:	e011      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bec:	3328      	adds	r3, #40	@ 0x28
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 fb15 	bl	8006220 <RCCEx_PLL3_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c04:	e002      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c14:	4b37      	ldr	r3, [pc, #220]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c22:	4a34      	ldr	r2, [pc, #208]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c28:	e003      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	d056      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c5c:	d033      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004c5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c62:	d82c      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c68:	d02f      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004c6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c6e:	d826      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c74:	d02b      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004c76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c7a:	d820      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c80:	d012      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c86:	d81a      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d022      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c90:	d115      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c96:	3308      	adds	r3, #8
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 fa0e 	bl	80060bc <RCCEx_PLL2_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ca6:	e015      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cac:	3328      	adds	r3, #40	@ 0x28
 8004cae:	2101      	movs	r1, #1
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 fab5 	bl	8006220 <RCCEx_PLL3_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cc6:	bf00      	nop
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cca:	bf00      	nop
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10d      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cea:	4a02      	ldr	r2, [pc, #8]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cf0:	e006      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004cf2:	bf00      	nop
 8004cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d10:	2300      	movs	r3, #0
 8004d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	d055      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d2c:	d033      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d32:	d82c      	bhi.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d38:	d02f      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3e:	d826      	bhi.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d44:	d02b      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d4a:	d820      	bhi.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d50:	d012      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d56:	d81a      	bhi.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d022      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d60:	d115      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	3308      	adds	r3, #8
 8004d68:	2101      	movs	r1, #1
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 f9a6 	bl	80060bc <RCCEx_PLL2_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d76:	e015      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7c:	3328      	adds	r3, #40	@ 0x28
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 fa4d 	bl	8006220 <RCCEx_PLL3_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d94:	e006      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d96:	bf00      	nop
 8004d98:	e004      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d9a:	bf00      	nop
 8004d9c:	e002      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d9e:	bf00      	nop
 8004da0:	e000      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004dac:	4ba3      	ldr	r3, [pc, #652]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dbc:	4a9f      	ldr	r2, [pc, #636]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc2:	e003      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004de6:	460b      	mov	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	d037      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004df6:	d00e      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dfc:	d816      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d018      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e06:	d111      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e08:	4b8c      	ldr	r3, [pc, #560]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	4a8b      	ldr	r2, [pc, #556]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e14:	e00f      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 f94c 	bl	80060bc <RCCEx_PLL2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e2a:	e004      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e32:	e000      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10a      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4c:	4a7b      	ldr	r2, [pc, #492]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e52:	e003      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004e68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	d039      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d81c      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004e86:	a201      	add	r2, pc, #4	@ (adr r2, 8004e8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004ec9 	.word	0x08004ec9
 8004e90:	08004e9d 	.word	0x08004e9d
 8004e94:	08004eab 	.word	0x08004eab
 8004e98:	08004ec9 	.word	0x08004ec9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e9c:	4b67      	ldr	r3, [pc, #412]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	4a66      	ldr	r2, [pc, #408]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ea8:	e00f      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eae:	3308      	adds	r3, #8
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 f902 	bl	80060bc <RCCEx_PLL2_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ebe:	e004      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ec6:	e000      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed6:	f023 0103 	bic.w	r1, r3, #3
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee0:	4a56      	ldr	r2, [pc, #344]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ee6:	e003      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004efc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f00:	2300      	movs	r3, #0
 8004f02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f000 809f 	beq.w	8005050 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f12:	4b4b      	ldr	r3, [pc, #300]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a4a      	ldr	r2, [pc, #296]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f1e:	f7fc fc43 	bl	80017a8 <HAL_GetTick>
 8004f22:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f26:	e00b      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f28:	f7fc fc3e 	bl	80017a8 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b64      	cmp	r3, #100	@ 0x64
 8004f36:	d903      	bls.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f3e:	e005      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f40:	4b3f      	ldr	r3, [pc, #252]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ed      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d179      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f54:	4b39      	ldr	r3, [pc, #228]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f60:	4053      	eors	r3, r2
 8004f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d015      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f6a:	4b34      	ldr	r3, [pc, #208]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f76:	4b31      	ldr	r3, [pc, #196]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	4a30      	ldr	r2, [pc, #192]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f80:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f82:	4b2e      	ldr	r3, [pc, #184]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f86:	4a2d      	ldr	r2, [pc, #180]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f8c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa2:	d118      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fc fc00 	bl	80017a8 <HAL_GetTick>
 8004fa8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fac:	e00d      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fae:	f7fc fbfb 	bl	80017a8 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fb8:	1ad2      	subs	r2, r2, r3
 8004fba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d903      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004fc8:	e005      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fca:	4b1c      	ldr	r3, [pc, #112]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0eb      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d129      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fee:	d10e      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004ff0:	4b12      	ldr	r3, [pc, #72]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005000:	091a      	lsrs	r2, r3, #4
 8005002:	4b10      	ldr	r3, [pc, #64]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005004:	4013      	ands	r3, r2
 8005006:	4a0d      	ldr	r2, [pc, #52]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005008:	430b      	orrs	r3, r1
 800500a:	6113      	str	r3, [r2, #16]
 800500c:	e005      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800500e:	4b0b      	ldr	r3, [pc, #44]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	4a0a      	ldr	r2, [pc, #40]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005014:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005018:	6113      	str	r3, [r2, #16]
 800501a:	4b08      	ldr	r3, [pc, #32]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800501c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502a:	4a04      	ldr	r2, [pc, #16]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800502c:	430b      	orrs	r3, r1
 800502e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005030:	e00e      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800503a:	e009      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800503c:	58024400 	.word	0x58024400
 8005040:	58024800 	.word	0x58024800
 8005044:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f002 0301 	and.w	r3, r2, #1
 800505c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005060:	2300      	movs	r3, #0
 8005062:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005066:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800506a:	460b      	mov	r3, r1
 800506c:	4313      	orrs	r3, r2
 800506e:	f000 8089 	beq.w	8005184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005076:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005078:	2b28      	cmp	r3, #40	@ 0x28
 800507a:	d86b      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800507c:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	0800515d 	.word	0x0800515d
 8005088:	08005155 	.word	0x08005155
 800508c:	08005155 	.word	0x08005155
 8005090:	08005155 	.word	0x08005155
 8005094:	08005155 	.word	0x08005155
 8005098:	08005155 	.word	0x08005155
 800509c:	08005155 	.word	0x08005155
 80050a0:	08005155 	.word	0x08005155
 80050a4:	08005129 	.word	0x08005129
 80050a8:	08005155 	.word	0x08005155
 80050ac:	08005155 	.word	0x08005155
 80050b0:	08005155 	.word	0x08005155
 80050b4:	08005155 	.word	0x08005155
 80050b8:	08005155 	.word	0x08005155
 80050bc:	08005155 	.word	0x08005155
 80050c0:	08005155 	.word	0x08005155
 80050c4:	0800513f 	.word	0x0800513f
 80050c8:	08005155 	.word	0x08005155
 80050cc:	08005155 	.word	0x08005155
 80050d0:	08005155 	.word	0x08005155
 80050d4:	08005155 	.word	0x08005155
 80050d8:	08005155 	.word	0x08005155
 80050dc:	08005155 	.word	0x08005155
 80050e0:	08005155 	.word	0x08005155
 80050e4:	0800515d 	.word	0x0800515d
 80050e8:	08005155 	.word	0x08005155
 80050ec:	08005155 	.word	0x08005155
 80050f0:	08005155 	.word	0x08005155
 80050f4:	08005155 	.word	0x08005155
 80050f8:	08005155 	.word	0x08005155
 80050fc:	08005155 	.word	0x08005155
 8005100:	08005155 	.word	0x08005155
 8005104:	0800515d 	.word	0x0800515d
 8005108:	08005155 	.word	0x08005155
 800510c:	08005155 	.word	0x08005155
 8005110:	08005155 	.word	0x08005155
 8005114:	08005155 	.word	0x08005155
 8005118:	08005155 	.word	0x08005155
 800511c:	08005155 	.word	0x08005155
 8005120:	08005155 	.word	0x08005155
 8005124:	0800515d 	.word	0x0800515d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512c:	3308      	adds	r3, #8
 800512e:	2101      	movs	r1, #1
 8005130:	4618      	mov	r0, r3
 8005132:	f000 ffc3 	bl	80060bc <RCCEx_PLL2_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800513c:	e00f      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005142:	3328      	adds	r3, #40	@ 0x28
 8005144:	2101      	movs	r1, #1
 8005146:	4618      	mov	r0, r3
 8005148:	f001 f86a 	bl	8006220 <RCCEx_PLL3_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005152:	e004      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800515a:	e000      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800515c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005166:	4bbf      	ldr	r3, [pc, #764]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005174:	4abb      	ldr	r2, [pc, #748]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005176:	430b      	orrs	r3, r1
 8005178:	6553      	str	r3, [r2, #84]	@ 0x54
 800517a:	e003      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518c:	f002 0302 	and.w	r3, r2, #2
 8005190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005194:	2300      	movs	r3, #0
 8005196:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800519a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800519e:	460b      	mov	r3, r1
 80051a0:	4313      	orrs	r3, r2
 80051a2:	d041      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d824      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80051ae:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	08005201 	.word	0x08005201
 80051b8:	080051cd 	.word	0x080051cd
 80051bc:	080051e3 	.word	0x080051e3
 80051c0:	08005201 	.word	0x08005201
 80051c4:	08005201 	.word	0x08005201
 80051c8:	08005201 	.word	0x08005201
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d0:	3308      	adds	r3, #8
 80051d2:	2101      	movs	r1, #1
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 ff71 	bl	80060bc <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051e0:	e00f      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e6:	3328      	adds	r3, #40	@ 0x28
 80051e8:	2101      	movs	r1, #1
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 f818 	bl	8006220 <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051f6:	e004      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051fe:	e000      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800520a:	4b96      	ldr	r3, [pc, #600]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800520c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520e:	f023 0107 	bic.w	r1, r3, #7
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005218:	4a92      	ldr	r2, [pc, #584]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800521a:	430b      	orrs	r3, r1
 800521c:	6553      	str	r3, [r2, #84]	@ 0x54
 800521e:	e003      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f002 0304 	and.w	r3, r2, #4
 8005234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005238:	2300      	movs	r3, #0
 800523a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800523e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005242:	460b      	mov	r3, r1
 8005244:	4313      	orrs	r3, r2
 8005246:	d044      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005250:	2b05      	cmp	r3, #5
 8005252:	d825      	bhi.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005254:	a201      	add	r2, pc, #4	@ (adr r2, 800525c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	080052a9 	.word	0x080052a9
 8005260:	08005275 	.word	0x08005275
 8005264:	0800528b 	.word	0x0800528b
 8005268:	080052a9 	.word	0x080052a9
 800526c:	080052a9 	.word	0x080052a9
 8005270:	080052a9 	.word	0x080052a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005278:	3308      	adds	r3, #8
 800527a:	2101      	movs	r1, #1
 800527c:	4618      	mov	r0, r3
 800527e:	f000 ff1d 	bl	80060bc <RCCEx_PLL2_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005288:	e00f      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800528a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528e:	3328      	adds	r3, #40	@ 0x28
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f000 ffc4 	bl	8006220 <RCCEx_PLL3_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800529e:	e004      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052a6:	e000      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80052a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b6:	f023 0107 	bic.w	r1, r3, #7
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c2:	4a68      	ldr	r2, [pc, #416]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052c4:	430b      	orrs	r3, r1
 80052c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80052c8:	e003      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f002 0320 	and.w	r3, r2, #32
 80052de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052e2:	2300      	movs	r3, #0
 80052e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052ec:	460b      	mov	r3, r1
 80052ee:	4313      	orrs	r3, r2
 80052f0:	d055      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80052f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052fe:	d033      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005304:	d82c      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530a:	d02f      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005310:	d826      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005312:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005316:	d02b      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005318:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800531c:	d820      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800531e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005322:	d012      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005328:	d81a      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d022      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800532e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005332:	d115      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005338:	3308      	adds	r3, #8
 800533a:	2100      	movs	r1, #0
 800533c:	4618      	mov	r0, r3
 800533e:	f000 febd 	bl	80060bc <RCCEx_PLL2_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005348:	e015      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800534a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534e:	3328      	adds	r3, #40	@ 0x28
 8005350:	2102      	movs	r1, #2
 8005352:	4618      	mov	r0, r3
 8005354:	f000 ff64 	bl	8006220 <RCCEx_PLL3_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800535e:	e00a      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005366:	e006      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005368:	bf00      	nop
 800536a:	e004      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800536c:	bf00      	nop
 800536e:	e002      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005370:	bf00      	nop
 8005372:	e000      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800537e:	4b39      	ldr	r3, [pc, #228]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005382:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	4a35      	ldr	r2, [pc, #212]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005390:	430b      	orrs	r3, r1
 8005392:	6553      	str	r3, [r2, #84]	@ 0x54
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800539e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80053aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053ae:	2300      	movs	r3, #0
 80053b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	d058      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80053be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80053ca:	d033      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80053cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80053d0:	d82c      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d6:	d02f      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053dc:	d826      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053e2:	d02b      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80053e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053e8:	d820      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ee:	d012      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80053f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053f4:	d81a      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d022      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80053fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053fe:	d115      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005404:	3308      	adds	r3, #8
 8005406:	2100      	movs	r1, #0
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fe57 	bl	80060bc <RCCEx_PLL2_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005414:	e015      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541a:	3328      	adds	r3, #40	@ 0x28
 800541c:	2102      	movs	r1, #2
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fefe 	bl	8006220 <RCCEx_PLL3_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800542a:	e00a      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005432:	e006      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005434:	bf00      	nop
 8005436:	e004      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005438:	bf00      	nop
 800543a:	e002      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800543c:	bf00      	nop
 800543e:	e000      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10e      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800544a:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005456:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800545a:	4a02      	ldr	r2, [pc, #8]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800545c:	430b      	orrs	r3, r1
 800545e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005460:	e006      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005462:	bf00      	nop
 8005464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800546c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800547c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005480:	2300      	movs	r3, #0
 8005482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005486:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800548a:	460b      	mov	r3, r1
 800548c:	4313      	orrs	r3, r2
 800548e:	d055      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005494:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005498:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800549c:	d033      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800549e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054a2:	d82c      	bhi.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054a8:	d02f      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80054aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ae:	d826      	bhi.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054b4:	d02b      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80054b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054ba:	d820      	bhi.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054c0:	d012      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80054c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054c6:	d81a      	bhi.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d022      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80054cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d0:	d115      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d6:	3308      	adds	r3, #8
 80054d8:	2100      	movs	r1, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fdee 	bl	80060bc <RCCEx_PLL2_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054e6:	e015      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ec:	3328      	adds	r3, #40	@ 0x28
 80054ee:	2102      	movs	r1, #2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fe95 	bl	8006220 <RCCEx_PLL3_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054fc:	e00a      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005504:	e006      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005506:	bf00      	nop
 8005508:	e004      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10b      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800551c:	4ba1      	ldr	r3, [pc, #644]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800551e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005520:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800552c:	4a9d      	ldr	r2, [pc, #628]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800552e:	430b      	orrs	r3, r1
 8005530:	6593      	str	r3, [r2, #88]	@ 0x58
 8005532:	e003      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005538:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800553c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	f002 0308 	and.w	r3, r2, #8
 8005548:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800554c:	2300      	movs	r3, #0
 800554e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005552:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005556:	460b      	mov	r3, r1
 8005558:	4313      	orrs	r3, r2
 800555a:	d01e      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800555c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005568:	d10c      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556e:	3328      	adds	r3, #40	@ 0x28
 8005570:	2102      	movs	r1, #2
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fe54 	bl	8006220 <RCCEx_PLL3_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005584:	4b87      	ldr	r3, [pc, #540]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005588:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005594:	4a83      	ldr	r2, [pc, #524]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005596:	430b      	orrs	r3, r1
 8005598:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f002 0310 	and.w	r3, r2, #16
 80055a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055aa:	2300      	movs	r3, #0
 80055ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055b4:	460b      	mov	r3, r1
 80055b6:	4313      	orrs	r3, r2
 80055b8:	d01e      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c6:	d10c      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055cc:	3328      	adds	r3, #40	@ 0x28
 80055ce:	2102      	movs	r1, #2
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fe25 	bl	8006220 <RCCEx_PLL3_Config>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055e2:	4b70      	ldr	r3, [pc, #448]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055f2:	4a6c      	ldr	r2, [pc, #432]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005608:	2300      	movs	r3, #0
 800560a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800560e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005612:	460b      	mov	r3, r1
 8005614:	4313      	orrs	r3, r2
 8005616:	d03e      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005624:	d022      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005626:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800562a:	d81b      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005634:	d00b      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005636:	e015      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563c:	3308      	adds	r3, #8
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fd3b 	bl	80060bc <RCCEx_PLL2_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800564c:	e00f      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005652:	3328      	adds	r3, #40	@ 0x28
 8005654:	2102      	movs	r1, #2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fde2 	bl	8006220 <RCCEx_PLL3_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005662:	e004      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800566c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005676:	4b4b      	ldr	r3, [pc, #300]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005682:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005686:	4a47      	ldr	r2, [pc, #284]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005688:	430b      	orrs	r3, r1
 800568a:	6593      	str	r3, [r2, #88]	@ 0x58
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80056a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056a4:	2300      	movs	r3, #0
 80056a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80056ac:	460b      	mov	r3, r1
 80056ae:	4313      	orrs	r3, r2
 80056b0:	d03b      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056be:	d01f      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80056c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056c4:	d818      	bhi.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80056c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ca:	d003      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80056cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d0:	d007      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80056d2:	e011      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d4:	4b33      	ldr	r3, [pc, #204]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d8:	4a32      	ldr	r2, [pc, #200]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80056e0:	e00f      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e6:	3328      	adds	r3, #40	@ 0x28
 80056e8:	2101      	movs	r1, #1
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fd98 	bl	8006220 <RCCEx_PLL3_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80056f6:	e004      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800570a:	4b26      	ldr	r3, [pc, #152]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800570c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571a:	4a22      	ldr	r2, [pc, #136]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800571c:	430b      	orrs	r3, r1
 800571e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800572a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005736:	673b      	str	r3, [r7, #112]	@ 0x70
 8005738:	2300      	movs	r3, #0
 800573a:	677b      	str	r3, [r7, #116]	@ 0x74
 800573c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005740:	460b      	mov	r3, r1
 8005742:	4313      	orrs	r3, r2
 8005744:	d034      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005754:	d007      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005756:	e011      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005758:	4b12      	ldr	r3, [pc, #72]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	4a11      	ldr	r2, [pc, #68]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800575e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005764:	e00e      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576a:	3308      	adds	r3, #8
 800576c:	2102      	movs	r1, #2
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fca4 	bl	80060bc <RCCEx_PLL2_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800577a:	e003      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10d      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800578c:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800578e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005790:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800579a:	4a02      	ldr	r2, [pc, #8]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800579c:	430b      	orrs	r3, r1
 800579e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057a0:	e006      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80057a2:	bf00      	nop
 80057a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80057bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057be:	2300      	movs	r3, #0
 80057c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80057c6:	460b      	mov	r3, r1
 80057c8:	4313      	orrs	r3, r2
 80057ca:	d00c      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	3328      	adds	r3, #40	@ 0x28
 80057d2:	2102      	movs	r1, #2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fd23 	bl	8006220 <RCCEx_PLL3_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80057f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80057f4:	2300      	movs	r3, #0
 80057f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80057f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80057fc:	460b      	mov	r3, r1
 80057fe:	4313      	orrs	r3, r2
 8005800:	d038      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800580a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800580e:	d018      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005814:	d811      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800581a:	d014      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800581c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005820:	d80b      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d011      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800582a:	d106      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582c:	4bc3      	ldr	r3, [pc, #780]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005830:	4ac2      	ldr	r2, [pc, #776]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005838:	e008      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005840:	e004      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005842:	bf00      	nop
 8005844:	e002      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800584a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005854:	4bb9      	ldr	r3, [pc, #740]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005858:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800585c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005864:	4ab5      	ldr	r2, [pc, #724]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005866:	430b      	orrs	r3, r1
 8005868:	6553      	str	r3, [r2, #84]	@ 0x54
 800586a:	e003      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005880:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005882:	2300      	movs	r3, #0
 8005884:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005886:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800588a:	460b      	mov	r3, r1
 800588c:	4313      	orrs	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005890:	4baa      	ldr	r3, [pc, #680]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005894:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589e:	4aa7      	ldr	r2, [pc, #668]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80058b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80058b2:	2300      	movs	r3, #0
 80058b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80058b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80058ba:	460b      	mov	r3, r1
 80058bc:	4313      	orrs	r3, r2
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80058c0:	4b9e      	ldr	r3, [pc, #632]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058d0:	4a9a      	ldr	r2, [pc, #616]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058d2:	430b      	orrs	r3, r1
 80058d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80058e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058e4:	2300      	movs	r3, #0
 80058e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80058ec:	460b      	mov	r3, r1
 80058ee:	4313      	orrs	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058f2:	4b92      	ldr	r3, [pc, #584]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005900:	4a8e      	ldr	r2, [pc, #568]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005902:	430b      	orrs	r3, r1
 8005904:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005912:	643b      	str	r3, [r7, #64]	@ 0x40
 8005914:	2300      	movs	r3, #0
 8005916:	647b      	str	r3, [r7, #68]	@ 0x44
 8005918:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800591c:	460b      	mov	r3, r1
 800591e:	4313      	orrs	r3, r2
 8005920:	d00e      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005922:	4b86      	ldr	r3, [pc, #536]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	4a85      	ldr	r2, [pc, #532]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005928:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800592c:	6113      	str	r3, [r2, #16]
 800592e:	4b83      	ldr	r3, [pc, #524]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005930:	6919      	ldr	r1, [r3, #16]
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005936:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800593a:	4a80      	ldr	r2, [pc, #512]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800593c:	430b      	orrs	r3, r1
 800593e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800594c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800594e:	2300      	movs	r3, #0
 8005950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005952:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005956:	460b      	mov	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800595c:	4b77      	ldr	r3, [pc, #476]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800595e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005960:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596a:	4a74      	ldr	r2, [pc, #464]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800596c:	430b      	orrs	r3, r1
 800596e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800597c:	633b      	str	r3, [r7, #48]	@ 0x30
 800597e:	2300      	movs	r3, #0
 8005980:	637b      	str	r3, [r7, #52]	@ 0x34
 8005982:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	d00a      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800598c:	4b6b      	ldr	r3, [pc, #428]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800598e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005990:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800599c:	4a67      	ldr	r2, [pc, #412]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800599e:	430b      	orrs	r3, r1
 80059a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	2100      	movs	r1, #0
 80059ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80059b8:	460b      	mov	r3, r1
 80059ba:	4313      	orrs	r3, r2
 80059bc:	d011      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c2:	3308      	adds	r3, #8
 80059c4:	2100      	movs	r1, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fb78 	bl	80060bc <RCCEx_PLL2_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	2100      	movs	r1, #0
 80059ec:	6239      	str	r1, [r7, #32]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059f8:	460b      	mov	r3, r1
 80059fa:	4313      	orrs	r3, r2
 80059fc:	d011      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a02:	3308      	adds	r3, #8
 8005a04:	2101      	movs	r1, #1
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fb58 	bl	80060bc <RCCEx_PLL2_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	61b9      	str	r1, [r7, #24]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d011      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a42:	3308      	adds	r3, #8
 8005a44:	2102      	movs	r1, #2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fb38 	bl	80060bc <RCCEx_PLL2_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	6139      	str	r1, [r7, #16]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d011      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	3328      	adds	r3, #40	@ 0x28
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fbca 	bl	8006220 <RCCEx_PLL3_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	2100      	movs	r1, #0
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4313      	orrs	r3, r2
 8005abc:	d011      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac2:	3328      	adds	r3, #40	@ 0x28
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fbaa 	bl	8006220 <RCCEx_PLL3_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	2100      	movs	r1, #0
 8005aec:	6039      	str	r1, [r7, #0]
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	607b      	str	r3, [r7, #4]
 8005af4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005af8:	460b      	mov	r3, r1
 8005afa:	4313      	orrs	r3, r2
 8005afc:	d011      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	3328      	adds	r3, #40	@ 0x28
 8005b04:	2102      	movs	r1, #2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fb8a 	bl	8006220 <RCCEx_PLL3_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005b22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e000      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005b36:	46bd      	mov	sp, r7
 8005b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b3c:	58024400 	.word	0x58024400

08005b40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b44:	f7fe fd96 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	091b      	lsrs	r3, r3, #4
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4904      	ldr	r1, [pc, #16]	@ (8005b68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	58024400 	.word	0x58024400
 8005b68:	0800a3b0 	.word	0x0800a3b0

08005b6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b089      	sub	sp, #36	@ 0x24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b74:	4ba1      	ldr	r3, [pc, #644]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005b7e:	4b9f      	ldr	r3, [pc, #636]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b82:	0b1b      	lsrs	r3, r3, #12
 8005b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b8a:	4b9c      	ldr	r3, [pc, #624]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005b96:	4b99      	ldr	r3, [pc, #612]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9a:	08db      	lsrs	r3, r3, #3
 8005b9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8111 	beq.w	8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	f000 8083 	beq.w	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	f200 80a1 	bhi.w	8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d056      	beq.n	8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005bd6:	e099      	b.n	8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bd8:	4b88      	ldr	r3, [pc, #544]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d02d      	beq.n	8005c40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005be4:	4b85      	ldr	r3, [pc, #532]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	08db      	lsrs	r3, r3, #3
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	4a84      	ldr	r2, [pc, #528]	@ (8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c3e:	e087      	b.n	8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c52:	4b6a      	ldr	r3, [pc, #424]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c82:	e065      	b.n	8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c96:	4b59      	ldr	r3, [pc, #356]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005caa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cc6:	e043      	b.n	8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cda:	4b48      	ldr	r3, [pc, #288]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d0a:	e021      	b.n	8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1e:	4b37      	ldr	r3, [pc, #220]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d50:	4b2a      	ldr	r3, [pc, #168]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	0a5b      	lsrs	r3, r3, #9
 8005d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d76:	ee17 2a90 	vmov	r2, s15
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	0c1b      	lsrs	r3, r3, #16
 8005d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da4:	ee17 2a90 	vmov	r2, s15
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005dac:	4b13      	ldr	r3, [pc, #76]	@ (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db0:	0e1b      	lsrs	r3, r3, #24
 8005db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd2:	ee17 2a90 	vmov	r2, s15
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005dda:	e008      	b.n	8005dee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	609a      	str	r2, [r3, #8]
}
 8005dee:	bf00      	nop
 8005df0:	3724      	adds	r7, #36	@ 0x24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	58024400 	.word	0x58024400
 8005e00:	03d09000 	.word	0x03d09000
 8005e04:	46000000 	.word	0x46000000
 8005e08:	4c742400 	.word	0x4c742400
 8005e0c:	4a742400 	.word	0x4a742400
 8005e10:	4af42400 	.word	0x4af42400

08005e14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b089      	sub	sp, #36	@ 0x24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e1c:	4ba1      	ldr	r3, [pc, #644]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e20:	f003 0303 	and.w	r3, r3, #3
 8005e24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e26:	4b9f      	ldr	r3, [pc, #636]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2a:	0d1b      	lsrs	r3, r3, #20
 8005e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e32:	4b9c      	ldr	r3, [pc, #624]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e3e:	4b99      	ldr	r3, [pc, #612]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e42:	08db      	lsrs	r3, r3, #3
 8005e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8111 	beq.w	8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	f000 8083 	beq.w	8005f70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	f200 80a1 	bhi.w	8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d056      	beq.n	8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e7e:	e099      	b.n	8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e80:	4b88      	ldr	r3, [pc, #544]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02d      	beq.n	8005ee8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e8c:	4b85      	ldr	r3, [pc, #532]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	08db      	lsrs	r3, r3, #3
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	4a84      	ldr	r2, [pc, #528]	@ (80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	ee07 3a90 	vmov	s15, r3
 8005ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ee6:	e087      	b.n	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efa:	4b6a      	ldr	r3, [pc, #424]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f2a:	e065      	b.n	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3e:	4b59      	ldr	r3, [pc, #356]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f6e:	e043      	b.n	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f82:	4b48      	ldr	r3, [pc, #288]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fb2:	e021      	b.n	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc6:	4b37      	ldr	r3, [pc, #220]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ff6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffc:	0a5b      	lsrs	r3, r3, #9
 8005ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800600e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006012:	edd7 6a07 	vldr	s13, [r7, #28]
 8006016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800601a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800601e:	ee17 2a90 	vmov	r2, s15
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006026:	4b1f      	ldr	r3, [pc, #124]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602a:	0c1b      	lsrs	r3, r3, #16
 800602c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006038:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800603c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006040:	edd7 6a07 	vldr	s13, [r7, #28]
 8006044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800604c:	ee17 2a90 	vmov	r2, s15
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006054:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006058:	0e1b      	lsrs	r3, r3, #24
 800605a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800606a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800606e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800607a:	ee17 2a90 	vmov	r2, s15
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006082:	e008      	b.n	8006096 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	609a      	str	r2, [r3, #8]
}
 8006096:	bf00      	nop
 8006098:	3724      	adds	r7, #36	@ 0x24
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	58024400 	.word	0x58024400
 80060a8:	03d09000 	.word	0x03d09000
 80060ac:	46000000 	.word	0x46000000
 80060b0:	4c742400 	.word	0x4c742400
 80060b4:	4a742400 	.word	0x4a742400
 80060b8:	4af42400 	.word	0x4af42400

080060bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060ca:	4b53      	ldr	r3, [pc, #332]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80060cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d101      	bne.n	80060da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e099      	b.n	800620e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060da:	4b4f      	ldr	r3, [pc, #316]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a4e      	ldr	r2, [pc, #312]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80060e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e6:	f7fb fb5f 	bl	80017a8 <HAL_GetTick>
 80060ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060ec:	e008      	b.n	8006100 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060ee:	f7fb fb5b 	bl	80017a8 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e086      	b.n	800620e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006100:	4b45      	ldr	r3, [pc, #276]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f0      	bne.n	80060ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800610c:	4b42      	ldr	r3, [pc, #264]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 800610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006110:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	031b      	lsls	r3, r3, #12
 800611a:	493f      	ldr	r1, [pc, #252]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 800611c:	4313      	orrs	r3, r2
 800611e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	3b01      	subs	r3, #1
 8006126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	3b01      	subs	r3, #1
 8006130:	025b      	lsls	r3, r3, #9
 8006132:	b29b      	uxth	r3, r3
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	3b01      	subs	r3, #1
 800613c:	041b      	lsls	r3, r3, #16
 800613e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	3b01      	subs	r3, #1
 800614a:	061b      	lsls	r3, r3, #24
 800614c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006150:	4931      	ldr	r1, [pc, #196]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 8006152:	4313      	orrs	r3, r2
 8006154:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006156:	4b30      	ldr	r3, [pc, #192]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 8006158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	492d      	ldr	r1, [pc, #180]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 8006164:	4313      	orrs	r3, r2
 8006166:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006168:	4b2b      	ldr	r3, [pc, #172]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	f023 0220 	bic.w	r2, r3, #32
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	4928      	ldr	r1, [pc, #160]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 8006176:	4313      	orrs	r3, r2
 8006178:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800617a:	4b27      	ldr	r3, [pc, #156]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	4a26      	ldr	r2, [pc, #152]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 8006180:	f023 0310 	bic.w	r3, r3, #16
 8006184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006186:	4b24      	ldr	r3, [pc, #144]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 8006188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800618a:	4b24      	ldr	r3, [pc, #144]	@ (800621c <RCCEx_PLL2_Config+0x160>)
 800618c:	4013      	ands	r3, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	69d2      	ldr	r2, [r2, #28]
 8006192:	00d2      	lsls	r2, r2, #3
 8006194:	4920      	ldr	r1, [pc, #128]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 8006196:	4313      	orrs	r3, r2
 8006198:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800619a:	4b1f      	ldr	r3, [pc, #124]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	4a1e      	ldr	r2, [pc, #120]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80061a0:	f043 0310 	orr.w	r3, r3, #16
 80061a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	4a19      	ldr	r2, [pc, #100]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80061b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061b8:	e00f      	b.n	80061da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d106      	bne.n	80061ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061c0:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80061c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c4:	4a14      	ldr	r2, [pc, #80]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80061c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061cc:	e005      	b.n	80061da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061ce:	4b12      	ldr	r3, [pc, #72]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80061d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d2:	4a11      	ldr	r2, [pc, #68]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80061d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061da:	4b0f      	ldr	r3, [pc, #60]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a0e      	ldr	r2, [pc, #56]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 80061e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061e6:	f7fb fadf 	bl	80017a8 <HAL_GetTick>
 80061ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061ec:	e008      	b.n	8006200 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061ee:	f7fb fadb 	bl	80017a8 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e006      	b.n	800620e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <RCCEx_PLL2_Config+0x15c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	58024400 	.word	0x58024400
 800621c:	ffff0007 	.word	0xffff0007

08006220 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800622e:	4b53      	ldr	r3, [pc, #332]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d101      	bne.n	800623e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e099      	b.n	8006372 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800623e:	4b4f      	ldr	r3, [pc, #316]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a4e      	ldr	r2, [pc, #312]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800624a:	f7fb faad 	bl	80017a8 <HAL_GetTick>
 800624e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006250:	e008      	b.n	8006264 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006252:	f7fb faa9 	bl	80017a8 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d901      	bls.n	8006264 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e086      	b.n	8006372 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006264:	4b45      	ldr	r3, [pc, #276]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f0      	bne.n	8006252 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006270:	4b42      	ldr	r3, [pc, #264]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	051b      	lsls	r3, r3, #20
 800627e:	493f      	ldr	r1, [pc, #252]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006280:	4313      	orrs	r3, r2
 8006282:	628b      	str	r3, [r1, #40]	@ 0x28
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	3b01      	subs	r3, #1
 800628a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	3b01      	subs	r3, #1
 8006294:	025b      	lsls	r3, r3, #9
 8006296:	b29b      	uxth	r3, r3
 8006298:	431a      	orrs	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	3b01      	subs	r3, #1
 80062a0:	041b      	lsls	r3, r3, #16
 80062a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	061b      	lsls	r3, r3, #24
 80062b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062b4:	4931      	ldr	r1, [pc, #196]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062ba:	4b30      	ldr	r3, [pc, #192]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	492d      	ldr	r1, [pc, #180]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062cc:	4b2b      	ldr	r3, [pc, #172]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	4928      	ldr	r1, [pc, #160]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062de:	4b27      	ldr	r3, [pc, #156]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 80062e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e2:	4a26      	ldr	r2, [pc, #152]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 80062e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062ea:	4b24      	ldr	r3, [pc, #144]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 80062ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ee:	4b24      	ldr	r3, [pc, #144]	@ (8006380 <RCCEx_PLL3_Config+0x160>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	69d2      	ldr	r2, [r2, #28]
 80062f6:	00d2      	lsls	r2, r2, #3
 80062f8:	4920      	ldr	r1, [pc, #128]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80062fe:	4b1f      	ldr	r3, [pc, #124]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006302:	4a1e      	ldr	r2, [pc, #120]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d106      	bne.n	800631e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006310:	4b1a      	ldr	r3, [pc, #104]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006314:	4a19      	ldr	r2, [pc, #100]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006316:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800631a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800631c:	e00f      	b.n	800633e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d106      	bne.n	8006332 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006324:	4b15      	ldr	r3, [pc, #84]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	4a14      	ldr	r2, [pc, #80]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 800632a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800632e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006330:	e005      	b.n	800633e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006332:	4b12      	ldr	r3, [pc, #72]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006336:	4a11      	ldr	r2, [pc, #68]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800633c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800633e:	4b0f      	ldr	r3, [pc, #60]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a0e      	ldr	r2, [pc, #56]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634a:	f7fb fa2d 	bl	80017a8 <HAL_GetTick>
 800634e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006350:	e008      	b.n	8006364 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006352:	f7fb fa29 	bl	80017a8 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e006      	b.n	8006372 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006364:	4b05      	ldr	r3, [pc, #20]	@ (800637c <RCCEx_PLL3_Config+0x15c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0f0      	beq.n	8006352 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	58024400 	.word	0x58024400
 8006380:	ffff0007 	.word	0xffff0007

08006384 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e10f      	b.n	80065b6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a87      	ldr	r2, [pc, #540]	@ (80065c0 <HAL_SPI_Init+0x23c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00f      	beq.n	80063c6 <HAL_SPI_Init+0x42>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a86      	ldr	r2, [pc, #536]	@ (80065c4 <HAL_SPI_Init+0x240>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00a      	beq.n	80063c6 <HAL_SPI_Init+0x42>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a84      	ldr	r2, [pc, #528]	@ (80065c8 <HAL_SPI_Init+0x244>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d005      	beq.n	80063c6 <HAL_SPI_Init+0x42>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	2b0f      	cmp	r3, #15
 80063c0:	d901      	bls.n	80063c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e0f7      	b.n	80065b6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fbbc 	bl	8006b44 <SPI_GetPacketSize>
 80063cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a7b      	ldr	r2, [pc, #492]	@ (80065c0 <HAL_SPI_Init+0x23c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00c      	beq.n	80063f2 <HAL_SPI_Init+0x6e>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a79      	ldr	r2, [pc, #484]	@ (80065c4 <HAL_SPI_Init+0x240>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d007      	beq.n	80063f2 <HAL_SPI_Init+0x6e>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a78      	ldr	r2, [pc, #480]	@ (80065c8 <HAL_SPI_Init+0x244>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d002      	beq.n	80063f2 <HAL_SPI_Init+0x6e>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d811      	bhi.n	8006416 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80063f6:	4a72      	ldr	r2, [pc, #456]	@ (80065c0 <HAL_SPI_Init+0x23c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d009      	beq.n	8006410 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a70      	ldr	r2, [pc, #448]	@ (80065c4 <HAL_SPI_Init+0x240>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d004      	beq.n	8006410 <HAL_SPI_Init+0x8c>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a6f      	ldr	r2, [pc, #444]	@ (80065c8 <HAL_SPI_Init+0x244>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d104      	bne.n	800641a <HAL_SPI_Init+0x96>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b10      	cmp	r3, #16
 8006414:	d901      	bls.n	800641a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e0cd      	b.n	80065b6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fa fe86 	bl	8001140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0201 	bic.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006456:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006460:	d119      	bne.n	8006496 <HAL_SPI_Init+0x112>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800646a:	d103      	bne.n	8006474 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10c      	bne.n	8006496 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006484:	d107      	bne.n	8006496 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006494:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00f      	beq.n	80064c2 <HAL_SPI_Init+0x13e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b06      	cmp	r3, #6
 80064a8:	d90b      	bls.n	80064c2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e007      	b.n	80064d2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064da:	431a      	orrs	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e4:	ea42 0103 	orr.w	r1, r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006532:	ea42 0103 	orr.w	r1, r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d113      	bne.n	8006572 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800655c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006570:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0201 	bic.w	r2, r2, #1
 8006580:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40013000 	.word	0x40013000
 80065c4:	40003800 	.word	0x40003800
 80065c8:	40003c00 	.word	0x40003c00

080065cc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	4613      	mov	r3, r2
 80065da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3320      	adds	r3, #32
 80065e2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065e4:	f7fb f8e0 	bl	80017a8 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d001      	beq.n	80065fa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80065f6:	2302      	movs	r3, #2
 80065f8:	e1d1      	b.n	800699e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_SPI_Transmit+0x3a>
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e1c9      	b.n	800699e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <HAL_SPI_Transmit+0x4c>
 8006614:	2302      	movs	r3, #2
 8006616:	e1c2      	b.n	800699e <HAL_SPI_Transmit+0x3d2>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2203      	movs	r2, #3
 8006624:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	88fa      	ldrh	r2, [r7, #6]
 800663a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	88fa      	ldrh	r2, [r7, #6]
 8006642:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006670:	d108      	bne.n	8006684 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	e009      	b.n	8006698 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006696:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	4b96      	ldr	r3, [pc, #600]	@ (80068f8 <HAL_SPI_Transmit+0x32c>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	88f9      	ldrh	r1, [r7, #6]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	430b      	orrs	r3, r1
 80066aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066c4:	d107      	bne.n	80066d6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	2b0f      	cmp	r3, #15
 80066dc:	d947      	bls.n	800676e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80066de:	e03f      	b.n	8006760 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d114      	bne.n	8006718 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006716:	e023      	b.n	8006760 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006718:	f7fb f846 	bl	80017a8 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d803      	bhi.n	8006730 <HAL_SPI_Transmit+0x164>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d102      	bne.n	8006736 <HAL_SPI_Transmit+0x16a>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d114      	bne.n	8006760 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f936 	bl	80069a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006742:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e11e      	b.n	800699e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1b9      	bne.n	80066e0 <HAL_SPI_Transmit+0x114>
 800676c:	e0f1      	b.n	8006952 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	2b07      	cmp	r3, #7
 8006774:	f240 80e6 	bls.w	8006944 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006778:	e05d      	b.n	8006836 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b02      	cmp	r3, #2
 8006786:	d132      	bne.n	80067ee <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b01      	cmp	r3, #1
 8006792:	d918      	bls.n	80067c6 <HAL_SPI_Transmit+0x1fa>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d014      	beq.n	80067c6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6812      	ldr	r2, [r2, #0]
 80067a6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b02      	subs	r3, #2
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80067c4:	e037      	b.n	8006836 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ca:	881a      	ldrh	r2, [r3, #0]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067d4:	1c9a      	adds	r2, r3, #2
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80067ec:	e023      	b.n	8006836 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ee:	f7fa ffdb 	bl	80017a8 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d803      	bhi.n	8006806 <HAL_SPI_Transmit+0x23a>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006804:	d102      	bne.n	800680c <HAL_SPI_Transmit+0x240>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d114      	bne.n	8006836 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f8cb 	bl	80069a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006818:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e0b3      	b.n	800699e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d19b      	bne.n	800677a <HAL_SPI_Transmit+0x1ae>
 8006842:	e086      	b.n	8006952 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b02      	cmp	r3, #2
 8006850:	d154      	bne.n	80068fc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b03      	cmp	r3, #3
 800685c:	d918      	bls.n	8006890 <HAL_SPI_Transmit+0x2c4>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006862:	2b40      	cmp	r3, #64	@ 0x40
 8006864:	d914      	bls.n	8006890 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6812      	ldr	r2, [r2, #0]
 8006870:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006876:	1d1a      	adds	r2, r3, #4
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b04      	subs	r3, #4
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800688e:	e059      	b.n	8006944 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006896:	b29b      	uxth	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	d917      	bls.n	80068cc <HAL_SPI_Transmit+0x300>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d013      	beq.n	80068cc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068a8:	881a      	ldrh	r2, [r3, #0]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b2:	1c9a      	adds	r2, r3, #2
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b02      	subs	r3, #2
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80068ca:	e03b      	b.n	8006944 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3320      	adds	r3, #32
 80068d6:	7812      	ldrb	r2, [r2, #0]
 80068d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80068f6:	e025      	b.n	8006944 <HAL_SPI_Transmit+0x378>
 80068f8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068fc:	f7fa ff54 	bl	80017a8 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d803      	bhi.n	8006914 <HAL_SPI_Transmit+0x348>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d102      	bne.n	800691a <HAL_SPI_Transmit+0x34e>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d114      	bne.n	8006944 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f844 	bl	80069a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006926:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e02c      	b.n	800699e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800694a:	b29b      	uxth	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	f47f af79 	bne.w	8006844 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2200      	movs	r2, #0
 800695a:	2108      	movs	r1, #8
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f8c3 	bl	8006ae8 <SPI_WaitOnFlagUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800696e:	f043 0220 	orr.w	r2, r3, #32
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 f815 	bl	80069a8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800699c:	2300      	movs	r3, #0
  }
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop

080069a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0208 	orr.w	r2, r2, #8
 80069c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0210 	orr.w	r2, r2, #16
 80069d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0201 	bic.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6919      	ldr	r1, [r3, #16]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4b3c      	ldr	r3, [pc, #240]	@ (8006ae4 <SPI_CloseTransfer+0x13c>)
 80069f4:	400b      	ands	r3, r1
 80069f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006a06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d014      	beq.n	8006a3e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00f      	beq.n	8006a3e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0220 	orr.w	r2, r2, #32
 8006a3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d014      	beq.n	8006a74 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00f      	beq.n	8006a74 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a5a:	f043 0204 	orr.w	r2, r3, #4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00f      	beq.n	8006a9e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a84:	f043 0201 	orr.w	r2, r3, #1
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699a      	ldr	r2, [r3, #24]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00f      	beq.n	8006ac8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aae:	f043 0208 	orr.w	r2, r3, #8
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	fffffc90 	.word	0xfffffc90

08006ae8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	4613      	mov	r3, r2
 8006af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006af8:	e010      	b.n	8006b1c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006afa:	f7fa fe55 	bl	80017a8 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d803      	bhi.n	8006b12 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	d102      	bne.n	8006b18 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e00f      	b.n	8006b3c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	4013      	ands	r3, r2
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	bf0c      	ite	eq
 8006b2c:	2301      	moveq	r3, #1
 8006b2e:	2300      	movne	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d0df      	beq.n	8006afa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b50:	095b      	lsrs	r3, r3, #5
 8006b52:	3301      	adds	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	3307      	adds	r3, #7
 8006b62:	08db      	lsrs	r3, r3, #3
 8006b64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e042      	b.n	8006c12 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fa fb6c 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2224      	movs	r2, #36	@ 0x24
 8006ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fa45 	bl	8008054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fcda 	bl	8007584 <UART_SetConfig>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e01b      	b.n	8006c12 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006be8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0201 	orr.w	r2, r2, #1
 8006c08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fac4 	bl	8008198 <UART_CheckIdleState>
 8006c10:	4603      	mov	r3, r0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b08a      	sub	sp, #40	@ 0x28
 8006c1e:	af02      	add	r7, sp, #8
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	603b      	str	r3, [r7, #0]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	d17b      	bne.n	8006d2c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <HAL_UART_Transmit+0x26>
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e074      	b.n	8006d2e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2221      	movs	r2, #33	@ 0x21
 8006c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c54:	f7fa fda8 	bl	80017a8 <HAL_GetTick>
 8006c58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	88fa      	ldrh	r2, [r7, #6]
 8006c5e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	88fa      	ldrh	r2, [r7, #6]
 8006c66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c72:	d108      	bne.n	8006c86 <HAL_UART_Transmit+0x6c>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	e003      	b.n	8006c8e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c8e:	e030      	b.n	8006cf2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2200      	movs	r2, #0
 8006c98:	2180      	movs	r1, #128	@ 0x80
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f001 fb26 	bl	80082ec <UART_WaitOnFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e03d      	b.n	8006d2e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10b      	bne.n	8006cd0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	3302      	adds	r3, #2
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	e007      	b.n	8006ce0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	781a      	ldrb	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1c8      	bne.n	8006c90 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2200      	movs	r2, #0
 8006d06:	2140      	movs	r1, #64	@ 0x40
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f001 faef 	bl	80082ec <UART_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e006      	b.n	8006d2e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e000      	b.n	8006d2e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d2c:	2302      	movs	r3, #2
  }
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	@ 0x28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d137      	bne.n	8006dc0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_UART_Receive_IT+0x24>
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e030      	b.n	8006dc2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <HAL_UART_Receive_IT+0x94>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d01f      	beq.n	8006db0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d018      	beq.n	8006db0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	623b      	str	r3, [r7, #32]
 8006d9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	69f9      	ldr	r1, [r7, #28]
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e6      	bne.n	8006d7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006db0:	88fb      	ldrh	r3, [r7, #6]
 8006db2:	461a      	mov	r2, r3
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f001 fb06 	bl	80083c8 <UART_Start_Receive_IT>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	e000      	b.n	8006dc2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3728      	adds	r7, #40	@ 0x28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	58000c00 	.word	0x58000c00

08006dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b0ba      	sub	sp, #232	@ 0xe8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006df6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006dfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006dfe:	4013      	ands	r3, r2
 8006e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d11b      	bne.n	8006e44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d015      	beq.n	8006e44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d009      	beq.n	8006e44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8377 	beq.w	8007528 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
      }
      return;
 8006e42:	e371      	b.n	8007528 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8123 	beq.w	8007094 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e52:	4b8d      	ldr	r3, [pc, #564]	@ (8007088 <HAL_UART_IRQHandler+0x2b8>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800708c <HAL_UART_IRQHandler+0x2bc>)
 8006e60:	4013      	ands	r3, r2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8116 	beq.w	8007094 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d011      	beq.n	8006e98 <HAL_UART_IRQHandler+0xc8>
 8006e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2201      	movs	r2, #1
 8006e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e8e:	f043 0201 	orr.w	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d011      	beq.n	8006ec8 <HAL_UART_IRQHandler+0xf8>
 8006ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ebe:	f043 0204 	orr.w	r2, r3, #4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d011      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x128>
 8006ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eee:	f043 0202 	orr.w	r2, r3, #2
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d017      	beq.n	8006f34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f08:	f003 0320 	and.w	r3, r3, #32
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f14:	4b5c      	ldr	r3, [pc, #368]	@ (8007088 <HAL_UART_IRQHandler+0x2b8>)
 8006f16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00b      	beq.n	8006f34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2208      	movs	r2, #8
 8006f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f2a:	f043 0208 	orr.w	r2, r3, #8
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <HAL_UART_IRQHandler+0x196>
 8006f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00c      	beq.n	8006f66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 82dd 	beq.w	800752c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d013      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d105      	bne.n	8006f96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fba:	2b40      	cmp	r3, #64	@ 0x40
 8006fbc:	d005      	beq.n	8006fca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d054      	beq.n	8007074 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 fb1e 	bl	800860c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fda:	2b40      	cmp	r3, #64	@ 0x40
 8006fdc:	d146      	bne.n	800706c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3308      	adds	r3, #8
 8007006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800700a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800700e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1d9      	bne.n	8006fde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007030:	2b00      	cmp	r3, #0
 8007032:	d017      	beq.n	8007064 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800703a:	4a15      	ldr	r2, [pc, #84]	@ (8007090 <HAL_UART_IRQHandler+0x2c0>)
 800703c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007044:	4618      	mov	r0, r3
 8007046:	f7fb f819 	bl	800207c <HAL_DMA_Abort_IT>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d019      	beq.n	8007084 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800705e:	4610      	mov	r0, r2
 8007060:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007062:	e00f      	b.n	8007084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa77 	bl	8007558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706a:	e00b      	b.n	8007084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fa73 	bl	8007558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007072:	e007      	b.n	8007084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fa6f 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007082:	e253      	b.n	800752c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007084:	bf00      	nop
    return;
 8007086:	e251      	b.n	800752c <HAL_UART_IRQHandler+0x75c>
 8007088:	10000001 	.word	0x10000001
 800708c:	04000120 	.word	0x04000120
 8007090:	080086d9 	.word	0x080086d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007098:	2b01      	cmp	r3, #1
 800709a:	f040 81e7 	bne.w	800746c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 81e0 	beq.w	800746c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 81d9 	beq.w	800746c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2210      	movs	r2, #16
 80070c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070cc:	2b40      	cmp	r3, #64	@ 0x40
 80070ce:	f040 8151 	bne.w	8007374 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a96      	ldr	r2, [pc, #600]	@ (8007334 <HAL_UART_IRQHandler+0x564>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d068      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a93      	ldr	r2, [pc, #588]	@ (8007338 <HAL_UART_IRQHandler+0x568>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d061      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a91      	ldr	r2, [pc, #580]	@ (800733c <HAL_UART_IRQHandler+0x56c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d05a      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a8e      	ldr	r2, [pc, #568]	@ (8007340 <HAL_UART_IRQHandler+0x570>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d053      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a8c      	ldr	r2, [pc, #560]	@ (8007344 <HAL_UART_IRQHandler+0x574>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d04c      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a89      	ldr	r2, [pc, #548]	@ (8007348 <HAL_UART_IRQHandler+0x578>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d045      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a87      	ldr	r2, [pc, #540]	@ (800734c <HAL_UART_IRQHandler+0x57c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d03e      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a84      	ldr	r2, [pc, #528]	@ (8007350 <HAL_UART_IRQHandler+0x580>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d037      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a82      	ldr	r2, [pc, #520]	@ (8007354 <HAL_UART_IRQHandler+0x584>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d030      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a7f      	ldr	r2, [pc, #508]	@ (8007358 <HAL_UART_IRQHandler+0x588>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d029      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a7d      	ldr	r2, [pc, #500]	@ (800735c <HAL_UART_IRQHandler+0x58c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d022      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a7a      	ldr	r2, [pc, #488]	@ (8007360 <HAL_UART_IRQHandler+0x590>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01b      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a78      	ldr	r2, [pc, #480]	@ (8007364 <HAL_UART_IRQHandler+0x594>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d014      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a75      	ldr	r2, [pc, #468]	@ (8007368 <HAL_UART_IRQHandler+0x598>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00d      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a73      	ldr	r2, [pc, #460]	@ (800736c <HAL_UART_IRQHandler+0x59c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d006      	beq.n	80071b2 <HAL_UART_IRQHandler+0x3e2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a70      	ldr	r2, [pc, #448]	@ (8007370 <HAL_UART_IRQHandler+0x5a0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d106      	bne.n	80071c0 <HAL_UART_IRQHandler+0x3f0>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	e005      	b.n	80071cc <HAL_UART_IRQHandler+0x3fc>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 81ab 	beq.w	8007530 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071e4:	429a      	cmp	r2, r3
 80071e6:	f080 81a3 	bcs.w	8007530 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007200:	f000 8087 	beq.w	8007312 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007218:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800721c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800722e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007232:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800723a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1da      	bne.n	8007204 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3308      	adds	r3, #8
 8007254:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800725e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3308      	adds	r3, #8
 800726e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007272:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007276:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800727a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e1      	bne.n	800724e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3308      	adds	r3, #8
 8007290:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800729a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800729c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3308      	adds	r3, #8
 80072aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e3      	bne.n	800728a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072e0:	f023 0310 	bic.w	r3, r3, #16
 80072e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e4      	bne.n	80072d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800730c:	4618      	mov	r0, r3
 800730e:	f7fa fb97 	bl	8001a40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2202      	movs	r2, #2
 8007316:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007324:	b29b      	uxth	r3, r3
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	b29b      	uxth	r3, r3
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f91d 	bl	800756c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007332:	e0fd      	b.n	8007530 <HAL_UART_IRQHandler+0x760>
 8007334:	40020010 	.word	0x40020010
 8007338:	40020028 	.word	0x40020028
 800733c:	40020040 	.word	0x40020040
 8007340:	40020058 	.word	0x40020058
 8007344:	40020070 	.word	0x40020070
 8007348:	40020088 	.word	0x40020088
 800734c:	400200a0 	.word	0x400200a0
 8007350:	400200b8 	.word	0x400200b8
 8007354:	40020410 	.word	0x40020410
 8007358:	40020428 	.word	0x40020428
 800735c:	40020440 	.word	0x40020440
 8007360:	40020458 	.word	0x40020458
 8007364:	40020470 	.word	0x40020470
 8007368:	40020488 	.word	0x40020488
 800736c:	400204a0 	.word	0x400204a0
 8007370:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007380:	b29b      	uxth	r3, r3
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80cf 	beq.w	8007534 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007396:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80ca 	beq.w	8007534 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80073c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e4      	bne.n	80073a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3308      	adds	r3, #8
 80073dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	623b      	str	r3, [r7, #32]
   return(result);
 80073e6:	6a3a      	ldr	r2, [r7, #32]
 80073e8:	4b55      	ldr	r3, [pc, #340]	@ (8007540 <HAL_UART_IRQHandler+0x770>)
 80073ea:	4013      	ands	r3, r2
 80073ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3308      	adds	r3, #8
 80073f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80073fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80073fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e3      	bne.n	80073d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0310 	bic.w	r3, r3, #16
 8007436:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	69b9      	ldr	r1, [r7, #24]
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	617b      	str	r3, [r7, #20]
   return(result);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e4      	bne.n	8007422 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800745e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f881 	bl	800756c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800746a:	e063      	b.n	8007534 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800746c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007470:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00e      	beq.n	8007496 <HAL_UART_IRQHandler+0x6c6>
 8007478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800747c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d008      	beq.n	8007496 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800748c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fe80 	bl	8009194 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007494:	e051      	b.n	800753a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d014      	beq.n	80074cc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d105      	bne.n	80074ba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80074ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d008      	beq.n	80074cc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d03a      	beq.n	8007538 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
    }
    return;
 80074ca:	e035      	b.n	8007538 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d009      	beq.n	80074ec <HAL_UART_IRQHandler+0x71c>
 80074d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 f90d 	bl	8008704 <UART_EndTransmit_IT>
    return;
 80074ea:	e026      	b.n	800753a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80074ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d009      	beq.n	800750c <HAL_UART_IRQHandler+0x73c>
 80074f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 fe59 	bl	80091bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800750a:	e016      	b.n	800753a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800750c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d010      	beq.n	800753a <HAL_UART_IRQHandler+0x76a>
 8007518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800751c:	2b00      	cmp	r3, #0
 800751e:	da0c      	bge.n	800753a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fe41 	bl	80091a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007526:	e008      	b.n	800753a <HAL_UART_IRQHandler+0x76a>
      return;
 8007528:	bf00      	nop
 800752a:	e006      	b.n	800753a <HAL_UART_IRQHandler+0x76a>
    return;
 800752c:	bf00      	nop
 800752e:	e004      	b.n	800753a <HAL_UART_IRQHandler+0x76a>
      return;
 8007530:	bf00      	nop
 8007532:	e002      	b.n	800753a <HAL_UART_IRQHandler+0x76a>
      return;
 8007534:	bf00      	nop
 8007536:	e000      	b.n	800753a <HAL_UART_IRQHandler+0x76a>
    return;
 8007538:	bf00      	nop
  }
}
 800753a:	37e8      	adds	r7, #232	@ 0xe8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	effffffe 	.word	0xeffffffe

08007544 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007588:	b092      	sub	sp, #72	@ 0x48
 800758a:	af00      	add	r7, sp, #0
 800758c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	431a      	orrs	r2, r3
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4bbe      	ldr	r3, [pc, #760]	@ (80078ac <UART_SetConfig+0x328>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	6812      	ldr	r2, [r2, #0]
 80075ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80075bc:	430b      	orrs	r3, r1
 80075be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4ab3      	ldr	r2, [pc, #716]	@ (80078b0 <UART_SetConfig+0x32c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d004      	beq.n	80075f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075ec:	4313      	orrs	r3, r2
 80075ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	4baf      	ldr	r3, [pc, #700]	@ (80078b4 <UART_SetConfig+0x330>)
 80075f8:	4013      	ands	r3, r2
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	6812      	ldr	r2, [r2, #0]
 80075fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007600:	430b      	orrs	r3, r1
 8007602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	f023 010f 	bic.w	r1, r3, #15
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4aa6      	ldr	r2, [pc, #664]	@ (80078b8 <UART_SetConfig+0x334>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d177      	bne.n	8007714 <UART_SetConfig+0x190>
 8007624:	4ba5      	ldr	r3, [pc, #660]	@ (80078bc <UART_SetConfig+0x338>)
 8007626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007628:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800762c:	2b28      	cmp	r3, #40	@ 0x28
 800762e:	d86d      	bhi.n	800770c <UART_SetConfig+0x188>
 8007630:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <UART_SetConfig+0xb4>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	080076dd 	.word	0x080076dd
 800763c:	0800770d 	.word	0x0800770d
 8007640:	0800770d 	.word	0x0800770d
 8007644:	0800770d 	.word	0x0800770d
 8007648:	0800770d 	.word	0x0800770d
 800764c:	0800770d 	.word	0x0800770d
 8007650:	0800770d 	.word	0x0800770d
 8007654:	0800770d 	.word	0x0800770d
 8007658:	080076e5 	.word	0x080076e5
 800765c:	0800770d 	.word	0x0800770d
 8007660:	0800770d 	.word	0x0800770d
 8007664:	0800770d 	.word	0x0800770d
 8007668:	0800770d 	.word	0x0800770d
 800766c:	0800770d 	.word	0x0800770d
 8007670:	0800770d 	.word	0x0800770d
 8007674:	0800770d 	.word	0x0800770d
 8007678:	080076ed 	.word	0x080076ed
 800767c:	0800770d 	.word	0x0800770d
 8007680:	0800770d 	.word	0x0800770d
 8007684:	0800770d 	.word	0x0800770d
 8007688:	0800770d 	.word	0x0800770d
 800768c:	0800770d 	.word	0x0800770d
 8007690:	0800770d 	.word	0x0800770d
 8007694:	0800770d 	.word	0x0800770d
 8007698:	080076f5 	.word	0x080076f5
 800769c:	0800770d 	.word	0x0800770d
 80076a0:	0800770d 	.word	0x0800770d
 80076a4:	0800770d 	.word	0x0800770d
 80076a8:	0800770d 	.word	0x0800770d
 80076ac:	0800770d 	.word	0x0800770d
 80076b0:	0800770d 	.word	0x0800770d
 80076b4:	0800770d 	.word	0x0800770d
 80076b8:	080076fd 	.word	0x080076fd
 80076bc:	0800770d 	.word	0x0800770d
 80076c0:	0800770d 	.word	0x0800770d
 80076c4:	0800770d 	.word	0x0800770d
 80076c8:	0800770d 	.word	0x0800770d
 80076cc:	0800770d 	.word	0x0800770d
 80076d0:	0800770d 	.word	0x0800770d
 80076d4:	0800770d 	.word	0x0800770d
 80076d8:	08007705 	.word	0x08007705
 80076dc:	2301      	movs	r3, #1
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e2:	e222      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80076e4:	2304      	movs	r3, #4
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ea:	e21e      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80076ec:	2308      	movs	r3, #8
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f2:	e21a      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80076f4:	2310      	movs	r3, #16
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e216      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80076fc:	2320      	movs	r3, #32
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e212      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007704:	2340      	movs	r3, #64	@ 0x40
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e20e      	b.n	8007b2a <UART_SetConfig+0x5a6>
 800770c:	2380      	movs	r3, #128	@ 0x80
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007712:	e20a      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a69      	ldr	r2, [pc, #420]	@ (80078c0 <UART_SetConfig+0x33c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d130      	bne.n	8007780 <UART_SetConfig+0x1fc>
 800771e:	4b67      	ldr	r3, [pc, #412]	@ (80078bc <UART_SetConfig+0x338>)
 8007720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	2b05      	cmp	r3, #5
 8007728:	d826      	bhi.n	8007778 <UART_SetConfig+0x1f4>
 800772a:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <UART_SetConfig+0x1ac>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007749 	.word	0x08007749
 8007734:	08007751 	.word	0x08007751
 8007738:	08007759 	.word	0x08007759
 800773c:	08007761 	.word	0x08007761
 8007740:	08007769 	.word	0x08007769
 8007744:	08007771 	.word	0x08007771
 8007748:	2300      	movs	r3, #0
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774e:	e1ec      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007750:	2304      	movs	r3, #4
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007756:	e1e8      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007758:	2308      	movs	r3, #8
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775e:	e1e4      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007760:	2310      	movs	r3, #16
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007766:	e1e0      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007768:	2320      	movs	r3, #32
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776e:	e1dc      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007770:	2340      	movs	r3, #64	@ 0x40
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007776:	e1d8      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007778:	2380      	movs	r3, #128	@ 0x80
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777e:	e1d4      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a4f      	ldr	r2, [pc, #316]	@ (80078c4 <UART_SetConfig+0x340>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d130      	bne.n	80077ec <UART_SetConfig+0x268>
 800778a:	4b4c      	ldr	r3, [pc, #304]	@ (80078bc <UART_SetConfig+0x338>)
 800778c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	2b05      	cmp	r3, #5
 8007794:	d826      	bhi.n	80077e4 <UART_SetConfig+0x260>
 8007796:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <UART_SetConfig+0x218>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077b5 	.word	0x080077b5
 80077a0:	080077bd 	.word	0x080077bd
 80077a4:	080077c5 	.word	0x080077c5
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077d5 	.word	0x080077d5
 80077b0:	080077dd 	.word	0x080077dd
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ba:	e1b6      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80077bc:	2304      	movs	r3, #4
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c2:	e1b2      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80077c4:	2308      	movs	r3, #8
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ca:	e1ae      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80077cc:	2310      	movs	r3, #16
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d2:	e1aa      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80077d4:	2320      	movs	r3, #32
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077da:	e1a6      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80077dc:	2340      	movs	r3, #64	@ 0x40
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e2:	e1a2      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80077e4:	2380      	movs	r3, #128	@ 0x80
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ea:	e19e      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a35      	ldr	r2, [pc, #212]	@ (80078c8 <UART_SetConfig+0x344>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d130      	bne.n	8007858 <UART_SetConfig+0x2d4>
 80077f6:	4b31      	ldr	r3, [pc, #196]	@ (80078bc <UART_SetConfig+0x338>)
 80077f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d826      	bhi.n	8007850 <UART_SetConfig+0x2cc>
 8007802:	a201      	add	r2, pc, #4	@ (adr r2, 8007808 <UART_SetConfig+0x284>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007821 	.word	0x08007821
 800780c:	08007829 	.word	0x08007829
 8007810:	08007831 	.word	0x08007831
 8007814:	08007839 	.word	0x08007839
 8007818:	08007841 	.word	0x08007841
 800781c:	08007849 	.word	0x08007849
 8007820:	2300      	movs	r3, #0
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e180      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007828:	2304      	movs	r3, #4
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e17c      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007830:	2308      	movs	r3, #8
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e178      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007838:	2310      	movs	r3, #16
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e174      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007840:	2320      	movs	r3, #32
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e170      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007848:	2340      	movs	r3, #64	@ 0x40
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e16c      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007850:	2380      	movs	r3, #128	@ 0x80
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e168      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a1b      	ldr	r2, [pc, #108]	@ (80078cc <UART_SetConfig+0x348>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d142      	bne.n	80078e8 <UART_SetConfig+0x364>
 8007862:	4b16      	ldr	r3, [pc, #88]	@ (80078bc <UART_SetConfig+0x338>)
 8007864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	2b05      	cmp	r3, #5
 800786c:	d838      	bhi.n	80078e0 <UART_SetConfig+0x35c>
 800786e:	a201      	add	r2, pc, #4	@ (adr r2, 8007874 <UART_SetConfig+0x2f0>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	0800788d 	.word	0x0800788d
 8007878:	08007895 	.word	0x08007895
 800787c:	0800789d 	.word	0x0800789d
 8007880:	080078a5 	.word	0x080078a5
 8007884:	080078d1 	.word	0x080078d1
 8007888:	080078d9 	.word	0x080078d9
 800788c:	2300      	movs	r3, #0
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e14a      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007894:	2304      	movs	r3, #4
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e146      	b.n	8007b2a <UART_SetConfig+0x5a6>
 800789c:	2308      	movs	r3, #8
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e142      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80078a4:	2310      	movs	r3, #16
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e13e      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80078ac:	cfff69f3 	.word	0xcfff69f3
 80078b0:	58000c00 	.word	0x58000c00
 80078b4:	11fff4ff 	.word	0x11fff4ff
 80078b8:	40011000 	.word	0x40011000
 80078bc:	58024400 	.word	0x58024400
 80078c0:	40004400 	.word	0x40004400
 80078c4:	40004800 	.word	0x40004800
 80078c8:	40004c00 	.word	0x40004c00
 80078cc:	40005000 	.word	0x40005000
 80078d0:	2320      	movs	r3, #32
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d6:	e128      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80078d8:	2340      	movs	r3, #64	@ 0x40
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078de:	e124      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80078e0:	2380      	movs	r3, #128	@ 0x80
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e120      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4acb      	ldr	r2, [pc, #812]	@ (8007c1c <UART_SetConfig+0x698>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d176      	bne.n	80079e0 <UART_SetConfig+0x45c>
 80078f2:	4bcb      	ldr	r3, [pc, #812]	@ (8007c20 <UART_SetConfig+0x69c>)
 80078f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078fa:	2b28      	cmp	r3, #40	@ 0x28
 80078fc:	d86c      	bhi.n	80079d8 <UART_SetConfig+0x454>
 80078fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007904 <UART_SetConfig+0x380>)
 8007900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007904:	080079a9 	.word	0x080079a9
 8007908:	080079d9 	.word	0x080079d9
 800790c:	080079d9 	.word	0x080079d9
 8007910:	080079d9 	.word	0x080079d9
 8007914:	080079d9 	.word	0x080079d9
 8007918:	080079d9 	.word	0x080079d9
 800791c:	080079d9 	.word	0x080079d9
 8007920:	080079d9 	.word	0x080079d9
 8007924:	080079b1 	.word	0x080079b1
 8007928:	080079d9 	.word	0x080079d9
 800792c:	080079d9 	.word	0x080079d9
 8007930:	080079d9 	.word	0x080079d9
 8007934:	080079d9 	.word	0x080079d9
 8007938:	080079d9 	.word	0x080079d9
 800793c:	080079d9 	.word	0x080079d9
 8007940:	080079d9 	.word	0x080079d9
 8007944:	080079b9 	.word	0x080079b9
 8007948:	080079d9 	.word	0x080079d9
 800794c:	080079d9 	.word	0x080079d9
 8007950:	080079d9 	.word	0x080079d9
 8007954:	080079d9 	.word	0x080079d9
 8007958:	080079d9 	.word	0x080079d9
 800795c:	080079d9 	.word	0x080079d9
 8007960:	080079d9 	.word	0x080079d9
 8007964:	080079c1 	.word	0x080079c1
 8007968:	080079d9 	.word	0x080079d9
 800796c:	080079d9 	.word	0x080079d9
 8007970:	080079d9 	.word	0x080079d9
 8007974:	080079d9 	.word	0x080079d9
 8007978:	080079d9 	.word	0x080079d9
 800797c:	080079d9 	.word	0x080079d9
 8007980:	080079d9 	.word	0x080079d9
 8007984:	080079c9 	.word	0x080079c9
 8007988:	080079d9 	.word	0x080079d9
 800798c:	080079d9 	.word	0x080079d9
 8007990:	080079d9 	.word	0x080079d9
 8007994:	080079d9 	.word	0x080079d9
 8007998:	080079d9 	.word	0x080079d9
 800799c:	080079d9 	.word	0x080079d9
 80079a0:	080079d9 	.word	0x080079d9
 80079a4:	080079d1 	.word	0x080079d1
 80079a8:	2301      	movs	r3, #1
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ae:	e0bc      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80079b0:	2304      	movs	r3, #4
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b6:	e0b8      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80079b8:	2308      	movs	r3, #8
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079be:	e0b4      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80079c0:	2310      	movs	r3, #16
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c6:	e0b0      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80079c8:	2320      	movs	r3, #32
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e0ac      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80079d0:	2340      	movs	r3, #64	@ 0x40
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e0a8      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80079d8:	2380      	movs	r3, #128	@ 0x80
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e0a4      	b.n	8007b2a <UART_SetConfig+0x5a6>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a8f      	ldr	r2, [pc, #572]	@ (8007c24 <UART_SetConfig+0x6a0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d130      	bne.n	8007a4c <UART_SetConfig+0x4c8>
 80079ea:	4b8d      	ldr	r3, [pc, #564]	@ (8007c20 <UART_SetConfig+0x69c>)
 80079ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d826      	bhi.n	8007a44 <UART_SetConfig+0x4c0>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <UART_SetConfig+0x478>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a15 	.word	0x08007a15
 8007a00:	08007a1d 	.word	0x08007a1d
 8007a04:	08007a25 	.word	0x08007a25
 8007a08:	08007a2d 	.word	0x08007a2d
 8007a0c:	08007a35 	.word	0x08007a35
 8007a10:	08007a3d 	.word	0x08007a3d
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1a:	e086      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a22:	e082      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007a24:	2308      	movs	r3, #8
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2a:	e07e      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e07a      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007a34:	2320      	movs	r3, #32
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	e076      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007a3c:	2340      	movs	r3, #64	@ 0x40
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a42:	e072      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007a44:	2380      	movs	r3, #128	@ 0x80
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4a:	e06e      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a75      	ldr	r2, [pc, #468]	@ (8007c28 <UART_SetConfig+0x6a4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d130      	bne.n	8007ab8 <UART_SetConfig+0x534>
 8007a56:	4b72      	ldr	r3, [pc, #456]	@ (8007c20 <UART_SetConfig+0x69c>)
 8007a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	2b05      	cmp	r3, #5
 8007a60:	d826      	bhi.n	8007ab0 <UART_SetConfig+0x52c>
 8007a62:	a201      	add	r2, pc, #4	@ (adr r2, 8007a68 <UART_SetConfig+0x4e4>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a81 	.word	0x08007a81
 8007a6c:	08007a89 	.word	0x08007a89
 8007a70:	08007a91 	.word	0x08007a91
 8007a74:	08007a99 	.word	0x08007a99
 8007a78:	08007aa1 	.word	0x08007aa1
 8007a7c:	08007aa9 	.word	0x08007aa9
 8007a80:	2300      	movs	r3, #0
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a86:	e050      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8e:	e04c      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007a90:	2308      	movs	r3, #8
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a96:	e048      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9e:	e044      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007aa0:	2320      	movs	r3, #32
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa6:	e040      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007aa8:	2340      	movs	r3, #64	@ 0x40
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aae:	e03c      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007ab0:	2380      	movs	r3, #128	@ 0x80
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab6:	e038      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a5b      	ldr	r2, [pc, #364]	@ (8007c2c <UART_SetConfig+0x6a8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d130      	bne.n	8007b24 <UART_SetConfig+0x5a0>
 8007ac2:	4b57      	ldr	r3, [pc, #348]	@ (8007c20 <UART_SetConfig+0x69c>)
 8007ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	d826      	bhi.n	8007b1c <UART_SetConfig+0x598>
 8007ace:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad4 <UART_SetConfig+0x550>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007aed 	.word	0x08007aed
 8007ad8:	08007af5 	.word	0x08007af5
 8007adc:	08007afd 	.word	0x08007afd
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b0d 	.word	0x08007b0d
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	2302      	movs	r3, #2
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af2:	e01a      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007af4:	2304      	movs	r3, #4
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e016      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007afc:	2308      	movs	r3, #8
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e012      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007b04:	2310      	movs	r3, #16
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e00e      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007b0c:	2320      	movs	r3, #32
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e00a      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007b14:	2340      	movs	r3, #64	@ 0x40
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1a:	e006      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007b1c:	2380      	movs	r3, #128	@ 0x80
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e002      	b.n	8007b2a <UART_SetConfig+0x5a6>
 8007b24:	2380      	movs	r3, #128	@ 0x80
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8007c2c <UART_SetConfig+0x6a8>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	f040 80f8 	bne.w	8007d26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	dc46      	bgt.n	8007bcc <UART_SetConfig+0x648>
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	f2c0 8082 	blt.w	8007c48 <UART_SetConfig+0x6c4>
 8007b44:	3b02      	subs	r3, #2
 8007b46:	2b1e      	cmp	r3, #30
 8007b48:	d87e      	bhi.n	8007c48 <UART_SetConfig+0x6c4>
 8007b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b50 <UART_SetConfig+0x5cc>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007bd3 	.word	0x08007bd3
 8007b54:	08007c49 	.word	0x08007c49
 8007b58:	08007bdb 	.word	0x08007bdb
 8007b5c:	08007c49 	.word	0x08007c49
 8007b60:	08007c49 	.word	0x08007c49
 8007b64:	08007c49 	.word	0x08007c49
 8007b68:	08007beb 	.word	0x08007beb
 8007b6c:	08007c49 	.word	0x08007c49
 8007b70:	08007c49 	.word	0x08007c49
 8007b74:	08007c49 	.word	0x08007c49
 8007b78:	08007c49 	.word	0x08007c49
 8007b7c:	08007c49 	.word	0x08007c49
 8007b80:	08007c49 	.word	0x08007c49
 8007b84:	08007c49 	.word	0x08007c49
 8007b88:	08007bfb 	.word	0x08007bfb
 8007b8c:	08007c49 	.word	0x08007c49
 8007b90:	08007c49 	.word	0x08007c49
 8007b94:	08007c49 	.word	0x08007c49
 8007b98:	08007c49 	.word	0x08007c49
 8007b9c:	08007c49 	.word	0x08007c49
 8007ba0:	08007c49 	.word	0x08007c49
 8007ba4:	08007c49 	.word	0x08007c49
 8007ba8:	08007c49 	.word	0x08007c49
 8007bac:	08007c49 	.word	0x08007c49
 8007bb0:	08007c49 	.word	0x08007c49
 8007bb4:	08007c49 	.word	0x08007c49
 8007bb8:	08007c49 	.word	0x08007c49
 8007bbc:	08007c49 	.word	0x08007c49
 8007bc0:	08007c49 	.word	0x08007c49
 8007bc4:	08007c49 	.word	0x08007c49
 8007bc8:	08007c3b 	.word	0x08007c3b
 8007bcc:	2b40      	cmp	r3, #64	@ 0x40
 8007bce:	d037      	beq.n	8007c40 <UART_SetConfig+0x6bc>
 8007bd0:	e03a      	b.n	8007c48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007bd2:	f7fd ffb5 	bl	8005b40 <HAL_RCCEx_GetD3PCLK1Freq>
 8007bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007bd8:	e03c      	b.n	8007c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fd ffc4 	bl	8005b6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007be8:	e034      	b.n	8007c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bea:	f107 0318 	add.w	r3, r7, #24
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe f910 	bl	8005e14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bf8:	e02c      	b.n	8007c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bfa:	4b09      	ldr	r3, [pc, #36]	@ (8007c20 <UART_SetConfig+0x69c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d016      	beq.n	8007c34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c06:	4b06      	ldr	r3, [pc, #24]	@ (8007c20 <UART_SetConfig+0x69c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	08db      	lsrs	r3, r3, #3
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	4a07      	ldr	r2, [pc, #28]	@ (8007c30 <UART_SetConfig+0x6ac>)
 8007c12:	fa22 f303 	lsr.w	r3, r2, r3
 8007c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c18:	e01c      	b.n	8007c54 <UART_SetConfig+0x6d0>
 8007c1a:	bf00      	nop
 8007c1c:	40011400 	.word	0x40011400
 8007c20:	58024400 	.word	0x58024400
 8007c24:	40007800 	.word	0x40007800
 8007c28:	40007c00 	.word	0x40007c00
 8007c2c:	58000c00 	.word	0x58000c00
 8007c30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007c34:	4b9d      	ldr	r3, [pc, #628]	@ (8007eac <UART_SetConfig+0x928>)
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c38:	e00c      	b.n	8007c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c3a:	4b9d      	ldr	r3, [pc, #628]	@ (8007eb0 <UART_SetConfig+0x92c>)
 8007c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c3e:	e009      	b.n	8007c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c46:	e005      	b.n	8007c54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 81de 	beq.w	8008018 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c60:	4a94      	ldr	r2, [pc, #592]	@ (8007eb4 <UART_SetConfig+0x930>)
 8007c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	4613      	mov	r3, r2
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	4413      	add	r3, r2
 8007c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d305      	bcc.n	8007c8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d903      	bls.n	8007c94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c92:	e1c1      	b.n	8008018 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c96:	2200      	movs	r2, #0
 8007c98:	60bb      	str	r3, [r7, #8]
 8007c9a:	60fa      	str	r2, [r7, #12]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca0:	4a84      	ldr	r2, [pc, #528]	@ (8007eb4 <UART_SetConfig+0x930>)
 8007ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2200      	movs	r2, #0
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cb6:	f7f8 fb7b 	bl	80003b0 <__aeabi_uldivmod>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	f04f 0200 	mov.w	r2, #0
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	020b      	lsls	r3, r1, #8
 8007ccc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cd0:	0202      	lsls	r2, r0, #8
 8007cd2:	6979      	ldr	r1, [r7, #20]
 8007cd4:	6849      	ldr	r1, [r1, #4]
 8007cd6:	0849      	lsrs	r1, r1, #1
 8007cd8:	2000      	movs	r0, #0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	4605      	mov	r5, r0
 8007cde:	eb12 0804 	adds.w	r8, r2, r4
 8007ce2:	eb43 0905 	adc.w	r9, r3, r5
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	469a      	mov	sl, r3
 8007cee:	4693      	mov	fp, r2
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	465b      	mov	r3, fp
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	f7f8 fb5a 	bl	80003b0 <__aeabi_uldivmod>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4613      	mov	r3, r2
 8007d02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d0a:	d308      	bcc.n	8007d1e <UART_SetConfig+0x79a>
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d12:	d204      	bcs.n	8007d1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d1a:	60da      	str	r2, [r3, #12]
 8007d1c:	e17c      	b.n	8008018 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d24:	e178      	b.n	8008018 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d2e:	f040 80c5 	bne.w	8007ebc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007d32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	dc48      	bgt.n	8007dcc <UART_SetConfig+0x848>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	db7b      	blt.n	8007e36 <UART_SetConfig+0x8b2>
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	d879      	bhi.n	8007e36 <UART_SetConfig+0x8b2>
 8007d42:	a201      	add	r2, pc, #4	@ (adr r2, 8007d48 <UART_SetConfig+0x7c4>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007dd3 	.word	0x08007dd3
 8007d4c:	08007ddb 	.word	0x08007ddb
 8007d50:	08007e37 	.word	0x08007e37
 8007d54:	08007e37 	.word	0x08007e37
 8007d58:	08007de3 	.word	0x08007de3
 8007d5c:	08007e37 	.word	0x08007e37
 8007d60:	08007e37 	.word	0x08007e37
 8007d64:	08007e37 	.word	0x08007e37
 8007d68:	08007df3 	.word	0x08007df3
 8007d6c:	08007e37 	.word	0x08007e37
 8007d70:	08007e37 	.word	0x08007e37
 8007d74:	08007e37 	.word	0x08007e37
 8007d78:	08007e37 	.word	0x08007e37
 8007d7c:	08007e37 	.word	0x08007e37
 8007d80:	08007e37 	.word	0x08007e37
 8007d84:	08007e37 	.word	0x08007e37
 8007d88:	08007e03 	.word	0x08007e03
 8007d8c:	08007e37 	.word	0x08007e37
 8007d90:	08007e37 	.word	0x08007e37
 8007d94:	08007e37 	.word	0x08007e37
 8007d98:	08007e37 	.word	0x08007e37
 8007d9c:	08007e37 	.word	0x08007e37
 8007da0:	08007e37 	.word	0x08007e37
 8007da4:	08007e37 	.word	0x08007e37
 8007da8:	08007e37 	.word	0x08007e37
 8007dac:	08007e37 	.word	0x08007e37
 8007db0:	08007e37 	.word	0x08007e37
 8007db4:	08007e37 	.word	0x08007e37
 8007db8:	08007e37 	.word	0x08007e37
 8007dbc:	08007e37 	.word	0x08007e37
 8007dc0:	08007e37 	.word	0x08007e37
 8007dc4:	08007e37 	.word	0x08007e37
 8007dc8:	08007e29 	.word	0x08007e29
 8007dcc:	2b40      	cmp	r3, #64	@ 0x40
 8007dce:	d02e      	beq.n	8007e2e <UART_SetConfig+0x8aa>
 8007dd0:	e031      	b.n	8007e36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dd2:	f7fc fc7f 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8007dd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dd8:	e033      	b.n	8007e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dda:	f7fc fc91 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8007dde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007de0:	e02f      	b.n	8007e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fd fec0 	bl	8005b6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df0:	e027      	b.n	8007e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007df2:	f107 0318 	add.w	r3, r7, #24
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe f80c 	bl	8005e14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e00:	e01f      	b.n	8007e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e02:	4b2d      	ldr	r3, [pc, #180]	@ (8007eb8 <UART_SetConfig+0x934>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d009      	beq.n	8007e22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8007eb8 <UART_SetConfig+0x934>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	08db      	lsrs	r3, r3, #3
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	4a24      	ldr	r2, [pc, #144]	@ (8007eac <UART_SetConfig+0x928>)
 8007e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e20:	e00f      	b.n	8007e42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007e22:	4b22      	ldr	r3, [pc, #136]	@ (8007eac <UART_SetConfig+0x928>)
 8007e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e26:	e00c      	b.n	8007e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e28:	4b21      	ldr	r3, [pc, #132]	@ (8007eb0 <UART_SetConfig+0x92c>)
 8007e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e2c:	e009      	b.n	8007e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e34:	e005      	b.n	8007e42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 80e7 	beq.w	8008018 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4e:	4a19      	ldr	r2, [pc, #100]	@ (8007eb4 <UART_SetConfig+0x930>)
 8007e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e54:	461a      	mov	r2, r3
 8007e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e5c:	005a      	lsls	r2, r3, #1
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	441a      	add	r2, r3
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e72:	2b0f      	cmp	r3, #15
 8007e74:	d916      	bls.n	8007ea4 <UART_SetConfig+0x920>
 8007e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e7c:	d212      	bcs.n	8007ea4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f023 030f 	bic.w	r3, r3, #15
 8007e86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8a:	085b      	lsrs	r3, r3, #1
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f003 0307 	and.w	r3, r3, #7
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e96:	4313      	orrs	r3, r2
 8007e98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ea0:	60da      	str	r2, [r3, #12]
 8007ea2:	e0b9      	b.n	8008018 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007eaa:	e0b5      	b.n	8008018 <UART_SetConfig+0xa94>
 8007eac:	03d09000 	.word	0x03d09000
 8007eb0:	003d0900 	.word	0x003d0900
 8007eb4:	0800a3c0 	.word	0x0800a3c0
 8007eb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ebc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	dc49      	bgt.n	8007f58 <UART_SetConfig+0x9d4>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	db7c      	blt.n	8007fc2 <UART_SetConfig+0xa3e>
 8007ec8:	2b20      	cmp	r3, #32
 8007eca:	d87a      	bhi.n	8007fc2 <UART_SetConfig+0xa3e>
 8007ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed4 <UART_SetConfig+0x950>)
 8007ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed2:	bf00      	nop
 8007ed4:	08007f5f 	.word	0x08007f5f
 8007ed8:	08007f67 	.word	0x08007f67
 8007edc:	08007fc3 	.word	0x08007fc3
 8007ee0:	08007fc3 	.word	0x08007fc3
 8007ee4:	08007f6f 	.word	0x08007f6f
 8007ee8:	08007fc3 	.word	0x08007fc3
 8007eec:	08007fc3 	.word	0x08007fc3
 8007ef0:	08007fc3 	.word	0x08007fc3
 8007ef4:	08007f7f 	.word	0x08007f7f
 8007ef8:	08007fc3 	.word	0x08007fc3
 8007efc:	08007fc3 	.word	0x08007fc3
 8007f00:	08007fc3 	.word	0x08007fc3
 8007f04:	08007fc3 	.word	0x08007fc3
 8007f08:	08007fc3 	.word	0x08007fc3
 8007f0c:	08007fc3 	.word	0x08007fc3
 8007f10:	08007fc3 	.word	0x08007fc3
 8007f14:	08007f8f 	.word	0x08007f8f
 8007f18:	08007fc3 	.word	0x08007fc3
 8007f1c:	08007fc3 	.word	0x08007fc3
 8007f20:	08007fc3 	.word	0x08007fc3
 8007f24:	08007fc3 	.word	0x08007fc3
 8007f28:	08007fc3 	.word	0x08007fc3
 8007f2c:	08007fc3 	.word	0x08007fc3
 8007f30:	08007fc3 	.word	0x08007fc3
 8007f34:	08007fc3 	.word	0x08007fc3
 8007f38:	08007fc3 	.word	0x08007fc3
 8007f3c:	08007fc3 	.word	0x08007fc3
 8007f40:	08007fc3 	.word	0x08007fc3
 8007f44:	08007fc3 	.word	0x08007fc3
 8007f48:	08007fc3 	.word	0x08007fc3
 8007f4c:	08007fc3 	.word	0x08007fc3
 8007f50:	08007fc3 	.word	0x08007fc3
 8007f54:	08007fb5 	.word	0x08007fb5
 8007f58:	2b40      	cmp	r3, #64	@ 0x40
 8007f5a:	d02e      	beq.n	8007fba <UART_SetConfig+0xa36>
 8007f5c:	e031      	b.n	8007fc2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f5e:	f7fc fbb9 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8007f62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f64:	e033      	b.n	8007fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f66:	f7fc fbcb 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8007f6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f6c:	e02f      	b.n	8007fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fd fdfa 	bl	8005b6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f7c:	e027      	b.n	8007fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f7e:	f107 0318 	add.w	r3, r7, #24
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fd ff46 	bl	8005e14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f8c:	e01f      	b.n	8007fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8008044 <UART_SetConfig+0xac0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d009      	beq.n	8007fae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8008044 <UART_SetConfig+0xac0>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	08db      	lsrs	r3, r3, #3
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	4a28      	ldr	r2, [pc, #160]	@ (8008048 <UART_SetConfig+0xac4>)
 8007fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8007faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fac:	e00f      	b.n	8007fce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007fae:	4b26      	ldr	r3, [pc, #152]	@ (8008048 <UART_SetConfig+0xac4>)
 8007fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb2:	e00c      	b.n	8007fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fb4:	4b25      	ldr	r3, [pc, #148]	@ (800804c <UART_SetConfig+0xac8>)
 8007fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb8:	e009      	b.n	8007fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc0:	e005      	b.n	8007fce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007fcc:	bf00      	nop
    }

    if (pclk != 0U)
 8007fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d021      	beq.n	8008018 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8008050 <UART_SetConfig+0xacc>)
 8007fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	441a      	add	r2, r3
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffa:	2b0f      	cmp	r3, #15
 8007ffc:	d909      	bls.n	8008012 <UART_SetConfig+0xa8e>
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008004:	d205      	bcs.n	8008012 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008008:	b29a      	uxth	r2, r3
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60da      	str	r2, [r3, #12]
 8008010:	e002      	b.n	8008018 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	2201      	movs	r2, #1
 800801c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2201      	movs	r2, #1
 8008024:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2200      	movs	r2, #0
 800802c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2200      	movs	r2, #0
 8008032:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008034:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008038:	4618      	mov	r0, r3
 800803a:	3748      	adds	r7, #72	@ 0x48
 800803c:	46bd      	mov	sp, r7
 800803e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008042:	bf00      	nop
 8008044:	58024400 	.word	0x58024400
 8008048:	03d09000 	.word	0x03d09000
 800804c:	003d0900 	.word	0x003d0900
 8008050:	0800a3c0 	.word	0x0800a3c0

08008054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e8:	f003 0310 	and.w	r3, r3, #16
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01a      	beq.n	800816a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800814e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008152:	d10a      	bne.n	800816a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	605a      	str	r2, [r3, #4]
  }
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b098      	sub	sp, #96	@ 0x60
 800819c:	af02      	add	r7, sp, #8
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081a8:	f7f9 fafe 	bl	80017a8 <HAL_GetTick>
 80081ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d12f      	bne.n	800821c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081c4:	2200      	movs	r2, #0
 80081c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f88e 	bl	80082ec <UART_WaitOnFlagUntilTimeout>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d022      	beq.n	800821c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081de:	e853 3f00 	ldrex	r3, [r3]
 80081e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80081f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e6      	bne.n	80081d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2220      	movs	r2, #32
 800820c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e063      	b.n	80082e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b04      	cmp	r3, #4
 8008228:	d149      	bne.n	80082be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800822a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008232:	2200      	movs	r2, #0
 8008234:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f857 	bl	80082ec <UART_WaitOnFlagUntilTimeout>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d03c      	beq.n	80082be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	623b      	str	r3, [r7, #32]
   return(result);
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008262:	633b      	str	r3, [r7, #48]	@ 0x30
 8008264:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e6      	bne.n	8008244 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	60fb      	str	r3, [r7, #12]
   return(result);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f023 0301 	bic.w	r3, r3, #1
 800828c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008296:	61fa      	str	r2, [r7, #28]
 8008298:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	69b9      	ldr	r1, [r7, #24]
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	617b      	str	r3, [r7, #20]
   return(result);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e012      	b.n	80082e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3758      	adds	r7, #88	@ 0x58
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	4613      	mov	r3, r2
 80082fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082fc:	e04f      	b.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008304:	d04b      	beq.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008306:	f7f9 fa4f 	bl	80017a8 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	429a      	cmp	r2, r3
 8008314:	d302      	bcc.n	800831c <UART_WaitOnFlagUntilTimeout+0x30>
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e04e      	b.n	80083be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	d037      	beq.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2b80      	cmp	r3, #128	@ 0x80
 8008332:	d034      	beq.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b40      	cmp	r3, #64	@ 0x40
 8008338:	d031      	beq.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	f003 0308 	and.w	r3, r3, #8
 8008344:	2b08      	cmp	r3, #8
 8008346:	d110      	bne.n	800836a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2208      	movs	r2, #8
 800834e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f95b 	bl	800860c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2208      	movs	r2, #8
 800835a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e029      	b.n	80083be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008378:	d111      	bne.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f941 	bl	800860c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e00f      	b.n	80083be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69da      	ldr	r2, [r3, #28]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4013      	ands	r3, r2
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	bf0c      	ite	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	2300      	movne	r3, #0
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d0a0      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
	...

080083c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b0a3      	sub	sp, #140	@ 0x8c
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	4613      	mov	r3, r2
 80083d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	88fa      	ldrh	r2, [r7, #6]
 80083e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	88fa      	ldrh	r2, [r7, #6]
 80083e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083fa:	d10e      	bne.n	800841a <UART_Start_Receive_IT+0x52>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d105      	bne.n	8008410 <UART_Start_Receive_IT+0x48>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800840a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800840e:	e02d      	b.n	800846c <UART_Start_Receive_IT+0xa4>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	22ff      	movs	r2, #255	@ 0xff
 8008414:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008418:	e028      	b.n	800846c <UART_Start_Receive_IT+0xa4>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10d      	bne.n	800843e <UART_Start_Receive_IT+0x76>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d104      	bne.n	8008434 <UART_Start_Receive_IT+0x6c>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	22ff      	movs	r2, #255	@ 0xff
 800842e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008432:	e01b      	b.n	800846c <UART_Start_Receive_IT+0xa4>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	227f      	movs	r2, #127	@ 0x7f
 8008438:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800843c:	e016      	b.n	800846c <UART_Start_Receive_IT+0xa4>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008446:	d10d      	bne.n	8008464 <UART_Start_Receive_IT+0x9c>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <UART_Start_Receive_IT+0x92>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	227f      	movs	r2, #127	@ 0x7f
 8008454:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008458:	e008      	b.n	800846c <UART_Start_Receive_IT+0xa4>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	223f      	movs	r2, #63	@ 0x3f
 800845e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008462:	e003      	b.n	800846c <UART_Start_Receive_IT+0xa4>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2222      	movs	r2, #34	@ 0x22
 8008478:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800848c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800848e:	f043 0301 	orr.w	r3, r3, #1
 8008492:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80084a0:	673a      	str	r2, [r7, #112]	@ 0x70
 80084a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80084a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80084ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e3      	bne.n	800847c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084bc:	d14f      	bne.n	800855e <UART_Start_Receive_IT+0x196>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80084c4:	88fa      	ldrh	r2, [r7, #6]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d349      	bcc.n	800855e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084d2:	d107      	bne.n	80084e4 <UART_Start_Receive_IT+0x11c>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d103      	bne.n	80084e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4a47      	ldr	r2, [pc, #284]	@ (80085fc <UART_Start_Receive_IT+0x234>)
 80084e0:	675a      	str	r2, [r3, #116]	@ 0x74
 80084e2:	e002      	b.n	80084ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4a46      	ldr	r2, [pc, #280]	@ (8008600 <UART_Start_Receive_IT+0x238>)
 80084e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d01a      	beq.n	8008528 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008506:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008514:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008516:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800851a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e4      	bne.n	80084f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3308      	adds	r3, #8
 800852e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800853e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3308      	adds	r3, #8
 8008546:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008548:	64ba      	str	r2, [r7, #72]	@ 0x48
 800854a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800854e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e5      	bne.n	8008528 <UART_Start_Receive_IT+0x160>
 800855c:	e046      	b.n	80085ec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008566:	d107      	bne.n	8008578 <UART_Start_Receive_IT+0x1b0>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d103      	bne.n	8008578 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4a24      	ldr	r2, [pc, #144]	@ (8008604 <UART_Start_Receive_IT+0x23c>)
 8008574:	675a      	str	r2, [r3, #116]	@ 0x74
 8008576:	e002      	b.n	800857e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4a23      	ldr	r2, [pc, #140]	@ (8008608 <UART_Start_Receive_IT+0x240>)
 800857c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d019      	beq.n	80085ba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800859a:	677b      	str	r3, [r7, #116]	@ 0x74
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	461a      	mov	r2, r3
 80085a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80085aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80085b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e6      	bne.n	8008586 <UART_Start_Receive_IT+0x1be>
 80085b8:	e018      	b.n	80085ec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	613b      	str	r3, [r7, #16]
   return(result);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f043 0320 	orr.w	r3, r3, #32
 80085ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085d8:	623b      	str	r3, [r7, #32]
 80085da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085dc:	69f9      	ldr	r1, [r7, #28]
 80085de:	6a3a      	ldr	r2, [r7, #32]
 80085e0:	e841 2300 	strex	r3, r2, [r1]
 80085e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e6      	bne.n	80085ba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	378c      	adds	r7, #140	@ 0x8c
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	08008e2d 	.word	0x08008e2d
 8008600:	08008acd 	.word	0x08008acd
 8008604:	08008915 	.word	0x08008915
 8008608:	0800875d 	.word	0x0800875d

0800860c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800860c:	b480      	push	{r7}
 800860e:	b095      	sub	sp, #84	@ 0x54
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008632:	643b      	str	r3, [r7, #64]	@ 0x40
 8008634:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008638:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e6      	bne.n	8008614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3308      	adds	r3, #8
 800864c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	61fb      	str	r3, [r7, #28]
   return(result);
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	4b1e      	ldr	r3, [pc, #120]	@ (80086d4 <UART_EndRxTransfer+0xc8>)
 800865a:	4013      	ands	r3, r2
 800865c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3308      	adds	r3, #8
 8008664:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008668:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800866c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e5      	bne.n	8008646 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800867e:	2b01      	cmp	r3, #1
 8008680:	d118      	bne.n	80086b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f023 0310 	bic.w	r3, r3, #16
 8008696:	647b      	str	r3, [r7, #68]	@ 0x44
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086a0:	61bb      	str	r3, [r7, #24]
 80086a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	6979      	ldr	r1, [r7, #20]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	613b      	str	r3, [r7, #16]
   return(result);
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e6      	bne.n	8008682 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80086c8:	bf00      	nop
 80086ca:	3754      	adds	r7, #84	@ 0x54
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	effffffe 	.word	0xeffffffe

080086d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f7fe ff2e 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086fc:	bf00      	nop
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	60bb      	str	r3, [r7, #8]
   return(result);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008720:	61fb      	str	r3, [r7, #28]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	61bb      	str	r3, [r7, #24]
 800872c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	6979      	ldr	r1, [r7, #20]
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	613b      	str	r3, [r7, #16]
   return(result);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e6      	bne.n	800870c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2220      	movs	r2, #32
 8008742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7fe fef9 	bl	8007544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008752:	bf00      	nop
 8008754:	3720      	adds	r7, #32
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b09c      	sub	sp, #112	@ 0x70
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800876a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008774:	2b22      	cmp	r3, #34	@ 0x22
 8008776:	f040 80be 	bne.w	80088f6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008780:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008784:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008788:	b2d9      	uxtb	r1, r3
 800878a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800878e:	b2da      	uxtb	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008794:	400a      	ands	r2, r1
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	3b01      	subs	r3, #1
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f040 80a1 	bne.w	8008906 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087cc:	e853 3f00 	ldrex	r3, [r3]
 80087d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80087d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e6      	bne.n	80087c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3308      	adds	r3, #8
 80087fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008808:	f023 0301 	bic.w	r3, r3, #1
 800880c:	667b      	str	r3, [r7, #100]	@ 0x64
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008816:	647a      	str	r2, [r7, #68]	@ 0x44
 8008818:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800881c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e5      	bne.n	80087f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a33      	ldr	r2, [pc, #204]	@ (8008910 <UART_RxISR_8BIT+0x1b4>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d01f      	beq.n	8008888 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d018      	beq.n	8008888 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	623b      	str	r3, [r7, #32]
   return(result);
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800886a:	663b      	str	r3, [r7, #96]	@ 0x60
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008874:	633b      	str	r3, [r7, #48]	@ 0x30
 8008876:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800887a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e6      	bne.n	8008856 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800888c:	2b01      	cmp	r3, #1
 800888e:	d12e      	bne.n	80088ee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	e853 3f00 	ldrex	r3, [r3]
 80088a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f023 0310 	bic.w	r3, r3, #16
 80088aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088b4:	61fb      	str	r3, [r7, #28]
 80088b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b8:	69b9      	ldr	r1, [r7, #24]
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	e841 2300 	strex	r3, r2, [r1]
 80088c0:	617b      	str	r3, [r7, #20]
   return(result);
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1e6      	bne.n	8008896 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	f003 0310 	and.w	r3, r3, #16
 80088d2:	2b10      	cmp	r3, #16
 80088d4:	d103      	bne.n	80088de <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2210      	movs	r2, #16
 80088dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7fe fe40 	bl	800756c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088ec:	e00b      	b.n	8008906 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7f8 fb7e 	bl	8000ff0 <HAL_UART_RxCpltCallback>
}
 80088f4:	e007      	b.n	8008906 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699a      	ldr	r2, [r3, #24]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0208 	orr.w	r2, r2, #8
 8008904:	619a      	str	r2, [r3, #24]
}
 8008906:	bf00      	nop
 8008908:	3770      	adds	r7, #112	@ 0x70
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	58000c00 	.word	0x58000c00

08008914 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b09c      	sub	sp, #112	@ 0x70
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008922:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800892c:	2b22      	cmp	r3, #34	@ 0x22
 800892e:	f040 80be 	bne.w	8008aae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008938:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008940:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008942:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008946:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800894a:	4013      	ands	r3, r2
 800894c:	b29a      	uxth	r2, r3
 800894e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008950:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008956:	1c9a      	adds	r2, r3, #2
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008962:	b29b      	uxth	r3, r3
 8008964:	3b01      	subs	r3, #1
 8008966:	b29a      	uxth	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008974:	b29b      	uxth	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	f040 80a1 	bne.w	8008abe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800898a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800898c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008990:	667b      	str	r3, [r7, #100]	@ 0x64
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800899a:	657b      	str	r3, [r7, #84]	@ 0x54
 800899c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80089a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80089a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e6      	bne.n	800897c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3308      	adds	r3, #8
 80089b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	f023 0301 	bic.w	r3, r3, #1
 80089c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3308      	adds	r3, #8
 80089cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80089ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80089d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e5      	bne.n	80089ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a33      	ldr	r2, [pc, #204]	@ (8008ac8 <UART_RxISR_16BIT+0x1b4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d01f      	beq.n	8008a40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d018      	beq.n	8008a40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e6      	bne.n	8008a0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d12e      	bne.n	8008aa6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f023 0310 	bic.w	r3, r3, #16
 8008a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a6c:	61bb      	str	r3, [r7, #24]
 8008a6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6979      	ldr	r1, [r7, #20]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	613b      	str	r3, [r7, #16]
   return(result);
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e6      	bne.n	8008a4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	f003 0310 	and.w	r3, r3, #16
 8008a8a:	2b10      	cmp	r3, #16
 8008a8c:	d103      	bne.n	8008a96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2210      	movs	r2, #16
 8008a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7fe fd64 	bl	800756c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aa4:	e00b      	b.n	8008abe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7f8 faa2 	bl	8000ff0 <HAL_UART_RxCpltCallback>
}
 8008aac:	e007      	b.n	8008abe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	699a      	ldr	r2, [r3, #24]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f042 0208 	orr.w	r2, r2, #8
 8008abc:	619a      	str	r2, [r3, #24]
}
 8008abe:	bf00      	nop
 8008ac0:	3770      	adds	r7, #112	@ 0x70
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	58000c00 	.word	0x58000c00

08008acc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b0ac      	sub	sp, #176	@ 0xb0
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ada:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b02:	2b22      	cmp	r3, #34	@ 0x22
 8008b04:	f040 8180 	bne.w	8008e08 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008b0e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b12:	e123      	b.n	8008d5c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008b22:	b2d9      	uxtb	r1, r3
 8008b24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b2e:	400a      	ands	r2, r1
 8008b30:	b2d2      	uxtb	r2, r2
 8008b32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	3b01      	subs	r3, #1
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d053      	beq.n	8008c0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d011      	beq.n	8008b96 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008b72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00b      	beq.n	8008b96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2201      	movs	r2, #1
 8008b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b8c:	f043 0201 	orr.w	r2, r3, #1
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d011      	beq.n	8008bc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00b      	beq.n	8008bc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bbc:	f043 0204 	orr.w	r2, r3, #4
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d011      	beq.n	8008bf6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2204      	movs	r2, #4
 8008be4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bec:	f043 0202 	orr.w	r2, r3, #2
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d006      	beq.n	8008c0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7fe fca9 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f040 80a0 	bne.w	8008d5c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c40:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008c44:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008c46:	e841 2300 	strex	r3, r2, [r1]
 8008c4a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1e4      	bne.n	8008c1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c5c:	e853 3f00 	ldrex	r3, [r3]
 8008c60:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008c62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c64:	4b6e      	ldr	r3, [pc, #440]	@ (8008e20 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8008c66:	4013      	ands	r3, r2
 8008c68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3308      	adds	r3, #8
 8008c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008c76:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008c78:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008c7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008c84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e3      	bne.n	8008c52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a60      	ldr	r2, [pc, #384]	@ (8008e24 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d021      	beq.n	8008cec <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d01a      	beq.n	8008cec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cda:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008cde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e4      	bne.n	8008cb6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d130      	bne.n	8008d56 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0a:	f023 0310 	bic.w	r3, r3, #16
 8008d0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e4      	bne.n	8008cfa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	f003 0310 	and.w	r3, r3, #16
 8008d3a:	2b10      	cmp	r3, #16
 8008d3c:	d103      	bne.n	8008d46 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2210      	movs	r2, #16
 8008d44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7fe fc0c 	bl	800756c <HAL_UARTEx_RxEventCallback>
 8008d54:	e002      	b.n	8008d5c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7f8 f94a 	bl	8000ff0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d5c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d006      	beq.n	8008d72 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d68:	f003 0320 	and.w	r3, r3, #32
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f47f aed1 	bne.w	8008b14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d049      	beq.n	8008e18 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008d8a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d242      	bcs.n	8008e18 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3308      	adds	r3, #8
 8008d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008da8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	3308      	adds	r3, #8
 8008db2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e3      	bne.n	8008d92 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a16      	ldr	r2, [pc, #88]	@ (8008e28 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008dce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f043 0320 	orr.w	r3, r3, #32
 8008de4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008df2:	61bb      	str	r3, [r7, #24]
 8008df4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	6979      	ldr	r1, [r7, #20]
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	e841 2300 	strex	r3, r2, [r1]
 8008dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1e4      	bne.n	8008dd0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e06:	e007      	b.n	8008e18 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	699a      	ldr	r2, [r3, #24]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f042 0208 	orr.w	r2, r2, #8
 8008e16:	619a      	str	r2, [r3, #24]
}
 8008e18:	bf00      	nop
 8008e1a:	37b0      	adds	r7, #176	@ 0xb0
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	effffffe 	.word	0xeffffffe
 8008e24:	58000c00 	.word	0x58000c00
 8008e28:	0800875d 	.word	0x0800875d

08008e2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b0ae      	sub	sp, #184	@ 0xb8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e3a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e62:	2b22      	cmp	r3, #34	@ 0x22
 8008e64:	f040 8184 	bne.w	8009170 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e6e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e72:	e127      	b.n	80090c4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008e86:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008e8a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008e8e:	4013      	ands	r3, r2
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9c:	1c9a      	adds	r2, r3, #2
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d053      	beq.n	8008f72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d011      	beq.n	8008efa <UART_RxISR_16BIT_FIFOEN+0xce>
 8008ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00b      	beq.n	8008efa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef0:	f043 0201 	orr.w	r2, r3, #1
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008efa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d011      	beq.n	8008f2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00b      	beq.n	8008f2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2202      	movs	r2, #2
 8008f18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f20:	f043 0204 	orr.w	r2, r3, #4
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f2e:	f003 0304 	and.w	r3, r3, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d011      	beq.n	8008f5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008f36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00b      	beq.n	8008f5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2204      	movs	r2, #4
 8008f48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f50:	f043 0202 	orr.w	r2, r3, #2
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d006      	beq.n	8008f72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7fe faf7 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f040 80a2 	bne.w	80090c4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008fa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e2      	bne.n	8008f80 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008fca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008fcc:	4b6e      	ldr	r3, [pc, #440]	@ (8009188 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008fce:	4013      	ands	r3, r2
 8008fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008fde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008fe4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e3      	bne.n	8008fba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a60      	ldr	r2, [pc, #384]	@ (800918c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d021      	beq.n	8009054 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d01a      	beq.n	8009054 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800902c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800902e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009040:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009042:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009046:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009048:	e841 2300 	strex	r3, r2, [r1]
 800904c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800904e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e4      	bne.n	800901e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009058:	2b01      	cmp	r3, #1
 800905a:	d130      	bne.n	80090be <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009072:	f023 0310 	bic.w	r3, r3, #16
 8009076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009084:	647b      	str	r3, [r7, #68]	@ 0x44
 8009086:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800908a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800908c:	e841 2300 	strex	r3, r2, [r1]
 8009090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e4      	bne.n	8009062 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	f003 0310 	and.w	r3, r3, #16
 80090a2:	2b10      	cmp	r3, #16
 80090a4:	d103      	bne.n	80090ae <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2210      	movs	r2, #16
 80090ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7fe fa58 	bl	800756c <HAL_UARTEx_RxEventCallback>
 80090bc:	e002      	b.n	80090c4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7f7 ff96 	bl	8000ff0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d006      	beq.n	80090da <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80090cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f47f aecd 	bne.w	8008e74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090e0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d049      	beq.n	8009180 <UART_RxISR_16BIT_FIFOEN+0x354>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80090f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d242      	bcs.n	8009180 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	623b      	str	r3, [r7, #32]
   return(result);
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3308      	adds	r3, #8
 800911a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800911e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009120:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800912c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e3      	bne.n	80090fa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a16      	ldr	r2, [pc, #88]	@ (8009190 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009136:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	60fb      	str	r3, [r7, #12]
   return(result);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f043 0320 	orr.w	r3, r3, #32
 800914c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800915a:	61fb      	str	r3, [r7, #28]
 800915c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	69b9      	ldr	r1, [r7, #24]
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	617b      	str	r3, [r7, #20]
   return(result);
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e4      	bne.n	8009138 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800916e:	e007      	b.n	8009180 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	699a      	ldr	r2, [r3, #24]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0208 	orr.w	r2, r2, #8
 800917e:	619a      	str	r2, [r3, #24]
}
 8009180:	bf00      	nop
 8009182:	37b8      	adds	r7, #184	@ 0xb8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	effffffe 	.word	0xeffffffe
 800918c:	58000c00 	.word	0x58000c00
 8009190:	08008915 	.word	0x08008915

08009194 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d101      	bne.n	80091e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80091e2:	2302      	movs	r3, #2
 80091e4:	e027      	b.n	8009236 <HAL_UARTEx_DisableFifoMode+0x66>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2224      	movs	r2, #36	@ 0x24
 80091f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0201 	bic.w	r2, r2, #1
 800920c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009214:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2220      	movs	r2, #32
 8009228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009256:	2302      	movs	r3, #2
 8009258:	e02d      	b.n	80092b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2224      	movs	r2, #36	@ 0x24
 8009266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f022 0201 	bic.w	r2, r2, #1
 8009280:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f850 	bl	800933c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d101      	bne.n	80092d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092d2:	2302      	movs	r3, #2
 80092d4:	e02d      	b.n	8009332 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2224      	movs	r2, #36	@ 0x24
 80092e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0201 	bic.w	r2, r2, #1
 80092fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f812 	bl	800933c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2220      	movs	r2, #32
 8009324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
	...

0800933c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009348:	2b00      	cmp	r3, #0
 800934a:	d108      	bne.n	800935e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800935c:	e031      	b.n	80093c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800935e:	2310      	movs	r3, #16
 8009360:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009362:	2310      	movs	r3, #16
 8009364:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	0e5b      	lsrs	r3, r3, #25
 800936e:	b2db      	uxtb	r3, r3
 8009370:	f003 0307 	and.w	r3, r3, #7
 8009374:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	0f5b      	lsrs	r3, r3, #29
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	7b3a      	ldrb	r2, [r7, #12]
 800938a:	4911      	ldr	r1, [pc, #68]	@ (80093d0 <UARTEx_SetNbDataToProcess+0x94>)
 800938c:	5c8a      	ldrb	r2, [r1, r2]
 800938e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009392:	7b3a      	ldrb	r2, [r7, #12]
 8009394:	490f      	ldr	r1, [pc, #60]	@ (80093d4 <UARTEx_SetNbDataToProcess+0x98>)
 8009396:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009398:	fb93 f3f2 	sdiv	r3, r3, r2
 800939c:	b29a      	uxth	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	7b7a      	ldrb	r2, [r7, #13]
 80093a8:	4909      	ldr	r1, [pc, #36]	@ (80093d0 <UARTEx_SetNbDataToProcess+0x94>)
 80093aa:	5c8a      	ldrb	r2, [r1, r2]
 80093ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093b0:	7b7a      	ldrb	r2, [r7, #13]
 80093b2:	4908      	ldr	r1, [pc, #32]	@ (80093d4 <UARTEx_SetNbDataToProcess+0x98>)
 80093b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80093c2:	bf00      	nop
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	0800a3d8 	.word	0x0800a3d8
 80093d4:	0800a3e0 	.word	0x0800a3e0

080093d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093d8:	b084      	sub	sp, #16
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	f107 001c 	add.w	r0, r7, #28
 80093e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d121      	bne.n	8009436 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	4b2c      	ldr	r3, [pc, #176]	@ (80094b4 <USB_CoreInit+0xdc>)
 8009404:	4013      	ands	r3, r2
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009416:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800941a:	2b01      	cmp	r3, #1
 800941c:	d105      	bne.n	800942a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 faaa 	bl	8009984 <USB_CoreReset>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]
 8009434:	e01b      	b.n	800946e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fa9e 	bl	8009984 <USB_CoreReset>
 8009448:	4603      	mov	r3, r0
 800944a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800944c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009450:	2b00      	cmp	r3, #0
 8009452:	d106      	bne.n	8009462 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009458:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009460:	e005      	b.n	800946e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009466:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800946e:	7fbb      	ldrb	r3, [r7, #30]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d116      	bne.n	80094a2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009478:	b29a      	uxth	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009482:	4b0d      	ldr	r3, [pc, #52]	@ (80094b8 <USB_CoreInit+0xe0>)
 8009484:	4313      	orrs	r3, r2
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f043 0206 	orr.w	r2, r3, #6
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f043 0220 	orr.w	r2, r3, #32
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094ae:	b004      	add	sp, #16
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	ffbdffbf 	.word	0xffbdffbf
 80094b8:	03ee0000 	.word	0x03ee0000

080094bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f023 0201 	bic.w	r2, r3, #1
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	460b      	mov	r3, r1
 80094e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094fa:	78fb      	ldrb	r3, [r7, #3]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d115      	bne.n	800952c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800950c:	200a      	movs	r0, #10
 800950e:	f7f8 f957 	bl	80017c0 <HAL_Delay>
      ms += 10U;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	330a      	adds	r3, #10
 8009516:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa25 	bl	8009968 <USB_GetMode>
 800951e:	4603      	mov	r3, r0
 8009520:	2b01      	cmp	r3, #1
 8009522:	d01e      	beq.n	8009562 <USB_SetCurrentMode+0x84>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2bc7      	cmp	r3, #199	@ 0xc7
 8009528:	d9f0      	bls.n	800950c <USB_SetCurrentMode+0x2e>
 800952a:	e01a      	b.n	8009562 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d115      	bne.n	800955e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800953e:	200a      	movs	r0, #10
 8009540:	f7f8 f93e 	bl	80017c0 <HAL_Delay>
      ms += 10U;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	330a      	adds	r3, #10
 8009548:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fa0c 	bl	8009968 <USB_GetMode>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <USB_SetCurrentMode+0x84>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2bc7      	cmp	r3, #199	@ 0xc7
 800955a:	d9f0      	bls.n	800953e <USB_SetCurrentMode+0x60>
 800955c:	e001      	b.n	8009562 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e005      	b.n	800956e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2bc8      	cmp	r3, #200	@ 0xc8
 8009566:	d101      	bne.n	800956c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e000      	b.n	800956e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
	...

08009578 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009578:	b084      	sub	sp, #16
 800957a:	b580      	push	{r7, lr}
 800957c:	b086      	sub	sp, #24
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009592:	2300      	movs	r3, #0
 8009594:	613b      	str	r3, [r7, #16]
 8009596:	e009      	b.n	80095ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	3340      	adds	r3, #64	@ 0x40
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	2200      	movs	r2, #0
 80095a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	3301      	adds	r3, #1
 80095aa:	613b      	str	r3, [r7, #16]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	2b0e      	cmp	r3, #14
 80095b0:	d9f2      	bls.n	8009598 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d11c      	bne.n	80095f4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095c8:	f043 0302 	orr.w	r3, r3, #2
 80095cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	e005      	b.n	8009600 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009606:	461a      	mov	r2, r3
 8009608:	2300      	movs	r3, #0
 800960a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800960c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009610:	2b01      	cmp	r3, #1
 8009612:	d10d      	bne.n	8009630 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009618:	2b00      	cmp	r3, #0
 800961a:	d104      	bne.n	8009626 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800961c:	2100      	movs	r1, #0
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f968 	bl	80098f4 <USB_SetDevSpeed>
 8009624:	e008      	b.n	8009638 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009626:	2101      	movs	r1, #1
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f963 	bl	80098f4 <USB_SetDevSpeed>
 800962e:	e003      	b.n	8009638 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009630:	2103      	movs	r1, #3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f95e 	bl	80098f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009638:	2110      	movs	r1, #16
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f8fa 	bl	8009834 <USB_FlushTxFifo>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f924 	bl	8009898 <USB_FlushRxFifo>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009660:	461a      	mov	r2, r3
 8009662:	2300      	movs	r3, #0
 8009664:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800966c:	461a      	mov	r2, r3
 800966e:	2300      	movs	r3, #0
 8009670:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009678:	461a      	mov	r2, r3
 800967a:	2300      	movs	r3, #0
 800967c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800967e:	2300      	movs	r3, #0
 8009680:	613b      	str	r3, [r7, #16]
 8009682:	e043      	b.n	800970c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800969a:	d118      	bne.n	80096ce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ae:	461a      	mov	r2, r3
 80096b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096b4:	6013      	str	r3, [r2, #0]
 80096b6:	e013      	b.n	80096e0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c4:	461a      	mov	r2, r3
 80096c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	e008      	b.n	80096e0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096da:	461a      	mov	r2, r3
 80096dc:	2300      	movs	r3, #0
 80096de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ec:	461a      	mov	r2, r3
 80096ee:	2300      	movs	r3, #0
 80096f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096fe:	461a      	mov	r2, r3
 8009700:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009704:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	3301      	adds	r3, #1
 800970a:	613b      	str	r3, [r7, #16]
 800970c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009710:	461a      	mov	r2, r3
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	4293      	cmp	r3, r2
 8009716:	d3b5      	bcc.n	8009684 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009718:	2300      	movs	r3, #0
 800971a:	613b      	str	r3, [r7, #16]
 800971c:	e043      	b.n	80097a6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009730:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009734:	d118      	bne.n	8009768 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	015a      	lsls	r2, r3, #5
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	4413      	add	r3, r2
 8009744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009748:	461a      	mov	r2, r3
 800974a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	e013      	b.n	800977a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800975e:	461a      	mov	r2, r3
 8009760:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	e008      	b.n	800977a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009774:	461a      	mov	r2, r3
 8009776:	2300      	movs	r3, #0
 8009778:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009786:	461a      	mov	r2, r3
 8009788:	2300      	movs	r3, #0
 800978a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009798:	461a      	mov	r2, r3
 800979a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800979e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	3301      	adds	r3, #1
 80097a4:	613b      	str	r3, [r7, #16]
 80097a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097aa:	461a      	mov	r2, r3
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d3b5      	bcc.n	800971e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80097d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80097d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d105      	bne.n	80097e8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	f043 0210 	orr.w	r2, r3, #16
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	699a      	ldr	r2, [r3, #24]
 80097ec:	4b0f      	ldr	r3, [pc, #60]	@ (800982c <USB_DevInit+0x2b4>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80097f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	f043 0208 	orr.w	r2, r3, #8
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009808:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800980c:	2b01      	cmp	r3, #1
 800980e:	d105      	bne.n	800981c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699a      	ldr	r2, [r3, #24]
 8009814:	4b06      	ldr	r3, [pc, #24]	@ (8009830 <USB_DevInit+0x2b8>)
 8009816:	4313      	orrs	r3, r2
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800981c:	7dfb      	ldrb	r3, [r7, #23]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009828:	b004      	add	sp, #16
 800982a:	4770      	bx	lr
 800982c:	803c3800 	.word	0x803c3800
 8009830:	40000004 	.word	0x40000004

08009834 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800983e:	2300      	movs	r3, #0
 8009840:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3301      	adds	r3, #1
 8009846:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800984e:	d901      	bls.n	8009854 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	e01b      	b.n	800988c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	daf2      	bge.n	8009842 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800985c:	2300      	movs	r3, #0
 800985e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	019b      	lsls	r3, r3, #6
 8009864:	f043 0220 	orr.w	r2, r3, #32
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3301      	adds	r3, #1
 8009870:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009878:	d901      	bls.n	800987e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e006      	b.n	800988c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	f003 0320 	and.w	r3, r3, #32
 8009886:	2b20      	cmp	r3, #32
 8009888:	d0f0      	beq.n	800986c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3301      	adds	r3, #1
 80098a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098b0:	d901      	bls.n	80098b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	e018      	b.n	80098e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	daf2      	bge.n	80098a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80098be:	2300      	movs	r3, #0
 80098c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2210      	movs	r2, #16
 80098c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3301      	adds	r3, #1
 80098cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098d4:	d901      	bls.n	80098da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e006      	b.n	80098e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	f003 0310 	and.w	r3, r3, #16
 80098e2:	2b10      	cmp	r3, #16
 80098e4:	d0f0      	beq.n	80098c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	68f9      	ldr	r1, [r7, #12]
 8009910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009914:	4313      	orrs	r3, r2
 8009916:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009926:	b480      	push	{r7}
 8009928:	b085      	sub	sp, #20
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009940:	f023 0303 	bic.w	r3, r3, #3
 8009944:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009954:	f043 0302 	orr.w	r3, r3, #2
 8009958:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	f003 0301 	and.w	r3, r3, #1
}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800998c:	2300      	movs	r3, #0
 800998e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	3301      	adds	r3, #1
 8009994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800999c:	d901      	bls.n	80099a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	e01b      	b.n	80099da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	daf2      	bge.n	8009990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	f043 0201 	orr.w	r2, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3301      	adds	r3, #1
 80099be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099c6:	d901      	bls.n	80099cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e006      	b.n	80099da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d0f0      	beq.n	80099ba <USB_CoreReset+0x36>

  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <siprintf>:
 80099e8:	b40e      	push	{r1, r2, r3}
 80099ea:	b500      	push	{lr}
 80099ec:	b09c      	sub	sp, #112	@ 0x70
 80099ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80099f0:	9002      	str	r0, [sp, #8]
 80099f2:	9006      	str	r0, [sp, #24]
 80099f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80099f8:	4809      	ldr	r0, [pc, #36]	@ (8009a20 <siprintf+0x38>)
 80099fa:	9107      	str	r1, [sp, #28]
 80099fc:	9104      	str	r1, [sp, #16]
 80099fe:	4909      	ldr	r1, [pc, #36]	@ (8009a24 <siprintf+0x3c>)
 8009a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a04:	9105      	str	r1, [sp, #20]
 8009a06:	6800      	ldr	r0, [r0, #0]
 8009a08:	9301      	str	r3, [sp, #4]
 8009a0a:	a902      	add	r1, sp, #8
 8009a0c:	f000 f994 	bl	8009d38 <_svfiprintf_r>
 8009a10:	9b02      	ldr	r3, [sp, #8]
 8009a12:	2200      	movs	r2, #0
 8009a14:	701a      	strb	r2, [r3, #0]
 8009a16:	b01c      	add	sp, #112	@ 0x70
 8009a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a1c:	b003      	add	sp, #12
 8009a1e:	4770      	bx	lr
 8009a20:	24000010 	.word	0x24000010
 8009a24:	ffff0208 	.word	0xffff0208

08009a28 <memset>:
 8009a28:	4402      	add	r2, r0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d100      	bne.n	8009a32 <memset+0xa>
 8009a30:	4770      	bx	lr
 8009a32:	f803 1b01 	strb.w	r1, [r3], #1
 8009a36:	e7f9      	b.n	8009a2c <memset+0x4>

08009a38 <__errno>:
 8009a38:	4b01      	ldr	r3, [pc, #4]	@ (8009a40 <__errno+0x8>)
 8009a3a:	6818      	ldr	r0, [r3, #0]
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	24000010 	.word	0x24000010

08009a44 <__libc_init_array>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	4d0d      	ldr	r5, [pc, #52]	@ (8009a7c <__libc_init_array+0x38>)
 8009a48:	4c0d      	ldr	r4, [pc, #52]	@ (8009a80 <__libc_init_array+0x3c>)
 8009a4a:	1b64      	subs	r4, r4, r5
 8009a4c:	10a4      	asrs	r4, r4, #2
 8009a4e:	2600      	movs	r6, #0
 8009a50:	42a6      	cmp	r6, r4
 8009a52:	d109      	bne.n	8009a68 <__libc_init_array+0x24>
 8009a54:	4d0b      	ldr	r5, [pc, #44]	@ (8009a84 <__libc_init_array+0x40>)
 8009a56:	4c0c      	ldr	r4, [pc, #48]	@ (8009a88 <__libc_init_array+0x44>)
 8009a58:	f000 fc66 	bl	800a328 <_init>
 8009a5c:	1b64      	subs	r4, r4, r5
 8009a5e:	10a4      	asrs	r4, r4, #2
 8009a60:	2600      	movs	r6, #0
 8009a62:	42a6      	cmp	r6, r4
 8009a64:	d105      	bne.n	8009a72 <__libc_init_array+0x2e>
 8009a66:	bd70      	pop	{r4, r5, r6, pc}
 8009a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a6c:	4798      	blx	r3
 8009a6e:	3601      	adds	r6, #1
 8009a70:	e7ee      	b.n	8009a50 <__libc_init_array+0xc>
 8009a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a76:	4798      	blx	r3
 8009a78:	3601      	adds	r6, #1
 8009a7a:	e7f2      	b.n	8009a62 <__libc_init_array+0x1e>
 8009a7c:	0800a424 	.word	0x0800a424
 8009a80:	0800a424 	.word	0x0800a424
 8009a84:	0800a424 	.word	0x0800a424
 8009a88:	0800a428 	.word	0x0800a428

08009a8c <__retarget_lock_acquire_recursive>:
 8009a8c:	4770      	bx	lr

08009a8e <__retarget_lock_release_recursive>:
 8009a8e:	4770      	bx	lr

08009a90 <_free_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4605      	mov	r5, r0
 8009a94:	2900      	cmp	r1, #0
 8009a96:	d041      	beq.n	8009b1c <_free_r+0x8c>
 8009a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a9c:	1f0c      	subs	r4, r1, #4
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bfb8      	it	lt
 8009aa2:	18e4      	addlt	r4, r4, r3
 8009aa4:	f000 f8e0 	bl	8009c68 <__malloc_lock>
 8009aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b20 <_free_r+0x90>)
 8009aaa:	6813      	ldr	r3, [r2, #0]
 8009aac:	b933      	cbnz	r3, 8009abc <_free_r+0x2c>
 8009aae:	6063      	str	r3, [r4, #4]
 8009ab0:	6014      	str	r4, [r2, #0]
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ab8:	f000 b8dc 	b.w	8009c74 <__malloc_unlock>
 8009abc:	42a3      	cmp	r3, r4
 8009abe:	d908      	bls.n	8009ad2 <_free_r+0x42>
 8009ac0:	6820      	ldr	r0, [r4, #0]
 8009ac2:	1821      	adds	r1, r4, r0
 8009ac4:	428b      	cmp	r3, r1
 8009ac6:	bf01      	itttt	eq
 8009ac8:	6819      	ldreq	r1, [r3, #0]
 8009aca:	685b      	ldreq	r3, [r3, #4]
 8009acc:	1809      	addeq	r1, r1, r0
 8009ace:	6021      	streq	r1, [r4, #0]
 8009ad0:	e7ed      	b.n	8009aae <_free_r+0x1e>
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	b10b      	cbz	r3, 8009adc <_free_r+0x4c>
 8009ad8:	42a3      	cmp	r3, r4
 8009ada:	d9fa      	bls.n	8009ad2 <_free_r+0x42>
 8009adc:	6811      	ldr	r1, [r2, #0]
 8009ade:	1850      	adds	r0, r2, r1
 8009ae0:	42a0      	cmp	r0, r4
 8009ae2:	d10b      	bne.n	8009afc <_free_r+0x6c>
 8009ae4:	6820      	ldr	r0, [r4, #0]
 8009ae6:	4401      	add	r1, r0
 8009ae8:	1850      	adds	r0, r2, r1
 8009aea:	4283      	cmp	r3, r0
 8009aec:	6011      	str	r1, [r2, #0]
 8009aee:	d1e0      	bne.n	8009ab2 <_free_r+0x22>
 8009af0:	6818      	ldr	r0, [r3, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	6053      	str	r3, [r2, #4]
 8009af6:	4408      	add	r0, r1
 8009af8:	6010      	str	r0, [r2, #0]
 8009afa:	e7da      	b.n	8009ab2 <_free_r+0x22>
 8009afc:	d902      	bls.n	8009b04 <_free_r+0x74>
 8009afe:	230c      	movs	r3, #12
 8009b00:	602b      	str	r3, [r5, #0]
 8009b02:	e7d6      	b.n	8009ab2 <_free_r+0x22>
 8009b04:	6820      	ldr	r0, [r4, #0]
 8009b06:	1821      	adds	r1, r4, r0
 8009b08:	428b      	cmp	r3, r1
 8009b0a:	bf04      	itt	eq
 8009b0c:	6819      	ldreq	r1, [r3, #0]
 8009b0e:	685b      	ldreq	r3, [r3, #4]
 8009b10:	6063      	str	r3, [r4, #4]
 8009b12:	bf04      	itt	eq
 8009b14:	1809      	addeq	r1, r1, r0
 8009b16:	6021      	streq	r1, [r4, #0]
 8009b18:	6054      	str	r4, [r2, #4]
 8009b1a:	e7ca      	b.n	8009ab2 <_free_r+0x22>
 8009b1c:	bd38      	pop	{r3, r4, r5, pc}
 8009b1e:	bf00      	nop
 8009b20:	24000824 	.word	0x24000824

08009b24 <sbrk_aligned>:
 8009b24:	b570      	push	{r4, r5, r6, lr}
 8009b26:	4e0f      	ldr	r6, [pc, #60]	@ (8009b64 <sbrk_aligned+0x40>)
 8009b28:	460c      	mov	r4, r1
 8009b2a:	6831      	ldr	r1, [r6, #0]
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	b911      	cbnz	r1, 8009b36 <sbrk_aligned+0x12>
 8009b30:	f000 fba6 	bl	800a280 <_sbrk_r>
 8009b34:	6030      	str	r0, [r6, #0]
 8009b36:	4621      	mov	r1, r4
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f000 fba1 	bl	800a280 <_sbrk_r>
 8009b3e:	1c43      	adds	r3, r0, #1
 8009b40:	d103      	bne.n	8009b4a <sbrk_aligned+0x26>
 8009b42:	f04f 34ff 	mov.w	r4, #4294967295
 8009b46:	4620      	mov	r0, r4
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
 8009b4a:	1cc4      	adds	r4, r0, #3
 8009b4c:	f024 0403 	bic.w	r4, r4, #3
 8009b50:	42a0      	cmp	r0, r4
 8009b52:	d0f8      	beq.n	8009b46 <sbrk_aligned+0x22>
 8009b54:	1a21      	subs	r1, r4, r0
 8009b56:	4628      	mov	r0, r5
 8009b58:	f000 fb92 	bl	800a280 <_sbrk_r>
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d1f2      	bne.n	8009b46 <sbrk_aligned+0x22>
 8009b60:	e7ef      	b.n	8009b42 <sbrk_aligned+0x1e>
 8009b62:	bf00      	nop
 8009b64:	24000820 	.word	0x24000820

08009b68 <_malloc_r>:
 8009b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b6c:	1ccd      	adds	r5, r1, #3
 8009b6e:	f025 0503 	bic.w	r5, r5, #3
 8009b72:	3508      	adds	r5, #8
 8009b74:	2d0c      	cmp	r5, #12
 8009b76:	bf38      	it	cc
 8009b78:	250c      	movcc	r5, #12
 8009b7a:	2d00      	cmp	r5, #0
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	db01      	blt.n	8009b84 <_malloc_r+0x1c>
 8009b80:	42a9      	cmp	r1, r5
 8009b82:	d904      	bls.n	8009b8e <_malloc_r+0x26>
 8009b84:	230c      	movs	r3, #12
 8009b86:	6033      	str	r3, [r6, #0]
 8009b88:	2000      	movs	r0, #0
 8009b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c64 <_malloc_r+0xfc>
 8009b92:	f000 f869 	bl	8009c68 <__malloc_lock>
 8009b96:	f8d8 3000 	ldr.w	r3, [r8]
 8009b9a:	461c      	mov	r4, r3
 8009b9c:	bb44      	cbnz	r4, 8009bf0 <_malloc_r+0x88>
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7ff ffbf 	bl	8009b24 <sbrk_aligned>
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	4604      	mov	r4, r0
 8009baa:	d158      	bne.n	8009c5e <_malloc_r+0xf6>
 8009bac:	f8d8 4000 	ldr.w	r4, [r8]
 8009bb0:	4627      	mov	r7, r4
 8009bb2:	2f00      	cmp	r7, #0
 8009bb4:	d143      	bne.n	8009c3e <_malloc_r+0xd6>
 8009bb6:	2c00      	cmp	r4, #0
 8009bb8:	d04b      	beq.n	8009c52 <_malloc_r+0xea>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	4639      	mov	r1, r7
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	eb04 0903 	add.w	r9, r4, r3
 8009bc4:	f000 fb5c 	bl	800a280 <_sbrk_r>
 8009bc8:	4581      	cmp	r9, r0
 8009bca:	d142      	bne.n	8009c52 <_malloc_r+0xea>
 8009bcc:	6821      	ldr	r1, [r4, #0]
 8009bce:	1a6d      	subs	r5, r5, r1
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7ff ffa6 	bl	8009b24 <sbrk_aligned>
 8009bd8:	3001      	adds	r0, #1
 8009bda:	d03a      	beq.n	8009c52 <_malloc_r+0xea>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	442b      	add	r3, r5
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	f8d8 3000 	ldr.w	r3, [r8]
 8009be6:	685a      	ldr	r2, [r3, #4]
 8009be8:	bb62      	cbnz	r2, 8009c44 <_malloc_r+0xdc>
 8009bea:	f8c8 7000 	str.w	r7, [r8]
 8009bee:	e00f      	b.n	8009c10 <_malloc_r+0xa8>
 8009bf0:	6822      	ldr	r2, [r4, #0]
 8009bf2:	1b52      	subs	r2, r2, r5
 8009bf4:	d420      	bmi.n	8009c38 <_malloc_r+0xd0>
 8009bf6:	2a0b      	cmp	r2, #11
 8009bf8:	d917      	bls.n	8009c2a <_malloc_r+0xc2>
 8009bfa:	1961      	adds	r1, r4, r5
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	6025      	str	r5, [r4, #0]
 8009c00:	bf18      	it	ne
 8009c02:	6059      	strne	r1, [r3, #4]
 8009c04:	6863      	ldr	r3, [r4, #4]
 8009c06:	bf08      	it	eq
 8009c08:	f8c8 1000 	streq.w	r1, [r8]
 8009c0c:	5162      	str	r2, [r4, r5]
 8009c0e:	604b      	str	r3, [r1, #4]
 8009c10:	4630      	mov	r0, r6
 8009c12:	f000 f82f 	bl	8009c74 <__malloc_unlock>
 8009c16:	f104 000b 	add.w	r0, r4, #11
 8009c1a:	1d23      	adds	r3, r4, #4
 8009c1c:	f020 0007 	bic.w	r0, r0, #7
 8009c20:	1ac2      	subs	r2, r0, r3
 8009c22:	bf1c      	itt	ne
 8009c24:	1a1b      	subne	r3, r3, r0
 8009c26:	50a3      	strne	r3, [r4, r2]
 8009c28:	e7af      	b.n	8009b8a <_malloc_r+0x22>
 8009c2a:	6862      	ldr	r2, [r4, #4]
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	bf0c      	ite	eq
 8009c30:	f8c8 2000 	streq.w	r2, [r8]
 8009c34:	605a      	strne	r2, [r3, #4]
 8009c36:	e7eb      	b.n	8009c10 <_malloc_r+0xa8>
 8009c38:	4623      	mov	r3, r4
 8009c3a:	6864      	ldr	r4, [r4, #4]
 8009c3c:	e7ae      	b.n	8009b9c <_malloc_r+0x34>
 8009c3e:	463c      	mov	r4, r7
 8009c40:	687f      	ldr	r7, [r7, #4]
 8009c42:	e7b6      	b.n	8009bb2 <_malloc_r+0x4a>
 8009c44:	461a      	mov	r2, r3
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	d1fb      	bne.n	8009c44 <_malloc_r+0xdc>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	6053      	str	r3, [r2, #4]
 8009c50:	e7de      	b.n	8009c10 <_malloc_r+0xa8>
 8009c52:	230c      	movs	r3, #12
 8009c54:	6033      	str	r3, [r6, #0]
 8009c56:	4630      	mov	r0, r6
 8009c58:	f000 f80c 	bl	8009c74 <__malloc_unlock>
 8009c5c:	e794      	b.n	8009b88 <_malloc_r+0x20>
 8009c5e:	6005      	str	r5, [r0, #0]
 8009c60:	e7d6      	b.n	8009c10 <_malloc_r+0xa8>
 8009c62:	bf00      	nop
 8009c64:	24000824 	.word	0x24000824

08009c68 <__malloc_lock>:
 8009c68:	4801      	ldr	r0, [pc, #4]	@ (8009c70 <__malloc_lock+0x8>)
 8009c6a:	f7ff bf0f 	b.w	8009a8c <__retarget_lock_acquire_recursive>
 8009c6e:	bf00      	nop
 8009c70:	2400081c 	.word	0x2400081c

08009c74 <__malloc_unlock>:
 8009c74:	4801      	ldr	r0, [pc, #4]	@ (8009c7c <__malloc_unlock+0x8>)
 8009c76:	f7ff bf0a 	b.w	8009a8e <__retarget_lock_release_recursive>
 8009c7a:	bf00      	nop
 8009c7c:	2400081c 	.word	0x2400081c

08009c80 <__ssputs_r>:
 8009c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c84:	688e      	ldr	r6, [r1, #8]
 8009c86:	461f      	mov	r7, r3
 8009c88:	42be      	cmp	r6, r7
 8009c8a:	680b      	ldr	r3, [r1, #0]
 8009c8c:	4682      	mov	sl, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	4690      	mov	r8, r2
 8009c92:	d82d      	bhi.n	8009cf0 <__ssputs_r+0x70>
 8009c94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c9c:	d026      	beq.n	8009cec <__ssputs_r+0x6c>
 8009c9e:	6965      	ldr	r5, [r4, #20]
 8009ca0:	6909      	ldr	r1, [r1, #16]
 8009ca2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ca6:	eba3 0901 	sub.w	r9, r3, r1
 8009caa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cae:	1c7b      	adds	r3, r7, #1
 8009cb0:	444b      	add	r3, r9
 8009cb2:	106d      	asrs	r5, r5, #1
 8009cb4:	429d      	cmp	r5, r3
 8009cb6:	bf38      	it	cc
 8009cb8:	461d      	movcc	r5, r3
 8009cba:	0553      	lsls	r3, r2, #21
 8009cbc:	d527      	bpl.n	8009d0e <__ssputs_r+0x8e>
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	f7ff ff52 	bl	8009b68 <_malloc_r>
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	b360      	cbz	r0, 8009d22 <__ssputs_r+0xa2>
 8009cc8:	6921      	ldr	r1, [r4, #16]
 8009cca:	464a      	mov	r2, r9
 8009ccc:	f000 fae8 	bl	800a2a0 <memcpy>
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	6126      	str	r6, [r4, #16]
 8009cde:	6165      	str	r5, [r4, #20]
 8009ce0:	444e      	add	r6, r9
 8009ce2:	eba5 0509 	sub.w	r5, r5, r9
 8009ce6:	6026      	str	r6, [r4, #0]
 8009ce8:	60a5      	str	r5, [r4, #8]
 8009cea:	463e      	mov	r6, r7
 8009cec:	42be      	cmp	r6, r7
 8009cee:	d900      	bls.n	8009cf2 <__ssputs_r+0x72>
 8009cf0:	463e      	mov	r6, r7
 8009cf2:	6820      	ldr	r0, [r4, #0]
 8009cf4:	4632      	mov	r2, r6
 8009cf6:	4641      	mov	r1, r8
 8009cf8:	f000 faa8 	bl	800a24c <memmove>
 8009cfc:	68a3      	ldr	r3, [r4, #8]
 8009cfe:	1b9b      	subs	r3, r3, r6
 8009d00:	60a3      	str	r3, [r4, #8]
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	4433      	add	r3, r6
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	2000      	movs	r0, #0
 8009d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0e:	462a      	mov	r2, r5
 8009d10:	f000 fad4 	bl	800a2bc <_realloc_r>
 8009d14:	4606      	mov	r6, r0
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d1e0      	bne.n	8009cdc <__ssputs_r+0x5c>
 8009d1a:	6921      	ldr	r1, [r4, #16]
 8009d1c:	4650      	mov	r0, sl
 8009d1e:	f7ff feb7 	bl	8009a90 <_free_r>
 8009d22:	230c      	movs	r3, #12
 8009d24:	f8ca 3000 	str.w	r3, [sl]
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d2e:	81a3      	strh	r3, [r4, #12]
 8009d30:	f04f 30ff 	mov.w	r0, #4294967295
 8009d34:	e7e9      	b.n	8009d0a <__ssputs_r+0x8a>
	...

08009d38 <_svfiprintf_r>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	4698      	mov	r8, r3
 8009d3e:	898b      	ldrh	r3, [r1, #12]
 8009d40:	061b      	lsls	r3, r3, #24
 8009d42:	b09d      	sub	sp, #116	@ 0x74
 8009d44:	4607      	mov	r7, r0
 8009d46:	460d      	mov	r5, r1
 8009d48:	4614      	mov	r4, r2
 8009d4a:	d510      	bpl.n	8009d6e <_svfiprintf_r+0x36>
 8009d4c:	690b      	ldr	r3, [r1, #16]
 8009d4e:	b973      	cbnz	r3, 8009d6e <_svfiprintf_r+0x36>
 8009d50:	2140      	movs	r1, #64	@ 0x40
 8009d52:	f7ff ff09 	bl	8009b68 <_malloc_r>
 8009d56:	6028      	str	r0, [r5, #0]
 8009d58:	6128      	str	r0, [r5, #16]
 8009d5a:	b930      	cbnz	r0, 8009d6a <_svfiprintf_r+0x32>
 8009d5c:	230c      	movs	r3, #12
 8009d5e:	603b      	str	r3, [r7, #0]
 8009d60:	f04f 30ff 	mov.w	r0, #4294967295
 8009d64:	b01d      	add	sp, #116	@ 0x74
 8009d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6a:	2340      	movs	r3, #64	@ 0x40
 8009d6c:	616b      	str	r3, [r5, #20]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d72:	2320      	movs	r3, #32
 8009d74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d78:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d7c:	2330      	movs	r3, #48	@ 0x30
 8009d7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f1c <_svfiprintf_r+0x1e4>
 8009d82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d86:	f04f 0901 	mov.w	r9, #1
 8009d8a:	4623      	mov	r3, r4
 8009d8c:	469a      	mov	sl, r3
 8009d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d92:	b10a      	cbz	r2, 8009d98 <_svfiprintf_r+0x60>
 8009d94:	2a25      	cmp	r2, #37	@ 0x25
 8009d96:	d1f9      	bne.n	8009d8c <_svfiprintf_r+0x54>
 8009d98:	ebba 0b04 	subs.w	fp, sl, r4
 8009d9c:	d00b      	beq.n	8009db6 <_svfiprintf_r+0x7e>
 8009d9e:	465b      	mov	r3, fp
 8009da0:	4622      	mov	r2, r4
 8009da2:	4629      	mov	r1, r5
 8009da4:	4638      	mov	r0, r7
 8009da6:	f7ff ff6b 	bl	8009c80 <__ssputs_r>
 8009daa:	3001      	adds	r0, #1
 8009dac:	f000 80a7 	beq.w	8009efe <_svfiprintf_r+0x1c6>
 8009db0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009db2:	445a      	add	r2, fp
 8009db4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009db6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 809f 	beq.w	8009efe <_svfiprintf_r+0x1c6>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dca:	f10a 0a01 	add.w	sl, sl, #1
 8009dce:	9304      	str	r3, [sp, #16]
 8009dd0:	9307      	str	r3, [sp, #28]
 8009dd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dd8:	4654      	mov	r4, sl
 8009dda:	2205      	movs	r2, #5
 8009ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de0:	484e      	ldr	r0, [pc, #312]	@ (8009f1c <_svfiprintf_r+0x1e4>)
 8009de2:	f7f6 fa95 	bl	8000310 <memchr>
 8009de6:	9a04      	ldr	r2, [sp, #16]
 8009de8:	b9d8      	cbnz	r0, 8009e22 <_svfiprintf_r+0xea>
 8009dea:	06d0      	lsls	r0, r2, #27
 8009dec:	bf44      	itt	mi
 8009dee:	2320      	movmi	r3, #32
 8009df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009df4:	0711      	lsls	r1, r2, #28
 8009df6:	bf44      	itt	mi
 8009df8:	232b      	movmi	r3, #43	@ 0x2b
 8009dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8009e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e04:	d015      	beq.n	8009e32 <_svfiprintf_r+0xfa>
 8009e06:	9a07      	ldr	r2, [sp, #28]
 8009e08:	4654      	mov	r4, sl
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	f04f 0c0a 	mov.w	ip, #10
 8009e10:	4621      	mov	r1, r4
 8009e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e16:	3b30      	subs	r3, #48	@ 0x30
 8009e18:	2b09      	cmp	r3, #9
 8009e1a:	d94b      	bls.n	8009eb4 <_svfiprintf_r+0x17c>
 8009e1c:	b1b0      	cbz	r0, 8009e4c <_svfiprintf_r+0x114>
 8009e1e:	9207      	str	r2, [sp, #28]
 8009e20:	e014      	b.n	8009e4c <_svfiprintf_r+0x114>
 8009e22:	eba0 0308 	sub.w	r3, r0, r8
 8009e26:	fa09 f303 	lsl.w	r3, r9, r3
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	46a2      	mov	sl, r4
 8009e30:	e7d2      	b.n	8009dd8 <_svfiprintf_r+0xa0>
 8009e32:	9b03      	ldr	r3, [sp, #12]
 8009e34:	1d19      	adds	r1, r3, #4
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	9103      	str	r1, [sp, #12]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bfbb      	ittet	lt
 8009e3e:	425b      	neglt	r3, r3
 8009e40:	f042 0202 	orrlt.w	r2, r2, #2
 8009e44:	9307      	strge	r3, [sp, #28]
 8009e46:	9307      	strlt	r3, [sp, #28]
 8009e48:	bfb8      	it	lt
 8009e4a:	9204      	strlt	r2, [sp, #16]
 8009e4c:	7823      	ldrb	r3, [r4, #0]
 8009e4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e50:	d10a      	bne.n	8009e68 <_svfiprintf_r+0x130>
 8009e52:	7863      	ldrb	r3, [r4, #1]
 8009e54:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e56:	d132      	bne.n	8009ebe <_svfiprintf_r+0x186>
 8009e58:	9b03      	ldr	r3, [sp, #12]
 8009e5a:	1d1a      	adds	r2, r3, #4
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	9203      	str	r2, [sp, #12]
 8009e60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e64:	3402      	adds	r4, #2
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f2c <_svfiprintf_r+0x1f4>
 8009e6c:	7821      	ldrb	r1, [r4, #0]
 8009e6e:	2203      	movs	r2, #3
 8009e70:	4650      	mov	r0, sl
 8009e72:	f7f6 fa4d 	bl	8000310 <memchr>
 8009e76:	b138      	cbz	r0, 8009e88 <_svfiprintf_r+0x150>
 8009e78:	9b04      	ldr	r3, [sp, #16]
 8009e7a:	eba0 000a 	sub.w	r0, r0, sl
 8009e7e:	2240      	movs	r2, #64	@ 0x40
 8009e80:	4082      	lsls	r2, r0
 8009e82:	4313      	orrs	r3, r2
 8009e84:	3401      	adds	r4, #1
 8009e86:	9304      	str	r3, [sp, #16]
 8009e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e8c:	4824      	ldr	r0, [pc, #144]	@ (8009f20 <_svfiprintf_r+0x1e8>)
 8009e8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e92:	2206      	movs	r2, #6
 8009e94:	f7f6 fa3c 	bl	8000310 <memchr>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d036      	beq.n	8009f0a <_svfiprintf_r+0x1d2>
 8009e9c:	4b21      	ldr	r3, [pc, #132]	@ (8009f24 <_svfiprintf_r+0x1ec>)
 8009e9e:	bb1b      	cbnz	r3, 8009ee8 <_svfiprintf_r+0x1b0>
 8009ea0:	9b03      	ldr	r3, [sp, #12]
 8009ea2:	3307      	adds	r3, #7
 8009ea4:	f023 0307 	bic.w	r3, r3, #7
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	9303      	str	r3, [sp, #12]
 8009eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eae:	4433      	add	r3, r6
 8009eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eb2:	e76a      	b.n	8009d8a <_svfiprintf_r+0x52>
 8009eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eb8:	460c      	mov	r4, r1
 8009eba:	2001      	movs	r0, #1
 8009ebc:	e7a8      	b.n	8009e10 <_svfiprintf_r+0xd8>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	3401      	adds	r4, #1
 8009ec2:	9305      	str	r3, [sp, #20]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	f04f 0c0a 	mov.w	ip, #10
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ed0:	3a30      	subs	r2, #48	@ 0x30
 8009ed2:	2a09      	cmp	r2, #9
 8009ed4:	d903      	bls.n	8009ede <_svfiprintf_r+0x1a6>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0c6      	beq.n	8009e68 <_svfiprintf_r+0x130>
 8009eda:	9105      	str	r1, [sp, #20]
 8009edc:	e7c4      	b.n	8009e68 <_svfiprintf_r+0x130>
 8009ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e7f0      	b.n	8009eca <_svfiprintf_r+0x192>
 8009ee8:	ab03      	add	r3, sp, #12
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	462a      	mov	r2, r5
 8009eee:	4b0e      	ldr	r3, [pc, #56]	@ (8009f28 <_svfiprintf_r+0x1f0>)
 8009ef0:	a904      	add	r1, sp, #16
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f3af 8000 	nop.w
 8009ef8:	1c42      	adds	r2, r0, #1
 8009efa:	4606      	mov	r6, r0
 8009efc:	d1d6      	bne.n	8009eac <_svfiprintf_r+0x174>
 8009efe:	89ab      	ldrh	r3, [r5, #12]
 8009f00:	065b      	lsls	r3, r3, #25
 8009f02:	f53f af2d 	bmi.w	8009d60 <_svfiprintf_r+0x28>
 8009f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f08:	e72c      	b.n	8009d64 <_svfiprintf_r+0x2c>
 8009f0a:	ab03      	add	r3, sp, #12
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	462a      	mov	r2, r5
 8009f10:	4b05      	ldr	r3, [pc, #20]	@ (8009f28 <_svfiprintf_r+0x1f0>)
 8009f12:	a904      	add	r1, sp, #16
 8009f14:	4638      	mov	r0, r7
 8009f16:	f000 f879 	bl	800a00c <_printf_i>
 8009f1a:	e7ed      	b.n	8009ef8 <_svfiprintf_r+0x1c0>
 8009f1c:	0800a3e8 	.word	0x0800a3e8
 8009f20:	0800a3f2 	.word	0x0800a3f2
 8009f24:	00000000 	.word	0x00000000
 8009f28:	08009c81 	.word	0x08009c81
 8009f2c:	0800a3ee 	.word	0x0800a3ee

08009f30 <_printf_common>:
 8009f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f34:	4616      	mov	r6, r2
 8009f36:	4698      	mov	r8, r3
 8009f38:	688a      	ldr	r2, [r1, #8]
 8009f3a:	690b      	ldr	r3, [r1, #16]
 8009f3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f40:	4293      	cmp	r3, r2
 8009f42:	bfb8      	it	lt
 8009f44:	4613      	movlt	r3, r2
 8009f46:	6033      	str	r3, [r6, #0]
 8009f48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f4c:	4607      	mov	r7, r0
 8009f4e:	460c      	mov	r4, r1
 8009f50:	b10a      	cbz	r2, 8009f56 <_printf_common+0x26>
 8009f52:	3301      	adds	r3, #1
 8009f54:	6033      	str	r3, [r6, #0]
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	0699      	lsls	r1, r3, #26
 8009f5a:	bf42      	ittt	mi
 8009f5c:	6833      	ldrmi	r3, [r6, #0]
 8009f5e:	3302      	addmi	r3, #2
 8009f60:	6033      	strmi	r3, [r6, #0]
 8009f62:	6825      	ldr	r5, [r4, #0]
 8009f64:	f015 0506 	ands.w	r5, r5, #6
 8009f68:	d106      	bne.n	8009f78 <_printf_common+0x48>
 8009f6a:	f104 0a19 	add.w	sl, r4, #25
 8009f6e:	68e3      	ldr	r3, [r4, #12]
 8009f70:	6832      	ldr	r2, [r6, #0]
 8009f72:	1a9b      	subs	r3, r3, r2
 8009f74:	42ab      	cmp	r3, r5
 8009f76:	dc26      	bgt.n	8009fc6 <_printf_common+0x96>
 8009f78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f7c:	6822      	ldr	r2, [r4, #0]
 8009f7e:	3b00      	subs	r3, #0
 8009f80:	bf18      	it	ne
 8009f82:	2301      	movne	r3, #1
 8009f84:	0692      	lsls	r2, r2, #26
 8009f86:	d42b      	bmi.n	8009fe0 <_printf_common+0xb0>
 8009f88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f8c:	4641      	mov	r1, r8
 8009f8e:	4638      	mov	r0, r7
 8009f90:	47c8      	blx	r9
 8009f92:	3001      	adds	r0, #1
 8009f94:	d01e      	beq.n	8009fd4 <_printf_common+0xa4>
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	6922      	ldr	r2, [r4, #16]
 8009f9a:	f003 0306 	and.w	r3, r3, #6
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	bf02      	ittt	eq
 8009fa2:	68e5      	ldreq	r5, [r4, #12]
 8009fa4:	6833      	ldreq	r3, [r6, #0]
 8009fa6:	1aed      	subeq	r5, r5, r3
 8009fa8:	68a3      	ldr	r3, [r4, #8]
 8009faa:	bf0c      	ite	eq
 8009fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fb0:	2500      	movne	r5, #0
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	bfc4      	itt	gt
 8009fb6:	1a9b      	subgt	r3, r3, r2
 8009fb8:	18ed      	addgt	r5, r5, r3
 8009fba:	2600      	movs	r6, #0
 8009fbc:	341a      	adds	r4, #26
 8009fbe:	42b5      	cmp	r5, r6
 8009fc0:	d11a      	bne.n	8009ff8 <_printf_common+0xc8>
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	e008      	b.n	8009fd8 <_printf_common+0xa8>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4652      	mov	r2, sl
 8009fca:	4641      	mov	r1, r8
 8009fcc:	4638      	mov	r0, r7
 8009fce:	47c8      	blx	r9
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d103      	bne.n	8009fdc <_printf_common+0xac>
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fdc:	3501      	adds	r5, #1
 8009fde:	e7c6      	b.n	8009f6e <_printf_common+0x3e>
 8009fe0:	18e1      	adds	r1, r4, r3
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	2030      	movs	r0, #48	@ 0x30
 8009fe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fea:	4422      	add	r2, r4
 8009fec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ff4:	3302      	adds	r3, #2
 8009ff6:	e7c7      	b.n	8009f88 <_printf_common+0x58>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	4622      	mov	r2, r4
 8009ffc:	4641      	mov	r1, r8
 8009ffe:	4638      	mov	r0, r7
 800a000:	47c8      	blx	r9
 800a002:	3001      	adds	r0, #1
 800a004:	d0e6      	beq.n	8009fd4 <_printf_common+0xa4>
 800a006:	3601      	adds	r6, #1
 800a008:	e7d9      	b.n	8009fbe <_printf_common+0x8e>
	...

0800a00c <_printf_i>:
 800a00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a010:	7e0f      	ldrb	r7, [r1, #24]
 800a012:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a014:	2f78      	cmp	r7, #120	@ 0x78
 800a016:	4691      	mov	r9, r2
 800a018:	4680      	mov	r8, r0
 800a01a:	460c      	mov	r4, r1
 800a01c:	469a      	mov	sl, r3
 800a01e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a022:	d807      	bhi.n	800a034 <_printf_i+0x28>
 800a024:	2f62      	cmp	r7, #98	@ 0x62
 800a026:	d80a      	bhi.n	800a03e <_printf_i+0x32>
 800a028:	2f00      	cmp	r7, #0
 800a02a:	f000 80d2 	beq.w	800a1d2 <_printf_i+0x1c6>
 800a02e:	2f58      	cmp	r7, #88	@ 0x58
 800a030:	f000 80b9 	beq.w	800a1a6 <_printf_i+0x19a>
 800a034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a03c:	e03a      	b.n	800a0b4 <_printf_i+0xa8>
 800a03e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a042:	2b15      	cmp	r3, #21
 800a044:	d8f6      	bhi.n	800a034 <_printf_i+0x28>
 800a046:	a101      	add	r1, pc, #4	@ (adr r1, 800a04c <_printf_i+0x40>)
 800a048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a04c:	0800a0a5 	.word	0x0800a0a5
 800a050:	0800a0b9 	.word	0x0800a0b9
 800a054:	0800a035 	.word	0x0800a035
 800a058:	0800a035 	.word	0x0800a035
 800a05c:	0800a035 	.word	0x0800a035
 800a060:	0800a035 	.word	0x0800a035
 800a064:	0800a0b9 	.word	0x0800a0b9
 800a068:	0800a035 	.word	0x0800a035
 800a06c:	0800a035 	.word	0x0800a035
 800a070:	0800a035 	.word	0x0800a035
 800a074:	0800a035 	.word	0x0800a035
 800a078:	0800a1b9 	.word	0x0800a1b9
 800a07c:	0800a0e3 	.word	0x0800a0e3
 800a080:	0800a173 	.word	0x0800a173
 800a084:	0800a035 	.word	0x0800a035
 800a088:	0800a035 	.word	0x0800a035
 800a08c:	0800a1db 	.word	0x0800a1db
 800a090:	0800a035 	.word	0x0800a035
 800a094:	0800a0e3 	.word	0x0800a0e3
 800a098:	0800a035 	.word	0x0800a035
 800a09c:	0800a035 	.word	0x0800a035
 800a0a0:	0800a17b 	.word	0x0800a17b
 800a0a4:	6833      	ldr	r3, [r6, #0]
 800a0a6:	1d1a      	adds	r2, r3, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6032      	str	r2, [r6, #0]
 800a0ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e09d      	b.n	800a1f4 <_printf_i+0x1e8>
 800a0b8:	6833      	ldr	r3, [r6, #0]
 800a0ba:	6820      	ldr	r0, [r4, #0]
 800a0bc:	1d19      	adds	r1, r3, #4
 800a0be:	6031      	str	r1, [r6, #0]
 800a0c0:	0606      	lsls	r6, r0, #24
 800a0c2:	d501      	bpl.n	800a0c8 <_printf_i+0xbc>
 800a0c4:	681d      	ldr	r5, [r3, #0]
 800a0c6:	e003      	b.n	800a0d0 <_printf_i+0xc4>
 800a0c8:	0645      	lsls	r5, r0, #25
 800a0ca:	d5fb      	bpl.n	800a0c4 <_printf_i+0xb8>
 800a0cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0d0:	2d00      	cmp	r5, #0
 800a0d2:	da03      	bge.n	800a0dc <_printf_i+0xd0>
 800a0d4:	232d      	movs	r3, #45	@ 0x2d
 800a0d6:	426d      	negs	r5, r5
 800a0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0dc:	4859      	ldr	r0, [pc, #356]	@ (800a244 <_printf_i+0x238>)
 800a0de:	230a      	movs	r3, #10
 800a0e0:	e011      	b.n	800a106 <_printf_i+0xfa>
 800a0e2:	6821      	ldr	r1, [r4, #0]
 800a0e4:	6833      	ldr	r3, [r6, #0]
 800a0e6:	0608      	lsls	r0, r1, #24
 800a0e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0ec:	d402      	bmi.n	800a0f4 <_printf_i+0xe8>
 800a0ee:	0649      	lsls	r1, r1, #25
 800a0f0:	bf48      	it	mi
 800a0f2:	b2ad      	uxthmi	r5, r5
 800a0f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0f6:	4853      	ldr	r0, [pc, #332]	@ (800a244 <_printf_i+0x238>)
 800a0f8:	6033      	str	r3, [r6, #0]
 800a0fa:	bf14      	ite	ne
 800a0fc:	230a      	movne	r3, #10
 800a0fe:	2308      	moveq	r3, #8
 800a100:	2100      	movs	r1, #0
 800a102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a106:	6866      	ldr	r6, [r4, #4]
 800a108:	60a6      	str	r6, [r4, #8]
 800a10a:	2e00      	cmp	r6, #0
 800a10c:	bfa2      	ittt	ge
 800a10e:	6821      	ldrge	r1, [r4, #0]
 800a110:	f021 0104 	bicge.w	r1, r1, #4
 800a114:	6021      	strge	r1, [r4, #0]
 800a116:	b90d      	cbnz	r5, 800a11c <_printf_i+0x110>
 800a118:	2e00      	cmp	r6, #0
 800a11a:	d04b      	beq.n	800a1b4 <_printf_i+0x1a8>
 800a11c:	4616      	mov	r6, r2
 800a11e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a122:	fb03 5711 	mls	r7, r3, r1, r5
 800a126:	5dc7      	ldrb	r7, [r0, r7]
 800a128:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a12c:	462f      	mov	r7, r5
 800a12e:	42bb      	cmp	r3, r7
 800a130:	460d      	mov	r5, r1
 800a132:	d9f4      	bls.n	800a11e <_printf_i+0x112>
 800a134:	2b08      	cmp	r3, #8
 800a136:	d10b      	bne.n	800a150 <_printf_i+0x144>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	07df      	lsls	r7, r3, #31
 800a13c:	d508      	bpl.n	800a150 <_printf_i+0x144>
 800a13e:	6923      	ldr	r3, [r4, #16]
 800a140:	6861      	ldr	r1, [r4, #4]
 800a142:	4299      	cmp	r1, r3
 800a144:	bfde      	ittt	le
 800a146:	2330      	movle	r3, #48	@ 0x30
 800a148:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a14c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a150:	1b92      	subs	r2, r2, r6
 800a152:	6122      	str	r2, [r4, #16]
 800a154:	f8cd a000 	str.w	sl, [sp]
 800a158:	464b      	mov	r3, r9
 800a15a:	aa03      	add	r2, sp, #12
 800a15c:	4621      	mov	r1, r4
 800a15e:	4640      	mov	r0, r8
 800a160:	f7ff fee6 	bl	8009f30 <_printf_common>
 800a164:	3001      	adds	r0, #1
 800a166:	d14a      	bne.n	800a1fe <_printf_i+0x1f2>
 800a168:	f04f 30ff 	mov.w	r0, #4294967295
 800a16c:	b004      	add	sp, #16
 800a16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	f043 0320 	orr.w	r3, r3, #32
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	4833      	ldr	r0, [pc, #204]	@ (800a248 <_printf_i+0x23c>)
 800a17c:	2778      	movs	r7, #120	@ 0x78
 800a17e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	6831      	ldr	r1, [r6, #0]
 800a186:	061f      	lsls	r7, r3, #24
 800a188:	f851 5b04 	ldr.w	r5, [r1], #4
 800a18c:	d402      	bmi.n	800a194 <_printf_i+0x188>
 800a18e:	065f      	lsls	r7, r3, #25
 800a190:	bf48      	it	mi
 800a192:	b2ad      	uxthmi	r5, r5
 800a194:	6031      	str	r1, [r6, #0]
 800a196:	07d9      	lsls	r1, r3, #31
 800a198:	bf44      	itt	mi
 800a19a:	f043 0320 	orrmi.w	r3, r3, #32
 800a19e:	6023      	strmi	r3, [r4, #0]
 800a1a0:	b11d      	cbz	r5, 800a1aa <_printf_i+0x19e>
 800a1a2:	2310      	movs	r3, #16
 800a1a4:	e7ac      	b.n	800a100 <_printf_i+0xf4>
 800a1a6:	4827      	ldr	r0, [pc, #156]	@ (800a244 <_printf_i+0x238>)
 800a1a8:	e7e9      	b.n	800a17e <_printf_i+0x172>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	f023 0320 	bic.w	r3, r3, #32
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	e7f6      	b.n	800a1a2 <_printf_i+0x196>
 800a1b4:	4616      	mov	r6, r2
 800a1b6:	e7bd      	b.n	800a134 <_printf_i+0x128>
 800a1b8:	6833      	ldr	r3, [r6, #0]
 800a1ba:	6825      	ldr	r5, [r4, #0]
 800a1bc:	6961      	ldr	r1, [r4, #20]
 800a1be:	1d18      	adds	r0, r3, #4
 800a1c0:	6030      	str	r0, [r6, #0]
 800a1c2:	062e      	lsls	r6, r5, #24
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	d501      	bpl.n	800a1cc <_printf_i+0x1c0>
 800a1c8:	6019      	str	r1, [r3, #0]
 800a1ca:	e002      	b.n	800a1d2 <_printf_i+0x1c6>
 800a1cc:	0668      	lsls	r0, r5, #25
 800a1ce:	d5fb      	bpl.n	800a1c8 <_printf_i+0x1bc>
 800a1d0:	8019      	strh	r1, [r3, #0]
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	6123      	str	r3, [r4, #16]
 800a1d6:	4616      	mov	r6, r2
 800a1d8:	e7bc      	b.n	800a154 <_printf_i+0x148>
 800a1da:	6833      	ldr	r3, [r6, #0]
 800a1dc:	1d1a      	adds	r2, r3, #4
 800a1de:	6032      	str	r2, [r6, #0]
 800a1e0:	681e      	ldr	r6, [r3, #0]
 800a1e2:	6862      	ldr	r2, [r4, #4]
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f7f6 f892 	bl	8000310 <memchr>
 800a1ec:	b108      	cbz	r0, 800a1f2 <_printf_i+0x1e6>
 800a1ee:	1b80      	subs	r0, r0, r6
 800a1f0:	6060      	str	r0, [r4, #4]
 800a1f2:	6863      	ldr	r3, [r4, #4]
 800a1f4:	6123      	str	r3, [r4, #16]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1fc:	e7aa      	b.n	800a154 <_printf_i+0x148>
 800a1fe:	6923      	ldr	r3, [r4, #16]
 800a200:	4632      	mov	r2, r6
 800a202:	4649      	mov	r1, r9
 800a204:	4640      	mov	r0, r8
 800a206:	47d0      	blx	sl
 800a208:	3001      	adds	r0, #1
 800a20a:	d0ad      	beq.n	800a168 <_printf_i+0x15c>
 800a20c:	6823      	ldr	r3, [r4, #0]
 800a20e:	079b      	lsls	r3, r3, #30
 800a210:	d413      	bmi.n	800a23a <_printf_i+0x22e>
 800a212:	68e0      	ldr	r0, [r4, #12]
 800a214:	9b03      	ldr	r3, [sp, #12]
 800a216:	4298      	cmp	r0, r3
 800a218:	bfb8      	it	lt
 800a21a:	4618      	movlt	r0, r3
 800a21c:	e7a6      	b.n	800a16c <_printf_i+0x160>
 800a21e:	2301      	movs	r3, #1
 800a220:	4632      	mov	r2, r6
 800a222:	4649      	mov	r1, r9
 800a224:	4640      	mov	r0, r8
 800a226:	47d0      	blx	sl
 800a228:	3001      	adds	r0, #1
 800a22a:	d09d      	beq.n	800a168 <_printf_i+0x15c>
 800a22c:	3501      	adds	r5, #1
 800a22e:	68e3      	ldr	r3, [r4, #12]
 800a230:	9903      	ldr	r1, [sp, #12]
 800a232:	1a5b      	subs	r3, r3, r1
 800a234:	42ab      	cmp	r3, r5
 800a236:	dcf2      	bgt.n	800a21e <_printf_i+0x212>
 800a238:	e7eb      	b.n	800a212 <_printf_i+0x206>
 800a23a:	2500      	movs	r5, #0
 800a23c:	f104 0619 	add.w	r6, r4, #25
 800a240:	e7f5      	b.n	800a22e <_printf_i+0x222>
 800a242:	bf00      	nop
 800a244:	0800a3f9 	.word	0x0800a3f9
 800a248:	0800a40a 	.word	0x0800a40a

0800a24c <memmove>:
 800a24c:	4288      	cmp	r0, r1
 800a24e:	b510      	push	{r4, lr}
 800a250:	eb01 0402 	add.w	r4, r1, r2
 800a254:	d902      	bls.n	800a25c <memmove+0x10>
 800a256:	4284      	cmp	r4, r0
 800a258:	4623      	mov	r3, r4
 800a25a:	d807      	bhi.n	800a26c <memmove+0x20>
 800a25c:	1e43      	subs	r3, r0, #1
 800a25e:	42a1      	cmp	r1, r4
 800a260:	d008      	beq.n	800a274 <memmove+0x28>
 800a262:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a26a:	e7f8      	b.n	800a25e <memmove+0x12>
 800a26c:	4402      	add	r2, r0
 800a26e:	4601      	mov	r1, r0
 800a270:	428a      	cmp	r2, r1
 800a272:	d100      	bne.n	800a276 <memmove+0x2a>
 800a274:	bd10      	pop	{r4, pc}
 800a276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a27a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a27e:	e7f7      	b.n	800a270 <memmove+0x24>

0800a280 <_sbrk_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d06      	ldr	r5, [pc, #24]	@ (800a29c <_sbrk_r+0x1c>)
 800a284:	2300      	movs	r3, #0
 800a286:	4604      	mov	r4, r0
 800a288:	4608      	mov	r0, r1
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	f7f7 f91e 	bl	80014cc <_sbrk>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_sbrk_r+0x1a>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_sbrk_r+0x1a>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	24000818 	.word	0x24000818

0800a2a0 <memcpy>:
 800a2a0:	440a      	add	r2, r1
 800a2a2:	4291      	cmp	r1, r2
 800a2a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2a8:	d100      	bne.n	800a2ac <memcpy+0xc>
 800a2aa:	4770      	bx	lr
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2b6:	4291      	cmp	r1, r2
 800a2b8:	d1f9      	bne.n	800a2ae <memcpy+0xe>
 800a2ba:	bd10      	pop	{r4, pc}

0800a2bc <_realloc_r>:
 800a2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	4615      	mov	r5, r2
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	b921      	cbnz	r1, 800a2d2 <_realloc_r+0x16>
 800a2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	f7ff bc4b 	b.w	8009b68 <_malloc_r>
 800a2d2:	b92a      	cbnz	r2, 800a2e0 <_realloc_r+0x24>
 800a2d4:	f7ff fbdc 	bl	8009a90 <_free_r>
 800a2d8:	2400      	movs	r4, #0
 800a2da:	4620      	mov	r0, r4
 800a2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e0:	f000 f81a 	bl	800a318 <_malloc_usable_size_r>
 800a2e4:	4285      	cmp	r5, r0
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	d802      	bhi.n	800a2f0 <_realloc_r+0x34>
 800a2ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a2ee:	d8f4      	bhi.n	800a2da <_realloc_r+0x1e>
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	f7ff fc38 	bl	8009b68 <_malloc_r>
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d0ec      	beq.n	800a2d8 <_realloc_r+0x1c>
 800a2fe:	42b5      	cmp	r5, r6
 800a300:	462a      	mov	r2, r5
 800a302:	4621      	mov	r1, r4
 800a304:	bf28      	it	cs
 800a306:	4632      	movcs	r2, r6
 800a308:	f7ff ffca 	bl	800a2a0 <memcpy>
 800a30c:	4621      	mov	r1, r4
 800a30e:	4640      	mov	r0, r8
 800a310:	f7ff fbbe 	bl	8009a90 <_free_r>
 800a314:	463c      	mov	r4, r7
 800a316:	e7e0      	b.n	800a2da <_realloc_r+0x1e>

0800a318 <_malloc_usable_size_r>:
 800a318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a31c:	1f18      	subs	r0, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	bfbc      	itt	lt
 800a322:	580b      	ldrlt	r3, [r1, r0]
 800a324:	18c0      	addlt	r0, r0, r3
 800a326:	4770      	bx	lr

0800a328 <_init>:
 800a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32a:	bf00      	nop
 800a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a32e:	bc08      	pop	{r3}
 800a330:	469e      	mov	lr, r3
 800a332:	4770      	bx	lr

0800a334 <_fini>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr
