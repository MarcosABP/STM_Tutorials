
Tutorial_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a380  0800a380  0000b380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a4ac  0800a4ac  0000b4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a4b4  0800a4b4  0000b4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a4b8  0800a4b8  0000b4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800a4bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007c8  24000060  0800a51c  0000c060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000828  0800a51c  0000c828  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a318  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003079  00000000  00000000  000263a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001330  00000000  00000000  00029420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eee  00000000  00000000  0002a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003ec6  00000000  00000000  0002b63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ca03  00000000  00000000  0002f504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160975  00000000  00000000  0004bf07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ac87c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005780  00000000  00000000  001ac8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001b2040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a368 	.word	0x0800a368

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800a368 	.word	0x0800a368

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <MAX7219_SendData>:
    {0x3C, 0x42, 0x42, 0x3C, 0x42, 0x42, 0x42, 0x3C}, /* 8 */
    {0x3C, 0x42, 0x42, 0x42, 0x3E, 0x02, 0x04, 0x38}  /* 9 */
};


void MAX7219_SendData(uint8_t reg, uint8_t data) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	460a      	mov	r2, r1
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	4613      	mov	r3, r2
 80006ae:	71bb      	strb	r3, [r7, #6]
	uint8_t txData[2] = {reg, data};
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	733b      	strb	r3, [r7, #12]
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Pull CS low
 80006b8:	2200      	movs	r2, #0
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <MAX7219_SendData+0x44>)
 80006be:	f002 f8f3 	bl	80028a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY); // Transmit register and data
 80006c2:	f107 010c 	add.w	r1, r7, #12
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	2202      	movs	r2, #2
 80006cc:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <MAX7219_SendData+0x48>)
 80006ce:	f005 ff9d 	bl	800660c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Pull CS high
 80006d2:	2201      	movs	r2, #1
 80006d4:	2140      	movs	r1, #64	@ 0x40
 80006d6:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <MAX7219_SendData+0x44>)
 80006d8:	f002 f8e6 	bl	80028a8 <HAL_GPIO_WritePin>
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58020000 	.word	0x58020000
 80006e8:	240000d0 	.word	0x240000d0

080006ec <MAX7219_init>:

void MAX7219_init(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	MAX7219_SendData(0x09,0x00);
 80006f2:	2100      	movs	r1, #0
 80006f4:	2009      	movs	r0, #9
 80006f6:	f7ff ffd3 	bl	80006a0 <MAX7219_SendData>
	MAX7219_SendData(0x0A,0x00);
 80006fa:	2100      	movs	r1, #0
 80006fc:	200a      	movs	r0, #10
 80006fe:	f7ff ffcf 	bl	80006a0 <MAX7219_SendData>
	MAX7219_SendData(0x0B,0x07);
 8000702:	2107      	movs	r1, #7
 8000704:	200b      	movs	r0, #11
 8000706:	f7ff ffcb 	bl	80006a0 <MAX7219_SendData>
	MAX7219_SendData(0x0C,0x01);
 800070a:	2101      	movs	r1, #1
 800070c:	200c      	movs	r0, #12
 800070e:	f7ff ffc7 	bl	80006a0 <MAX7219_SendData>
	MAX7219_SendData(0x0F,0x00);
 8000712:	2100      	movs	r1, #0
 8000714:	200f      	movs	r0, #15
 8000716:	f7ff ffc3 	bl	80006a0 <MAX7219_SendData>

    for (int i = 1; i <= 8; i++) {
 800071a:	2301      	movs	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e008      	b.n	8000732 <MAX7219_init+0x46>
        MAX7219_SendData(i, 0x00);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffba 	bl	80006a0 <MAX7219_SendData>
    for (int i = 1; i <= 8; i++) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3301      	adds	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b08      	cmp	r3, #8
 8000736:	ddf3      	ble.n	8000720 <MAX7219_init+0x34>
    }
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <Display_Char>:

void Display_Char(const uint8_t *char_pattern) {
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	MAX7219_init();
 800074a:	f7ff ffcf 	bl	80006ec <MAX7219_init>
    for (int i = 0; i < 8; i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	e00d      	b.n	8000770 <Display_Char+0x2e>
    	MAX7219_SendData(i + 1, char_pattern[i]);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	3301      	adds	r3, #1
 800075a:	b2d8      	uxtb	r0, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	f7ff ff9b 	bl	80006a0 <MAX7219_SendData>
    for (int i = 0; i < 8; i++) {
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3301      	adds	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b07      	cmp	r3, #7
 8000774:	ddee      	ble.n	8000754 <Display_Char+0x12>
    }
}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Display_Number>:

void Display_Number(uint8_t number) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	MAX7219_init();
 800078a:	f7ff ffaf 	bl	80006ec <MAX7219_init>
	 uint8_t digits[5];
	 uint8_t count = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	77fb      	strb	r3, [r7, #31]

	do {
		digits[count++] = number % 10;
 8000792:	7ffb      	ldrb	r3, [r7, #31]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	77fa      	strb	r2, [r7, #31]
 8000798:	4618      	mov	r0, r3
 800079a:	79fa      	ldrb	r2, [r7, #7]
 800079c:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <Display_Number+0xc8>)
 800079e:	fba3 1302 	umull	r1, r3, r3, r2
 80007a2:	08d9      	lsrs	r1, r3, #3
 80007a4:	460b      	mov	r3, r1
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	440b      	add	r3, r1
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	f100 0320 	add.w	r3, r0, #32
 80007b4:	443b      	add	r3, r7
 80007b6:	f803 2c18 	strb.w	r2, [r3, #-24]
		number /= 10;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4a22      	ldr	r2, [pc, #136]	@ (8000848 <Display_Number+0xc8>)
 80007be:	fba2 2303 	umull	r2, r3, r2, r3
 80007c2:	08db      	lsrs	r3, r3, #3
 80007c4:	71fb      	strb	r3, [r7, #7]
	} while (number > 0);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1e2      	bne.n	8000792 <Display_Number+0x12>


	for (int i = count - 1; i >= 0; i--) {
 80007cc:	7ffb      	ldrb	r3, [r7, #31]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	e021      	b.n	8000818 <Display_Number+0x98>
		for (int row = 0; row < 8; row++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e014      	b.n	8000804 <Display_Number+0x84>
			MAX7219_SendData(row + 1, numbers[digits[i]][row]);
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	3301      	adds	r3, #1
 80007e0:	b2d8      	uxtb	r0, r3
 80007e2:	f107 0208 	add.w	r2, r7, #8
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4a17      	ldr	r2, [pc, #92]	@ (800084c <Display_Number+0xcc>)
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	441a      	add	r2, r3
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	f7ff ff51 	bl	80006a0 <MAX7219_SendData>
		for (int row = 0; row < 8; row++) {
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	2b07      	cmp	r3, #7
 8000808:	dde7      	ble.n	80007da <Display_Number+0x5a>
		}
		HAL_Delay(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800080e:	f000 fff7 	bl	8001800 <HAL_Delay>
	for (int i = count - 1; i >= 0; i--) {
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	3b01      	subs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	2b00      	cmp	r3, #0
 800081c:	dada      	bge.n	80007d4 <Display_Number+0x54>
	}

	for (int i = 1; i <= 8; i++) {
 800081e:	2301      	movs	r3, #1
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e008      	b.n	8000836 <Display_Number+0xb6>
		MAX7219_SendData(i, 0x00);
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff38 	bl	80006a0 <MAX7219_SendData>
	for (int i = 1; i <= 8; i++) {
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	3301      	adds	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	2b08      	cmp	r3, #8
 800083a:	ddf3      	ble.n	8000824 <Display_Number+0xa4>
	}
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	cccccccd 	.word	0xcccccccd
 800084c:	0800a3f0 	.word	0x0800a3f0

08000850 <clean_command_buffer>:

char * clean_command_buffer(char *command) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    while (*command == '\r' || *command == '\n') {
 8000858:	e002      	b.n	8000860 <clean_command_buffer+0x10>
        command++;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3301      	adds	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
    while (*command == '\r' || *command == '\n') {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b0d      	cmp	r3, #13
 8000866:	d0f8      	beq.n	800085a <clean_command_buffer+0xa>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b0a      	cmp	r3, #10
 800086e:	d0f4      	beq.n	800085a <clean_command_buffer+0xa>
    }
    size_t len = strlen(command);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fd3f 	bl	80002f4 <strlen>
 8000876:	60f8      	str	r0, [r7, #12]
        while (len > 0 && command[len - 1] == '\r') {
 8000878:	e007      	b.n	800088a <clean_command_buffer+0x3a>
            command[--len] = '\0';
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3b01      	subs	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4413      	add	r3, r2
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
        while (len > 0 && command[len - 1] == '\r') {
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d006      	beq.n	800089e <clean_command_buffer+0x4e>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	3b01      	subs	r3, #1
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b0d      	cmp	r3, #13
 800089c:	d0ed      	beq.n	800087a <clean_command_buffer+0x2a>
        }

	return command;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <Read_PCF8591>:

uint8_t Read_PCF8591(uint8_t channel) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
    uint8_t command_ain;
    uint8_t data;

    switch (channel) {
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d00c      	beq.n	80008d2 <Read_PCF8591+0x2a>
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	dc0d      	bgt.n	80008d8 <Read_PCF8591+0x30>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <Read_PCF8591+0x1e>
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d003      	beq.n	80008cc <Read_PCF8591+0x24>
 80008c4:	e008      	b.n	80008d8 <Read_PCF8591+0x30>
        case 0: command_ain = 0x40; break;
 80008c6:	2340      	movs	r3, #64	@ 0x40
 80008c8:	73fb      	strb	r3, [r7, #15]
 80008ca:	e007      	b.n	80008dc <Read_PCF8591+0x34>
        case 1: command_ain = 0x41; break;
 80008cc:	2341      	movs	r3, #65	@ 0x41
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	e004      	b.n	80008dc <Read_PCF8591+0x34>
        case 3: command_ain = 0x43; break;
 80008d2:	2343      	movs	r3, #67	@ 0x43
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	e001      	b.n	80008dc <Read_PCF8591+0x34>
        default: return 0xFF;
 80008d8:	23ff      	movs	r3, #255	@ 0xff
 80008da:	e014      	b.n	8000906 <Read_PCF8591+0x5e>
    }

    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)PCF8591_ADDRESS, &command_ain, 1, HAL_MAX_DELAY);
 80008dc:	f107 020f 	add.w	r2, r7, #15
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2301      	movs	r3, #1
 80008e8:	2190      	movs	r1, #144	@ 0x90
 80008ea:	4809      	ldr	r0, [pc, #36]	@ (8000910 <Read_PCF8591+0x68>)
 80008ec:	f002 f892 	bl	8002a14 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, (uint16_t)PCF8591_ADDRESS, &data, 1, HAL_MAX_DELAY);
 80008f0:	f107 020e 	add.w	r2, r7, #14
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2301      	movs	r3, #1
 80008fc:	2190      	movs	r1, #144	@ 0x90
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <Read_PCF8591+0x68>)
 8000900:	f002 f9a0 	bl	8002c44 <HAL_I2C_Master_Receive>

    return data;
 8000904:	7bbb      	ldrb	r3, [r7, #14]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2400007c 	.word	0x2400007c

08000914 <process_command>:
    char msg[20];
    sprintf(msg, "DAC Value: %d\n", value);
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void process_command(char *command) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    char msg[20];
    command = clean_command_buffer(command);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff97 	bl	8000850 <clean_command_buffer>
 8000922:	6078      	str	r0, [r7, #4]

    if (strcmp(command, "Temp") == 0) {
 8000924:	4944      	ldr	r1, [pc, #272]	@ (8000a38 <process_command+0x124>)
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fcda 	bl	80002e0 <strcmp>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d125      	bne.n	800097e <process_command+0x6a>
        uint8_t temp = Read_PCF8591(0);
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ffb8 	bl	80008a8 <Read_PCF8591>
 8000938:	4603      	mov	r3, r0
 800093a:	777b      	strb	r3, [r7, #29]
        sprintf(msg, "Temperature: %d\n", temp);
 800093c:	7f7a      	ldrb	r2, [r7, #29]
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	493e      	ldr	r1, [pc, #248]	@ (8000a3c <process_command+0x128>)
 8000944:	4618      	mov	r0, r3
 8000946:	f009 f86f 	bl	8009a28 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fcd0 	bl	80002f4 <strlen>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	f107 0108 	add.w	r1, r7, #8
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	4837      	ldr	r0, [pc, #220]	@ (8000a40 <process_command+0x12c>)
 8000962:	f006 f97a 	bl	8006c5a <HAL_UART_Transmit>

        Display_Char(char_T);
 8000966:	4837      	ldr	r0, [pc, #220]	@ (8000a44 <process_command+0x130>)
 8000968:	f7ff feeb 	bl	8000742 <Display_Char>
        HAL_Delay(500);
 800096c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000970:	f000 ff46 	bl	8001800 <HAL_Delay>
        Display_Number(temp);
 8000974:	7f7b      	ldrb	r3, [r7, #29]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff02 	bl	8000780 <Display_Number>

        Display_Char(char_L);
        HAL_Delay(500);
        Display_Number(ldr);
    }
}
 800097c:	e058      	b.n	8000a30 <process_command+0x11c>
    } else if (strcmp(command, "Volt") == 0) {
 800097e:	4932      	ldr	r1, [pc, #200]	@ (8000a48 <process_command+0x134>)
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff fcad 	bl	80002e0 <strcmp>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d125      	bne.n	80009d8 <process_command+0xc4>
        uint8_t volt = Read_PCF8591(1);
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff ff8b 	bl	80008a8 <Read_PCF8591>
 8000992:	4603      	mov	r3, r0
 8000994:	77bb      	strb	r3, [r7, #30]
        sprintf(msg, "Voltage: %d\n", volt);
 8000996:	7fba      	ldrb	r2, [r7, #30]
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	492b      	ldr	r1, [pc, #172]	@ (8000a4c <process_command+0x138>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f009 f842 	bl	8009a28 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fca3 	bl	80002f4 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	f107 0108 	add.w	r1, r7, #8
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	4821      	ldr	r0, [pc, #132]	@ (8000a40 <process_command+0x12c>)
 80009bc:	f006 f94d 	bl	8006c5a <HAL_UART_Transmit>
        Display_Char(char_V);
 80009c0:	4823      	ldr	r0, [pc, #140]	@ (8000a50 <process_command+0x13c>)
 80009c2:	f7ff febe 	bl	8000742 <Display_Char>
        HAL_Delay(500);
 80009c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ca:	f000 ff19 	bl	8001800 <HAL_Delay>
        Display_Number(volt);
 80009ce:	7fbb      	ldrb	r3, [r7, #30]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fed5 	bl	8000780 <Display_Number>
}
 80009d6:	e02b      	b.n	8000a30 <process_command+0x11c>
    } else if (strcmp(command, "LDR") == 0) {
 80009d8:	491e      	ldr	r1, [pc, #120]	@ (8000a54 <process_command+0x140>)
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fc80 	bl	80002e0 <strcmp>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d124      	bne.n	8000a30 <process_command+0x11c>
        uint8_t ldr = Read_PCF8591(3);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f7ff ff5e 	bl	80008a8 <Read_PCF8591>
 80009ec:	4603      	mov	r3, r0
 80009ee:	77fb      	strb	r3, [r7, #31]
        sprintf(msg, "Luminosity: %d\n", ldr);
 80009f0:	7ffa      	ldrb	r2, [r7, #31]
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4918      	ldr	r1, [pc, #96]	@ (8000a58 <process_command+0x144>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f009 f815 	bl	8009a28 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc76 	bl	80002f4 <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f107 0108 	add.w	r1, r7, #8
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	480a      	ldr	r0, [pc, #40]	@ (8000a40 <process_command+0x12c>)
 8000a16:	f006 f920 	bl	8006c5a <HAL_UART_Transmit>
        Display_Char(char_L);
 8000a1a:	4810      	ldr	r0, [pc, #64]	@ (8000a5c <process_command+0x148>)
 8000a1c:	f7ff fe91 	bl	8000742 <Display_Char>
        HAL_Delay(500);
 8000a20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a24:	f000 feec 	bl	8001800 <HAL_Delay>
        Display_Number(ldr);
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fea8 	bl	8000780 <Display_Number>
}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	0800a390 	.word	0x0800a390
 8000a3c:	0800a398 	.word	0x0800a398
 8000a40:	24000158 	.word	0x24000158
 8000a44:	0800a3d8 	.word	0x0800a3d8
 8000a48:	0800a3ac 	.word	0x0800a3ac
 8000a4c:	0800a3b4 	.word	0x0800a3b4
 8000a50:	0800a3e0 	.word	0x0800a3e0
 8000a54:	0800a3c4 	.word	0x0800a3c4
 8000a58:	0800a3c8 	.word	0x0800a3c8
 8000a5c:	0800a3e8 	.word	0x0800a3e8

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 fe3a 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f81a 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f000 f9ae 	bl	8000dcc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a70:	f000 f92e 	bl	8000cd0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a74:	f000 f978 	bl	8000d68 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000a78:	f000 f892 	bl	8000ba0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a7c:	f000 f8d0 	bl	8000c20 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  memset(command_buffer, 0, sizeof(command_buffer));
 8000a80:	2206      	movs	r2, #6
 8000a82:	2100      	movs	r1, #0
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <main+0x38>)
 8000a86:	f008 ffef 	bl	8009a68 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      HAL_UART_Receive_IT(&huart3, (uint8_t*)command_buffer, sizeof(command_buffer) - 1);
 8000a8a:	2205      	movs	r2, #5
 8000a8c:	4902      	ldr	r1, [pc, #8]	@ (8000a98 <main+0x38>)
 8000a8e:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <main+0x3c>)
 8000a90:	f006 f972 	bl	8006d78 <HAL_UART_Receive_IT>
 8000a94:	e7f9      	b.n	8000a8a <main+0x2a>
 8000a96:	bf00      	nop
 8000a98:	240006d0 	.word	0x240006d0
 8000a9c:	24000158 	.word	0x24000158

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b09c      	sub	sp, #112	@ 0x70
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aaa:	224c      	movs	r2, #76	@ 0x4c
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f008 ffda 	bl	8009a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f008 ffd4 	bl	8009a68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f002 fe23 	bl	800370c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b33      	ldr	r3, [pc, #204]	@ (8000b98 <SystemClock_Config+0xf8>)
 8000acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ace:	4a32      	ldr	r2, [pc, #200]	@ (8000b98 <SystemClock_Config+0xf8>)
 8000ad0:	f023 0301 	bic.w	r3, r3, #1
 8000ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ad6:	4b30      	ldr	r3, [pc, #192]	@ (8000b98 <SystemClock_Config+0xf8>)
 8000ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <SystemClock_Config+0xfc>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8000b9c <SystemClock_Config+0xfc>)
 8000aea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <SystemClock_Config+0xfc>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000afc:	bf00      	nop
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <SystemClock_Config+0xfc>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b0a:	d1f8      	bne.n	8000afe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b10:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1a:	2340      	movs	r3, #64	@ 0x40
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	2302      	movs	r3, #2
 8000b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 19;
 8000b2a:	2313      	movs	r3, #19
 8000b2c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b32:	2303      	movs	r3, #3
 8000b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fe28 	bl	80037a0 <HAL_RCC_OscConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b56:	f000 fa89 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5a:	233f      	movs	r3, #63	@ 0x3f
 8000b5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b6e:	2340      	movs	r3, #64	@ 0x40
 8000b70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 fa68 	bl	8004054 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b8a:	f000 fa6f 	bl	800106c <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3770      	adds	r7, #112	@ 0x70
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58000400 	.word	0x58000400
 8000b9c:	58024800 	.word	0x58024800

08000ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <MX_I2C1_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bac:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <MX_I2C1_Init+0x7c>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bda:	480e      	ldr	r0, [pc, #56]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bdc:	f001 fe7e 	bl	80028dc <HAL_I2C_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000be6:	f000 fa41 	bl	800106c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4809      	ldr	r0, [pc, #36]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bee:	f002 fbc5 	bl	800337c <HAL_I2CEx_ConfigAnalogFilter>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bf8:	f000 fa38 	bl	800106c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000c00:	f002 fc07 	bl	8003412 <HAL_I2CEx_ConfigDigitalFilter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f000 fa2f 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2400007c 	.word	0x2400007c
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	00707cbb 	.word	0x00707cbb

08000c20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c24:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c26:	4a29      	ldr	r2, [pc, #164]	@ (8000ccc <MX_SPI1_Init+0xac>)
 8000c28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c2a:	4b27      	ldr	r3, [pc, #156]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c2c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000c32:	4b25      	ldr	r3, [pc, #148]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c38:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c40:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c46:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c4e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c56:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000c5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c62:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c68:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c74:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c7a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_SPI1_Init+0xa8>)
 8000cb4:	f005 fb86 	bl	80063c4 <HAL_SPI_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000cbe:	f000 f9d5 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	240000d0 	.word	0x240000d0
 8000ccc:	40013000 	.word	0x40013000

08000cd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cd6:	4a23      	ldr	r2, [pc, #140]	@ (8000d64 <MX_USART3_UART_Init+0x94>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cda:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d12:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d18:	4811      	ldr	r0, [pc, #68]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d1a:	f005 ff4e 	bl	8006bba <HAL_UART_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d24:	f000 f9a2 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	480d      	ldr	r0, [pc, #52]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d2c:	f008 faa9 	bl	8009282 <HAL_UARTEx_SetTxFifoThreshold>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d36:	f000 f999 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4808      	ldr	r0, [pc, #32]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d3e:	f008 fade 	bl	80092fe <HAL_UARTEx_SetRxFifoThreshold>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d48:	f000 f990 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d4e:	f008 fa5f 	bl	8009210 <HAL_UARTEx_DisableFifoMode>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f000 f988 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	24000158 	.word	0x24000158
 8000d64:	40004800 	.word	0x40004800

08000d68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d6e:	4a16      	ldr	r2, [pc, #88]	@ (8000dc8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d74:	2209      	movs	r2, #9
 8000d76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d86:	2202      	movs	r2, #2
 8000d88:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db0:	f002 fb7b 	bl	80034aa <HAL_PCD_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000dba:	f000 f957 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	240001ec 	.word	0x240001ec
 8000dc8:	40080000 	.word	0x40080000

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	@ 0x30
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b8c      	ldr	r3, [pc, #560]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de8:	4a8a      	ldr	r2, [pc, #552]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df2:	4b88      	ldr	r3, [pc, #544]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e00:	4b84      	ldr	r3, [pc, #528]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	4a83      	ldr	r2, [pc, #524]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e10:	4b80      	ldr	r3, [pc, #512]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	4a7b      	ldr	r2, [pc, #492]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e2e:	4b79      	ldr	r3, [pc, #484]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b75      	ldr	r3, [pc, #468]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e42:	4a74      	ldr	r2, [pc, #464]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4c:	4b71      	ldr	r3, [pc, #452]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e60:	4a6c      	ldr	r2, [pc, #432]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e62:	f043 0308 	orr.w	r3, r3, #8
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e78:	4b66      	ldr	r3, [pc, #408]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7e:	4a65      	ldr	r2, [pc, #404]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e88:	4b62      	ldr	r3, [pc, #392]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e96:	4b5f      	ldr	r3, [pc, #380]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8001014 <MX_GPIO_Init+0x248>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2140      	movs	r1, #64	@ 0x40
 8000eb8:	4857      	ldr	r0, [pc, #348]	@ (8001018 <MX_GPIO_Init+0x24c>)
 8000eba:	f001 fcf5 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f244 0141 	movw	r1, #16449	@ 0x4041
 8000ec4:	4855      	ldr	r0, [pc, #340]	@ (800101c <MX_GPIO_Init+0x250>)
 8000ec6:	f001 fcef 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ed0:	4853      	ldr	r0, [pc, #332]	@ (8001020 <MX_GPIO_Init+0x254>)
 8000ed2:	f001 fce9 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4852      	ldr	r0, [pc, #328]	@ (8001024 <MX_GPIO_Init+0x258>)
 8000edc:	f001 fce4 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	484c      	ldr	r0, [pc, #304]	@ (8001028 <MX_GPIO_Init+0x25c>)
 8000ef6:	f001 fb27 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000efa:	2332      	movs	r3, #50	@ 0x32
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0a:	230b      	movs	r3, #11
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	4844      	ldr	r0, [pc, #272]	@ (8001028 <MX_GPIO_Init+0x25c>)
 8000f16:	f001 fb17 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f2a:	230b      	movs	r3, #11
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4838      	ldr	r0, [pc, #224]	@ (8001018 <MX_GPIO_Init+0x24c>)
 8000f36:	f001 fb07 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f3a:	2340      	movs	r3, #64	@ 0x40
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4831      	ldr	r0, [pc, #196]	@ (8001018 <MX_GPIO_Init+0x24c>)
 8000f52:	f001 faf9 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB6 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_6;
 8000f56:	f244 0341 	movw	r3, #16449	@ 0x4041
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	482b      	ldr	r0, [pc, #172]	@ (800101c <MX_GPIO_Init+0x250>)
 8000f70:	f001 faea 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f86:	230b      	movs	r3, #11
 8000f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4822      	ldr	r0, [pc, #136]	@ (800101c <MX_GPIO_Init+0x250>)
 8000f92:	f001 fad9 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	481c      	ldr	r0, [pc, #112]	@ (8001020 <MX_GPIO_Init+0x254>)
 8000fb0:	f001 faca 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4818      	ldr	r0, [pc, #96]	@ (800102c <MX_GPIO_Init+0x260>)
 8000fca:	f001 fabd 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fce:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe0:	230b      	movs	r3, #11
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4810      	ldr	r0, [pc, #64]	@ (800102c <MX_GPIO_Init+0x260>)
 8000fec:	f001 faac 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4807      	ldr	r0, [pc, #28]	@ (8001024 <MX_GPIO_Init+0x258>)
 8001008:	f001 fa9e 	bl	8002548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800100c:	bf00      	nop
 800100e:	3730      	adds	r7, #48	@ 0x30
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	58024400 	.word	0x58024400
 8001018:	58020000 	.word	0x58020000
 800101c:	58020400 	.word	0x58020400
 8001020:	58020c00 	.word	0x58020c00
 8001024:	58021000 	.word	0x58021000
 8001028:	58020800 	.word	0x58020800
 800102c:	58021800 	.word	0x58021800

08001030 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <HAL_UART_RxCpltCallback+0x34>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d10c      	bne.n	800105a <HAL_UART_RxCpltCallback+0x2a>
		process_command(command_buffer);
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <HAL_UART_RxCpltCallback+0x38>)
 8001042:	f7ff fc67 	bl	8000914 <process_command>
		memset(command_buffer, 0, sizeof(command_buffer));
 8001046:	2206      	movs	r2, #6
 8001048:	2100      	movs	r1, #0
 800104a:	4807      	ldr	r0, [pc, #28]	@ (8001068 <HAL_UART_RxCpltCallback+0x38>)
 800104c:	f008 fd0c 	bl	8009a68 <memset>
        HAL_UART_Receive_IT(&huart3, (uint8_t*)command_buffer, sizeof(command_buffer) - 1);
 8001050:	2205      	movs	r2, #5
 8001052:	4905      	ldr	r1, [pc, #20]	@ (8001068 <HAL_UART_RxCpltCallback+0x38>)
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <HAL_UART_RxCpltCallback+0x34>)
 8001056:	f005 fe8f 	bl	8006d78 <HAL_UART_Receive_IT>
	}
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	24000158 	.word	0x24000158
 8001068:	240006d0 	.word	0x240006d0

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_MspInit+0x30>)
 8001080:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001084:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <HAL_MspInit+0x30>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_MspInit+0x30>)
 8001090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	58024400 	.word	0x58024400

080010ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ba      	sub	sp, #232	@ 0xe8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	22c0      	movs	r2, #192	@ 0xc0
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f008 fccb 	bl	8009a68 <memset>
  if(hi2c->Instance==I2C1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a27      	ldr	r2, [pc, #156]	@ (8001174 <HAL_I2C_MspInit+0xc8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d146      	bne.n	800116a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010dc:	f04f 0208 	mov.w	r2, #8
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fb3a 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010fe:	f7ff ffb5 	bl	800106c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b1d      	ldr	r3, [pc, #116]	@ (8001178 <HAL_I2C_MspInit+0xcc>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <HAL_I2C_MspInit+0xcc>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_I2C_MspInit+0xcc>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001120:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001124:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112e:	2301      	movs	r3, #1
 8001130:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800113a:	2304      	movs	r3, #4
 800113c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001144:	4619      	mov	r1, r3
 8001146:	480d      	ldr	r0, [pc, #52]	@ (800117c <HAL_I2C_MspInit+0xd0>)
 8001148:	f001 f9fe 	bl	8002548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_I2C_MspInit+0xcc>)
 800114e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001152:	4a09      	ldr	r2, [pc, #36]	@ (8001178 <HAL_I2C_MspInit+0xcc>)
 8001154:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001158:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_I2C_MspInit+0xcc>)
 800115e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800116a:	bf00      	nop
 800116c:	37e8      	adds	r7, #232	@ 0xe8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40005400 	.word	0x40005400
 8001178:	58024400 	.word	0x58024400
 800117c:	58020400 	.word	0x58020400

08001180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0bc      	sub	sp, #240	@ 0xf0
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	22c0      	movs	r2, #192	@ 0xc0
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f008 fc61 	bl	8009a68 <memset>
  if(hspi->Instance==SPI1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a40      	ldr	r2, [pc, #256]	@ (80012ac <HAL_SPI_MspInit+0x12c>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d179      	bne.n	80012a4 <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80011b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 80011c0:	2313      	movs	r3, #19
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011d0:	23c0      	movs	r3, #192	@ 0xc0
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011d4:	2320      	movs	r3, #32
 80011d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80011d8:	2300      	movs	r3, #0
 80011da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80011dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fac0 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 80011f2:	f7ff ff3b 	bl	800106c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f6:	4b2e      	ldr	r3, [pc, #184]	@ (80012b0 <HAL_SPI_MspInit+0x130>)
 80011f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011fc:	4a2c      	ldr	r2, [pc, #176]	@ (80012b0 <HAL_SPI_MspInit+0x130>)
 80011fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001202:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001206:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <HAL_SPI_MspInit+0x130>)
 8001208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800120c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <HAL_SPI_MspInit+0x130>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121a:	4a25      	ldr	r2, [pc, #148]	@ (80012b0 <HAL_SPI_MspInit+0x130>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <HAL_SPI_MspInit+0x130>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <HAL_SPI_MspInit+0x130>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001238:	4a1d      	ldr	r2, [pc, #116]	@ (80012b0 <HAL_SPI_MspInit+0x130>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <HAL_SPI_MspInit+0x130>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001250:	2320      	movs	r3, #32
 8001252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001268:	2305      	movs	r3, #5
 800126a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001272:	4619      	mov	r1, r3
 8001274:	480f      	ldr	r0, [pc, #60]	@ (80012b4 <HAL_SPI_MspInit+0x134>)
 8001276:	f001 f967 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800127a:	2320      	movs	r3, #32
 800127c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001292:	2305      	movs	r3, #5
 8001294:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <HAL_SPI_MspInit+0x138>)
 80012a0:	f001 f952 	bl	8002548 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012a4:	bf00      	nop
 80012a6:	37f0      	adds	r7, #240	@ 0xf0
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013000 	.word	0x40013000
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020000 	.word	0x58020000
 80012b8:	58020400 	.word	0x58020400

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0ba      	sub	sp, #232	@ 0xe8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	22c0      	movs	r2, #192	@ 0xc0
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f008 fbc3 	bl	8009a68 <memset>
  if(huart->Instance==USART3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001394 <HAL_UART_MspInit+0xd8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d14e      	bne.n	800138a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ec:	f04f 0202 	mov.w	r2, #2
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fa32 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800130e:	f7ff fead 	bl	800106c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001312:	4b21      	ldr	r3, [pc, #132]	@ (8001398 <HAL_UART_MspInit+0xdc>)
 8001314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001318:	4a1f      	ldr	r2, [pc, #124]	@ (8001398 <HAL_UART_MspInit+0xdc>)
 800131a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800131e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001322:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <HAL_UART_MspInit+0xdc>)
 8001324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_UART_MspInit+0xdc>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <HAL_UART_MspInit+0xdc>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_UART_MspInit+0xdc>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800134e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001352:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001368:	2307      	movs	r3, #7
 800136a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001372:	4619      	mov	r1, r3
 8001374:	4809      	ldr	r0, [pc, #36]	@ (800139c <HAL_UART_MspInit+0xe0>)
 8001376:	f001 f8e7 	bl	8002548 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	2027      	movs	r0, #39	@ 0x27
 8001380:	f000 fb49 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001384:	2027      	movs	r0, #39	@ 0x27
 8001386:	f000 fb60 	bl	8001a4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800138a:	bf00      	nop
 800138c:	37e8      	adds	r7, #232	@ 0xe8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40004800 	.word	0x40004800
 8001398:	58024400 	.word	0x58024400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0ba      	sub	sp, #232	@ 0xe8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f008 fb51 	bl	8009a68 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a30      	ldr	r2, [pc, #192]	@ (800148c <HAL_PCD_MspInit+0xec>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d159      	bne.n	8001484 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 f9bf 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80013f4:	f7ff fe3a 	bl	800106c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013f8:	f002 f9c2 	bl	8003780 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001402:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800141a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800141e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001434:	230a      	movs	r3, #10
 8001436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800143e:	4619      	mov	r1, r3
 8001440:	4814      	ldr	r0, [pc, #80]	@ (8001494 <HAL_PCD_MspInit+0xf4>)
 8001442:	f001 f881 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001446:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800144a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800145e:	4619      	mov	r1, r3
 8001460:	480c      	ldr	r0, [pc, #48]	@ (8001494 <HAL_PCD_MspInit+0xf4>)
 8001462:	f001 f871 	bl	8002548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 8001468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800146c:	4a08      	ldr	r2, [pc, #32]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 800146e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001472:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 8001478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800147c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001484:	bf00      	nop
 8001486:	37e8      	adds	r7, #232	@ 0xe8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40080000 	.word	0x40080000
 8001490:	58024400 	.word	0x58024400
 8001494:	58020000 	.word	0x58020000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <NMI_Handler+0x4>

080014a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <MemManage_Handler+0x4>

080014b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <UsageFault_Handler+0x4>

080014c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ee:	f000 f967 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <USART3_IRQHandler+0x10>)
 80014fe:	f005 fc87 	bl	8006e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	24000158 	.word	0x24000158

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f008 fa9c 	bl	8009a78 <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	24080000 	.word	0x24080000
 800156c:	00000400 	.word	0x00000400
 8001570:	240006d8 	.word	0x240006d8
 8001574:	24000828 	.word	0x24000828

08001578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800157c:	4b37      	ldr	r3, [pc, #220]	@ (800165c <SystemInit+0xe4>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001582:	4a36      	ldr	r2, [pc, #216]	@ (800165c <SystemInit+0xe4>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800158c:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <SystemInit+0xe8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	2b06      	cmp	r3, #6
 8001596:	d807      	bhi.n	80015a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001598:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <SystemInit+0xe8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 030f 	bic.w	r3, r3, #15
 80015a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001660 <SystemInit+0xe8>)
 80015a2:	f043 0307 	orr.w	r3, r3, #7
 80015a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <SystemInit+0xec>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001664 <SystemInit+0xec>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <SystemInit+0xec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <SystemInit+0xec>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4929      	ldr	r1, [pc, #164]	@ (8001664 <SystemInit+0xec>)
 80015c0:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <SystemInit+0xf0>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015c6:	4b26      	ldr	r3, [pc, #152]	@ (8001660 <SystemInit+0xe8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015d2:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <SystemInit+0xe8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 030f 	bic.w	r3, r3, #15
 80015da:	4a21      	ldr	r2, [pc, #132]	@ (8001660 <SystemInit+0xe8>)
 80015dc:	f043 0307 	orr.w	r3, r3, #7
 80015e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015e2:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <SystemInit+0xec>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <SystemInit+0xec>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <SystemInit+0xec>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <SystemInit+0xec>)
 80015f6:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <SystemInit+0xf4>)
 80015f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <SystemInit+0xec>)
 80015fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001670 <SystemInit+0xf8>)
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <SystemInit+0xec>)
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <SystemInit+0xfc>)
 8001604:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <SystemInit+0xec>)
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800160c:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <SystemInit+0xec>)
 800160e:	4a19      	ldr	r2, [pc, #100]	@ (8001674 <SystemInit+0xfc>)
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <SystemInit+0xec>)
 8001614:	2200      	movs	r2, #0
 8001616:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <SystemInit+0xec>)
 800161a:	4a16      	ldr	r2, [pc, #88]	@ (8001674 <SystemInit+0xfc>)
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800161e:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <SystemInit+0xec>)
 8001620:	2200      	movs	r2, #0
 8001622:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001624:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <SystemInit+0xec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <SystemInit+0xec>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <SystemInit+0xec>)
 8001632:	2200      	movs	r2, #0
 8001634:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <SystemInit+0x100>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <SystemInit+0x104>)
 800163c:	4013      	ands	r3, r2
 800163e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001642:	d202      	bcs.n	800164a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001644:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <SystemInit+0x108>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <SystemInit+0x10c>)
 800164c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001650:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00
 8001660:	52002000 	.word	0x52002000
 8001664:	58024400 	.word	0x58024400
 8001668:	eaf6ed7f 	.word	0xeaf6ed7f
 800166c:	02020200 	.word	0x02020200
 8001670:	01ff0000 	.word	0x01ff0000
 8001674:	01010280 	.word	0x01010280
 8001678:	5c001000 	.word	0x5c001000
 800167c:	ffff0000 	.word	0xffff0000
 8001680:	51008108 	.word	0x51008108
 8001684:	52004000 	.word	0x52004000

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800168c:	f7ff ff74 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	@ (80016c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	@ (80016d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f008 f9e5 	bl	8009a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7ff f9d1 	bl	8000a60 <main>
  bx  lr
 80016be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016c8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80016cc:	0800a4bc 	.word	0x0800a4bc
  ldr r2, =_sbss
 80016d0:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80016d4:	24000828 	.word	0x24000828

080016d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC3_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e2:	2003      	movs	r0, #3
 80016e4:	f000 f98c 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016e8:	f002 fe6a 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_Init+0x68>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	4913      	ldr	r1, [pc, #76]	@ (8001748 <HAL_Init+0x6c>)
 80016fa:	5ccb      	ldrb	r3, [r1, r3]
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <HAL_Init+0x68>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	4a0e      	ldr	r2, [pc, #56]	@ (8001748 <HAL_Init+0x6c>)
 8001710:	5cd3      	ldrb	r3, [r2, r3]
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
 800171c:	4a0b      	ldr	r2, [pc, #44]	@ (800174c <HAL_Init+0x70>)
 800171e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001720:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <HAL_Init+0x74>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001726:	2000      	movs	r0, #0
 8001728:	f000 f814 	bl	8001754 <HAL_InitTick>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e002      	b.n	800173c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001736:	f7ff fc9f 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	58024400 	.word	0x58024400
 8001748:	0800a440 	.word	0x0800a440
 800174c:	24000004 	.word	0x24000004
 8001750:	24000000 	.word	0x24000000

08001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_InitTick+0x60>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e021      	b.n	80017ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <HAL_InitTick+0x64>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <HAL_InitTick+0x60>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	fbb3 f3f1 	udiv	r3, r3, r1
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f971 	bl	8001a66 <HAL_SYSTICK_Config>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e00e      	b.n	80017ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d80a      	bhi.n	80017aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 f93b 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a0:	4a06      	ldr	r2, [pc, #24]	@ (80017bc <HAL_InitTick+0x68>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2400000c 	.word	0x2400000c
 80017b8:	24000000 	.word	0x24000000
 80017bc:	24000008 	.word	0x24000008

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	2400000c 	.word	0x2400000c
 80017e4:	240006dc 	.word	0x240006dc

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	240006dc 	.word	0x240006dc

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff ffee 	bl	80017e8 <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d005      	beq.n	8001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <HAL_Delay+0x44>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001826:	bf00      	nop
 8001828:	f7ff ffde 	bl	80017e8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f7      	bhi.n	8001828 <HAL_Delay+0x28>
  {
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2400000c 	.word	0x2400000c

08001848 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_GetREVID+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0c1b      	lsrs	r3, r3, #16
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	5c001000 	.word	0x5c001000

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	4313      	orrs	r3, r2
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00
 80018a4:	05fa0000 	.word	0x05fa0000

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	@ (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	@ (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	@ (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	@ 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	@ 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff40 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff90 	bl	8001954 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5f 	bl	8001900 <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff33 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa4 	bl	80019bc <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff feae 	bl	80017e8 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e2dc      	b.n	8002052 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d008      	beq.n	8001ab6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2280      	movs	r2, #128	@ 0x80
 8001aa8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e2cd      	b.n	8002052 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a76      	ldr	r2, [pc, #472]	@ (8001c94 <HAL_DMA_Abort+0x214>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d04a      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a74      	ldr	r2, [pc, #464]	@ (8001c98 <HAL_DMA_Abort+0x218>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d045      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a73      	ldr	r2, [pc, #460]	@ (8001c9c <HAL_DMA_Abort+0x21c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d040      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a71      	ldr	r2, [pc, #452]	@ (8001ca0 <HAL_DMA_Abort+0x220>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d03b      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a70      	ldr	r2, [pc, #448]	@ (8001ca4 <HAL_DMA_Abort+0x224>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d036      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca8 <HAL_DMA_Abort+0x228>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d031      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6d      	ldr	r2, [pc, #436]	@ (8001cac <HAL_DMA_Abort+0x22c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d02c      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a6b      	ldr	r2, [pc, #428]	@ (8001cb0 <HAL_DMA_Abort+0x230>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d027      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb4 <HAL_DMA_Abort+0x234>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d022      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a68      	ldr	r2, [pc, #416]	@ (8001cb8 <HAL_DMA_Abort+0x238>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d01d      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a67      	ldr	r2, [pc, #412]	@ (8001cbc <HAL_DMA_Abort+0x23c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d018      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a65      	ldr	r2, [pc, #404]	@ (8001cc0 <HAL_DMA_Abort+0x240>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a64      	ldr	r2, [pc, #400]	@ (8001cc4 <HAL_DMA_Abort+0x244>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00e      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a62      	ldr	r2, [pc, #392]	@ (8001cc8 <HAL_DMA_Abort+0x248>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d009      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a61      	ldr	r2, [pc, #388]	@ (8001ccc <HAL_DMA_Abort+0x24c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d004      	beq.n	8001b56 <HAL_DMA_Abort+0xd6>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd0 <HAL_DMA_Abort+0x250>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_DMA_Abort+0xda>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_DMA_Abort+0xdc>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 021e 	bic.w	r2, r2, #30
 8001b6e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b7e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e00a      	b.n	8001b9e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 020e 	bic.w	r2, r2, #14
 8001b96:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8001c94 <HAL_DMA_Abort+0x214>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d072      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a3a      	ldr	r2, [pc, #232]	@ (8001c98 <HAL_DMA_Abort+0x218>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d06d      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a39      	ldr	r2, [pc, #228]	@ (8001c9c <HAL_DMA_Abort+0x21c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d068      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a37      	ldr	r2, [pc, #220]	@ (8001ca0 <HAL_DMA_Abort+0x220>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d063      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a36      	ldr	r2, [pc, #216]	@ (8001ca4 <HAL_DMA_Abort+0x224>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d05e      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a34      	ldr	r2, [pc, #208]	@ (8001ca8 <HAL_DMA_Abort+0x228>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d059      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a33      	ldr	r2, [pc, #204]	@ (8001cac <HAL_DMA_Abort+0x22c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d054      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a31      	ldr	r2, [pc, #196]	@ (8001cb0 <HAL_DMA_Abort+0x230>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d04f      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a30      	ldr	r2, [pc, #192]	@ (8001cb4 <HAL_DMA_Abort+0x234>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d04a      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8001cb8 <HAL_DMA_Abort+0x238>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d045      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2d      	ldr	r2, [pc, #180]	@ (8001cbc <HAL_DMA_Abort+0x23c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d040      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc0 <HAL_DMA_Abort+0x240>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d03b      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc4 <HAL_DMA_Abort+0x244>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d036      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a28      	ldr	r2, [pc, #160]	@ (8001cc8 <HAL_DMA_Abort+0x248>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d031      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a27      	ldr	r2, [pc, #156]	@ (8001ccc <HAL_DMA_Abort+0x24c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d02c      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a25      	ldr	r2, [pc, #148]	@ (8001cd0 <HAL_DMA_Abort+0x250>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d027      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a24      	ldr	r2, [pc, #144]	@ (8001cd4 <HAL_DMA_Abort+0x254>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d022      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a22      	ldr	r2, [pc, #136]	@ (8001cd8 <HAL_DMA_Abort+0x258>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01d      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a21      	ldr	r2, [pc, #132]	@ (8001cdc <HAL_DMA_Abort+0x25c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d018      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce0 <HAL_DMA_Abort+0x260>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce4 <HAL_DMA_Abort+0x264>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00e      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce8 <HAL_DMA_Abort+0x268>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d009      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cec <HAL_DMA_Abort+0x26c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d004      	beq.n	8001c8e <HAL_DMA_Abort+0x20e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	@ (8001cf0 <HAL_DMA_Abort+0x270>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d132      	bne.n	8001cf4 <HAL_DMA_Abort+0x274>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e031      	b.n	8001cf6 <HAL_DMA_Abort+0x276>
 8001c92:	bf00      	nop
 8001c94:	40020010 	.word	0x40020010
 8001c98:	40020028 	.word	0x40020028
 8001c9c:	40020040 	.word	0x40020040
 8001ca0:	40020058 	.word	0x40020058
 8001ca4:	40020070 	.word	0x40020070
 8001ca8:	40020088 	.word	0x40020088
 8001cac:	400200a0 	.word	0x400200a0
 8001cb0:	400200b8 	.word	0x400200b8
 8001cb4:	40020410 	.word	0x40020410
 8001cb8:	40020428 	.word	0x40020428
 8001cbc:	40020440 	.word	0x40020440
 8001cc0:	40020458 	.word	0x40020458
 8001cc4:	40020470 	.word	0x40020470
 8001cc8:	40020488 	.word	0x40020488
 8001ccc:	400204a0 	.word	0x400204a0
 8001cd0:	400204b8 	.word	0x400204b8
 8001cd4:	58025408 	.word	0x58025408
 8001cd8:	5802541c 	.word	0x5802541c
 8001cdc:	58025430 	.word	0x58025430
 8001ce0:	58025444 	.word	0x58025444
 8001ce4:	58025458 	.word	0x58025458
 8001ce8:	5802546c 	.word	0x5802546c
 8001cec:	58025480 	.word	0x58025480
 8001cf0:	58025494 	.word	0x58025494
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6d      	ldr	r2, [pc, #436]	@ (8001ec4 <HAL_DMA_Abort+0x444>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d04a      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6b      	ldr	r2, [pc, #428]	@ (8001ec8 <HAL_DMA_Abort+0x448>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d045      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6a      	ldr	r2, [pc, #424]	@ (8001ecc <HAL_DMA_Abort+0x44c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d040      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a68      	ldr	r2, [pc, #416]	@ (8001ed0 <HAL_DMA_Abort+0x450>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d03b      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a67      	ldr	r2, [pc, #412]	@ (8001ed4 <HAL_DMA_Abort+0x454>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d036      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a65      	ldr	r2, [pc, #404]	@ (8001ed8 <HAL_DMA_Abort+0x458>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d031      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a64      	ldr	r2, [pc, #400]	@ (8001edc <HAL_DMA_Abort+0x45c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d02c      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a62      	ldr	r2, [pc, #392]	@ (8001ee0 <HAL_DMA_Abort+0x460>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d027      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a61      	ldr	r2, [pc, #388]	@ (8001ee4 <HAL_DMA_Abort+0x464>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d022      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5f      	ldr	r2, [pc, #380]	@ (8001ee8 <HAL_DMA_Abort+0x468>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d01d      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5e      	ldr	r2, [pc, #376]	@ (8001eec <HAL_DMA_Abort+0x46c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d018      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ef0 <HAL_DMA_Abort+0x470>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a5b      	ldr	r2, [pc, #364]	@ (8001ef4 <HAL_DMA_Abort+0x474>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00e      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a59      	ldr	r2, [pc, #356]	@ (8001ef8 <HAL_DMA_Abort+0x478>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d009      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a58      	ldr	r2, [pc, #352]	@ (8001efc <HAL_DMA_Abort+0x47c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d004      	beq.n	8001daa <HAL_DMA_Abort+0x32a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a56      	ldr	r2, [pc, #344]	@ (8001f00 <HAL_DMA_Abort+0x480>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d108      	bne.n	8001dbc <HAL_DMA_Abort+0x33c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e007      	b.n	8001dcc <HAL_DMA_Abort+0x34c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001dcc:	e013      	b.n	8001df6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dce:	f7ff fd0b 	bl	80017e8 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d90c      	bls.n	8001df6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2203      	movs	r2, #3
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e12d      	b.n	8002052 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1e5      	bne.n	8001dce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec4 <HAL_DMA_Abort+0x444>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d04a      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec8 <HAL_DMA_Abort+0x448>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d045      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8001ecc <HAL_DMA_Abort+0x44c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d040      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed0 <HAL_DMA_Abort+0x450>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d03b      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a29      	ldr	r2, [pc, #164]	@ (8001ed4 <HAL_DMA_Abort+0x454>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d036      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a27      	ldr	r2, [pc, #156]	@ (8001ed8 <HAL_DMA_Abort+0x458>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d031      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a26      	ldr	r2, [pc, #152]	@ (8001edc <HAL_DMA_Abort+0x45c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d02c      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a24      	ldr	r2, [pc, #144]	@ (8001ee0 <HAL_DMA_Abort+0x460>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d027      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a23      	ldr	r2, [pc, #140]	@ (8001ee4 <HAL_DMA_Abort+0x464>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d022      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <HAL_DMA_Abort+0x468>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01d      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a20      	ldr	r2, [pc, #128]	@ (8001eec <HAL_DMA_Abort+0x46c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d018      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef0 <HAL_DMA_Abort+0x470>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef4 <HAL_DMA_Abort+0x474>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00e      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef8 <HAL_DMA_Abort+0x478>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d009      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1a      	ldr	r2, [pc, #104]	@ (8001efc <HAL_DMA_Abort+0x47c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d004      	beq.n	8001ea2 <HAL_DMA_Abort+0x422>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <HAL_DMA_Abort+0x480>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DMA_Abort+0x426>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_DMA_Abort+0x428>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d02b      	beq.n	8001f04 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	223f      	movs	r2, #63	@ 0x3f
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	e02a      	b.n	8001f1a <HAL_DMA_Abort+0x49a>
 8001ec4:	40020010 	.word	0x40020010
 8001ec8:	40020028 	.word	0x40020028
 8001ecc:	40020040 	.word	0x40020040
 8001ed0:	40020058 	.word	0x40020058
 8001ed4:	40020070 	.word	0x40020070
 8001ed8:	40020088 	.word	0x40020088
 8001edc:	400200a0 	.word	0x400200a0
 8001ee0:	400200b8 	.word	0x400200b8
 8001ee4:	40020410 	.word	0x40020410
 8001ee8:	40020428 	.word	0x40020428
 8001eec:	40020440 	.word	0x40020440
 8001ef0:	40020458 	.word	0x40020458
 8001ef4:	40020470 	.word	0x40020470
 8001ef8:	40020488 	.word	0x40020488
 8001efc:	400204a0 	.word	0x400204a0
 8001f00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	2201      	movs	r2, #1
 8001f14:	409a      	lsls	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a4f      	ldr	r2, [pc, #316]	@ (800205c <HAL_DMA_Abort+0x5dc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d072      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a4d      	ldr	r2, [pc, #308]	@ (8002060 <HAL_DMA_Abort+0x5e0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d06d      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a4c      	ldr	r2, [pc, #304]	@ (8002064 <HAL_DMA_Abort+0x5e4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d068      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002068 <HAL_DMA_Abort+0x5e8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d063      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a49      	ldr	r2, [pc, #292]	@ (800206c <HAL_DMA_Abort+0x5ec>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d05e      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a47      	ldr	r2, [pc, #284]	@ (8002070 <HAL_DMA_Abort+0x5f0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d059      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a46      	ldr	r2, [pc, #280]	@ (8002074 <HAL_DMA_Abort+0x5f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d054      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a44      	ldr	r2, [pc, #272]	@ (8002078 <HAL_DMA_Abort+0x5f8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d04f      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a43      	ldr	r2, [pc, #268]	@ (800207c <HAL_DMA_Abort+0x5fc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d04a      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a41      	ldr	r2, [pc, #260]	@ (8002080 <HAL_DMA_Abort+0x600>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d045      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a40      	ldr	r2, [pc, #256]	@ (8002084 <HAL_DMA_Abort+0x604>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d040      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a3e      	ldr	r2, [pc, #248]	@ (8002088 <HAL_DMA_Abort+0x608>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d03b      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a3d      	ldr	r2, [pc, #244]	@ (800208c <HAL_DMA_Abort+0x60c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d036      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a3b      	ldr	r2, [pc, #236]	@ (8002090 <HAL_DMA_Abort+0x610>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d031      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a3a      	ldr	r2, [pc, #232]	@ (8002094 <HAL_DMA_Abort+0x614>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d02c      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a38      	ldr	r2, [pc, #224]	@ (8002098 <HAL_DMA_Abort+0x618>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d027      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a37      	ldr	r2, [pc, #220]	@ (800209c <HAL_DMA_Abort+0x61c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a35      	ldr	r2, [pc, #212]	@ (80020a0 <HAL_DMA_Abort+0x620>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01d      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a34      	ldr	r2, [pc, #208]	@ (80020a4 <HAL_DMA_Abort+0x624>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d018      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a32      	ldr	r2, [pc, #200]	@ (80020a8 <HAL_DMA_Abort+0x628>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a31      	ldr	r2, [pc, #196]	@ (80020ac <HAL_DMA_Abort+0x62c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00e      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80020b0 <HAL_DMA_Abort+0x630>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80020b4 <HAL_DMA_Abort+0x634>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d004      	beq.n	800200a <HAL_DMA_Abort+0x58a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a2c      	ldr	r2, [pc, #176]	@ (80020b8 <HAL_DMA_Abort+0x638>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_DMA_Abort+0x58e>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_DMA_Abort+0x590>
 800200e:	2300      	movs	r3, #0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d015      	beq.n	8002040 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800201c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00c      	beq.n	8002040 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002034:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800203e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40020010 	.word	0x40020010
 8002060:	40020028 	.word	0x40020028
 8002064:	40020040 	.word	0x40020040
 8002068:	40020058 	.word	0x40020058
 800206c:	40020070 	.word	0x40020070
 8002070:	40020088 	.word	0x40020088
 8002074:	400200a0 	.word	0x400200a0
 8002078:	400200b8 	.word	0x400200b8
 800207c:	40020410 	.word	0x40020410
 8002080:	40020428 	.word	0x40020428
 8002084:	40020440 	.word	0x40020440
 8002088:	40020458 	.word	0x40020458
 800208c:	40020470 	.word	0x40020470
 8002090:	40020488 	.word	0x40020488
 8002094:	400204a0 	.word	0x400204a0
 8002098:	400204b8 	.word	0x400204b8
 800209c:	58025408 	.word	0x58025408
 80020a0:	5802541c 	.word	0x5802541c
 80020a4:	58025430 	.word	0x58025430
 80020a8:	58025444 	.word	0x58025444
 80020ac:	58025458 	.word	0x58025458
 80020b0:	5802546c 	.word	0x5802546c
 80020b4:	58025480 	.word	0x58025480
 80020b8:	58025494 	.word	0x58025494

080020bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e237      	b.n	800253e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d004      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e22c      	b.n	800253e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a5c      	ldr	r2, [pc, #368]	@ (800225c <HAL_DMA_Abort_IT+0x1a0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d04a      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002260 <HAL_DMA_Abort_IT+0x1a4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d045      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a59      	ldr	r2, [pc, #356]	@ (8002264 <HAL_DMA_Abort_IT+0x1a8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d040      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a58      	ldr	r2, [pc, #352]	@ (8002268 <HAL_DMA_Abort_IT+0x1ac>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d03b      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a56      	ldr	r2, [pc, #344]	@ (800226c <HAL_DMA_Abort_IT+0x1b0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d036      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a55      	ldr	r2, [pc, #340]	@ (8002270 <HAL_DMA_Abort_IT+0x1b4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d031      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a53      	ldr	r2, [pc, #332]	@ (8002274 <HAL_DMA_Abort_IT+0x1b8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d02c      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a52      	ldr	r2, [pc, #328]	@ (8002278 <HAL_DMA_Abort_IT+0x1bc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d027      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a50      	ldr	r2, [pc, #320]	@ (800227c <HAL_DMA_Abort_IT+0x1c0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d022      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a4f      	ldr	r2, [pc, #316]	@ (8002280 <HAL_DMA_Abort_IT+0x1c4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d01d      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a4d      	ldr	r2, [pc, #308]	@ (8002284 <HAL_DMA_Abort_IT+0x1c8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d018      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a4c      	ldr	r2, [pc, #304]	@ (8002288 <HAL_DMA_Abort_IT+0x1cc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a4a      	ldr	r2, [pc, #296]	@ (800228c <HAL_DMA_Abort_IT+0x1d0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00e      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a49      	ldr	r2, [pc, #292]	@ (8002290 <HAL_DMA_Abort_IT+0x1d4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a47      	ldr	r2, [pc, #284]	@ (8002294 <HAL_DMA_Abort_IT+0x1d8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_DMA_Abort_IT+0xc8>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a46      	ldr	r2, [pc, #280]	@ (8002298 <HAL_DMA_Abort_IT+0x1dc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_DMA_Abort_IT+0xcc>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_DMA_Abort_IT+0xce>
 8002188:	2300      	movs	r3, #0
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8086 	beq.w	800229c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2204      	movs	r2, #4
 8002194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2f      	ldr	r2, [pc, #188]	@ (800225c <HAL_DMA_Abort_IT+0x1a0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d04a      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002260 <HAL_DMA_Abort_IT+0x1a4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d045      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002264 <HAL_DMA_Abort_IT+0x1a8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d040      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002268 <HAL_DMA_Abort_IT+0x1ac>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d03b      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a29      	ldr	r2, [pc, #164]	@ (800226c <HAL_DMA_Abort_IT+0x1b0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d036      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a28      	ldr	r2, [pc, #160]	@ (8002270 <HAL_DMA_Abort_IT+0x1b4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d031      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a26      	ldr	r2, [pc, #152]	@ (8002274 <HAL_DMA_Abort_IT+0x1b8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02c      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a25      	ldr	r2, [pc, #148]	@ (8002278 <HAL_DMA_Abort_IT+0x1bc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d027      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a23      	ldr	r2, [pc, #140]	@ (800227c <HAL_DMA_Abort_IT+0x1c0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d022      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a22      	ldr	r2, [pc, #136]	@ (8002280 <HAL_DMA_Abort_IT+0x1c4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d01d      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a20      	ldr	r2, [pc, #128]	@ (8002284 <HAL_DMA_Abort_IT+0x1c8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d018      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1f      	ldr	r2, [pc, #124]	@ (8002288 <HAL_DMA_Abort_IT+0x1cc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d013      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1d      	ldr	r2, [pc, #116]	@ (800228c <HAL_DMA_Abort_IT+0x1d0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <HAL_DMA_Abort_IT+0x1d4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1a      	ldr	r2, [pc, #104]	@ (8002294 <HAL_DMA_Abort_IT+0x1d8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_DMA_Abort_IT+0x17c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_DMA_Abort_IT+0x1dc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d108      	bne.n	800224a <HAL_DMA_Abort_IT+0x18e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e178      	b.n	800253c <HAL_DMA_Abort_IT+0x480>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e16f      	b.n	800253c <HAL_DMA_Abort_IT+0x480>
 800225c:	40020010 	.word	0x40020010
 8002260:	40020028 	.word	0x40020028
 8002264:	40020040 	.word	0x40020040
 8002268:	40020058 	.word	0x40020058
 800226c:	40020070 	.word	0x40020070
 8002270:	40020088 	.word	0x40020088
 8002274:	400200a0 	.word	0x400200a0
 8002278:	400200b8 	.word	0x400200b8
 800227c:	40020410 	.word	0x40020410
 8002280:	40020428 	.word	0x40020428
 8002284:	40020440 	.word	0x40020440
 8002288:	40020458 	.word	0x40020458
 800228c:	40020470 	.word	0x40020470
 8002290:	40020488 	.word	0x40020488
 8002294:	400204a0 	.word	0x400204a0
 8002298:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 020e 	bic.w	r2, r2, #14
 80022aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6c      	ldr	r2, [pc, #432]	@ (8002464 <HAL_DMA_Abort_IT+0x3a8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d04a      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002468 <HAL_DMA_Abort_IT+0x3ac>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d045      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a69      	ldr	r2, [pc, #420]	@ (800246c <HAL_DMA_Abort_IT+0x3b0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d040      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a68      	ldr	r2, [pc, #416]	@ (8002470 <HAL_DMA_Abort_IT+0x3b4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d03b      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a66      	ldr	r2, [pc, #408]	@ (8002474 <HAL_DMA_Abort_IT+0x3b8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d036      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a65      	ldr	r2, [pc, #404]	@ (8002478 <HAL_DMA_Abort_IT+0x3bc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d031      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a63      	ldr	r2, [pc, #396]	@ (800247c <HAL_DMA_Abort_IT+0x3c0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d02c      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a62      	ldr	r2, [pc, #392]	@ (8002480 <HAL_DMA_Abort_IT+0x3c4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d027      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a60      	ldr	r2, [pc, #384]	@ (8002484 <HAL_DMA_Abort_IT+0x3c8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d022      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a5f      	ldr	r2, [pc, #380]	@ (8002488 <HAL_DMA_Abort_IT+0x3cc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d01d      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a5d      	ldr	r2, [pc, #372]	@ (800248c <HAL_DMA_Abort_IT+0x3d0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d018      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a5c      	ldr	r2, [pc, #368]	@ (8002490 <HAL_DMA_Abort_IT+0x3d4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d013      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5a      	ldr	r2, [pc, #360]	@ (8002494 <HAL_DMA_Abort_IT+0x3d8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00e      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a59      	ldr	r2, [pc, #356]	@ (8002498 <HAL_DMA_Abort_IT+0x3dc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d009      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a57      	ldr	r2, [pc, #348]	@ (800249c <HAL_DMA_Abort_IT+0x3e0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d004      	beq.n	800234c <HAL_DMA_Abort_IT+0x290>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a56      	ldr	r2, [pc, #344]	@ (80024a0 <HAL_DMA_Abort_IT+0x3e4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d108      	bne.n	800235e <HAL_DMA_Abort_IT+0x2a2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e007      	b.n	800236e <HAL_DMA_Abort_IT+0x2b2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a3c      	ldr	r2, [pc, #240]	@ (8002464 <HAL_DMA_Abort_IT+0x3a8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d072      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a3a      	ldr	r2, [pc, #232]	@ (8002468 <HAL_DMA_Abort_IT+0x3ac>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d06d      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a39      	ldr	r2, [pc, #228]	@ (800246c <HAL_DMA_Abort_IT+0x3b0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d068      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a37      	ldr	r2, [pc, #220]	@ (8002470 <HAL_DMA_Abort_IT+0x3b4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d063      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a36      	ldr	r2, [pc, #216]	@ (8002474 <HAL_DMA_Abort_IT+0x3b8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d05e      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a34      	ldr	r2, [pc, #208]	@ (8002478 <HAL_DMA_Abort_IT+0x3bc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d059      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a33      	ldr	r2, [pc, #204]	@ (800247c <HAL_DMA_Abort_IT+0x3c0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d054      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a31      	ldr	r2, [pc, #196]	@ (8002480 <HAL_DMA_Abort_IT+0x3c4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d04f      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a30      	ldr	r2, [pc, #192]	@ (8002484 <HAL_DMA_Abort_IT+0x3c8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d04a      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002488 <HAL_DMA_Abort_IT+0x3cc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d045      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2d      	ldr	r2, [pc, #180]	@ (800248c <HAL_DMA_Abort_IT+0x3d0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d040      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002490 <HAL_DMA_Abort_IT+0x3d4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d03b      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002494 <HAL_DMA_Abort_IT+0x3d8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d036      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a28      	ldr	r2, [pc, #160]	@ (8002498 <HAL_DMA_Abort_IT+0x3dc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d031      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a27      	ldr	r2, [pc, #156]	@ (800249c <HAL_DMA_Abort_IT+0x3e0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d02c      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a25      	ldr	r2, [pc, #148]	@ (80024a0 <HAL_DMA_Abort_IT+0x3e4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d027      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a24      	ldr	r2, [pc, #144]	@ (80024a4 <HAL_DMA_Abort_IT+0x3e8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d022      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a22      	ldr	r2, [pc, #136]	@ (80024a8 <HAL_DMA_Abort_IT+0x3ec>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d01d      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a21      	ldr	r2, [pc, #132]	@ (80024ac <HAL_DMA_Abort_IT+0x3f0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d018      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1f      	ldr	r2, [pc, #124]	@ (80024b0 <HAL_DMA_Abort_IT+0x3f4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1e      	ldr	r2, [pc, #120]	@ (80024b4 <HAL_DMA_Abort_IT+0x3f8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00e      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1c      	ldr	r2, [pc, #112]	@ (80024b8 <HAL_DMA_Abort_IT+0x3fc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d009      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1b      	ldr	r2, [pc, #108]	@ (80024bc <HAL_DMA_Abort_IT+0x400>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_DMA_Abort_IT+0x3a2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a19      	ldr	r2, [pc, #100]	@ (80024c0 <HAL_DMA_Abort_IT+0x404>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d132      	bne.n	80024c4 <HAL_DMA_Abort_IT+0x408>
 800245e:	2301      	movs	r3, #1
 8002460:	e031      	b.n	80024c6 <HAL_DMA_Abort_IT+0x40a>
 8002462:	bf00      	nop
 8002464:	40020010 	.word	0x40020010
 8002468:	40020028 	.word	0x40020028
 800246c:	40020040 	.word	0x40020040
 8002470:	40020058 	.word	0x40020058
 8002474:	40020070 	.word	0x40020070
 8002478:	40020088 	.word	0x40020088
 800247c:	400200a0 	.word	0x400200a0
 8002480:	400200b8 	.word	0x400200b8
 8002484:	40020410 	.word	0x40020410
 8002488:	40020428 	.word	0x40020428
 800248c:	40020440 	.word	0x40020440
 8002490:	40020458 	.word	0x40020458
 8002494:	40020470 	.word	0x40020470
 8002498:	40020488 	.word	0x40020488
 800249c:	400204a0 	.word	0x400204a0
 80024a0:	400204b8 	.word	0x400204b8
 80024a4:	58025408 	.word	0x58025408
 80024a8:	5802541c 	.word	0x5802541c
 80024ac:	58025430 	.word	0x58025430
 80024b0:	58025444 	.word	0x58025444
 80024b4:	58025458 	.word	0x58025458
 80024b8:	5802546c 	.word	0x5802546c
 80024bc:	58025480 	.word	0x58025480
 80024c0:	58025494 	.word	0x58025494
 80024c4:	2300      	movs	r3, #0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d028      	beq.n	800251c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2201      	movs	r2, #1
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00c      	beq.n	800251c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800250c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002510:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800251a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	@ 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002556:	4b89      	ldr	r3, [pc, #548]	@ (800277c <HAL_GPIO_Init+0x234>)
 8002558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800255a:	e194      	b.n	8002886 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8186 	beq.w	8002880 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d005      	beq.n	800258c <HAL_GPIO_Init+0x44>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d130      	bne.n	80025ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025c2:	2201      	movs	r2, #1
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 0201 	and.w	r2, r3, #1
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d017      	beq.n	800262a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d123      	bne.n	800267e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	69b9      	ldr	r1, [r7, #24]
 800267a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0203 	and.w	r2, r3, #3
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80e0 	beq.w	8002880 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <HAL_GPIO_Init+0x238>)
 80026c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002780 <HAL_GPIO_Init+0x238>)
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002780 <HAL_GPIO_Init+0x238>)
 80026d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026de:	4a29      	ldr	r2, [pc, #164]	@ (8002784 <HAL_GPIO_Init+0x23c>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a20      	ldr	r2, [pc, #128]	@ (8002788 <HAL_GPIO_Init+0x240>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d052      	beq.n	80027b0 <HAL_GPIO_Init+0x268>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1f      	ldr	r2, [pc, #124]	@ (800278c <HAL_GPIO_Init+0x244>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d031      	beq.n	8002776 <HAL_GPIO_Init+0x22e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1e      	ldr	r2, [pc, #120]	@ (8002790 <HAL_GPIO_Init+0x248>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02b      	beq.n	8002772 <HAL_GPIO_Init+0x22a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <HAL_GPIO_Init+0x24c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d025      	beq.n	800276e <HAL_GPIO_Init+0x226>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <HAL_GPIO_Init+0x250>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <HAL_GPIO_Init+0x222>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1b      	ldr	r2, [pc, #108]	@ (800279c <HAL_GPIO_Init+0x254>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x21e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1a      	ldr	r2, [pc, #104]	@ (80027a0 <HAL_GPIO_Init+0x258>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x21a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a19      	ldr	r2, [pc, #100]	@ (80027a4 <HAL_GPIO_Init+0x25c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x216>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a18      	ldr	r2, [pc, #96]	@ (80027a8 <HAL_GPIO_Init+0x260>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x212>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <HAL_GPIO_Init+0x264>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x20e>
 8002752:	2309      	movs	r3, #9
 8002754:	e02d      	b.n	80027b2 <HAL_GPIO_Init+0x26a>
 8002756:	230a      	movs	r3, #10
 8002758:	e02b      	b.n	80027b2 <HAL_GPIO_Init+0x26a>
 800275a:	2308      	movs	r3, #8
 800275c:	e029      	b.n	80027b2 <HAL_GPIO_Init+0x26a>
 800275e:	2307      	movs	r3, #7
 8002760:	e027      	b.n	80027b2 <HAL_GPIO_Init+0x26a>
 8002762:	2306      	movs	r3, #6
 8002764:	e025      	b.n	80027b2 <HAL_GPIO_Init+0x26a>
 8002766:	2305      	movs	r3, #5
 8002768:	e023      	b.n	80027b2 <HAL_GPIO_Init+0x26a>
 800276a:	2304      	movs	r3, #4
 800276c:	e021      	b.n	80027b2 <HAL_GPIO_Init+0x26a>
 800276e:	2303      	movs	r3, #3
 8002770:	e01f      	b.n	80027b2 <HAL_GPIO_Init+0x26a>
 8002772:	2302      	movs	r3, #2
 8002774:	e01d      	b.n	80027b2 <HAL_GPIO_Init+0x26a>
 8002776:	2301      	movs	r3, #1
 8002778:	e01b      	b.n	80027b2 <HAL_GPIO_Init+0x26a>
 800277a:	bf00      	nop
 800277c:	58000080 	.word	0x58000080
 8002780:	58024400 	.word	0x58024400
 8002784:	58000400 	.word	0x58000400
 8002788:	58020000 	.word	0x58020000
 800278c:	58020400 	.word	0x58020400
 8002790:	58020800 	.word	0x58020800
 8002794:	58020c00 	.word	0x58020c00
 8002798:	58021000 	.word	0x58021000
 800279c:	58021400 	.word	0x58021400
 80027a0:	58021800 	.word	0x58021800
 80027a4:	58021c00 	.word	0x58021c00
 80027a8:	58022000 	.word	0x58022000
 80027ac:	58022400 	.word	0x58022400
 80027b0:	2300      	movs	r3, #0
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	f002 0203 	and.w	r2, r2, #3
 80027b8:	0092      	lsls	r2, r2, #2
 80027ba:	4093      	lsls	r3, r2
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c2:	4938      	ldr	r1, [pc, #224]	@ (80028a4 <HAL_GPIO_Init+0x35c>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002824:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	3301      	adds	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	f47f ae63 	bne.w	800255c <HAL_GPIO_Init+0x14>
  }
}
 8002896:	bf00      	nop
 8002898:	bf00      	nop
 800289a:	3724      	adds	r7, #36	@ 0x24
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	58000400 	.word	0x58000400

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028c4:	e003      	b.n	80028ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	619a      	str	r2, [r3, #24]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e08b      	b.n	8002a06 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe fbd2 	bl	80010ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800292c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800293c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d107      	bne.n	8002956 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	e006      	b.n	8002964 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002962:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d108      	bne.n	800297e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	e007      	b.n	800298e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800298c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <HAL_I2C_Init+0x134>)
 800299a:	430b      	orrs	r3, r1
 800299c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69d9      	ldr	r1, [r3, #28]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1a      	ldr	r2, [r3, #32]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	02008000 	.word	0x02008000

08002a14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	460b      	mov	r3, r1
 8002a22:	817b      	strh	r3, [r7, #10]
 8002a24:	4613      	mov	r3, r2
 8002a26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	f040 80fd 	bne.w	8002c30 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_I2C_Master_Transmit+0x30>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e0f6      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x21e>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fecc 	bl	80017e8 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2319      	movs	r3, #25
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fa0a 	bl	8002e78 <I2C_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0e1      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2221      	movs	r2, #33	@ 0x21
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2210      	movs	r2, #16
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	893a      	ldrh	r2, [r7, #8]
 8002a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2bff      	cmp	r3, #255	@ 0xff
 8002a9e:	d906      	bls.n	8002aae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	22ff      	movs	r2, #255	@ 0xff
 8002aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002aa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e007      	b.n	8002abe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ab8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002abc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d024      	beq.n	8002b10 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	8979      	ldrh	r1, [r7, #10]
 8002b02:	4b4e      	ldr	r3, [pc, #312]	@ (8002c3c <HAL_I2C_Master_Transmit+0x228>)
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fc05 	bl	8003318 <I2C_TransferConfig>
 8002b0e:	e066      	b.n	8002bde <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	8979      	ldrh	r1, [r7, #10]
 8002b18:	4b48      	ldr	r3, [pc, #288]	@ (8002c3c <HAL_I2C_Master_Transmit+0x228>)
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fbfa 	bl	8003318 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b24:	e05b      	b.n	8002bde <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	6a39      	ldr	r1, [r7, #32]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f9fd 	bl	8002f2a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07b      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d034      	beq.n	8002bde <HAL_I2C_Master_Transmit+0x1ca>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d130      	bne.n	8002bde <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	2200      	movs	r2, #0
 8002b84:	2180      	movs	r1, #128	@ 0x80
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f976 	bl	8002e78 <I2C_WaitOnFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e04d      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2bff      	cmp	r3, #255	@ 0xff
 8002b9e:	d90e      	bls.n	8002bbe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	22ff      	movs	r2, #255	@ 0xff
 8002ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fbae 	bl	8003318 <I2C_TransferConfig>
 8002bbc:	e00f      	b.n	8002bde <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	8979      	ldrh	r1, [r7, #10]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fb9d 	bl	8003318 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d19e      	bne.n	8002b26 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	6a39      	ldr	r1, [r7, #32]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f9e3 	bl	8002fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e01a      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2220      	movs	r2, #32
 8002c02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <HAL_I2C_Master_Transmit+0x22c>)
 8002c10:	400b      	ands	r3, r1
 8002c12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	80002000 	.word	0x80002000
 8002c40:	fe00e800 	.word	0xfe00e800

08002c44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	460b      	mov	r3, r1
 8002c52:	817b      	strh	r3, [r7, #10]
 8002c54:	4613      	mov	r3, r2
 8002c56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	f040 80db 	bne.w	8002e1c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_I2C_Master_Receive+0x30>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0d4      	b.n	8002e1e <HAL_I2C_Master_Receive+0x1da>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fdb4 	bl	80017e8 <HAL_GetTick>
 8002c80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2319      	movs	r3, #25
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f8f2 	bl	8002e78 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0bf      	b.n	8002e1e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2222      	movs	r2, #34	@ 0x22
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	893a      	ldrh	r2, [r7, #8]
 8002cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2bff      	cmp	r3, #255	@ 0xff
 8002cce:	d90e      	bls.n	8002cee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	22ff      	movs	r2, #255	@ 0xff
 8002cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	8979      	ldrh	r1, [r7, #10]
 8002cde:	4b52      	ldr	r3, [pc, #328]	@ (8002e28 <HAL_I2C_Master_Receive+0x1e4>)
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fb16 	bl	8003318 <I2C_TransferConfig>
 8002cec:	e06d      	b.n	8002dca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	8979      	ldrh	r1, [r7, #10]
 8002d00:	4b49      	ldr	r3, [pc, #292]	@ (8002e28 <HAL_I2C_Master_Receive+0x1e4>)
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fb05 	bl	8003318 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002d0e:	e05c      	b.n	8002dca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	6a39      	ldr	r1, [r7, #32]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f993 	bl	8003040 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e07c      	b.n	8002e1e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d034      	beq.n	8002dca <HAL_I2C_Master_Receive+0x186>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d130      	bne.n	8002dca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2180      	movs	r1, #128	@ 0x80
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f880 	bl	8002e78 <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e04d      	b.n	8002e1e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2bff      	cmp	r3, #255	@ 0xff
 8002d8a:	d90e      	bls.n	8002daa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	22ff      	movs	r2, #255	@ 0xff
 8002d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	8979      	ldrh	r1, [r7, #10]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fab8 	bl	8003318 <I2C_TransferConfig>
 8002da8:	e00f      	b.n	8002dca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	8979      	ldrh	r1, [r7, #10]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 faa7 	bl	8003318 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d19d      	bne.n	8002d10 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	6a39      	ldr	r1, [r7, #32]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f8ed 	bl	8002fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e01a      	b.n	8002e1e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2220      	movs	r2, #32
 8002dee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <HAL_I2C_Master_Receive+0x1e8>)
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	80002400 	.word	0x80002400
 8002e2c:	fe00e800 	.word	0xfe00e800

08002e30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d103      	bne.n	8002e4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d007      	beq.n	8002e6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	619a      	str	r2, [r3, #24]
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e88:	e03b      	b.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f962 	bl	8003158 <I2C_IsErrorOccurred>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e041      	b.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d02d      	beq.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea6:	f7fe fc9f 	bl	80017e8 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0x44>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d122      	bne.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d113      	bne.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00f      	b.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	bf0c      	ite	eq
 8002f12:	2301      	moveq	r3, #1
 8002f14:	2300      	movne	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d0b4      	beq.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f36:	e033      	b.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f90b 	bl	8003158 <I2C_IsErrorOccurred>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e031      	b.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d025      	beq.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f54:	f7fe fc48 	bl	80017e8 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d302      	bcc.n	8002f6a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11a      	bne.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d013      	beq.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e007      	b.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d1c4      	bne.n	8002f38 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc4:	e02f      	b.n	8003026 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f8c4 	bl	8003158 <I2C_IsErrorOccurred>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e02d      	b.n	8003036 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fe fc05 	bl	80017e8 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d11a      	bne.n	8003026 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d013      	beq.n	8003026 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e007      	b.n	8003036 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b20      	cmp	r3, #32
 8003032:	d1c8      	bne.n	8002fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003050:	e071      	b.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f87e 	bl	8003158 <I2C_IsErrorOccurred>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b20      	cmp	r3, #32
 8003072:	d13b      	bne.n	80030ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d138      	bne.n	80030ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b04      	cmp	r3, #4
 8003086:	d105      	bne.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d121      	bne.n	80030e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2210      	movs	r2, #16
 80030a8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2204      	movs	r2, #4
 80030ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2220      	movs	r2, #32
 80030b6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4b24      	ldr	r3, [pc, #144]	@ (8003154 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80030c4:	400b      	ands	r3, r1
 80030c6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	75fb      	strb	r3, [r7, #23]
 80030e4:	e002      	b.n	80030ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80030ec:	f7fe fb7c 	bl	80017e8 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d302      	bcc.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d119      	bne.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d116      	bne.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b04      	cmp	r3, #4
 8003114:	d00f      	beq.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b04      	cmp	r3, #4
 8003142:	d002      	beq.n	800314a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d083      	beq.n	8003052 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	fe00e800 	.word	0xfe00e800

08003158 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	@ 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d068      	beq.n	8003256 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2210      	movs	r2, #16
 800318a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800318c:	e049      	b.n	8003222 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d045      	beq.n	8003222 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003196:	f7fe fb27 	bl	80017e8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d302      	bcc.n	80031ac <I2C_IsErrorOccurred+0x54>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d13a      	bne.n	8003222 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ce:	d121      	bne.n	8003214 <I2C_IsErrorOccurred+0xbc>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031d6:	d01d      	beq.n	8003214 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d01a      	beq.n	8003214 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031ee:	f7fe fafb 	bl	80017e8 <HAL_GetTick>
 80031f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f4:	e00e      	b.n	8003214 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031f6:	f7fe faf7 	bl	80017e8 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b19      	cmp	r3, #25
 8003202:	d907      	bls.n	8003214 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	f043 0320 	orr.w	r3, r3, #32
 800320a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003212:	e006      	b.n	8003222 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b20      	cmp	r3, #32
 8003220:	d1e9      	bne.n	80031f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b20      	cmp	r3, #32
 800322e:	d003      	beq.n	8003238 <I2C_IsErrorOccurred+0xe0>
 8003230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0aa      	beq.n	800318e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800323c:	2b00      	cmp	r3, #0
 800323e:	d103      	bne.n	8003248 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2220      	movs	r2, #32
 8003246:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	f043 0304 	orr.w	r3, r3, #4
 800324e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003278:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800329a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	f043 0302 	orr.w	r3, r3, #2
 80032b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80032c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01c      	beq.n	8003306 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7ff fdaf 	bl	8002e30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003314 <I2C_IsErrorOccurred+0x1bc>)
 80032de:	400b      	ands	r3, r1
 80032e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003306:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800330a:	4618      	mov	r0, r3
 800330c:	3728      	adds	r7, #40	@ 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	fe00e800 	.word	0xfe00e800

08003318 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	460b      	mov	r3, r1
 8003324:	817b      	strh	r3, [r7, #10]
 8003326:	4613      	mov	r3, r2
 8003328:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800332a:	897b      	ldrh	r3, [r7, #10]
 800332c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003330:	7a7b      	ldrb	r3, [r7, #9]
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003338:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	4313      	orrs	r3, r2
 8003342:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003346:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	0d5b      	lsrs	r3, r3, #21
 8003352:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003356:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <I2C_TransferConfig+0x60>)
 8003358:	430b      	orrs	r3, r1
 800335a:	43db      	mvns	r3, r3
 800335c:	ea02 0103 	and.w	r1, r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	03ff63ff 	.word	0x03ff63ff

0800337c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b20      	cmp	r3, #32
 8003390:	d138      	bne.n	8003404 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800339c:	2302      	movs	r3, #2
 800339e:	e032      	b.n	8003406 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	@ 0x24
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b20      	cmp	r3, #32
 8003426:	d139      	bne.n	800349c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003432:	2302      	movs	r3, #2
 8003434:	e033      	b.n	800349e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2224      	movs	r2, #36	@ 0x24
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003464:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af02      	add	r7, sp, #8
 80034b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0fe      	b.n	80036ba <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fd ff65 	bl	80013a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2203      	movs	r2, #3
 80034da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f006 f80a 	bl	80094fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7c1a      	ldrb	r2, [r3, #16]
 80034f0:	f88d 2000 	strb.w	r2, [sp]
 80034f4:	3304      	adds	r3, #4
 80034f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f8:	f005 ff8e 	bl	8009418 <USB_CoreInit>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e0d5      	b.n	80036ba <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f006 f802 	bl	800951e <USB_SetCurrentMode>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0c6      	b.n	80036ba <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352c:	2300      	movs	r3, #0
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e04a      	b.n	80035c8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3315      	adds	r3, #21
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3314      	adds	r3, #20
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	b298      	uxth	r0, r3
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	332e      	adds	r3, #46	@ 0x2e
 800356e:	4602      	mov	r2, r0
 8003570:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3318      	adds	r3, #24
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	331c      	adds	r3, #28
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3320      	adds	r3, #32
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	3324      	adds	r3, #36	@ 0x24
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	3301      	adds	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	791b      	ldrb	r3, [r3, #4]
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3af      	bcc.n	8003532 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	e044      	b.n	8003662 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	3301      	adds	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	791b      	ldrb	r3, [r3, #4]
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	429a      	cmp	r2, r3
 800366a:	d3b5      	bcc.n	80035d8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	7c1a      	ldrb	r2, [r3, #16]
 8003674:	f88d 2000 	strb.w	r2, [sp]
 8003678:	3304      	adds	r3, #4
 800367a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800367c:	f005 ff9c 	bl	80095b8 <USB_DevInit>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e013      	b.n	80036ba <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7b1b      	ldrb	r3, [r3, #12]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d102      	bne.n	80036ae <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f80b 	bl	80036c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f006 f957 	bl	8009966 <USB_DevDisconnect>

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036f2:	4b05      	ldr	r3, [pc, #20]	@ (8003708 <HAL_PCDEx_ActivateLPM+0x44>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	10000003 	.word	0x10000003

0800370c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003714:	4b19      	ldr	r3, [pc, #100]	@ (800377c <HAL_PWREx_ConfigSupply+0x70>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d00a      	beq.n	8003736 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003720:	4b16      	ldr	r3, [pc, #88]	@ (800377c <HAL_PWREx_ConfigSupply+0x70>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d001      	beq.n	8003732 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e01f      	b.n	8003772 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	e01d      	b.n	8003772 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003736:	4b11      	ldr	r3, [pc, #68]	@ (800377c <HAL_PWREx_ConfigSupply+0x70>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	490f      	ldr	r1, [pc, #60]	@ (800377c <HAL_PWREx_ConfigSupply+0x70>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4313      	orrs	r3, r2
 8003744:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003746:	f7fe f84f 	bl	80017e8 <HAL_GetTick>
 800374a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800374c:	e009      	b.n	8003762 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800374e:	f7fe f84b 	bl	80017e8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800375c:	d901      	bls.n	8003762 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e007      	b.n	8003772 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003762:	4b06      	ldr	r3, [pc, #24]	@ (800377c <HAL_PWREx_ConfigSupply+0x70>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376e:	d1ee      	bne.n	800374e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	58024800 	.word	0x58024800

08003780 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a04      	ldr	r2, [pc, #16]	@ (800379c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800378a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	58024800 	.word	0x58024800

080037a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08c      	sub	sp, #48	@ 0x30
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f000 bc48 	b.w	8004044 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8088 	beq.w	80038d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c2:	4b99      	ldr	r3, [pc, #612]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037cc:	4b96      	ldr	r3, [pc, #600]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d007      	beq.n	80037e8 <HAL_RCC_OscConfig+0x48>
 80037d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037da:	2b18      	cmp	r3, #24
 80037dc:	d111      	bne.n	8003802 <HAL_RCC_OscConfig+0x62>
 80037de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d10c      	bne.n	8003802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d06d      	beq.n	80038d0 <HAL_RCC_OscConfig+0x130>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d169      	bne.n	80038d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f000 bc21 	b.w	8004044 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x7a>
 800380c:	4b86      	ldr	r3, [pc, #536]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a85      	ldr	r2, [pc, #532]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e02e      	b.n	8003878 <HAL_RCC_OscConfig+0xd8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x9c>
 8003822:	4b81      	ldr	r3, [pc, #516]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a80      	ldr	r2, [pc, #512]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b7e      	ldr	r3, [pc, #504]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a7d      	ldr	r2, [pc, #500]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xd8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0xc0>
 8003846:	4b78      	ldr	r3, [pc, #480]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a77      	ldr	r2, [pc, #476]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b75      	ldr	r3, [pc, #468]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a74      	ldr	r2, [pc, #464]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xd8>
 8003860:	4b71      	ldr	r3, [pc, #452]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a70      	ldr	r2, [pc, #448]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b6e      	ldr	r3, [pc, #440]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a6d      	ldr	r2, [pc, #436]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fd ffb2 	bl	80017e8 <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fd ffae 	bl	80017e8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	@ 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e3d4      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800389a:	4b63      	ldr	r3, [pc, #396]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xe8>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd ff9e 	bl	80017e8 <HAL_GetTick>
 80038ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fd ff9a 	bl	80017e8 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e3c0      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038c2:	4b59      	ldr	r3, [pc, #356]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x110>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80ca 	beq.w	8003a74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e0:	4b51      	ldr	r3, [pc, #324]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <HAL_RCC_OscConfig+0x166>
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	2b18      	cmp	r3, #24
 80038fa:	d156      	bne.n	80039aa <HAL_RCC_OscConfig+0x20a>
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d151      	bne.n	80039aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003906:	4b48      	ldr	r3, [pc, #288]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_RCC_OscConfig+0x17e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e392      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800391e:	4b42      	ldr	r3, [pc, #264]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 0219 	bic.w	r2, r3, #25
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	493f      	ldr	r1, [pc, #252]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd ff5a 	bl	80017e8 <HAL_GetTick>
 8003934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003938:	f7fd ff56 	bl	80017e8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e37c      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800394a:	4b37      	ldr	r3, [pc, #220]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	f7fd ff77 	bl	8001848 <HAL_GetREVID>
 800395a:	4603      	mov	r3, r0
 800395c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003960:	4293      	cmp	r3, r2
 8003962:	d817      	bhi.n	8003994 <HAL_RCC_OscConfig+0x1f4>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b40      	cmp	r3, #64	@ 0x40
 800396a:	d108      	bne.n	800397e <HAL_RCC_OscConfig+0x1de>
 800396c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003974:	4a2c      	ldr	r2, [pc, #176]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800397a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800397c:	e07a      	b.n	8003a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	031b      	lsls	r3, r3, #12
 800398c:	4926      	ldr	r1, [pc, #152]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003992:	e06f      	b.n	8003a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b24      	ldr	r3, [pc, #144]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	4921      	ldr	r1, [pc, #132]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a8:	e064      	b.n	8003a74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d047      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0219 	bic.w	r2, r3, #25
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	491a      	ldr	r1, [pc, #104]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fd ff10 	bl	80017e8 <HAL_GetTick>
 80039c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fd ff0c 	bl	80017e8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e332      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039de:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	f7fd ff2d 	bl	8001848 <HAL_GetREVID>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d819      	bhi.n	8003a2c <HAL_RCC_OscConfig+0x28c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b40      	cmp	r3, #64	@ 0x40
 80039fe:	d108      	bne.n	8003a12 <HAL_RCC_OscConfig+0x272>
 8003a00:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003a08:	4a07      	ldr	r2, [pc, #28]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a0e:	6053      	str	r3, [r2, #4]
 8003a10:	e030      	b.n	8003a74 <HAL_RCC_OscConfig+0x2d4>
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	031b      	lsls	r3, r3, #12
 8003a20:	4901      	ldr	r1, [pc, #4]	@ (8003a28 <HAL_RCC_OscConfig+0x288>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	604b      	str	r3, [r1, #4]
 8003a26:	e025      	b.n	8003a74 <HAL_RCC_OscConfig+0x2d4>
 8003a28:	58024400 	.word	0x58024400
 8003a2c:	4b9a      	ldr	r3, [pc, #616]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	4997      	ldr	r1, [pc, #604]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	e018      	b.n	8003a74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a42:	4b95      	ldr	r3, [pc, #596]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a94      	ldr	r2, [pc, #592]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fd fecb 	bl	80017e8 <HAL_GetTick>
 8003a52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a56:	f7fd fec7 	bl	80017e8 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e2ed      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a68:	4b8b      	ldr	r3, [pc, #556]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80a9 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a82:	4b85      	ldr	r3, [pc, #532]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a8c:	4b82      	ldr	r3, [pc, #520]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d007      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x308>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b18      	cmp	r3, #24
 8003a9c:	d13a      	bne.n	8003b14 <HAL_RCC_OscConfig+0x374>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d135      	bne.n	8003b14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x320>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	2b80      	cmp	r3, #128	@ 0x80
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e2c1      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ac0:	f7fd fec2 	bl	8001848 <HAL_GetREVID>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d817      	bhi.n	8003afe <HAL_RCC_OscConfig+0x35e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d108      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x348>
 8003ad6:	4b70      	ldr	r3, [pc, #448]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003ade:	4a6e      	ldr	r2, [pc, #440]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003ae0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ae4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ae6:	e075      	b.n	8003bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	069b      	lsls	r3, r3, #26
 8003af6:	4968      	ldr	r1, [pc, #416]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003afc:	e06a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003afe:	4b66      	ldr	r3, [pc, #408]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	061b      	lsls	r3, r3, #24
 8003b0c:	4962      	ldr	r1, [pc, #392]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b12:	e05f      	b.n	8003bd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d042      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5d      	ldr	r2, [pc, #372]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fd fe5e 	bl	80017e8 <HAL_GetTick>
 8003b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b30:	f7fd fe5a 	bl	80017e8 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e280      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b42:	4b55      	ldr	r3, [pc, #340]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b4e:	f7fd fe7b 	bl	8001848 <HAL_GetREVID>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d817      	bhi.n	8003b8c <HAL_RCC_OscConfig+0x3ec>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d108      	bne.n	8003b76 <HAL_RCC_OscConfig+0x3d6>
 8003b64:	4b4c      	ldr	r3, [pc, #304]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b72:	6053      	str	r3, [r2, #4]
 8003b74:	e02e      	b.n	8003bd4 <HAL_RCC_OscConfig+0x434>
 8003b76:	4b48      	ldr	r3, [pc, #288]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	069b      	lsls	r3, r3, #26
 8003b84:	4944      	ldr	r1, [pc, #272]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
 8003b8a:	e023      	b.n	8003bd4 <HAL_RCC_OscConfig+0x434>
 8003b8c:	4b42      	ldr	r3, [pc, #264]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	061b      	lsls	r3, r3, #24
 8003b9a:	493f      	ldr	r1, [pc, #252]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60cb      	str	r3, [r1, #12]
 8003ba0:	e018      	b.n	8003bd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fd fe1b 	bl	80017e8 <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bb6:	f7fd fe17 	bl	80017e8 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e23d      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bc8:	4b33      	ldr	r3, [pc, #204]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f0      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d036      	beq.n	8003c4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d019      	beq.n	8003c1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bec:	4a2a      	ldr	r2, [pc, #168]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7fd fdf8 	bl	80017e8 <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bfc:	f7fd fdf4 	bl	80017e8 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e21a      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c0e:	4b22      	ldr	r3, [pc, #136]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x45c>
 8003c1a:	e018      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c20:	4a1d      	ldr	r2, [pc, #116]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7fd fdde 	bl	80017e8 <HAL_GetTick>
 8003c2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c30:	f7fd fdda 	bl	80017e8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e200      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c42:	4b15      	ldr	r3, [pc, #84]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d039      	beq.n	8003cce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01c      	beq.n	8003c9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c62:	4b0d      	ldr	r3, [pc, #52]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a0c      	ldr	r2, [pc, #48]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c6e:	f7fd fdbb 	bl	80017e8 <HAL_GetTick>
 8003c72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c76:	f7fd fdb7 	bl	80017e8 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e1dd      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c88:	4b03      	ldr	r3, [pc, #12]	@ (8003c98 <HAL_RCC_OscConfig+0x4f8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x4d6>
 8003c94:	e01b      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
 8003c96:	bf00      	nop
 8003c98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c9c:	4b9b      	ldr	r3, [pc, #620]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a9a      	ldr	r2, [pc, #616]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fd9e 	bl	80017e8 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb0:	f7fd fd9a 	bl	80017e8 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e1c0      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cc2:	4b92      	ldr	r3, [pc, #584]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8081 	beq.w	8003dde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8003f10 <HAL_RCC_OscConfig+0x770>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a8b      	ldr	r2, [pc, #556]	@ (8003f10 <HAL_RCC_OscConfig+0x770>)
 8003ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ce8:	f7fd fd7e 	bl	80017e8 <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf0:	f7fd fd7a 	bl	80017e8 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	@ 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e1a0      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d02:	4b83      	ldr	r3, [pc, #524]	@ (8003f10 <HAL_RCC_OscConfig+0x770>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d106      	bne.n	8003d24 <HAL_RCC_OscConfig+0x584>
 8003d16:	4b7d      	ldr	r3, [pc, #500]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d22:	e02d      	b.n	8003d80 <HAL_RCC_OscConfig+0x5e0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10c      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5a6>
 8003d2c:	4b77      	ldr	r3, [pc, #476]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d30:	4a76      	ldr	r2, [pc, #472]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d38:	4b74      	ldr	r3, [pc, #464]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3c:	4a73      	ldr	r2, [pc, #460]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d3e:	f023 0304 	bic.w	r3, r3, #4
 8003d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d44:	e01c      	b.n	8003d80 <HAL_RCC_OscConfig+0x5e0>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5c8>
 8003d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	4a6e      	ldr	r2, [pc, #440]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d54:	f043 0304 	orr.w	r3, r3, #4
 8003d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5e:	4a6b      	ldr	r2, [pc, #428]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d66:	e00b      	b.n	8003d80 <HAL_RCC_OscConfig+0x5e0>
 8003d68:	4b68      	ldr	r3, [pc, #416]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6c:	4a67      	ldr	r2, [pc, #412]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d74:	4b65      	ldr	r3, [pc, #404]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d78:	4a64      	ldr	r2, [pc, #400]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003d7a:	f023 0304 	bic.w	r3, r3, #4
 8003d7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d015      	beq.n	8003db4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fd fd2e 	bl	80017e8 <HAL_GetTick>
 8003d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d90:	f7fd fd2a 	bl	80017e8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e14e      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003da6:	4b59      	ldr	r3, [pc, #356]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0ee      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5f0>
 8003db2:	e014      	b.n	8003dde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fd fd18 	bl	80017e8 <HAL_GetTick>
 8003db8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbc:	f7fd fd14 	bl	80017e8 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e138      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ee      	bne.n	8003dbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 812d 	beq.w	8004042 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003de8:	4b48      	ldr	r3, [pc, #288]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003df0:	2b18      	cmp	r3, #24
 8003df2:	f000 80bd 	beq.w	8003f70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	f040 809e 	bne.w	8003f3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e00:	4b42      	ldr	r3, [pc, #264]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a41      	ldr	r2, [pc, #260]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fd fcec 	bl	80017e8 <HAL_GetTick>
 8003e10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd fce8 	bl	80017e8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e10e      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e26:	4b39      	ldr	r3, [pc, #228]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e32:	4b36      	ldr	r3, [pc, #216]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003e34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e36:	4b37      	ldr	r3, [pc, #220]	@ (8003f14 <HAL_RCC_OscConfig+0x774>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	430a      	orrs	r2, r1
 8003e46:	4931      	ldr	r1, [pc, #196]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e50:	3b01      	subs	r3, #1
 8003e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	025b      	lsls	r3, r3, #9
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e66:	3b01      	subs	r3, #1
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e74:	3b01      	subs	r3, #1
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e7c:	4923      	ldr	r1, [pc, #140]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e82:	4b22      	ldr	r3, [pc, #136]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e86:	4a21      	ldr	r2, [pc, #132]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e92:	4b21      	ldr	r3, [pc, #132]	@ (8003f18 <HAL_RCC_OscConfig+0x778>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e9a:	00d2      	lsls	r2, r2, #3
 8003e9c:	491b      	ldr	r1, [pc, #108]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea6:	f023 020c 	bic.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	4917      	ldr	r1, [pc, #92]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003eb4:	4b15      	ldr	r3, [pc, #84]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	f023 0202 	bic.w	r2, r3, #2
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec0:	4912      	ldr	r1, [pc, #72]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ec6:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eca:	4a10      	ldr	r2, [pc, #64]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ede:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003eea:	4b08      	ldr	r3, [pc, #32]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eee:	4a07      	ldr	r2, [pc, #28]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef6:	4b05      	ldr	r3, [pc, #20]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a04      	ldr	r2, [pc, #16]	@ (8003f0c <HAL_RCC_OscConfig+0x76c>)
 8003efc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f02:	f7fd fc71 	bl	80017e8 <HAL_GetTick>
 8003f06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f08:	e011      	b.n	8003f2e <HAL_RCC_OscConfig+0x78e>
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	58024800 	.word	0x58024800
 8003f14:	fffffc0c 	.word	0xfffffc0c
 8003f18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd fc64 	bl	80017e8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e08a      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x77c>
 8003f3a:	e082      	b.n	8004042 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3c:	4b43      	ldr	r3, [pc, #268]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a42      	ldr	r2, [pc, #264]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8003f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fd fc4e 	bl	80017e8 <HAL_GetTick>
 8003f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd fc4a 	bl	80017e8 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e070      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f62:	4b3a      	ldr	r3, [pc, #232]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x7b0>
 8003f6e:	e068      	b.n	8004042 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f70:	4b36      	ldr	r3, [pc, #216]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f76:	4b35      	ldr	r3, [pc, #212]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d031      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f003 0203 	and.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d12a      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d122      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d11a      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	0a5b      	lsrs	r3, r3, #9
 8003fb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d111      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	0c1b      	lsrs	r3, r3, #16
 8003fc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d108      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0e1b      	lsrs	r3, r3, #24
 8003fda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e02b      	b.n	8004044 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fec:	4b17      	ldr	r3, [pc, #92]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8003fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff0:	08db      	lsrs	r3, r3, #3
 8003ff2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ff6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d01f      	beq.n	8004042 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004002:	4b12      	ldr	r3, [pc, #72]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	4a11      	ldr	r2, [pc, #68]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800400e:	f7fd fbeb 	bl	80017e8 <HAL_GetTick>
 8004012:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004014:	bf00      	nop
 8004016:	f7fd fbe7 	bl	80017e8 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	4293      	cmp	r3, r2
 8004020:	d0f9      	beq.n	8004016 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004022:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8004024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004026:	4b0a      	ldr	r3, [pc, #40]	@ (8004050 <HAL_RCC_OscConfig+0x8b0>)
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800402e:	00d2      	lsls	r2, r2, #3
 8004030:	4906      	ldr	r1, [pc, #24]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8004032:	4313      	orrs	r3, r2
 8004034:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004036:	4b05      	ldr	r3, [pc, #20]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	4a04      	ldr	r2, [pc, #16]	@ (800404c <HAL_RCC_OscConfig+0x8ac>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3730      	adds	r7, #48	@ 0x30
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	58024400 	.word	0x58024400
 8004050:	ffff0007 	.word	0xffff0007

08004054 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e19c      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b8a      	ldr	r3, [pc, #552]	@ (8004294 <HAL_RCC_ClockConfig+0x240>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d910      	bls.n	8004098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b87      	ldr	r3, [pc, #540]	@ (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 020f 	bic.w	r2, r3, #15
 800407e:	4985      	ldr	r1, [pc, #532]	@ (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b83      	ldr	r3, [pc, #524]	@ (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e184      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d010      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	4b7b      	ldr	r3, [pc, #492]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d908      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040b4:	4b78      	ldr	r3, [pc, #480]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	4975      	ldr	r1, [pc, #468]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d010      	beq.n	80040f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	4b70      	ldr	r3, [pc, #448]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040de:	429a      	cmp	r2, r3
 80040e0:	d908      	bls.n	80040f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	496a      	ldr	r1, [pc, #424]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d010      	beq.n	8004122 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	4b64      	ldr	r3, [pc, #400]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800410c:	429a      	cmp	r2, r3
 800410e:	d908      	bls.n	8004122 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004110:	4b61      	ldr	r3, [pc, #388]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	495e      	ldr	r1, [pc, #376]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 800411e:	4313      	orrs	r3, r2
 8004120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d010      	beq.n	8004150 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	4b59      	ldr	r3, [pc, #356]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800413a:	429a      	cmp	r2, r3
 800413c:	d908      	bls.n	8004150 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800413e:	4b56      	ldr	r3, [pc, #344]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	4953      	ldr	r1, [pc, #332]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 800414c:	4313      	orrs	r3, r2
 800414e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d010      	beq.n	800417e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	4b4d      	ldr	r3, [pc, #308]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	429a      	cmp	r2, r3
 800416a:	d908      	bls.n	800417e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b4a      	ldr	r3, [pc, #296]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f023 020f 	bic.w	r2, r3, #15
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4947      	ldr	r1, [pc, #284]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 800417a:	4313      	orrs	r3, r2
 800417c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d055      	beq.n	8004236 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800418a:	4b43      	ldr	r3, [pc, #268]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4940      	ldr	r1, [pc, #256]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004198:	4313      	orrs	r3, r2
 800419a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d121      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0f6      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d107      	bne.n	80041cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041bc:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d115      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0ea      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041d4:	4b30      	ldr	r3, [pc, #192]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0de      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0d6      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f4:	4b28      	ldr	r3, [pc, #160]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f023 0207 	bic.w	r2, r3, #7
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4925      	ldr	r1, [pc, #148]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004202:	4313      	orrs	r3, r2
 8004204:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004206:	f7fd faef 	bl	80017e8 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420c:	e00a      	b.n	8004224 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420e:	f7fd faeb 	bl	80017e8 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421c:	4293      	cmp	r3, r2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e0be      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004224:	4b1c      	ldr	r3, [pc, #112]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	429a      	cmp	r2, r3
 8004234:	d1eb      	bne.n	800420e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d010      	beq.n	8004264 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	429a      	cmp	r2, r3
 8004250:	d208      	bcs.n	8004264 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004252:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f023 020f 	bic.w	r2, r3, #15
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	490e      	ldr	r1, [pc, #56]	@ (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004260:	4313      	orrs	r3, r2
 8004262:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004264:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d214      	bcs.n	800429c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b08      	ldr	r3, [pc, #32]	@ (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 020f 	bic.w	r2, r3, #15
 800427a:	4906      	ldr	r1, [pc, #24]	@ (8004294 <HAL_RCC_ClockConfig+0x240>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b04      	ldr	r3, [pc, #16]	@ (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d005      	beq.n	800429c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e086      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
 8004294:	52002000 	.word	0x52002000
 8004298:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d010      	beq.n	80042ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	4b3f      	ldr	r3, [pc, #252]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d208      	bcs.n	80042ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042b8:	4b3c      	ldr	r3, [pc, #240]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	4939      	ldr	r1, [pc, #228]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d010      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	4b34      	ldr	r3, [pc, #208]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d208      	bcs.n	80042f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042e6:	4b31      	ldr	r3, [pc, #196]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	492e      	ldr	r1, [pc, #184]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699a      	ldr	r2, [r3, #24]
 8004308:	4b28      	ldr	r3, [pc, #160]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004310:	429a      	cmp	r2, r3
 8004312:	d208      	bcs.n	8004326 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004314:	4b25      	ldr	r3, [pc, #148]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	4922      	ldr	r1, [pc, #136]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004322:	4313      	orrs	r3, r2
 8004324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d010      	beq.n	8004354 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	4b1d      	ldr	r3, [pc, #116]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800433e:	429a      	cmp	r2, r3
 8004340:	d208      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004342:	4b1a      	ldr	r3, [pc, #104]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	4917      	ldr	r1, [pc, #92]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004350:	4313      	orrs	r3, r2
 8004352:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004354:	f000 f834 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b14      	ldr	r3, [pc, #80]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	4912      	ldr	r1, [pc, #72]	@ (80043b0 <HAL_RCC_ClockConfig+0x35c>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
 8004370:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004372:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	4a0d      	ldr	r2, [pc, #52]	@ (80043b0 <HAL_RCC_ClockConfig+0x35c>)
 800437c:	5cd3      	ldrb	r3, [r2, r3]
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
 8004388:	4a0a      	ldr	r2, [pc, #40]	@ (80043b4 <HAL_RCC_ClockConfig+0x360>)
 800438a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800438c:	4a0a      	ldr	r2, [pc, #40]	@ (80043b8 <HAL_RCC_ClockConfig+0x364>)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004392:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <HAL_RCC_ClockConfig+0x368>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fd f9dc 	bl	8001754 <HAL_InitTick>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
 80043b0:	0800a440 	.word	0x0800a440
 80043b4:	24000004 	.word	0x24000004
 80043b8:	24000000 	.word	0x24000000
 80043bc:	24000008 	.word	0x24000008

080043c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b089      	sub	sp, #36	@ 0x24
 80043c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c6:	4bb3      	ldr	r3, [pc, #716]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043ce:	2b18      	cmp	r3, #24
 80043d0:	f200 8155 	bhi.w	800467e <HAL_RCC_GetSysClockFreq+0x2be>
 80043d4:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004441 	.word	0x08004441
 80043e0:	0800467f 	.word	0x0800467f
 80043e4:	0800467f 	.word	0x0800467f
 80043e8:	0800467f 	.word	0x0800467f
 80043ec:	0800467f 	.word	0x0800467f
 80043f0:	0800467f 	.word	0x0800467f
 80043f4:	0800467f 	.word	0x0800467f
 80043f8:	0800467f 	.word	0x0800467f
 80043fc:	08004467 	.word	0x08004467
 8004400:	0800467f 	.word	0x0800467f
 8004404:	0800467f 	.word	0x0800467f
 8004408:	0800467f 	.word	0x0800467f
 800440c:	0800467f 	.word	0x0800467f
 8004410:	0800467f 	.word	0x0800467f
 8004414:	0800467f 	.word	0x0800467f
 8004418:	0800467f 	.word	0x0800467f
 800441c:	0800446d 	.word	0x0800446d
 8004420:	0800467f 	.word	0x0800467f
 8004424:	0800467f 	.word	0x0800467f
 8004428:	0800467f 	.word	0x0800467f
 800442c:	0800467f 	.word	0x0800467f
 8004430:	0800467f 	.word	0x0800467f
 8004434:	0800467f 	.word	0x0800467f
 8004438:	0800467f 	.word	0x0800467f
 800443c:	08004473 	.word	0x08004473
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004440:	4b94      	ldr	r3, [pc, #592]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800444c:	4b91      	ldr	r3, [pc, #580]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	08db      	lsrs	r3, r3, #3
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	4a90      	ldr	r2, [pc, #576]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
 800445c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800445e:	e111      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004460:	4b8d      	ldr	r3, [pc, #564]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004462:	61bb      	str	r3, [r7, #24]
      break;
 8004464:	e10e      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004466:	4b8d      	ldr	r3, [pc, #564]	@ (800469c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004468:	61bb      	str	r3, [r7, #24]
      break;
 800446a:	e10b      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800446c:	4b8c      	ldr	r3, [pc, #560]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800446e:	61bb      	str	r3, [r7, #24]
      break;
 8004470:	e108      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004472:	4b88      	ldr	r3, [pc, #544]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800447c:	4b85      	ldr	r3, [pc, #532]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004486:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004488:	4b82      	ldr	r3, [pc, #520]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004492:	4b80      	ldr	r3, [pc, #512]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004496:	08db      	lsrs	r3, r3, #3
 8004498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80e1 	beq.w	8004678 <HAL_RCC_GetSysClockFreq+0x2b8>
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	f000 8083 	beq.w	80045c4 <HAL_RCC_GetSysClockFreq+0x204>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	f200 80a1 	bhi.w	8004608 <HAL_RCC_GetSysClockFreq+0x248>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x114>
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d056      	beq.n	8004580 <HAL_RCC_GetSysClockFreq+0x1c0>
 80044d2:	e099      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02d      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	08db      	lsrs	r3, r3, #3
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	4a6b      	ldr	r2, [pc, #428]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
 80044f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450a:	4b62      	ldr	r3, [pc, #392]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451a:	ed97 6a02 	vldr	s12, [r7, #8]
 800451e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80046a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800452e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004536:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800453a:	e087      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004546:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80046a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800454a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454e:	4b51      	ldr	r3, [pc, #324]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004562:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80046a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800457e:	e065      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80046ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800458e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004592:	4b40      	ldr	r3, [pc, #256]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80046a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045c2:	e043      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80046b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80045d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80046a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004606:	e021      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80046ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b1e      	ldr	r3, [pc, #120]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a02 	vldr	s12, [r7, #8]
 800462e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80046a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800464a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800464c:	4b11      	ldr	r3, [pc, #68]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	0a5b      	lsrs	r3, r3, #9
 8004652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004656:	3301      	adds	r3, #1
 8004658:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	ee07 3a90 	vmov	s15, r3
 8004660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004664:	edd7 6a07 	vldr	s13, [r7, #28]
 8004668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800466c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004670:	ee17 3a90 	vmov	r3, s15
 8004674:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004676:	e005      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	61bb      	str	r3, [r7, #24]
      break;
 800467c:	e002      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800467e:	4b07      	ldr	r3, [pc, #28]	@ (800469c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004680:	61bb      	str	r3, [r7, #24]
      break;
 8004682:	bf00      	nop
  }

  return sysclockfreq;
 8004684:	69bb      	ldr	r3, [r7, #24]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3724      	adds	r7, #36	@ 0x24
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	58024400 	.word	0x58024400
 8004698:	03d09000 	.word	0x03d09000
 800469c:	003d0900 	.word	0x003d0900
 80046a0:	007a1200 	.word	0x007a1200
 80046a4:	46000000 	.word	0x46000000
 80046a8:	4c742400 	.word	0x4c742400
 80046ac:	4a742400 	.word	0x4a742400
 80046b0:	4af42400 	.word	0x4af42400

080046b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046ba:	f7ff fe81 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4b10      	ldr	r3, [pc, #64]	@ (8004704 <HAL_RCC_GetHCLKFreq+0x50>)
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	0a1b      	lsrs	r3, r3, #8
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	490f      	ldr	r1, [pc, #60]	@ (8004708 <HAL_RCC_GetHCLKFreq+0x54>)
 80046cc:	5ccb      	ldrb	r3, [r1, r3]
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	fa22 f303 	lsr.w	r3, r2, r3
 80046d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004704 <HAL_RCC_GetHCLKFreq+0x50>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	4a09      	ldr	r2, [pc, #36]	@ (8004708 <HAL_RCC_GetHCLKFreq+0x54>)
 80046e2:	5cd3      	ldrb	r3, [r2, r3]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	fa22 f303 	lsr.w	r3, r2, r3
 80046ee:	4a07      	ldr	r2, [pc, #28]	@ (800470c <HAL_RCC_GetHCLKFreq+0x58>)
 80046f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046f2:	4a07      	ldr	r2, [pc, #28]	@ (8004710 <HAL_RCC_GetHCLKFreq+0x5c>)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80046f8:	4b04      	ldr	r3, [pc, #16]	@ (800470c <HAL_RCC_GetHCLKFreq+0x58>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	58024400 	.word	0x58024400
 8004708:	0800a440 	.word	0x0800a440
 800470c:	24000004 	.word	0x24000004
 8004710:	24000000 	.word	0x24000000

08004714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004718:	f7ff ffcc 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4904      	ldr	r1, [pc, #16]	@ (800473c <HAL_RCC_GetPCLK1Freq+0x28>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	58024400 	.word	0x58024400
 800473c:	0800a440 	.word	0x0800a440

08004740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004744:	f7ff ffb6 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4904      	ldr	r1, [pc, #16]	@ (8004768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	58024400 	.word	0x58024400
 8004768:	0800a440 	.word	0x0800a440

0800476c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800476c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004770:	b0ca      	sub	sp, #296	@ 0x128
 8004772:	af00      	add	r7, sp, #0
 8004774:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004778:	2300      	movs	r3, #0
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800477e:	2300      	movs	r3, #0
 8004780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004790:	2500      	movs	r5, #0
 8004792:	ea54 0305 	orrs.w	r3, r4, r5
 8004796:	d049      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800479e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047a2:	d02f      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047a8:	d828      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ae:	d01a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047b4:	d822      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047be:	d007      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047c0:	e01c      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c2:	4bb8      	ldr	r3, [pc, #736]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	4ab7      	ldr	r2, [pc, #732]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047ce:	e01a      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d4:	3308      	adds	r3, #8
 80047d6:	2102      	movs	r1, #2
 80047d8:	4618      	mov	r0, r3
 80047da:	f001 fc8f 	bl	80060fc <RCCEx_PLL2_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047e4:	e00f      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	3328      	adds	r3, #40	@ 0x28
 80047ec:	2102      	movs	r1, #2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 fd36 	bl	8006260 <RCCEx_PLL3_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047fa:	e004      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004802:	e000      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800480e:	4ba5      	ldr	r3, [pc, #660]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004812:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800481c:	4aa1      	ldr	r2, [pc, #644]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800481e:	430b      	orrs	r3, r1
 8004820:	6513      	str	r3, [r2, #80]	@ 0x50
 8004822:	e003      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004838:	f04f 0900 	mov.w	r9, #0
 800483c:	ea58 0309 	orrs.w	r3, r8, r9
 8004840:	d047      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004848:	2b04      	cmp	r3, #4
 800484a:	d82a      	bhi.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800484c:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004869 	.word	0x08004869
 8004858:	08004877 	.word	0x08004877
 800485c:	0800488d 	.word	0x0800488d
 8004860:	080048ab 	.word	0x080048ab
 8004864:	080048ab 	.word	0x080048ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004868:	4b8e      	ldr	r3, [pc, #568]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	4a8d      	ldr	r2, [pc, #564]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800486e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004874:	e01a      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487a:	3308      	adds	r3, #8
 800487c:	2100      	movs	r1, #0
 800487e:	4618      	mov	r0, r3
 8004880:	f001 fc3c 	bl	80060fc <RCCEx_PLL2_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800488a:	e00f      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800488c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004890:	3328      	adds	r3, #40	@ 0x28
 8004892:	2100      	movs	r1, #0
 8004894:	4618      	mov	r0, r3
 8004896:	f001 fce3 	bl	8006260 <RCCEx_PLL3_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048a0:	e004      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048a8:	e000      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80048aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048b4:	4b7b      	ldr	r3, [pc, #492]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b8:	f023 0107 	bic.w	r1, r3, #7
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	4a78      	ldr	r2, [pc, #480]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80048c8:	e003      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80048de:	f04f 0b00 	mov.w	fp, #0
 80048e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80048e6:	d04c      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f2:	d030      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80048f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f8:	d829      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80048fc:	d02d      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80048fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004900:	d825      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004902:	2b80      	cmp	r3, #128	@ 0x80
 8004904:	d018      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004906:	2b80      	cmp	r3, #128	@ 0x80
 8004908:	d821      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800490e:	2b40      	cmp	r3, #64	@ 0x40
 8004910:	d007      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004912:	e01c      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004914:	4b63      	ldr	r3, [pc, #396]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	4a62      	ldr	r2, [pc, #392]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800491a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800491e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004920:	e01c      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004926:	3308      	adds	r3, #8
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f001 fbe6 	bl	80060fc <RCCEx_PLL2_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004936:	e011      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493c:	3328      	adds	r3, #40	@ 0x28
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f001 fc8d 	bl	8006260 <RCCEx_PLL3_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800494c:	e006      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004954:	e002      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004956:	bf00      	nop
 8004958:	e000      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800495a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004964:	4b4f      	ldr	r3, [pc, #316]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004968:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800496c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004972:	4a4c      	ldr	r2, [pc, #304]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004974:	430b      	orrs	r3, r1
 8004976:	6513      	str	r3, [r2, #80]	@ 0x50
 8004978:	e003      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800497e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800498e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004992:	2300      	movs	r3, #0
 8004994:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004998:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800499c:	460b      	mov	r3, r1
 800499e:	4313      	orrs	r3, r2
 80049a0:	d053      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049ae:	d035      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80049b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049b4:	d82e      	bhi.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049ba:	d031      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80049bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049c0:	d828      	bhi.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c6:	d01a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80049c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049cc:	d822      	bhi.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80049d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049d6:	d007      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80049d8:	e01c      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049da:	4b32      	ldr	r3, [pc, #200]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	4a31      	ldr	r2, [pc, #196]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049e6:	e01c      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ec:	3308      	adds	r3, #8
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 fb83 	bl	80060fc <RCCEx_PLL2_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049fc:	e011      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	3328      	adds	r3, #40	@ 0x28
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 fc2a 	bl	8006260 <RCCEx_PLL3_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a12:	e006      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a1a:	e002      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a1c:	bf00      	nop
 8004a1e:	e000      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a40:	e003      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a64:	460b      	mov	r3, r1
 8004a66:	4313      	orrs	r3, r2
 8004a68:	d056      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a76:	d038      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004a78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a7c:	d831      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a82:	d034      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004a84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a88:	d82b      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a8e:	d01d      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004a90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a94:	d825      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d006      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004a9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004aa0:	e01f      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004aa2:	bf00      	nop
 8004aa4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa8:	4ba2      	ldr	r3, [pc, #648]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	4aa1      	ldr	r2, [pc, #644]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ab4:	e01c      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aba:	3308      	adds	r3, #8
 8004abc:	2100      	movs	r1, #0
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 fb1c 	bl	80060fc <RCCEx_PLL2_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004aca:	e011      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad0:	3328      	adds	r3, #40	@ 0x28
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 fbc3 	bl	8006260 <RCCEx_PLL3_Config>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ae0:	e006      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ae8:	e002      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004aea:	bf00      	nop
 8004aec:	e000      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004af8:	4b8e      	ldr	r3, [pc, #568]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b08:	4a8a      	ldr	r2, [pc, #552]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b0a:	430b      	orrs	r3, r1
 8004b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b0e:	e003      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b32:	460b      	mov	r3, r1
 8004b34:	4313      	orrs	r3, r2
 8004b36:	d03a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b3e:	2b30      	cmp	r3, #48	@ 0x30
 8004b40:	d01f      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b42:	2b30      	cmp	r3, #48	@ 0x30
 8004b44:	d819      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d00c      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d815      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d019      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d111      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b56:	4b77      	ldr	r3, [pc, #476]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	4a76      	ldr	r2, [pc, #472]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b62:	e011      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b68:	3308      	adds	r3, #8
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 fac5 	bl	80060fc <RCCEx_PLL2_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b78:	e006      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b80:	e002      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b90:	4b68      	ldr	r3, [pc, #416]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b9e:	4a65      	ldr	r2, [pc, #404]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ba4:	e003      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004bba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	d051      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bd8:	d035      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bde:	d82e      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004be0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004be4:	d031      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004be6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bea:	d828      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf0:	d01a      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf6:	d822      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c00:	d007      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004c02:	e01c      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c04:	4b4b      	ldr	r3, [pc, #300]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c08:	4a4a      	ldr	r2, [pc, #296]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c10:	e01c      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c16:	3308      	adds	r3, #8
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 fa6e 	bl	80060fc <RCCEx_PLL2_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c26:	e011      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2c:	3328      	adds	r3, #40	@ 0x28
 8004c2e:	2100      	movs	r1, #0
 8004c30:	4618      	mov	r0, r3
 8004c32:	f001 fb15 	bl	8006260 <RCCEx_PLL3_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c3c:	e006      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c44:	e002      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c46:	bf00      	nop
 8004c48:	e000      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c54:	4b37      	ldr	r3, [pc, #220]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c62:	4a34      	ldr	r2, [pc, #208]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c82:	2300      	movs	r3, #0
 8004c84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	d056      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c9c:	d033      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004c9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ca2:	d82c      	bhi.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ca4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ca8:	d02f      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cae:	d826      	bhi.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cb4:	d02b      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004cb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cba:	d820      	bhi.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cc0:	d012      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cc6:	d81a      	bhi.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d022      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd0:	d115      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	2101      	movs	r1, #1
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 fa0e 	bl	80060fc <RCCEx_PLL2_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ce6:	e015      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cec:	3328      	adds	r3, #40	@ 0x28
 8004cee:	2101      	movs	r1, #1
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 fab5 	bl	8006260 <RCCEx_PLL3_Config>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cfc:	e00a      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d04:	e006      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d06:	bf00      	nop
 8004d08:	e004      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d0a:	bf00      	nop
 8004d0c:	e002      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10d      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d2a:	4a02      	ldr	r2, [pc, #8]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d30:	e006      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d50:	2300      	movs	r3, #0
 8004d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	d055      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d6c:	d033      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d72:	d82c      	bhi.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d78:	d02f      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7e:	d826      	bhi.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d84:	d02b      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004d86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d8a:	d820      	bhi.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d90:	d012      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d96:	d81a      	bhi.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d022      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004da0:	d115      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da6:	3308      	adds	r3, #8
 8004da8:	2101      	movs	r1, #1
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 f9a6 	bl	80060fc <RCCEx_PLL2_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004db6:	e015      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbc:	3328      	adds	r3, #40	@ 0x28
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f001 fa4d 	bl	8006260 <RCCEx_PLL3_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dd4:	e006      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dd6:	bf00      	nop
 8004dd8:	e004      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dda:	bf00      	nop
 8004ddc:	e002      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dde:	bf00      	nop
 8004de0:	e000      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10b      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004dec:	4ba3      	ldr	r3, [pc, #652]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dfc:	4a9f      	ldr	r2, [pc, #636]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e02:	e003      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e26:	460b      	mov	r3, r1
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	d037      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e36:	d00e      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e3c:	d816      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d018      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e46:	d111      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e48:	4b8c      	ldr	r3, [pc, #560]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	4a8b      	ldr	r2, [pc, #556]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e54:	e00f      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 f94c 	bl	80060fc <RCCEx_PLL2_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e6a:	e004      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e72:	e000      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8c:	4a7b      	ldr	r2, [pc, #492]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e92:	e003      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004eac:	2300      	movs	r3, #0
 8004eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004eb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	d039      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d81c      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004f09 	.word	0x08004f09
 8004ed0:	08004edd 	.word	0x08004edd
 8004ed4:	08004eeb 	.word	0x08004eeb
 8004ed8:	08004f09 	.word	0x08004f09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004edc:	4b67      	ldr	r3, [pc, #412]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee0:	4a66      	ldr	r2, [pc, #408]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ee8:	e00f      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eee:	3308      	adds	r3, #8
 8004ef0:	2102      	movs	r1, #2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 f902 	bl	80060fc <RCCEx_PLL2_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004efe:	e004      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f06:	e000      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f12:	4b5a      	ldr	r3, [pc, #360]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f16:	f023 0103 	bic.w	r1, r3, #3
 8004f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f20:	4a56      	ldr	r2, [pc, #344]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f22:	430b      	orrs	r3, r1
 8004f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f26:	e003      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f000 809f 	beq.w	8005090 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f52:	4b4b      	ldr	r3, [pc, #300]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a4a      	ldr	r2, [pc, #296]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f5e:	f7fc fc43 	bl	80017e8 <HAL_GetTick>
 8004f62:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f66:	e00b      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f68:	f7fc fc3e 	bl	80017e8 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b64      	cmp	r3, #100	@ 0x64
 8004f76:	d903      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f7e:	e005      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f80:	4b3f      	ldr	r3, [pc, #252]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0ed      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d179      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f94:	4b39      	ldr	r3, [pc, #228]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fa0:	4053      	eors	r3, r2
 8004fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d015      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004faa:	4b34      	ldr	r3, [pc, #208]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fb6:	4b31      	ldr	r3, [pc, #196]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fba:	4a30      	ldr	r2, [pc, #192]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fcc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fce:	4a2b      	ldr	r2, [pc, #172]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fd4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fe2:	d118      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fc fc00 	bl	80017e8 <HAL_GetTick>
 8004fe8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fec:	e00d      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fc fbfb 	bl	80017e8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004ff8:	1ad2      	subs	r2, r2, r3
 8004ffa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d903      	bls.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005008:	e005      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800500a:	4b1c      	ldr	r3, [pc, #112]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0eb      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800501a:	2b00      	cmp	r3, #0
 800501c:	d129      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800502e:	d10e      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005030:	4b12      	ldr	r3, [pc, #72]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005040:	091a      	lsrs	r2, r3, #4
 8005042:	4b10      	ldr	r3, [pc, #64]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005044:	4013      	ands	r3, r2
 8005046:	4a0d      	ldr	r2, [pc, #52]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005048:	430b      	orrs	r3, r1
 800504a:	6113      	str	r3, [r2, #16]
 800504c:	e005      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800504e:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	4a0a      	ldr	r2, [pc, #40]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005054:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005058:	6113      	str	r3, [r2, #16]
 800505a:	4b08      	ldr	r3, [pc, #32]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800505c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800506a:	4a04      	ldr	r2, [pc, #16]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800506c:	430b      	orrs	r3, r1
 800506e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005070:	e00e      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800507a:	e009      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800507c:	58024400 	.word	0x58024400
 8005080:	58024800 	.word	0x58024800
 8005084:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800508c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f002 0301 	and.w	r3, r2, #1
 800509c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f000 8089 	beq.w	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050b8:	2b28      	cmp	r3, #40	@ 0x28
 80050ba:	d86b      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80050bc:	a201      	add	r2, pc, #4	@ (adr r2, 80050c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	0800519d 	.word	0x0800519d
 80050c8:	08005195 	.word	0x08005195
 80050cc:	08005195 	.word	0x08005195
 80050d0:	08005195 	.word	0x08005195
 80050d4:	08005195 	.word	0x08005195
 80050d8:	08005195 	.word	0x08005195
 80050dc:	08005195 	.word	0x08005195
 80050e0:	08005195 	.word	0x08005195
 80050e4:	08005169 	.word	0x08005169
 80050e8:	08005195 	.word	0x08005195
 80050ec:	08005195 	.word	0x08005195
 80050f0:	08005195 	.word	0x08005195
 80050f4:	08005195 	.word	0x08005195
 80050f8:	08005195 	.word	0x08005195
 80050fc:	08005195 	.word	0x08005195
 8005100:	08005195 	.word	0x08005195
 8005104:	0800517f 	.word	0x0800517f
 8005108:	08005195 	.word	0x08005195
 800510c:	08005195 	.word	0x08005195
 8005110:	08005195 	.word	0x08005195
 8005114:	08005195 	.word	0x08005195
 8005118:	08005195 	.word	0x08005195
 800511c:	08005195 	.word	0x08005195
 8005120:	08005195 	.word	0x08005195
 8005124:	0800519d 	.word	0x0800519d
 8005128:	08005195 	.word	0x08005195
 800512c:	08005195 	.word	0x08005195
 8005130:	08005195 	.word	0x08005195
 8005134:	08005195 	.word	0x08005195
 8005138:	08005195 	.word	0x08005195
 800513c:	08005195 	.word	0x08005195
 8005140:	08005195 	.word	0x08005195
 8005144:	0800519d 	.word	0x0800519d
 8005148:	08005195 	.word	0x08005195
 800514c:	08005195 	.word	0x08005195
 8005150:	08005195 	.word	0x08005195
 8005154:	08005195 	.word	0x08005195
 8005158:	08005195 	.word	0x08005195
 800515c:	08005195 	.word	0x08005195
 8005160:	08005195 	.word	0x08005195
 8005164:	0800519d 	.word	0x0800519d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516c:	3308      	adds	r3, #8
 800516e:	2101      	movs	r1, #1
 8005170:	4618      	mov	r0, r3
 8005172:	f000 ffc3 	bl	80060fc <RCCEx_PLL2_Config>
 8005176:	4603      	mov	r3, r0
 8005178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800517c:	e00f      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005182:	3328      	adds	r3, #40	@ 0x28
 8005184:	2101      	movs	r1, #1
 8005186:	4618      	mov	r0, r3
 8005188:	f001 f86a 	bl	8006260 <RCCEx_PLL3_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005192:	e004      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800519a:	e000      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800519c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051a6:	4bbf      	ldr	r3, [pc, #764]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b4:	4abb      	ldr	r2, [pc, #748]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051b6:	430b      	orrs	r3, r1
 80051b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80051ba:	e003      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f002 0302 	and.w	r3, r2, #2
 80051d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051d4:	2300      	movs	r3, #0
 80051d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80051da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80051de:	460b      	mov	r3, r1
 80051e0:	4313      	orrs	r3, r2
 80051e2:	d041      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d824      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005241 	.word	0x08005241
 80051f8:	0800520d 	.word	0x0800520d
 80051fc:	08005223 	.word	0x08005223
 8005200:	08005241 	.word	0x08005241
 8005204:	08005241 	.word	0x08005241
 8005208:	08005241 	.word	0x08005241
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800520c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005210:	3308      	adds	r3, #8
 8005212:	2101      	movs	r1, #1
 8005214:	4618      	mov	r0, r3
 8005216:	f000 ff71 	bl	80060fc <RCCEx_PLL2_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005220:	e00f      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005226:	3328      	adds	r3, #40	@ 0x28
 8005228:	2101      	movs	r1, #1
 800522a:	4618      	mov	r0, r3
 800522c:	f001 f818 	bl	8006260 <RCCEx_PLL3_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005236:	e004      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800523e:	e000      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10a      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800524a:	4b96      	ldr	r3, [pc, #600]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800524c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524e:	f023 0107 	bic.w	r1, r3, #7
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005256:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005258:	4a92      	ldr	r2, [pc, #584]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800525a:	430b      	orrs	r3, r1
 800525c:	6553      	str	r3, [r2, #84]	@ 0x54
 800525e:	e003      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	f002 0304 	and.w	r3, r2, #4
 8005274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005278:	2300      	movs	r3, #0
 800527a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800527e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005282:	460b      	mov	r3, r1
 8005284:	4313      	orrs	r3, r2
 8005286:	d044      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005290:	2b05      	cmp	r3, #5
 8005292:	d825      	bhi.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005294:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052e9 	.word	0x080052e9
 80052a0:	080052b5 	.word	0x080052b5
 80052a4:	080052cb 	.word	0x080052cb
 80052a8:	080052e9 	.word	0x080052e9
 80052ac:	080052e9 	.word	0x080052e9
 80052b0:	080052e9 	.word	0x080052e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b8:	3308      	adds	r3, #8
 80052ba:	2101      	movs	r1, #1
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 ff1d 	bl	80060fc <RCCEx_PLL2_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052c8:	e00f      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ce:	3328      	adds	r3, #40	@ 0x28
 80052d0:	2101      	movs	r1, #1
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 ffc4 	bl	8006260 <RCCEx_PLL3_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052de:	e004      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052e6:	e000      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80052e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052f2:	4b6c      	ldr	r3, [pc, #432]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f6:	f023 0107 	bic.w	r1, r3, #7
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005302:	4a68      	ldr	r2, [pc, #416]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005304:	430b      	orrs	r3, r1
 8005306:	6593      	str	r3, [r2, #88]	@ 0x58
 8005308:	e003      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800530e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f002 0320 	and.w	r3, r2, #32
 800531e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005322:	2300      	movs	r3, #0
 8005324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800532c:	460b      	mov	r3, r1
 800532e:	4313      	orrs	r3, r2
 8005330:	d055      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800533e:	d033      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005344:	d82c      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800534a:	d02f      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005350:	d826      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005356:	d02b      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005358:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800535c:	d820      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800535e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005362:	d012      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005368:	d81a      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d022      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800536e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005372:	d115      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005378:	3308      	adds	r3, #8
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f000 febd 	bl	80060fc <RCCEx_PLL2_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005388:	e015      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538e:	3328      	adds	r3, #40	@ 0x28
 8005390:	2102      	movs	r1, #2
 8005392:	4618      	mov	r0, r3
 8005394:	f000 ff64 	bl	8006260 <RCCEx_PLL3_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800539e:	e00a      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053a6:	e006      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053a8:	bf00      	nop
 80053aa:	e004      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053ac:	bf00      	nop
 80053ae:	e002      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053b0:	bf00      	nop
 80053b2:	e000      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053be:	4b39      	ldr	r3, [pc, #228]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ce:	4a35      	ldr	r2, [pc, #212]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80053d4:	e003      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80053ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053ee:	2300      	movs	r3, #0
 80053f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d058      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005402:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005406:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800540a:	d033      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800540c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005410:	d82c      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005416:	d02f      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800541c:	d826      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800541e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005422:	d02b      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005424:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005428:	d820      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800542a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800542e:	d012      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005434:	d81a      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d022      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800543a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543e:	d115      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005444:	3308      	adds	r3, #8
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fe57 	bl	80060fc <RCCEx_PLL2_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005454:	e015      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545a:	3328      	adds	r3, #40	@ 0x28
 800545c:	2102      	movs	r1, #2
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fefe 	bl	8006260 <RCCEx_PLL3_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800546a:	e00a      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005472:	e006      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005474:	bf00      	nop
 8005476:	e004      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005478:	bf00      	nop
 800547a:	e002      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800547c:	bf00      	nop
 800547e:	e000      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10e      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800548a:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005496:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800549a:	4a02      	ldr	r2, [pc, #8]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800549c:	430b      	orrs	r3, r1
 800549e:	6593      	str	r3, [r2, #88]	@ 0x58
 80054a0:	e006      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80054a2:	bf00      	nop
 80054a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80054ca:	460b      	mov	r3, r1
 80054cc:	4313      	orrs	r3, r2
 80054ce:	d055      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80054d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054dc:	d033      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80054de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054e2:	d82c      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e8:	d02f      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80054ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ee:	d826      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054f4:	d02b      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80054f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054fa:	d820      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005500:	d012      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005506:	d81a      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d022      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800550c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005510:	d115      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	3308      	adds	r3, #8
 8005518:	2100      	movs	r1, #0
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fdee 	bl	80060fc <RCCEx_PLL2_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005526:	e015      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552c:	3328      	adds	r3, #40	@ 0x28
 800552e:	2102      	movs	r1, #2
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fe95 	bl	8006260 <RCCEx_PLL3_Config>
 8005536:	4603      	mov	r3, r0
 8005538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800553c:	e00a      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005544:	e006      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005546:	bf00      	nop
 8005548:	e004      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800554a:	bf00      	nop
 800554c:	e002      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800555c:	4ba1      	ldr	r3, [pc, #644]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800555e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005560:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800556c:	4a9d      	ldr	r2, [pc, #628]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800556e:	430b      	orrs	r3, r1
 8005570:	6593      	str	r3, [r2, #88]	@ 0x58
 8005572:	e003      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005584:	f002 0308 	and.w	r3, r2, #8
 8005588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800558c:	2300      	movs	r3, #0
 800558e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005592:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005596:	460b      	mov	r3, r1
 8005598:	4313      	orrs	r3, r2
 800559a:	d01e      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ae:	3328      	adds	r3, #40	@ 0x28
 80055b0:	2102      	movs	r1, #2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fe54 	bl	8006260 <RCCEx_PLL3_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055c4:	4b87      	ldr	r3, [pc, #540]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055d4:	4a83      	ldr	r2, [pc, #524]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055d6:	430b      	orrs	r3, r1
 80055d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f002 0310 	and.w	r3, r2, #16
 80055e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055ea:	2300      	movs	r3, #0
 80055ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055f4:	460b      	mov	r3, r1
 80055f6:	4313      	orrs	r3, r2
 80055f8:	d01e      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005606:	d10c      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560c:	3328      	adds	r3, #40	@ 0x28
 800560e:	2102      	movs	r1, #2
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fe25 	bl	8006260 <RCCEx_PLL3_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005622:	4b70      	ldr	r3, [pc, #448]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005626:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005632:	4a6c      	ldr	r2, [pc, #432]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005634:	430b      	orrs	r3, r1
 8005636:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005648:	2300      	movs	r3, #0
 800564a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800564e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005652:	460b      	mov	r3, r1
 8005654:	4313      	orrs	r3, r2
 8005656:	d03e      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005664:	d022      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800566a:	d81b      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005674:	d00b      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005676:	e015      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567c:	3308      	adds	r3, #8
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fd3b 	bl	80060fc <RCCEx_PLL2_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800568c:	e00f      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005692:	3328      	adds	r3, #40	@ 0x28
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fde2 	bl	8006260 <RCCEx_PLL3_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80056ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b6:	4b4b      	ldr	r3, [pc, #300]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056c6:	4a47      	ldr	r2, [pc, #284]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80056cc:	e003      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80056e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056e4:	2300      	movs	r3, #0
 80056e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80056ec:	460b      	mov	r3, r1
 80056ee:	4313      	orrs	r3, r2
 80056f0:	d03b      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056fe:	d01f      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005700:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005704:	d818      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800570a:	d003      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800570c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005710:	d007      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005712:	e011      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005714:	4b33      	ldr	r3, [pc, #204]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	4a32      	ldr	r2, [pc, #200]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800571a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800571e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005720:	e00f      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	3328      	adds	r3, #40	@ 0x28
 8005728:	2101      	movs	r1, #1
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fd98 	bl	8006260 <RCCEx_PLL3_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005736:	e004      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800573e:	e000      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10b      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800574a:	4b26      	ldr	r3, [pc, #152]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800574c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575a:	4a22      	ldr	r2, [pc, #136]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800575c:	430b      	orrs	r3, r1
 800575e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005760:	e003      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005776:	673b      	str	r3, [r7, #112]	@ 0x70
 8005778:	2300      	movs	r3, #0
 800577a:	677b      	str	r3, [r7, #116]	@ 0x74
 800577c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005780:	460b      	mov	r3, r1
 8005782:	4313      	orrs	r3, r2
 8005784:	d034      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005794:	d007      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005796:	e011      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005798:	4b12      	ldr	r3, [pc, #72]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	4a11      	ldr	r2, [pc, #68]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800579e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057a4:	e00e      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	3308      	adds	r3, #8
 80057ac:	2102      	movs	r1, #2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fca4 	bl	80060fc <RCCEx_PLL2_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057ba:	e003      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10d      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057cc:	4b05      	ldr	r3, [pc, #20]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057da:	4a02      	ldr	r2, [pc, #8]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057dc:	430b      	orrs	r3, r1
 80057de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80057e2:	bf00      	nop
 80057e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80057fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057fe:	2300      	movs	r3, #0
 8005800:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005802:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	d00c      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800580c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005810:	3328      	adds	r3, #40	@ 0x28
 8005812:	2102      	movs	r1, #2
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fd23 	bl	8006260 <RCCEx_PLL3_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005832:	663b      	str	r3, [r7, #96]	@ 0x60
 8005834:	2300      	movs	r3, #0
 8005836:	667b      	str	r3, [r7, #100]	@ 0x64
 8005838:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800583c:	460b      	mov	r3, r1
 800583e:	4313      	orrs	r3, r2
 8005840:	d038      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800584a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584e:	d018      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005854:	d811      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800585a:	d014      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800585c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005860:	d80b      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d011      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800586a:	d106      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586c:	4bc3      	ldr	r3, [pc, #780]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	4ac2      	ldr	r2, [pc, #776]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005878:	e008      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005880:	e004      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005882:	bf00      	nop
 8005884:	e002      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800588a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005894:	4bb9      	ldr	r3, [pc, #740]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005898:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a4:	4ab5      	ldr	r2, [pc, #724]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80058aa:	e003      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80058c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058c2:	2300      	movs	r3, #0
 80058c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80058ca:	460b      	mov	r3, r1
 80058cc:	4313      	orrs	r3, r2
 80058ce:	d009      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058d0:	4baa      	ldr	r3, [pc, #680]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058de:	4aa7      	ldr	r2, [pc, #668]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80058f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f2:	2300      	movs	r3, #0
 80058f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80058f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005900:	4b9e      	ldr	r3, [pc, #632]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005910:	4a9a      	ldr	r2, [pc, #616]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005912:	430b      	orrs	r3, r1
 8005914:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005924:	2300      	movs	r3, #0
 8005926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005928:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800592c:	460b      	mov	r3, r1
 800592e:	4313      	orrs	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005932:	4b92      	ldr	r3, [pc, #584]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005936:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005940:	4a8e      	ldr	r2, [pc, #568]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005942:	430b      	orrs	r3, r1
 8005944:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005952:	643b      	str	r3, [r7, #64]	@ 0x40
 8005954:	2300      	movs	r3, #0
 8005956:	647b      	str	r3, [r7, #68]	@ 0x44
 8005958:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800595c:	460b      	mov	r3, r1
 800595e:	4313      	orrs	r3, r2
 8005960:	d00e      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005962:	4b86      	ldr	r3, [pc, #536]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	4a85      	ldr	r2, [pc, #532]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005968:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800596c:	6113      	str	r3, [r2, #16]
 800596e:	4b83      	ldr	r3, [pc, #524]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005970:	6919      	ldr	r1, [r3, #16]
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005976:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800597a:	4a80      	ldr	r2, [pc, #512]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800597c:	430b      	orrs	r3, r1
 800597e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800598c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800598e:	2300      	movs	r3, #0
 8005990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005992:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005996:	460b      	mov	r3, r1
 8005998:	4313      	orrs	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800599c:	4b77      	ldr	r3, [pc, #476]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800599e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059aa:	4a74      	ldr	r2, [pc, #464]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ac:	430b      	orrs	r3, r1
 80059ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80059be:	2300      	movs	r3, #0
 80059c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059c6:	460b      	mov	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059cc:	4b6b      	ldr	r3, [pc, #428]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059dc:	4a67      	ldr	r2, [pc, #412]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059de:	430b      	orrs	r3, r1
 80059e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	2100      	movs	r1, #0
 80059ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80059f8:	460b      	mov	r3, r1
 80059fa:	4313      	orrs	r3, r2
 80059fc:	d011      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a02:	3308      	adds	r3, #8
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fb78 	bl	80060fc <RCCEx_PLL2_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	6239      	str	r1, [r7, #32]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d011      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a42:	3308      	adds	r3, #8
 8005a44:	2101      	movs	r1, #1
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fb58 	bl	80060fc <RCCEx_PLL2_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	61b9      	str	r1, [r7, #24]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d011      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	3308      	adds	r3, #8
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fb38 	bl	80060fc <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	2100      	movs	r1, #0
 8005aac:	6139      	str	r1, [r7, #16]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4313      	orrs	r3, r2
 8005abc:	d011      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac2:	3328      	adds	r3, #40	@ 0x28
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fbca 	bl	8006260 <RCCEx_PLL3_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	2100      	movs	r1, #0
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	f003 0310 	and.w	r3, r3, #16
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005af8:	460b      	mov	r3, r1
 8005afa:	4313      	orrs	r3, r2
 8005afc:	d011      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	3328      	adds	r3, #40	@ 0x28
 8005b04:	2101      	movs	r1, #1
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fbaa 	bl	8006260 <RCCEx_PLL3_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	6039      	str	r1, [r7, #0]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	607b      	str	r3, [r7, #4]
 8005b34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	d011      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	3328      	adds	r3, #40	@ 0x28
 8005b44:	2102      	movs	r1, #2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fb8a 	bl	8006260 <RCCEx_PLL3_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005b62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e000      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005b76:	46bd      	mov	sp, r7
 8005b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7c:	58024400 	.word	0x58024400

08005b80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b84:	f7fe fd96 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	4904      	ldr	r1, [pc, #16]	@ (8005ba8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b96:	5ccb      	ldrb	r3, [r1, r3]
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	58024400 	.word	0x58024400
 8005ba8:	0800a440 	.word	0x0800a440

08005bac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b089      	sub	sp, #36	@ 0x24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bb4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bbe:	4b9f      	ldr	r3, [pc, #636]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc2:	0b1b      	lsrs	r3, r3, #12
 8005bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bca:	4b9c      	ldr	r3, [pc, #624]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005bd6:	4b99      	ldr	r3, [pc, #612]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bda:	08db      	lsrs	r3, r3, #3
 8005bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8111 	beq.w	8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	f000 8083 	beq.w	8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	f200 80a1 	bhi.w	8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d056      	beq.n	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c16:	e099      	b.n	8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c18:	4b88      	ldr	r3, [pc, #544]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d02d      	beq.n	8005c80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c24:	4b85      	ldr	r3, [pc, #532]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	08db      	lsrs	r3, r3, #3
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	4a84      	ldr	r2, [pc, #528]	@ (8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
 8005c34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c7e:	e087      	b.n	8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c92:	4b6a      	ldr	r3, [pc, #424]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cc2:	e065      	b.n	8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd6:	4b59      	ldr	r3, [pc, #356]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d06:	e043      	b.n	8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1a:	4b48      	ldr	r3, [pc, #288]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d4a:	e021      	b.n	8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5e:	4b37      	ldr	r3, [pc, #220]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d90:	4b2a      	ldr	r3, [pc, #168]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d94:	0a5b      	lsrs	r3, r3, #9
 8005d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005da6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db6:	ee17 2a90 	vmov	r2, s15
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de4:	ee17 2a90 	vmov	r2, s15
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005dec:	4b13      	ldr	r3, [pc, #76]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df0:	0e1b      	lsrs	r3, r3, #24
 8005df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e12:	ee17 2a90 	vmov	r2, s15
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e1a:	e008      	b.n	8005e2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	609a      	str	r2, [r3, #8]
}
 8005e2e:	bf00      	nop
 8005e30:	3724      	adds	r7, #36	@ 0x24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	03d09000 	.word	0x03d09000
 8005e44:	46000000 	.word	0x46000000
 8005e48:	4c742400 	.word	0x4c742400
 8005e4c:	4a742400 	.word	0x4a742400
 8005e50:	4af42400 	.word	0x4af42400

08005e54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b089      	sub	sp, #36	@ 0x24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e5c:	4ba1      	ldr	r3, [pc, #644]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e66:	4b9f      	ldr	r3, [pc, #636]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6a:	0d1b      	lsrs	r3, r3, #20
 8005e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e72:	4b9c      	ldr	r3, [pc, #624]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e7e:	4b99      	ldr	r3, [pc, #612]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	08db      	lsrs	r3, r3, #3
 8005e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8111 	beq.w	80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	f000 8083 	beq.w	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	f200 80a1 	bhi.w	8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d056      	beq.n	8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005ebe:	e099      	b.n	8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec0:	4b88      	ldr	r3, [pc, #544]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0320 	and.w	r3, r3, #32
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d02d      	beq.n	8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ecc:	4b85      	ldr	r3, [pc, #532]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	08db      	lsrs	r3, r3, #3
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	4a84      	ldr	r2, [pc, #528]	@ (80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8005edc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	ee07 3a90 	vmov	s15, r3
 8005ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef6:	4b7b      	ldr	r3, [pc, #492]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f26:	e087      	b.n	8006038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80060ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f6a:	e065      	b.n	8006038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7e:	4b59      	ldr	r3, [pc, #356]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80060ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fae:	e043      	b.n	8006038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc2:	4b48      	ldr	r3, [pc, #288]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80060ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ff2:	e021      	b.n	8006038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006006:	4b37      	ldr	r3, [pc, #220]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006016:	ed97 6a03 	vldr	s12, [r7, #12]
 800601a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80060ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800601e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800602a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006036:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006038:	4b2a      	ldr	r3, [pc, #168]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	0a5b      	lsrs	r3, r3, #9
 800603e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800604e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006052:	edd7 6a07 	vldr	s13, [r7, #28]
 8006056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800605a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605e:	ee17 2a90 	vmov	r2, s15
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006066:	4b1f      	ldr	r3, [pc, #124]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606a:	0c1b      	lsrs	r3, r3, #16
 800606c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006078:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800607c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006080:	edd7 6a07 	vldr	s13, [r7, #28]
 8006084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608c:	ee17 2a90 	vmov	r2, s15
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006094:	4b13      	ldr	r3, [pc, #76]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006098:	0e1b      	lsrs	r3, r3, #24
 800609a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ba:	ee17 2a90 	vmov	r2, s15
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060c2:	e008      	b.n	80060d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	609a      	str	r2, [r3, #8]
}
 80060d6:	bf00      	nop
 80060d8:	3724      	adds	r7, #36	@ 0x24
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	58024400 	.word	0x58024400
 80060e8:	03d09000 	.word	0x03d09000
 80060ec:	46000000 	.word	0x46000000
 80060f0:	4c742400 	.word	0x4c742400
 80060f4:	4a742400 	.word	0x4a742400
 80060f8:	4af42400 	.word	0x4af42400

080060fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800610a:	4b53      	ldr	r3, [pc, #332]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 800610c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	2b03      	cmp	r3, #3
 8006114:	d101      	bne.n	800611a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e099      	b.n	800624e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800611a:	4b4f      	ldr	r3, [pc, #316]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a4e      	ldr	r2, [pc, #312]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 8006120:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006126:	f7fb fb5f 	bl	80017e8 <HAL_GetTick>
 800612a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800612c:	e008      	b.n	8006140 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800612e:	f7fb fb5b 	bl	80017e8 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e086      	b.n	800624e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006140:	4b45      	ldr	r3, [pc, #276]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1f0      	bne.n	800612e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800614c:	4b42      	ldr	r3, [pc, #264]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 800614e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006150:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	031b      	lsls	r3, r3, #12
 800615a:	493f      	ldr	r1, [pc, #252]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 800615c:	4313      	orrs	r3, r2
 800615e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	3b01      	subs	r3, #1
 8006166:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	3b01      	subs	r3, #1
 8006170:	025b      	lsls	r3, r3, #9
 8006172:	b29b      	uxth	r3, r3
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	3b01      	subs	r3, #1
 800617c:	041b      	lsls	r3, r3, #16
 800617e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	3b01      	subs	r3, #1
 800618a:	061b      	lsls	r3, r3, #24
 800618c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006190:	4931      	ldr	r1, [pc, #196]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 8006192:	4313      	orrs	r3, r2
 8006194:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006196:	4b30      	ldr	r3, [pc, #192]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	492d      	ldr	r1, [pc, #180]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ac:	f023 0220 	bic.w	r2, r3, #32
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	4928      	ldr	r1, [pc, #160]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061ba:	4b27      	ldr	r3, [pc, #156]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061be:	4a26      	ldr	r2, [pc, #152]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061c0:	f023 0310 	bic.w	r3, r3, #16
 80061c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061c6:	4b24      	ldr	r3, [pc, #144]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061ca:	4b24      	ldr	r3, [pc, #144]	@ (800625c <RCCEx_PLL2_Config+0x160>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	69d2      	ldr	r2, [r2, #28]
 80061d2:	00d2      	lsls	r2, r2, #3
 80061d4:	4920      	ldr	r1, [pc, #128]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061da:	4b1f      	ldr	r3, [pc, #124]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	4a1e      	ldr	r2, [pc, #120]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061e0:	f043 0310 	orr.w	r3, r3, #16
 80061e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d106      	bne.n	80061fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	4a19      	ldr	r2, [pc, #100]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 80061f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061f8:	e00f      	b.n	800621a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d106      	bne.n	800620e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006200:	4b15      	ldr	r3, [pc, #84]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	4a14      	ldr	r2, [pc, #80]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 8006206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800620a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800620c:	e005      	b.n	800621a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800620e:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 8006210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006212:	4a11      	ldr	r2, [pc, #68]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 8006214:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006218:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800621a:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a0e      	ldr	r2, [pc, #56]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 8006220:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006226:	f7fb fadf 	bl	80017e8 <HAL_GetTick>
 800622a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800622c:	e008      	b.n	8006240 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800622e:	f7fb fadb 	bl	80017e8 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e006      	b.n	800624e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006240:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <RCCEx_PLL2_Config+0x15c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	58024400 	.word	0x58024400
 800625c:	ffff0007 	.word	0xffff0007

08006260 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800626e:	4b53      	ldr	r3, [pc, #332]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b03      	cmp	r3, #3
 8006278:	d101      	bne.n	800627e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e099      	b.n	80063b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800627e:	4b4f      	ldr	r3, [pc, #316]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a4e      	ldr	r2, [pc, #312]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800628a:	f7fb faad 	bl	80017e8 <HAL_GetTick>
 800628e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006290:	e008      	b.n	80062a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006292:	f7fb faa9 	bl	80017e8 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e086      	b.n	80063b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062a4:	4b45      	ldr	r3, [pc, #276]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1f0      	bne.n	8006292 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062b0:	4b42      	ldr	r3, [pc, #264]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 80062b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	051b      	lsls	r3, r3, #20
 80062be:	493f      	ldr	r1, [pc, #252]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	025b      	lsls	r3, r3, #9
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	3b01      	subs	r3, #1
 80062e0:	041b      	lsls	r3, r3, #16
 80062e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	061b      	lsls	r3, r3, #24
 80062f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062f4:	4931      	ldr	r1, [pc, #196]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062fa:	4b30      	ldr	r3, [pc, #192]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	492d      	ldr	r1, [pc, #180]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006308:	4313      	orrs	r3, r2
 800630a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800630c:	4b2b      	ldr	r3, [pc, #172]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	4928      	ldr	r1, [pc, #160]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 800631a:	4313      	orrs	r3, r2
 800631c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800631e:	4b27      	ldr	r3, [pc, #156]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006322:	4a26      	ldr	r2, [pc, #152]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006328:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800632a:	4b24      	ldr	r3, [pc, #144]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 800632c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800632e:	4b24      	ldr	r3, [pc, #144]	@ (80063c0 <RCCEx_PLL3_Config+0x160>)
 8006330:	4013      	ands	r3, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	69d2      	ldr	r2, [r2, #28]
 8006336:	00d2      	lsls	r2, r2, #3
 8006338:	4920      	ldr	r1, [pc, #128]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 800633a:	4313      	orrs	r3, r2
 800633c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800633e:	4b1f      	ldr	r3, [pc, #124]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006342:	4a1e      	ldr	r2, [pc, #120]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006348:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d106      	bne.n	800635e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006350:	4b1a      	ldr	r3, [pc, #104]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	4a19      	ldr	r2, [pc, #100]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006356:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800635a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800635c:	e00f      	b.n	800637e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d106      	bne.n	8006372 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006364:	4b15      	ldr	r3, [pc, #84]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	4a14      	ldr	r2, [pc, #80]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 800636a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800636e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006370:	e005      	b.n	800637e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006372:	4b12      	ldr	r3, [pc, #72]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	4a11      	ldr	r2, [pc, #68]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006378:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800637c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800637e:	4b0f      	ldr	r3, [pc, #60]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a0e      	ldr	r2, [pc, #56]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 8006384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800638a:	f7fb fa2d 	bl	80017e8 <HAL_GetTick>
 800638e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006390:	e008      	b.n	80063a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006392:	f7fb fa29 	bl	80017e8 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e006      	b.n	80063b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063a4:	4b05      	ldr	r3, [pc, #20]	@ (80063bc <RCCEx_PLL3_Config+0x15c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f0      	beq.n	8006392 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	58024400 	.word	0x58024400
 80063c0:	ffff0007 	.word	0xffff0007

080063c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e10f      	b.n	80065f6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a87      	ldr	r2, [pc, #540]	@ (8006600 <HAL_SPI_Init+0x23c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00f      	beq.n	8006406 <HAL_SPI_Init+0x42>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a86      	ldr	r2, [pc, #536]	@ (8006604 <HAL_SPI_Init+0x240>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00a      	beq.n	8006406 <HAL_SPI_Init+0x42>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a84      	ldr	r2, [pc, #528]	@ (8006608 <HAL_SPI_Init+0x244>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d005      	beq.n	8006406 <HAL_SPI_Init+0x42>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	2b0f      	cmp	r3, #15
 8006400:	d901      	bls.n	8006406 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e0f7      	b.n	80065f6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fbbc 	bl	8006b84 <SPI_GetPacketSize>
 800640c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a7b      	ldr	r2, [pc, #492]	@ (8006600 <HAL_SPI_Init+0x23c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00c      	beq.n	8006432 <HAL_SPI_Init+0x6e>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a79      	ldr	r2, [pc, #484]	@ (8006604 <HAL_SPI_Init+0x240>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d007      	beq.n	8006432 <HAL_SPI_Init+0x6e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a78      	ldr	r2, [pc, #480]	@ (8006608 <HAL_SPI_Init+0x244>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d002      	beq.n	8006432 <HAL_SPI_Init+0x6e>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b08      	cmp	r3, #8
 8006430:	d811      	bhi.n	8006456 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006436:	4a72      	ldr	r2, [pc, #456]	@ (8006600 <HAL_SPI_Init+0x23c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d009      	beq.n	8006450 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a70      	ldr	r2, [pc, #448]	@ (8006604 <HAL_SPI_Init+0x240>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d004      	beq.n	8006450 <HAL_SPI_Init+0x8c>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a6f      	ldr	r2, [pc, #444]	@ (8006608 <HAL_SPI_Init+0x244>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d104      	bne.n	800645a <HAL_SPI_Init+0x96>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b10      	cmp	r3, #16
 8006454:	d901      	bls.n	800645a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e0cd      	b.n	80065f6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fa fe86 	bl	8001180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0201 	bic.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006496:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064a0:	d119      	bne.n	80064d6 <HAL_SPI_Init+0x112>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064aa:	d103      	bne.n	80064b4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10c      	bne.n	80064d6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80064c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064c4:	d107      	bne.n	80064d6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00f      	beq.n	8006502 <HAL_SPI_Init+0x13e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b06      	cmp	r3, #6
 80064e8:	d90b      	bls.n	8006502 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	e007      	b.n	8006512 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69da      	ldr	r2, [r3, #28]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651a:	431a      	orrs	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006524:	ea42 0103 	orr.w	r1, r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006572:	ea42 0103 	orr.w	r1, r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d113      	bne.n	80065b2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800659c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0201 	bic.w	r2, r2, #1
 80065c0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40013000 	.word	0x40013000
 8006604:	40003800 	.word	0x40003800
 8006608:	40003c00 	.word	0x40003c00

0800660c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af02      	add	r7, sp, #8
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3320      	adds	r3, #32
 8006622:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006624:	f7fb f8e0 	bl	80017e8 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b01      	cmp	r3, #1
 8006634:	d001      	beq.n	800663a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006636:	2302      	movs	r3, #2
 8006638:	e1d1      	b.n	80069de <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_SPI_Transmit+0x3a>
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e1c9      	b.n	80069de <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_SPI_Transmit+0x4c>
 8006654:	2302      	movs	r3, #2
 8006656:	e1c2      	b.n	80069de <HAL_SPI_Transmit+0x3d2>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2203      	movs	r2, #3
 8006664:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	88fa      	ldrh	r2, [r7, #6]
 8006682:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80066b0:	d108      	bne.n	80066c4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e009      	b.n	80066d8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80066d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	4b96      	ldr	r3, [pc, #600]	@ (8006938 <HAL_SPI_Transmit+0x32c>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	88f9      	ldrh	r1, [r7, #6]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	6812      	ldr	r2, [r2, #0]
 80066e8:	430b      	orrs	r3, r1
 80066ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006704:	d107      	bne.n	8006716 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006714:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2b0f      	cmp	r3, #15
 800671c:	d947      	bls.n	80067ae <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800671e:	e03f      	b.n	80067a0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b02      	cmp	r3, #2
 800672c:	d114      	bne.n	8006758 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6812      	ldr	r2, [r2, #0]
 8006738:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800673e:	1d1a      	adds	r2, r3, #4
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006756:	e023      	b.n	80067a0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006758:	f7fb f846 	bl	80017e8 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d803      	bhi.n	8006770 <HAL_SPI_Transmit+0x164>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676e:	d102      	bne.n	8006776 <HAL_SPI_Transmit+0x16a>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d114      	bne.n	80067a0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f936 	bl	80069e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006782:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e11e      	b.n	80069de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1b9      	bne.n	8006720 <HAL_SPI_Transmit+0x114>
 80067ac:	e0f1      	b.n	8006992 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	2b07      	cmp	r3, #7
 80067b4:	f240 80e6 	bls.w	8006984 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80067b8:	e05d      	b.n	8006876 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d132      	bne.n	800682e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d918      	bls.n	8006806 <HAL_SPI_Transmit+0x1fa>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d014      	beq.n	8006806 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ec:	1d1a      	adds	r2, r3, #4
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b02      	subs	r3, #2
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006804:	e037      	b.n	8006876 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800680a:	881a      	ldrh	r2, [r3, #0]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006814:	1c9a      	adds	r2, r3, #2
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800682c:	e023      	b.n	8006876 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800682e:	f7fa ffdb 	bl	80017e8 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d803      	bhi.n	8006846 <HAL_SPI_Transmit+0x23a>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d102      	bne.n	800684c <HAL_SPI_Transmit+0x240>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d114      	bne.n	8006876 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f8cb 	bl	80069e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006858:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e0b3      	b.n	80069de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d19b      	bne.n	80067ba <HAL_SPI_Transmit+0x1ae>
 8006882:	e086      	b.n	8006992 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b02      	cmp	r3, #2
 8006890:	d154      	bne.n	800693c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b03      	cmp	r3, #3
 800689c:	d918      	bls.n	80068d0 <HAL_SPI_Transmit+0x2c4>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a2:	2b40      	cmp	r3, #64	@ 0x40
 80068a4:	d914      	bls.n	80068d0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b6:	1d1a      	adds	r2, r3, #4
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b04      	subs	r3, #4
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80068ce:	e059      	b.n	8006984 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d917      	bls.n	800690c <HAL_SPI_Transmit+0x300>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d013      	beq.n	800690c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e8:	881a      	ldrh	r2, [r3, #0]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f2:	1c9a      	adds	r2, r3, #2
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068fe:	b29b      	uxth	r3, r3
 8006900:	3b02      	subs	r3, #2
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800690a:	e03b      	b.n	8006984 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3320      	adds	r3, #32
 8006916:	7812      	ldrb	r2, [r2, #0]
 8006918:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006936:	e025      	b.n	8006984 <HAL_SPI_Transmit+0x378>
 8006938:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800693c:	f7fa ff54 	bl	80017e8 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d803      	bhi.n	8006954 <HAL_SPI_Transmit+0x348>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	d102      	bne.n	800695a <HAL_SPI_Transmit+0x34e>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d114      	bne.n	8006984 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 f844 	bl	80069e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006966:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e02c      	b.n	80069de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	f47f af79 	bne.w	8006884 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2200      	movs	r2, #0
 800699a:	2108      	movs	r1, #8
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f8c3 	bl	8006b28 <SPI_WaitOnFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ae:	f043 0220 	orr.w	r2, r3, #32
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f815 	bl	80069e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80069dc:	2300      	movs	r3, #0
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop

080069e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0208 	orr.w	r2, r2, #8
 8006a06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699a      	ldr	r2, [r3, #24]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0210 	orr.w	r2, r2, #16
 8006a16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0201 	bic.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6919      	ldr	r1, [r3, #16]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b3c      	ldr	r3, [pc, #240]	@ (8006b24 <SPI_CloseTransfer+0x13c>)
 8006a34:	400b      	ands	r3, r1
 8006a36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006a46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d014      	beq.n	8006a7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00f      	beq.n	8006a7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699a      	ldr	r2, [r3, #24]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0220 	orr.w	r2, r2, #32
 8006a7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d014      	beq.n	8006ab4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00f      	beq.n	8006ab4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a9a:	f043 0204 	orr.w	r2, r3, #4
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ab2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00f      	beq.n	8006ade <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ac4:	f043 0201 	orr.w	r2, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699a      	ldr	r2, [r3, #24]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006adc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00f      	beq.n	8006b08 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aee:	f043 0208 	orr.w	r2, r3, #8
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	fffffc90 	.word	0xfffffc90

08006b28 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	4613      	mov	r3, r2
 8006b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b38:	e010      	b.n	8006b5c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b3a:	f7fa fe55 	bl	80017e8 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d803      	bhi.n	8006b52 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b50:	d102      	bne.n	8006b58 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e00f      	b.n	8006b7c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695a      	ldr	r2, [r3, #20]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	4013      	ands	r3, r2
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	bf0c      	ite	eq
 8006b6c:	2301      	moveq	r3, #1
 8006b6e:	2300      	movne	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	461a      	mov	r2, r3
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d0df      	beq.n	8006b3a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	3307      	adds	r3, #7
 8006ba2:	08db      	lsrs	r3, r3, #3
 8006ba4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e042      	b.n	8006c52 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d106      	bne.n	8006be4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fa fb6c 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2224      	movs	r2, #36	@ 0x24
 8006be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0201 	bic.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 fa45 	bl	8008094 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fcda 	bl	80075c4 <UART_SetConfig>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e01b      	b.n	8006c52 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f042 0201 	orr.w	r2, r2, #1
 8006c48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 fac4 	bl	80081d8 <UART_CheckIdleState>
 8006c50:	4603      	mov	r3, r0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b08a      	sub	sp, #40	@ 0x28
 8006c5e:	af02      	add	r7, sp, #8
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	603b      	str	r3, [r7, #0]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d17b      	bne.n	8006d6c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_UART_Transmit+0x26>
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e074      	b.n	8006d6e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2221      	movs	r2, #33	@ 0x21
 8006c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c94:	f7fa fda8 	bl	80017e8 <HAL_GetTick>
 8006c98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	88fa      	ldrh	r2, [r7, #6]
 8006c9e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	88fa      	ldrh	r2, [r7, #6]
 8006ca6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cb2:	d108      	bne.n	8006cc6 <HAL_UART_Transmit+0x6c>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	e003      	b.n	8006cce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cce:	e030      	b.n	8006d32 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2180      	movs	r1, #128	@ 0x80
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f001 fb26 	bl	800832c <UART_WaitOnFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e03d      	b.n	8006d6e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10b      	bne.n	8006d10 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	3302      	adds	r3, #2
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	e007      	b.n	8006d20 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1c8      	bne.n	8006cd0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2200      	movs	r2, #0
 8006d46:	2140      	movs	r1, #64	@ 0x40
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f001 faef 	bl	800832c <UART_WaitOnFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e006      	b.n	8006d6e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e000      	b.n	8006d6e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d6c:	2302      	movs	r3, #2
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08a      	sub	sp, #40	@ 0x28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d137      	bne.n	8006e00 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_UART_Receive_IT+0x24>
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e030      	b.n	8006e02 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a18      	ldr	r2, [pc, #96]	@ (8006e0c <HAL_UART_Receive_IT+0x94>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d01f      	beq.n	8006df0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d018      	beq.n	8006df0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	613b      	str	r3, [r7, #16]
   return(result);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	623b      	str	r3, [r7, #32]
 8006dde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	69f9      	ldr	r1, [r7, #28]
 8006de2:	6a3a      	ldr	r2, [r7, #32]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e6      	bne.n	8006dbe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	461a      	mov	r2, r3
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f001 fb06 	bl	8008408 <UART_Start_Receive_IT>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	e000      	b.n	8006e02 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e00:	2302      	movs	r3, #2
  }
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3728      	adds	r7, #40	@ 0x28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	58000c00 	.word	0x58000c00

08006e10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b0ba      	sub	sp, #232	@ 0xe8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e3e:	4013      	ands	r3, r2
 8006e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d11b      	bne.n	8006e84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d015      	beq.n	8006e84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d105      	bne.n	8006e70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d009      	beq.n	8006e84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 8377 	beq.w	8007568 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	4798      	blx	r3
      }
      return;
 8006e82:	e371      	b.n	8007568 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8123 	beq.w	80070d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e92:	4b8d      	ldr	r3, [pc, #564]	@ (80070c8 <HAL_UART_IRQHandler+0x2b8>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80070cc <HAL_UART_IRQHandler+0x2bc>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8116 	beq.w	80070d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d011      	beq.n	8006ed8 <HAL_UART_IRQHandler+0xc8>
 8006eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ece:	f043 0201 	orr.w	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d011      	beq.n	8006f08 <HAL_UART_IRQHandler+0xf8>
 8006ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006efe:	f043 0204 	orr.w	r2, r3, #4
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d011      	beq.n	8006f38 <HAL_UART_IRQHandler+0x128>
 8006f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2204      	movs	r2, #4
 8006f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f2e:	f043 0202 	orr.w	r2, r3, #2
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d017      	beq.n	8006f74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f54:	4b5c      	ldr	r3, [pc, #368]	@ (80070c8 <HAL_UART_IRQHandler+0x2b8>)
 8006f56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2208      	movs	r2, #8
 8006f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f6a:	f043 0208 	orr.w	r2, r3, #8
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d012      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x196>
 8006f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00c      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f9c:	f043 0220 	orr.w	r2, r3, #32
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 82dd 	beq.w	800756c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d013      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d105      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffa:	2b40      	cmp	r3, #64	@ 0x40
 8006ffc:	d005      	beq.n	800700a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007002:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007006:	2b00      	cmp	r3, #0
 8007008:	d054      	beq.n	80070b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fb1e 	bl	800864c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800701a:	2b40      	cmp	r3, #64	@ 0x40
 800701c:	d146      	bne.n	80070ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800703c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800704a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800704e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007056:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1d9      	bne.n	800701e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007070:	2b00      	cmp	r3, #0
 8007072:	d017      	beq.n	80070a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800707a:	4a15      	ldr	r2, [pc, #84]	@ (80070d0 <HAL_UART_IRQHandler+0x2c0>)
 800707c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007084:	4618      	mov	r0, r3
 8007086:	f7fb f819 	bl	80020bc <HAL_DMA_Abort_IT>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d019      	beq.n	80070c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800709e:	4610      	mov	r0, r2
 80070a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a2:	e00f      	b.n	80070c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fa77 	bl	8007598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070aa:	e00b      	b.n	80070c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fa73 	bl	8007598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b2:	e007      	b.n	80070c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fa6f 	bl	8007598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80070c2:	e253      	b.n	800756c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c4:	bf00      	nop
    return;
 80070c6:	e251      	b.n	800756c <HAL_UART_IRQHandler+0x75c>
 80070c8:	10000001 	.word	0x10000001
 80070cc:	04000120 	.word	0x04000120
 80070d0:	08008719 	.word	0x08008719

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070d8:	2b01      	cmp	r3, #1
 80070da:	f040 81e7 	bne.w	80074ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 81e0 	beq.w	80074ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 81d9 	beq.w	80074ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2210      	movs	r2, #16
 8007100:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800710c:	2b40      	cmp	r3, #64	@ 0x40
 800710e:	f040 8151 	bne.w	80073b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a96      	ldr	r2, [pc, #600]	@ (8007374 <HAL_UART_IRQHandler+0x564>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d068      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a93      	ldr	r2, [pc, #588]	@ (8007378 <HAL_UART_IRQHandler+0x568>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d061      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a91      	ldr	r2, [pc, #580]	@ (800737c <HAL_UART_IRQHandler+0x56c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d05a      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a8e      	ldr	r2, [pc, #568]	@ (8007380 <HAL_UART_IRQHandler+0x570>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d053      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a8c      	ldr	r2, [pc, #560]	@ (8007384 <HAL_UART_IRQHandler+0x574>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d04c      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a89      	ldr	r2, [pc, #548]	@ (8007388 <HAL_UART_IRQHandler+0x578>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d045      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a87      	ldr	r2, [pc, #540]	@ (800738c <HAL_UART_IRQHandler+0x57c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d03e      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a84      	ldr	r2, [pc, #528]	@ (8007390 <HAL_UART_IRQHandler+0x580>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d037      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a82      	ldr	r2, [pc, #520]	@ (8007394 <HAL_UART_IRQHandler+0x584>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d030      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a7f      	ldr	r2, [pc, #508]	@ (8007398 <HAL_UART_IRQHandler+0x588>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d029      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a7d      	ldr	r2, [pc, #500]	@ (800739c <HAL_UART_IRQHandler+0x58c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d022      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a7a      	ldr	r2, [pc, #488]	@ (80073a0 <HAL_UART_IRQHandler+0x590>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d01b      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a78      	ldr	r2, [pc, #480]	@ (80073a4 <HAL_UART_IRQHandler+0x594>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d014      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a75      	ldr	r2, [pc, #468]	@ (80073a8 <HAL_UART_IRQHandler+0x598>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00d      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a73      	ldr	r2, [pc, #460]	@ (80073ac <HAL_UART_IRQHandler+0x59c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d006      	beq.n	80071f2 <HAL_UART_IRQHandler+0x3e2>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a70      	ldr	r2, [pc, #448]	@ (80073b0 <HAL_UART_IRQHandler+0x5a0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d106      	bne.n	8007200 <HAL_UART_IRQHandler+0x3f0>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	e005      	b.n	800720c <HAL_UART_IRQHandler+0x3fc>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	b29b      	uxth	r3, r3
 800720c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007210:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 81ab 	beq.w	8007570 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007220:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007224:	429a      	cmp	r2, r3
 8007226:	f080 81a3 	bcs.w	8007570 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007230:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007240:	f000 8087 	beq.w	8007352 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007258:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800725c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007260:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800726e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007272:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800727a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007286:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1da      	bne.n	8007244 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800729e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3308      	adds	r3, #8
 80072ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80072b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80072ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e1      	bne.n	800728e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3308      	adds	r3, #8
 80072d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3308      	adds	r3, #8
 80072ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e3      	bne.n	80072ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2220      	movs	r2, #32
 8007306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800731e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007320:	f023 0310 	bic.w	r3, r3, #16
 8007324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007332:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007334:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007338:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e4      	bne.n	8007310 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800734c:	4618      	mov	r0, r3
 800734e:	f7fa fb97 	bl	8001a80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007364:	b29b      	uxth	r3, r3
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	b29b      	uxth	r3, r3
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f91d 	bl	80075ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007372:	e0fd      	b.n	8007570 <HAL_UART_IRQHandler+0x760>
 8007374:	40020010 	.word	0x40020010
 8007378:	40020028 	.word	0x40020028
 800737c:	40020040 	.word	0x40020040
 8007380:	40020058 	.word	0x40020058
 8007384:	40020070 	.word	0x40020070
 8007388:	40020088 	.word	0x40020088
 800738c:	400200a0 	.word	0x400200a0
 8007390:	400200b8 	.word	0x400200b8
 8007394:	40020410 	.word	0x40020410
 8007398:	40020428 	.word	0x40020428
 800739c:	40020440 	.word	0x40020440
 80073a0:	40020458 	.word	0x40020458
 80073a4:	40020470 	.word	0x40020470
 80073a8:	40020488 	.word	0x40020488
 80073ac:	400204a0 	.word	0x400204a0
 80073b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80cf 	beq.w	8007574 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80073d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 80ca 	beq.w	8007574 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007402:	647b      	str	r3, [r7, #68]	@ 0x44
 8007404:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007408:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e4      	bne.n	80073e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3308      	adds	r3, #8
 800741c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	623b      	str	r3, [r7, #32]
   return(result);
 8007426:	6a3a      	ldr	r2, [r7, #32]
 8007428:	4b55      	ldr	r3, [pc, #340]	@ (8007580 <HAL_UART_IRQHandler+0x770>)
 800742a:	4013      	ands	r3, r2
 800742c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3308      	adds	r3, #8
 8007436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800743a:	633a      	str	r2, [r7, #48]	@ 0x30
 800743c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e3      	bne.n	8007416 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0310 	bic.w	r3, r3, #16
 8007476:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	69b9      	ldr	r1, [r7, #24]
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	617b      	str	r3, [r7, #20]
   return(result);
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e4      	bne.n	8007462 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800749e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f881 	bl	80075ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074aa:	e063      	b.n	8007574 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00e      	beq.n	80074d6 <HAL_UART_IRQHandler+0x6c6>
 80074b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d008      	beq.n	80074d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80074cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fe80 	bl	80091d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074d4:	e051      	b.n	800757a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80074d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d014      	beq.n	800750c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d105      	bne.n	80074fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80074ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d008      	beq.n	800750c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d03a      	beq.n	8007578 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
    }
    return;
 800750a:	e035      	b.n	8007578 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800750c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d009      	beq.n	800752c <HAL_UART_IRQHandler+0x71c>
 8007518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800751c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f90d 	bl	8008744 <UART_EndTransmit_IT>
    return;
 800752a:	e026      	b.n	800757a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800752c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d009      	beq.n	800754c <HAL_UART_IRQHandler+0x73c>
 8007538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800753c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 fe59 	bl	80091fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800754a:	e016      	b.n	800757a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800754c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007550:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d010      	beq.n	800757a <HAL_UART_IRQHandler+0x76a>
 8007558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800755c:	2b00      	cmp	r3, #0
 800755e:	da0c      	bge.n	800757a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 fe41 	bl	80091e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007566:	e008      	b.n	800757a <HAL_UART_IRQHandler+0x76a>
      return;
 8007568:	bf00      	nop
 800756a:	e006      	b.n	800757a <HAL_UART_IRQHandler+0x76a>
    return;
 800756c:	bf00      	nop
 800756e:	e004      	b.n	800757a <HAL_UART_IRQHandler+0x76a>
      return;
 8007570:	bf00      	nop
 8007572:	e002      	b.n	800757a <HAL_UART_IRQHandler+0x76a>
      return;
 8007574:	bf00      	nop
 8007576:	e000      	b.n	800757a <HAL_UART_IRQHandler+0x76a>
    return;
 8007578:	bf00      	nop
  }
}
 800757a:	37e8      	adds	r7, #232	@ 0xe8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	effffffe 	.word	0xeffffffe

08007584 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c8:	b092      	sub	sp, #72	@ 0x48
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	431a      	orrs	r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	431a      	orrs	r2, r3
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4bbe      	ldr	r3, [pc, #760]	@ (80078ec <UART_SetConfig+0x328>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4ab3      	ldr	r2, [pc, #716]	@ (80078f0 <UART_SetConfig+0x32c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800762c:	4313      	orrs	r3, r2
 800762e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	4baf      	ldr	r3, [pc, #700]	@ (80078f4 <UART_SetConfig+0x330>)
 8007638:	4013      	ands	r3, r2
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007640:	430b      	orrs	r3, r1
 8007642:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764a:	f023 010f 	bic.w	r1, r3, #15
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4aa6      	ldr	r2, [pc, #664]	@ (80078f8 <UART_SetConfig+0x334>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d177      	bne.n	8007754 <UART_SetConfig+0x190>
 8007664:	4ba5      	ldr	r3, [pc, #660]	@ (80078fc <UART_SetConfig+0x338>)
 8007666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007668:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800766c:	2b28      	cmp	r3, #40	@ 0x28
 800766e:	d86d      	bhi.n	800774c <UART_SetConfig+0x188>
 8007670:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <UART_SetConfig+0xb4>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	0800771d 	.word	0x0800771d
 800767c:	0800774d 	.word	0x0800774d
 8007680:	0800774d 	.word	0x0800774d
 8007684:	0800774d 	.word	0x0800774d
 8007688:	0800774d 	.word	0x0800774d
 800768c:	0800774d 	.word	0x0800774d
 8007690:	0800774d 	.word	0x0800774d
 8007694:	0800774d 	.word	0x0800774d
 8007698:	08007725 	.word	0x08007725
 800769c:	0800774d 	.word	0x0800774d
 80076a0:	0800774d 	.word	0x0800774d
 80076a4:	0800774d 	.word	0x0800774d
 80076a8:	0800774d 	.word	0x0800774d
 80076ac:	0800774d 	.word	0x0800774d
 80076b0:	0800774d 	.word	0x0800774d
 80076b4:	0800774d 	.word	0x0800774d
 80076b8:	0800772d 	.word	0x0800772d
 80076bc:	0800774d 	.word	0x0800774d
 80076c0:	0800774d 	.word	0x0800774d
 80076c4:	0800774d 	.word	0x0800774d
 80076c8:	0800774d 	.word	0x0800774d
 80076cc:	0800774d 	.word	0x0800774d
 80076d0:	0800774d 	.word	0x0800774d
 80076d4:	0800774d 	.word	0x0800774d
 80076d8:	08007735 	.word	0x08007735
 80076dc:	0800774d 	.word	0x0800774d
 80076e0:	0800774d 	.word	0x0800774d
 80076e4:	0800774d 	.word	0x0800774d
 80076e8:	0800774d 	.word	0x0800774d
 80076ec:	0800774d 	.word	0x0800774d
 80076f0:	0800774d 	.word	0x0800774d
 80076f4:	0800774d 	.word	0x0800774d
 80076f8:	0800773d 	.word	0x0800773d
 80076fc:	0800774d 	.word	0x0800774d
 8007700:	0800774d 	.word	0x0800774d
 8007704:	0800774d 	.word	0x0800774d
 8007708:	0800774d 	.word	0x0800774d
 800770c:	0800774d 	.word	0x0800774d
 8007710:	0800774d 	.word	0x0800774d
 8007714:	0800774d 	.word	0x0800774d
 8007718:	08007745 	.word	0x08007745
 800771c:	2301      	movs	r3, #1
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007722:	e222      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007724:	2304      	movs	r3, #4
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772a:	e21e      	b.n	8007b6a <UART_SetConfig+0x5a6>
 800772c:	2308      	movs	r3, #8
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007732:	e21a      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007734:	2310      	movs	r3, #16
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773a:	e216      	b.n	8007b6a <UART_SetConfig+0x5a6>
 800773c:	2320      	movs	r3, #32
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007742:	e212      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007744:	2340      	movs	r3, #64	@ 0x40
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774a:	e20e      	b.n	8007b6a <UART_SetConfig+0x5a6>
 800774c:	2380      	movs	r3, #128	@ 0x80
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007752:	e20a      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a69      	ldr	r2, [pc, #420]	@ (8007900 <UART_SetConfig+0x33c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d130      	bne.n	80077c0 <UART_SetConfig+0x1fc>
 800775e:	4b67      	ldr	r3, [pc, #412]	@ (80078fc <UART_SetConfig+0x338>)
 8007760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	2b05      	cmp	r3, #5
 8007768:	d826      	bhi.n	80077b8 <UART_SetConfig+0x1f4>
 800776a:	a201      	add	r2, pc, #4	@ (adr r2, 8007770 <UART_SetConfig+0x1ac>)
 800776c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007770:	08007789 	.word	0x08007789
 8007774:	08007791 	.word	0x08007791
 8007778:	08007799 	.word	0x08007799
 800777c:	080077a1 	.word	0x080077a1
 8007780:	080077a9 	.word	0x080077a9
 8007784:	080077b1 	.word	0x080077b1
 8007788:	2300      	movs	r3, #0
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778e:	e1ec      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007790:	2304      	movs	r3, #4
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007796:	e1e8      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007798:	2308      	movs	r3, #8
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779e:	e1e4      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80077a0:	2310      	movs	r3, #16
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a6:	e1e0      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80077a8:	2320      	movs	r3, #32
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ae:	e1dc      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80077b0:	2340      	movs	r3, #64	@ 0x40
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b6:	e1d8      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80077b8:	2380      	movs	r3, #128	@ 0x80
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077be:	e1d4      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a4f      	ldr	r2, [pc, #316]	@ (8007904 <UART_SetConfig+0x340>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d130      	bne.n	800782c <UART_SetConfig+0x268>
 80077ca:	4b4c      	ldr	r3, [pc, #304]	@ (80078fc <UART_SetConfig+0x338>)
 80077cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	2b05      	cmp	r3, #5
 80077d4:	d826      	bhi.n	8007824 <UART_SetConfig+0x260>
 80077d6:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <UART_SetConfig+0x218>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	080077f5 	.word	0x080077f5
 80077e0:	080077fd 	.word	0x080077fd
 80077e4:	08007805 	.word	0x08007805
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	08007815 	.word	0x08007815
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	2300      	movs	r3, #0
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fa:	e1b6      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80077fc:	2304      	movs	r3, #4
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007802:	e1b2      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007804:	2308      	movs	r3, #8
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780a:	e1ae      	b.n	8007b6a <UART_SetConfig+0x5a6>
 800780c:	2310      	movs	r3, #16
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007812:	e1aa      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007814:	2320      	movs	r3, #32
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781a:	e1a6      	b.n	8007b6a <UART_SetConfig+0x5a6>
 800781c:	2340      	movs	r3, #64	@ 0x40
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007822:	e1a2      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007824:	2380      	movs	r3, #128	@ 0x80
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782a:	e19e      	b.n	8007b6a <UART_SetConfig+0x5a6>
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a35      	ldr	r2, [pc, #212]	@ (8007908 <UART_SetConfig+0x344>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d130      	bne.n	8007898 <UART_SetConfig+0x2d4>
 8007836:	4b31      	ldr	r3, [pc, #196]	@ (80078fc <UART_SetConfig+0x338>)
 8007838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	2b05      	cmp	r3, #5
 8007840:	d826      	bhi.n	8007890 <UART_SetConfig+0x2cc>
 8007842:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <UART_SetConfig+0x284>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	08007861 	.word	0x08007861
 800784c:	08007869 	.word	0x08007869
 8007850:	08007871 	.word	0x08007871
 8007854:	08007879 	.word	0x08007879
 8007858:	08007881 	.word	0x08007881
 800785c:	08007889 	.word	0x08007889
 8007860:	2300      	movs	r3, #0
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e180      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007868:	2304      	movs	r3, #4
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786e:	e17c      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007870:	2308      	movs	r3, #8
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007876:	e178      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007878:	2310      	movs	r3, #16
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787e:	e174      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007880:	2320      	movs	r3, #32
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007886:	e170      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007888:	2340      	movs	r3, #64	@ 0x40
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788e:	e16c      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007890:	2380      	movs	r3, #128	@ 0x80
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007896:	e168      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a1b      	ldr	r2, [pc, #108]	@ (800790c <UART_SetConfig+0x348>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d142      	bne.n	8007928 <UART_SetConfig+0x364>
 80078a2:	4b16      	ldr	r3, [pc, #88]	@ (80078fc <UART_SetConfig+0x338>)
 80078a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	d838      	bhi.n	8007920 <UART_SetConfig+0x35c>
 80078ae:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <UART_SetConfig+0x2f0>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	080078cd 	.word	0x080078cd
 80078b8:	080078d5 	.word	0x080078d5
 80078bc:	080078dd 	.word	0x080078dd
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	08007911 	.word	0x08007911
 80078c8:	08007919 	.word	0x08007919
 80078cc:	2300      	movs	r3, #0
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e14a      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80078d4:	2304      	movs	r3, #4
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e146      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80078dc:	2308      	movs	r3, #8
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e2:	e142      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80078e4:	2310      	movs	r3, #16
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ea:	e13e      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80078ec:	cfff69f3 	.word	0xcfff69f3
 80078f0:	58000c00 	.word	0x58000c00
 80078f4:	11fff4ff 	.word	0x11fff4ff
 80078f8:	40011000 	.word	0x40011000
 80078fc:	58024400 	.word	0x58024400
 8007900:	40004400 	.word	0x40004400
 8007904:	40004800 	.word	0x40004800
 8007908:	40004c00 	.word	0x40004c00
 800790c:	40005000 	.word	0x40005000
 8007910:	2320      	movs	r3, #32
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e128      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007918:	2340      	movs	r3, #64	@ 0x40
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e124      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007920:	2380      	movs	r3, #128	@ 0x80
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e120      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4acb      	ldr	r2, [pc, #812]	@ (8007c5c <UART_SetConfig+0x698>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d176      	bne.n	8007a20 <UART_SetConfig+0x45c>
 8007932:	4bcb      	ldr	r3, [pc, #812]	@ (8007c60 <UART_SetConfig+0x69c>)
 8007934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007936:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800793a:	2b28      	cmp	r3, #40	@ 0x28
 800793c:	d86c      	bhi.n	8007a18 <UART_SetConfig+0x454>
 800793e:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <UART_SetConfig+0x380>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	080079e9 	.word	0x080079e9
 8007948:	08007a19 	.word	0x08007a19
 800794c:	08007a19 	.word	0x08007a19
 8007950:	08007a19 	.word	0x08007a19
 8007954:	08007a19 	.word	0x08007a19
 8007958:	08007a19 	.word	0x08007a19
 800795c:	08007a19 	.word	0x08007a19
 8007960:	08007a19 	.word	0x08007a19
 8007964:	080079f1 	.word	0x080079f1
 8007968:	08007a19 	.word	0x08007a19
 800796c:	08007a19 	.word	0x08007a19
 8007970:	08007a19 	.word	0x08007a19
 8007974:	08007a19 	.word	0x08007a19
 8007978:	08007a19 	.word	0x08007a19
 800797c:	08007a19 	.word	0x08007a19
 8007980:	08007a19 	.word	0x08007a19
 8007984:	080079f9 	.word	0x080079f9
 8007988:	08007a19 	.word	0x08007a19
 800798c:	08007a19 	.word	0x08007a19
 8007990:	08007a19 	.word	0x08007a19
 8007994:	08007a19 	.word	0x08007a19
 8007998:	08007a19 	.word	0x08007a19
 800799c:	08007a19 	.word	0x08007a19
 80079a0:	08007a19 	.word	0x08007a19
 80079a4:	08007a01 	.word	0x08007a01
 80079a8:	08007a19 	.word	0x08007a19
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007a19 	.word	0x08007a19
 80079b4:	08007a19 	.word	0x08007a19
 80079b8:	08007a19 	.word	0x08007a19
 80079bc:	08007a19 	.word	0x08007a19
 80079c0:	08007a19 	.word	0x08007a19
 80079c4:	08007a09 	.word	0x08007a09
 80079c8:	08007a19 	.word	0x08007a19
 80079cc:	08007a19 	.word	0x08007a19
 80079d0:	08007a19 	.word	0x08007a19
 80079d4:	08007a19 	.word	0x08007a19
 80079d8:	08007a19 	.word	0x08007a19
 80079dc:	08007a19 	.word	0x08007a19
 80079e0:	08007a19 	.word	0x08007a19
 80079e4:	08007a11 	.word	0x08007a11
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e0bc      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80079f0:	2304      	movs	r3, #4
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e0b8      	b.n	8007b6a <UART_SetConfig+0x5a6>
 80079f8:	2308      	movs	r3, #8
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e0b4      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a00:	2310      	movs	r3, #16
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e0b0      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a08:	2320      	movs	r3, #32
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e0ac      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a10:	2340      	movs	r3, #64	@ 0x40
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a16:	e0a8      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a18:	2380      	movs	r3, #128	@ 0x80
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1e:	e0a4      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a8f      	ldr	r2, [pc, #572]	@ (8007c64 <UART_SetConfig+0x6a0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d130      	bne.n	8007a8c <UART_SetConfig+0x4c8>
 8007a2a:	4b8d      	ldr	r3, [pc, #564]	@ (8007c60 <UART_SetConfig+0x69c>)
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a2e:	f003 0307 	and.w	r3, r3, #7
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	d826      	bhi.n	8007a84 <UART_SetConfig+0x4c0>
 8007a36:	a201      	add	r2, pc, #4	@ (adr r2, 8007a3c <UART_SetConfig+0x478>)
 8007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3c:	08007a55 	.word	0x08007a55
 8007a40:	08007a5d 	.word	0x08007a5d
 8007a44:	08007a65 	.word	0x08007a65
 8007a48:	08007a6d 	.word	0x08007a6d
 8007a4c:	08007a75 	.word	0x08007a75
 8007a50:	08007a7d 	.word	0x08007a7d
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5a:	e086      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a62:	e082      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a64:	2308      	movs	r3, #8
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6a:	e07e      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e07a      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a74:	2320      	movs	r3, #32
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e076      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a7c:	2340      	movs	r3, #64	@ 0x40
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e072      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a84:	2380      	movs	r3, #128	@ 0x80
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e06e      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a75      	ldr	r2, [pc, #468]	@ (8007c68 <UART_SetConfig+0x6a4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d130      	bne.n	8007af8 <UART_SetConfig+0x534>
 8007a96:	4b72      	ldr	r3, [pc, #456]	@ (8007c60 <UART_SetConfig+0x69c>)
 8007a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d826      	bhi.n	8007af0 <UART_SetConfig+0x52c>
 8007aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <UART_SetConfig+0x4e4>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ac1 	.word	0x08007ac1
 8007aac:	08007ac9 	.word	0x08007ac9
 8007ab0:	08007ad1 	.word	0x08007ad1
 8007ab4:	08007ad9 	.word	0x08007ad9
 8007ab8:	08007ae1 	.word	0x08007ae1
 8007abc:	08007ae9 	.word	0x08007ae9
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e050      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e04c      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e048      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007ad8:	2310      	movs	r3, #16
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e044      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007ae0:	2320      	movs	r3, #32
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e040      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007ae8:	2340      	movs	r3, #64	@ 0x40
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e03c      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007af0:	2380      	movs	r3, #128	@ 0x80
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e038      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a5b      	ldr	r2, [pc, #364]	@ (8007c6c <UART_SetConfig+0x6a8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d130      	bne.n	8007b64 <UART_SetConfig+0x5a0>
 8007b02:	4b57      	ldr	r3, [pc, #348]	@ (8007c60 <UART_SetConfig+0x69c>)
 8007b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b05      	cmp	r3, #5
 8007b0c:	d826      	bhi.n	8007b5c <UART_SetConfig+0x598>
 8007b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b14 <UART_SetConfig+0x550>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b2d 	.word	0x08007b2d
 8007b18:	08007b35 	.word	0x08007b35
 8007b1c:	08007b3d 	.word	0x08007b3d
 8007b20:	08007b45 	.word	0x08007b45
 8007b24:	08007b4d 	.word	0x08007b4d
 8007b28:	08007b55 	.word	0x08007b55
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e01a      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007b34:	2304      	movs	r3, #4
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e016      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b42:	e012      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007b44:	2310      	movs	r3, #16
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4a:	e00e      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007b4c:	2320      	movs	r3, #32
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b52:	e00a      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007b54:	2340      	movs	r3, #64	@ 0x40
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5a:	e006      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007b5c:	2380      	movs	r3, #128	@ 0x80
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b62:	e002      	b.n	8007b6a <UART_SetConfig+0x5a6>
 8007b64:	2380      	movs	r3, #128	@ 0x80
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a3f      	ldr	r2, [pc, #252]	@ (8007c6c <UART_SetConfig+0x6a8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	f040 80f8 	bne.w	8007d66 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b76:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	dc46      	bgt.n	8007c0c <UART_SetConfig+0x648>
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	f2c0 8082 	blt.w	8007c88 <UART_SetConfig+0x6c4>
 8007b84:	3b02      	subs	r3, #2
 8007b86:	2b1e      	cmp	r3, #30
 8007b88:	d87e      	bhi.n	8007c88 <UART_SetConfig+0x6c4>
 8007b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <UART_SetConfig+0x5cc>)
 8007b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b90:	08007c13 	.word	0x08007c13
 8007b94:	08007c89 	.word	0x08007c89
 8007b98:	08007c1b 	.word	0x08007c1b
 8007b9c:	08007c89 	.word	0x08007c89
 8007ba0:	08007c89 	.word	0x08007c89
 8007ba4:	08007c89 	.word	0x08007c89
 8007ba8:	08007c2b 	.word	0x08007c2b
 8007bac:	08007c89 	.word	0x08007c89
 8007bb0:	08007c89 	.word	0x08007c89
 8007bb4:	08007c89 	.word	0x08007c89
 8007bb8:	08007c89 	.word	0x08007c89
 8007bbc:	08007c89 	.word	0x08007c89
 8007bc0:	08007c89 	.word	0x08007c89
 8007bc4:	08007c89 	.word	0x08007c89
 8007bc8:	08007c3b 	.word	0x08007c3b
 8007bcc:	08007c89 	.word	0x08007c89
 8007bd0:	08007c89 	.word	0x08007c89
 8007bd4:	08007c89 	.word	0x08007c89
 8007bd8:	08007c89 	.word	0x08007c89
 8007bdc:	08007c89 	.word	0x08007c89
 8007be0:	08007c89 	.word	0x08007c89
 8007be4:	08007c89 	.word	0x08007c89
 8007be8:	08007c89 	.word	0x08007c89
 8007bec:	08007c89 	.word	0x08007c89
 8007bf0:	08007c89 	.word	0x08007c89
 8007bf4:	08007c89 	.word	0x08007c89
 8007bf8:	08007c89 	.word	0x08007c89
 8007bfc:	08007c89 	.word	0x08007c89
 8007c00:	08007c89 	.word	0x08007c89
 8007c04:	08007c89 	.word	0x08007c89
 8007c08:	08007c7b 	.word	0x08007c7b
 8007c0c:	2b40      	cmp	r3, #64	@ 0x40
 8007c0e:	d037      	beq.n	8007c80 <UART_SetConfig+0x6bc>
 8007c10:	e03a      	b.n	8007c88 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c12:	f7fd ffb5 	bl	8005b80 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c18:	e03c      	b.n	8007c94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd ffc4 	bl	8005bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c28:	e034      	b.n	8007c94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c2a:	f107 0318 	add.w	r3, r7, #24
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe f910 	bl	8005e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c38:	e02c      	b.n	8007c94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c3a:	4b09      	ldr	r3, [pc, #36]	@ (8007c60 <UART_SetConfig+0x69c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d016      	beq.n	8007c74 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c46:	4b06      	ldr	r3, [pc, #24]	@ (8007c60 <UART_SetConfig+0x69c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	08db      	lsrs	r3, r3, #3
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	4a07      	ldr	r2, [pc, #28]	@ (8007c70 <UART_SetConfig+0x6ac>)
 8007c52:	fa22 f303 	lsr.w	r3, r2, r3
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c58:	e01c      	b.n	8007c94 <UART_SetConfig+0x6d0>
 8007c5a:	bf00      	nop
 8007c5c:	40011400 	.word	0x40011400
 8007c60:	58024400 	.word	0x58024400
 8007c64:	40007800 	.word	0x40007800
 8007c68:	40007c00 	.word	0x40007c00
 8007c6c:	58000c00 	.word	0x58000c00
 8007c70:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007c74:	4b9d      	ldr	r3, [pc, #628]	@ (8007eec <UART_SetConfig+0x928>)
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c78:	e00c      	b.n	8007c94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c7a:	4b9d      	ldr	r3, [pc, #628]	@ (8007ef0 <UART_SetConfig+0x92c>)
 8007c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c7e:	e009      	b.n	8007c94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c86:	e005      	b.n	8007c94 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 81de 	beq.w	8008058 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca0:	4a94      	ldr	r2, [pc, #592]	@ (8007ef4 <UART_SetConfig+0x930>)
 8007ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	4413      	add	r3, r2
 8007cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d305      	bcc.n	8007ccc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d903      	bls.n	8007cd4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007cd2:	e1c1      	b.n	8008058 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	60bb      	str	r3, [r7, #8]
 8007cda:	60fa      	str	r2, [r7, #12]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce0:	4a84      	ldr	r2, [pc, #528]	@ (8007ef4 <UART_SetConfig+0x930>)
 8007ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2200      	movs	r2, #0
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	607a      	str	r2, [r7, #4]
 8007cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cf6:	f7f8 fb5b 	bl	80003b0 <__aeabi_uldivmod>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4619      	mov	r1, r3
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	020b      	lsls	r3, r1, #8
 8007d0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d10:	0202      	lsls	r2, r0, #8
 8007d12:	6979      	ldr	r1, [r7, #20]
 8007d14:	6849      	ldr	r1, [r1, #4]
 8007d16:	0849      	lsrs	r1, r1, #1
 8007d18:	2000      	movs	r0, #0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	eb12 0804 	adds.w	r8, r2, r4
 8007d22:	eb43 0905 	adc.w	r9, r3, r5
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	469a      	mov	sl, r3
 8007d2e:	4693      	mov	fp, r2
 8007d30:	4652      	mov	r2, sl
 8007d32:	465b      	mov	r3, fp
 8007d34:	4640      	mov	r0, r8
 8007d36:	4649      	mov	r1, r9
 8007d38:	f7f8 fb3a 	bl	80003b0 <__aeabi_uldivmod>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4613      	mov	r3, r2
 8007d42:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d4a:	d308      	bcc.n	8007d5e <UART_SetConfig+0x79a>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d52:	d204      	bcs.n	8007d5e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d5a:	60da      	str	r2, [r3, #12]
 8007d5c:	e17c      	b.n	8008058 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d64:	e178      	b.n	8008058 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d6e:	f040 80c5 	bne.w	8007efc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007d72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	dc48      	bgt.n	8007e0c <UART_SetConfig+0x848>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	db7b      	blt.n	8007e76 <UART_SetConfig+0x8b2>
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d879      	bhi.n	8007e76 <UART_SetConfig+0x8b2>
 8007d82:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <UART_SetConfig+0x7c4>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007e13 	.word	0x08007e13
 8007d8c:	08007e1b 	.word	0x08007e1b
 8007d90:	08007e77 	.word	0x08007e77
 8007d94:	08007e77 	.word	0x08007e77
 8007d98:	08007e23 	.word	0x08007e23
 8007d9c:	08007e77 	.word	0x08007e77
 8007da0:	08007e77 	.word	0x08007e77
 8007da4:	08007e77 	.word	0x08007e77
 8007da8:	08007e33 	.word	0x08007e33
 8007dac:	08007e77 	.word	0x08007e77
 8007db0:	08007e77 	.word	0x08007e77
 8007db4:	08007e77 	.word	0x08007e77
 8007db8:	08007e77 	.word	0x08007e77
 8007dbc:	08007e77 	.word	0x08007e77
 8007dc0:	08007e77 	.word	0x08007e77
 8007dc4:	08007e77 	.word	0x08007e77
 8007dc8:	08007e43 	.word	0x08007e43
 8007dcc:	08007e77 	.word	0x08007e77
 8007dd0:	08007e77 	.word	0x08007e77
 8007dd4:	08007e77 	.word	0x08007e77
 8007dd8:	08007e77 	.word	0x08007e77
 8007ddc:	08007e77 	.word	0x08007e77
 8007de0:	08007e77 	.word	0x08007e77
 8007de4:	08007e77 	.word	0x08007e77
 8007de8:	08007e77 	.word	0x08007e77
 8007dec:	08007e77 	.word	0x08007e77
 8007df0:	08007e77 	.word	0x08007e77
 8007df4:	08007e77 	.word	0x08007e77
 8007df8:	08007e77 	.word	0x08007e77
 8007dfc:	08007e77 	.word	0x08007e77
 8007e00:	08007e77 	.word	0x08007e77
 8007e04:	08007e77 	.word	0x08007e77
 8007e08:	08007e69 	.word	0x08007e69
 8007e0c:	2b40      	cmp	r3, #64	@ 0x40
 8007e0e:	d02e      	beq.n	8007e6e <UART_SetConfig+0x8aa>
 8007e10:	e031      	b.n	8007e76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e12:	f7fc fc7f 	bl	8004714 <HAL_RCC_GetPCLK1Freq>
 8007e16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e18:	e033      	b.n	8007e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e1a:	f7fc fc91 	bl	8004740 <HAL_RCC_GetPCLK2Freq>
 8007e1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e20:	e02f      	b.n	8007e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fd fec0 	bl	8005bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e30:	e027      	b.n	8007e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e32:	f107 0318 	add.w	r3, r7, #24
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe f80c 	bl	8005e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e40:	e01f      	b.n	8007e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e42:	4b2d      	ldr	r3, [pc, #180]	@ (8007ef8 <UART_SetConfig+0x934>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0320 	and.w	r3, r3, #32
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d009      	beq.n	8007e62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8007ef8 <UART_SetConfig+0x934>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	08db      	lsrs	r3, r3, #3
 8007e54:	f003 0303 	and.w	r3, r3, #3
 8007e58:	4a24      	ldr	r2, [pc, #144]	@ (8007eec <UART_SetConfig+0x928>)
 8007e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e60:	e00f      	b.n	8007e82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007e62:	4b22      	ldr	r3, [pc, #136]	@ (8007eec <UART_SetConfig+0x928>)
 8007e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e66:	e00c      	b.n	8007e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e68:	4b21      	ldr	r3, [pc, #132]	@ (8007ef0 <UART_SetConfig+0x92c>)
 8007e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e6c:	e009      	b.n	8007e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e74:	e005      	b.n	8007e82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80e7 	beq.w	8008058 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8e:	4a19      	ldr	r2, [pc, #100]	@ (8007ef4 <UART_SetConfig+0x930>)
 8007e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e9c:	005a      	lsls	r2, r3, #1
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	085b      	lsrs	r3, r3, #1
 8007ea4:	441a      	add	r2, r3
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb2:	2b0f      	cmp	r3, #15
 8007eb4:	d916      	bls.n	8007ee4 <UART_SetConfig+0x920>
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ebc:	d212      	bcs.n	8007ee4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f023 030f 	bic.w	r3, r3, #15
 8007ec6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	085b      	lsrs	r3, r3, #1
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ee0:	60da      	str	r2, [r3, #12]
 8007ee2:	e0b9      	b.n	8008058 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007eea:	e0b5      	b.n	8008058 <UART_SetConfig+0xa94>
 8007eec:	03d09000 	.word	0x03d09000
 8007ef0:	003d0900 	.word	0x003d0900
 8007ef4:	0800a450 	.word	0x0800a450
 8007ef8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007efc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	dc49      	bgt.n	8007f98 <UART_SetConfig+0x9d4>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	db7c      	blt.n	8008002 <UART_SetConfig+0xa3e>
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d87a      	bhi.n	8008002 <UART_SetConfig+0xa3e>
 8007f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f14 <UART_SetConfig+0x950>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f9f 	.word	0x08007f9f
 8007f18:	08007fa7 	.word	0x08007fa7
 8007f1c:	08008003 	.word	0x08008003
 8007f20:	08008003 	.word	0x08008003
 8007f24:	08007faf 	.word	0x08007faf
 8007f28:	08008003 	.word	0x08008003
 8007f2c:	08008003 	.word	0x08008003
 8007f30:	08008003 	.word	0x08008003
 8007f34:	08007fbf 	.word	0x08007fbf
 8007f38:	08008003 	.word	0x08008003
 8007f3c:	08008003 	.word	0x08008003
 8007f40:	08008003 	.word	0x08008003
 8007f44:	08008003 	.word	0x08008003
 8007f48:	08008003 	.word	0x08008003
 8007f4c:	08008003 	.word	0x08008003
 8007f50:	08008003 	.word	0x08008003
 8007f54:	08007fcf 	.word	0x08007fcf
 8007f58:	08008003 	.word	0x08008003
 8007f5c:	08008003 	.word	0x08008003
 8007f60:	08008003 	.word	0x08008003
 8007f64:	08008003 	.word	0x08008003
 8007f68:	08008003 	.word	0x08008003
 8007f6c:	08008003 	.word	0x08008003
 8007f70:	08008003 	.word	0x08008003
 8007f74:	08008003 	.word	0x08008003
 8007f78:	08008003 	.word	0x08008003
 8007f7c:	08008003 	.word	0x08008003
 8007f80:	08008003 	.word	0x08008003
 8007f84:	08008003 	.word	0x08008003
 8007f88:	08008003 	.word	0x08008003
 8007f8c:	08008003 	.word	0x08008003
 8007f90:	08008003 	.word	0x08008003
 8007f94:	08007ff5 	.word	0x08007ff5
 8007f98:	2b40      	cmp	r3, #64	@ 0x40
 8007f9a:	d02e      	beq.n	8007ffa <UART_SetConfig+0xa36>
 8007f9c:	e031      	b.n	8008002 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f9e:	f7fc fbb9 	bl	8004714 <HAL_RCC_GetPCLK1Freq>
 8007fa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007fa4:	e033      	b.n	800800e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa6:	f7fc fbcb 	bl	8004740 <HAL_RCC_GetPCLK2Freq>
 8007faa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007fac:	e02f      	b.n	800800e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fd fdfa 	bl	8005bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fbc:	e027      	b.n	800800e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fbe:	f107 0318 	add.w	r3, r7, #24
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fd ff46 	bl	8005e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fcc:	e01f      	b.n	800800e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fce:	4b2d      	ldr	r3, [pc, #180]	@ (8008084 <UART_SetConfig+0xac0>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0320 	and.w	r3, r3, #32
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d009      	beq.n	8007fee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007fda:	4b2a      	ldr	r3, [pc, #168]	@ (8008084 <UART_SetConfig+0xac0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	08db      	lsrs	r3, r3, #3
 8007fe0:	f003 0303 	and.w	r3, r3, #3
 8007fe4:	4a28      	ldr	r2, [pc, #160]	@ (8008088 <UART_SetConfig+0xac4>)
 8007fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fec:	e00f      	b.n	800800e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007fee:	4b26      	ldr	r3, [pc, #152]	@ (8008088 <UART_SetConfig+0xac4>)
 8007ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff2:	e00c      	b.n	800800e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ff4:	4b25      	ldr	r3, [pc, #148]	@ (800808c <UART_SetConfig+0xac8>)
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff8:	e009      	b.n	800800e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008000:	e005      	b.n	800800e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800800c:	bf00      	nop
    }

    if (pclk != 0U)
 800800e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d021      	beq.n	8008058 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008018:	4a1d      	ldr	r2, [pc, #116]	@ (8008090 <UART_SetConfig+0xacc>)
 800801a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800801e:	461a      	mov	r2, r3
 8008020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008022:	fbb3 f2f2 	udiv	r2, r3, r2
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	085b      	lsrs	r3, r3, #1
 800802c:	441a      	add	r2, r3
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	fbb2 f3f3 	udiv	r3, r2, r3
 8008036:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803a:	2b0f      	cmp	r3, #15
 800803c:	d909      	bls.n	8008052 <UART_SetConfig+0xa8e>
 800803e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008044:	d205      	bcs.n	8008052 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008048:	b29a      	uxth	r2, r3
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	60da      	str	r2, [r3, #12]
 8008050:	e002      	b.n	8008058 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2201      	movs	r2, #1
 800805c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2201      	movs	r2, #1
 8008064:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2200      	movs	r2, #0
 800806c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2200      	movs	r2, #0
 8008072:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008074:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008078:	4618      	mov	r0, r3
 800807a:	3748      	adds	r7, #72	@ 0x48
 800807c:	46bd      	mov	sp, r7
 800807e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008082:	bf00      	nop
 8008084:	58024400 	.word	0x58024400
 8008088:	03d09000 	.word	0x03d09000
 800808c:	003d0900 	.word	0x003d0900
 8008090:	0800a450 	.word	0x0800a450

08008094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00a      	beq.n	80080be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008106:	f003 0304 	and.w	r3, r3, #4
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01a      	beq.n	80081aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008192:	d10a      	bne.n	80081aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	605a      	str	r2, [r3, #4]
  }
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b098      	sub	sp, #96	@ 0x60
 80081dc:	af02      	add	r7, sp, #8
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081e8:	f7f9 fafe 	bl	80017e8 <HAL_GetTick>
 80081ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0308 	and.w	r3, r3, #8
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d12f      	bne.n	800825c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008204:	2200      	movs	r2, #0
 8008206:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f88e 	bl	800832c <UART_WaitOnFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d022      	beq.n	800825c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800822a:	653b      	str	r3, [r7, #80]	@ 0x50
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008234:	647b      	str	r3, [r7, #68]	@ 0x44
 8008236:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800823a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e6      	bne.n	8008216 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e063      	b.n	8008324 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0304 	and.w	r3, r3, #4
 8008266:	2b04      	cmp	r3, #4
 8008268:	d149      	bne.n	80082fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800826a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008272:	2200      	movs	r2, #0
 8008274:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f857 	bl	800832c <UART_WaitOnFlagUntilTimeout>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d03c      	beq.n	80082fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	623b      	str	r3, [r7, #32]
   return(result);
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80082a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e6      	bne.n	8008284 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3308      	adds	r3, #8
 80082bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f023 0301 	bic.w	r3, r3, #1
 80082cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3308      	adds	r3, #8
 80082d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082d6:	61fa      	str	r2, [r7, #28]
 80082d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	69b9      	ldr	r1, [r7, #24]
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	617b      	str	r3, [r7, #20]
   return(result);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e5      	bne.n	80082b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e012      	b.n	8008324 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2220      	movs	r2, #32
 8008302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2220      	movs	r2, #32
 800830a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3758      	adds	r7, #88	@ 0x58
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	4613      	mov	r3, r2
 800833a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800833c:	e04f      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d04b      	beq.n	80083de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008346:	f7f9 fa4f 	bl	80017e8 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	429a      	cmp	r2, r3
 8008354:	d302      	bcc.n	800835c <UART_WaitOnFlagUntilTimeout+0x30>
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e04e      	b.n	80083fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0304 	and.w	r3, r3, #4
 800836a:	2b00      	cmp	r3, #0
 800836c:	d037      	beq.n	80083de <UART_WaitOnFlagUntilTimeout+0xb2>
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b80      	cmp	r3, #128	@ 0x80
 8008372:	d034      	beq.n	80083de <UART_WaitOnFlagUntilTimeout+0xb2>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b40      	cmp	r3, #64	@ 0x40
 8008378:	d031      	beq.n	80083de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b08      	cmp	r3, #8
 8008386:	d110      	bne.n	80083aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2208      	movs	r2, #8
 800838e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f95b 	bl	800864c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2208      	movs	r2, #8
 800839a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e029      	b.n	80083fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083b8:	d111      	bne.n	80083de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f941 	bl	800864c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2220      	movs	r2, #32
 80083ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e00f      	b.n	80083fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69da      	ldr	r2, [r3, #28]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4013      	ands	r3, r2
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	bf0c      	ite	eq
 80083ee:	2301      	moveq	r3, #1
 80083f0:	2300      	movne	r3, #0
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	461a      	mov	r2, r3
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d0a0      	beq.n	800833e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008408:	b480      	push	{r7}
 800840a:	b0a3      	sub	sp, #140	@ 0x8c
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	4613      	mov	r3, r2
 8008414:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	88fa      	ldrh	r2, [r7, #6]
 8008420:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	88fa      	ldrh	r2, [r7, #6]
 8008428:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800843a:	d10e      	bne.n	800845a <UART_Start_Receive_IT+0x52>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d105      	bne.n	8008450 <UART_Start_Receive_IT+0x48>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800844a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800844e:	e02d      	b.n	80084ac <UART_Start_Receive_IT+0xa4>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	22ff      	movs	r2, #255	@ 0xff
 8008454:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008458:	e028      	b.n	80084ac <UART_Start_Receive_IT+0xa4>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10d      	bne.n	800847e <UART_Start_Receive_IT+0x76>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d104      	bne.n	8008474 <UART_Start_Receive_IT+0x6c>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	22ff      	movs	r2, #255	@ 0xff
 800846e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008472:	e01b      	b.n	80084ac <UART_Start_Receive_IT+0xa4>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	227f      	movs	r2, #127	@ 0x7f
 8008478:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800847c:	e016      	b.n	80084ac <UART_Start_Receive_IT+0xa4>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008486:	d10d      	bne.n	80084a4 <UART_Start_Receive_IT+0x9c>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <UART_Start_Receive_IT+0x92>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	227f      	movs	r2, #127	@ 0x7f
 8008494:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008498:	e008      	b.n	80084ac <UART_Start_Receive_IT+0xa4>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	223f      	movs	r2, #63	@ 0x3f
 800849e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084a2:	e003      	b.n	80084ac <UART_Start_Receive_IT+0xa4>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2222      	movs	r2, #34	@ 0x22
 80084b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80084cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084ce:	f043 0301 	orr.w	r3, r3, #1
 80084d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3308      	adds	r3, #8
 80084dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80084e0:	673a      	str	r2, [r7, #112]	@ 0x70
 80084e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80084e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80084ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e3      	bne.n	80084bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084fc:	d14f      	bne.n	800859e <UART_Start_Receive_IT+0x196>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008504:	88fa      	ldrh	r2, [r7, #6]
 8008506:	429a      	cmp	r2, r3
 8008508:	d349      	bcc.n	800859e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008512:	d107      	bne.n	8008524 <UART_Start_Receive_IT+0x11c>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d103      	bne.n	8008524 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4a47      	ldr	r2, [pc, #284]	@ (800863c <UART_Start_Receive_IT+0x234>)
 8008520:	675a      	str	r2, [r3, #116]	@ 0x74
 8008522:	e002      	b.n	800852a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4a46      	ldr	r2, [pc, #280]	@ (8008640 <UART_Start_Receive_IT+0x238>)
 8008528:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d01a      	beq.n	8008568 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800853a:	e853 3f00 	ldrex	r3, [r3]
 800853e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008546:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008556:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800855a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e4      	bne.n	8008532 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3308      	adds	r3, #8
 800856e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800857e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3308      	adds	r3, #8
 8008586:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008588:	64ba      	str	r2, [r7, #72]	@ 0x48
 800858a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800858e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e5      	bne.n	8008568 <UART_Start_Receive_IT+0x160>
 800859c:	e046      	b.n	800862c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085a6:	d107      	bne.n	80085b8 <UART_Start_Receive_IT+0x1b0>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d103      	bne.n	80085b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4a24      	ldr	r2, [pc, #144]	@ (8008644 <UART_Start_Receive_IT+0x23c>)
 80085b4:	675a      	str	r2, [r3, #116]	@ 0x74
 80085b6:	e002      	b.n	80085be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4a23      	ldr	r2, [pc, #140]	@ (8008648 <UART_Start_Receive_IT+0x240>)
 80085bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d019      	beq.n	80085fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80085da:	677b      	str	r3, [r7, #116]	@ 0x74
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80085ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085ec:	e841 2300 	strex	r3, r2, [r1]
 80085f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80085f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e6      	bne.n	80085c6 <UART_Start_Receive_IT+0x1be>
 80085f8:	e018      	b.n	800862c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	e853 3f00 	ldrex	r3, [r3]
 8008606:	613b      	str	r3, [r7, #16]
   return(result);
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f043 0320 	orr.w	r3, r3, #32
 800860e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008618:	623b      	str	r3, [r7, #32]
 800861a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	69f9      	ldr	r1, [r7, #28]
 800861e:	6a3a      	ldr	r2, [r7, #32]
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	61bb      	str	r3, [r7, #24]
   return(result);
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e6      	bne.n	80085fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	378c      	adds	r7, #140	@ 0x8c
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	08008e6d 	.word	0x08008e6d
 8008640:	08008b0d 	.word	0x08008b0d
 8008644:	08008955 	.word	0x08008955
 8008648:	0800879d 	.word	0x0800879d

0800864c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800864c:	b480      	push	{r7}
 800864e:	b095      	sub	sp, #84	@ 0x54
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008672:	643b      	str	r3, [r7, #64]	@ 0x40
 8008674:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008678:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e6      	bne.n	8008654 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	61fb      	str	r3, [r7, #28]
   return(result);
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	4b1e      	ldr	r3, [pc, #120]	@ (8008714 <UART_EndRxTransfer+0xc8>)
 800869a:	4013      	ands	r3, r2
 800869c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3308      	adds	r3, #8
 80086a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e5      	bne.n	8008686 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d118      	bne.n	80086f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	e853 3f00 	ldrex	r3, [r3]
 80086ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f023 0310 	bic.w	r3, r3, #16
 80086d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	461a      	mov	r2, r3
 80086de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086e0:	61bb      	str	r3, [r7, #24]
 80086e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e4:	6979      	ldr	r1, [r7, #20]
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	e841 2300 	strex	r3, r2, [r1]
 80086ec:	613b      	str	r3, [r7, #16]
   return(result);
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1e6      	bne.n	80086c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2220      	movs	r2, #32
 80086f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008708:	bf00      	nop
 800870a:	3754      	adds	r7, #84	@ 0x54
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	effffffe 	.word	0xeffffffe

08008718 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008724:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7fe ff2e 	bl	8007598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800873c:	bf00      	nop
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	60bb      	str	r3, [r7, #8]
   return(result);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008760:	61fb      	str	r3, [r7, #28]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	61bb      	str	r3, [r7, #24]
 800876c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6979      	ldr	r1, [r7, #20]
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	613b      	str	r3, [r7, #16]
   return(result);
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e6      	bne.n	800874c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2220      	movs	r2, #32
 8008782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7fe fef9 	bl	8007584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008792:	bf00      	nop
 8008794:	3720      	adds	r7, #32
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b09c      	sub	sp, #112	@ 0x70
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80087aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087b4:	2b22      	cmp	r3, #34	@ 0x22
 80087b6:	f040 80be 	bne.w	8008936 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80087c8:	b2d9      	uxtb	r1, r3
 80087ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d4:	400a      	ands	r2, r1
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	3b01      	subs	r3, #1
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f040 80a1 	bne.w	8008946 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008818:	66bb      	str	r3, [r7, #104]	@ 0x68
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008822:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008824:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008828:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e6      	bne.n	8008804 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3308      	adds	r3, #8
 800883c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008848:	f023 0301 	bic.w	r3, r3, #1
 800884c:	667b      	str	r3, [r7, #100]	@ 0x64
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3308      	adds	r3, #8
 8008854:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008856:	647a      	str	r2, [r7, #68]	@ 0x44
 8008858:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800885c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e5      	bne.n	8008836 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2220      	movs	r2, #32
 800886e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a33      	ldr	r2, [pc, #204]	@ (8008950 <UART_RxISR_8BIT+0x1b4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d01f      	beq.n	80088c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d018      	beq.n	80088c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889e:	e853 3f00 	ldrex	r3, [r3]
 80088a2:	623b      	str	r3, [r7, #32]
   return(result);
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80088b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088bc:	e841 2300 	strex	r3, r2, [r1]
 80088c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1e6      	bne.n	8008896 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d12e      	bne.n	800892e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0310 	bic.w	r3, r3, #16
 80088ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088f4:	61fb      	str	r3, [r7, #28]
 80088f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	69b9      	ldr	r1, [r7, #24]
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	617b      	str	r3, [r7, #20]
   return(result);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e6      	bne.n	80088d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	f003 0310 	and.w	r3, r3, #16
 8008912:	2b10      	cmp	r3, #16
 8008914:	d103      	bne.n	800891e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2210      	movs	r2, #16
 800891c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7fe fe40 	bl	80075ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800892c:	e00b      	b.n	8008946 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7f8 fb7e 	bl	8001030 <HAL_UART_RxCpltCallback>
}
 8008934:	e007      	b.n	8008946 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	699a      	ldr	r2, [r3, #24]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0208 	orr.w	r2, r2, #8
 8008944:	619a      	str	r2, [r3, #24]
}
 8008946:	bf00      	nop
 8008948:	3770      	adds	r7, #112	@ 0x70
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	58000c00 	.word	0x58000c00

08008954 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b09c      	sub	sp, #112	@ 0x70
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008962:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800896c:	2b22      	cmp	r3, #34	@ 0x22
 800896e:	f040 80be 	bne.w	8008aee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008978:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008980:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008982:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008986:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800898a:	4013      	ands	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008990:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008996:	1c9a      	adds	r2, r3, #2
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	3b01      	subs	r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f040 80a1 	bne.w	8008afe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80089ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089da:	657b      	str	r3, [r7, #84]	@ 0x54
 80089dc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80089e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80089e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e6      	bne.n	80089bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3308      	adds	r3, #8
 80089f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	f023 0301 	bic.w	r3, r3, #1
 8008a04:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e5      	bne.n	80089ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a33      	ldr	r2, [pc, #204]	@ (8008b08 <UART_RxISR_16BIT+0x1b4>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d01f      	beq.n	8008a80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d018      	beq.n	8008a80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a6e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e6      	bne.n	8008a4e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d12e      	bne.n	8008ae6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	e853 3f00 	ldrex	r3, [r3]
 8008a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f023 0310 	bic.w	r3, r3, #16
 8008aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008aac:	61bb      	str	r3, [r7, #24]
 8008aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	6979      	ldr	r1, [r7, #20]
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e6      	bne.n	8008a8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	f003 0310 	and.w	r3, r3, #16
 8008aca:	2b10      	cmp	r3, #16
 8008acc:	d103      	bne.n	8008ad6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2210      	movs	r2, #16
 8008ad4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7fe fd64 	bl	80075ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ae4:	e00b      	b.n	8008afe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7f8 faa2 	bl	8001030 <HAL_UART_RxCpltCallback>
}
 8008aec:	e007      	b.n	8008afe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	699a      	ldr	r2, [r3, #24]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f042 0208 	orr.w	r2, r2, #8
 8008afc:	619a      	str	r2, [r3, #24]
}
 8008afe:	bf00      	nop
 8008b00:	3770      	adds	r7, #112	@ 0x70
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	58000c00 	.word	0x58000c00

08008b0c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b0ac      	sub	sp, #176	@ 0xb0
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b1a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b42:	2b22      	cmp	r3, #34	@ 0x22
 8008b44:	f040 8180 	bne.w	8008e48 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008b4e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b52:	e123      	b.n	8008d9c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b5e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008b62:	b2d9      	uxtb	r1, r3
 8008b64:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b6e:	400a      	ands	r2, r1
 8008b70:	b2d2      	uxtb	r2, r2
 8008b72:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	3b01      	subs	r3, #1
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b9e:	f003 0307 	and.w	r3, r3, #7
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d053      	beq.n	8008c4e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d011      	beq.n	8008bd6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008bb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00b      	beq.n	8008bd6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bcc:	f043 0201 	orr.w	r2, r3, #1
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d011      	beq.n	8008c06 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bfc:	f043 0204 	orr.w	r2, r3, #4
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d011      	beq.n	8008c36 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00b      	beq.n	8008c36 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2204      	movs	r2, #4
 8008c24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c2c:	f043 0202 	orr.w	r2, r3, #2
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d006      	beq.n	8008c4e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7fe fca9 	bl	8007598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f040 80a0 	bne.w	8008d9c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c80:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008c84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008c8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e4      	bne.n	8008c5c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008ca2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ca4:	4b6e      	ldr	r3, [pc, #440]	@ (8008e60 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008cb6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008cb8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008cbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008cc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e3      	bne.n	8008c92 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a60      	ldr	r2, [pc, #384]	@ (8008e64 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d021      	beq.n	8008d2c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d01a      	beq.n	8008d2c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cfe:	e853 3f00 	ldrex	r3, [r3]
 8008d02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d18:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d1a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e4      	bne.n	8008cf6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d130      	bne.n	8008d96 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4a:	f023 0310 	bic.w	r3, r3, #16
 8008d4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e4      	bne.n	8008d3a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	f003 0310 	and.w	r3, r3, #16
 8008d7a:	2b10      	cmp	r3, #16
 8008d7c:	d103      	bne.n	8008d86 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2210      	movs	r2, #16
 8008d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fe fc0c 	bl	80075ac <HAL_UARTEx_RxEventCallback>
 8008d94:	e002      	b.n	8008d9c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7f8 f94a 	bl	8001030 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d9c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d006      	beq.n	8008db2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f47f aed1 	bne.w	8008b54 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008db8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008dbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d049      	beq.n	8008e58 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008dca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d242      	bcs.n	8008e58 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	e853 3f00 	ldrex	r3, [r3]
 8008de0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3308      	adds	r3, #8
 8008df2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008df8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e3      	bne.n	8008dd2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a16      	ldr	r2, [pc, #88]	@ (8008e68 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008e0e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	f043 0320 	orr.w	r3, r3, #32
 8008e24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e32:	61bb      	str	r3, [r7, #24]
 8008e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6979      	ldr	r1, [r7, #20]
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e4      	bne.n	8008e10 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e46:	e007      	b.n	8008e58 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	699a      	ldr	r2, [r3, #24]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0208 	orr.w	r2, r2, #8
 8008e56:	619a      	str	r2, [r3, #24]
}
 8008e58:	bf00      	nop
 8008e5a:	37b0      	adds	r7, #176	@ 0xb0
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	effffffe 	.word	0xeffffffe
 8008e64:	58000c00 	.word	0x58000c00
 8008e68:	0800879d 	.word	0x0800879d

08008e6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b0ae      	sub	sp, #184	@ 0xb8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e7a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ea2:	2b22      	cmp	r3, #34	@ 0x22
 8008ea4:	f040 8184 	bne.w	80091b0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008eae:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008eb2:	e127      	b.n	8009104 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eba:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008ec6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008eca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008ece:	4013      	ands	r3, r2
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ed6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008edc:	1c9a      	adds	r2, r3, #2
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008efe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d053      	beq.n	8008fb2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d011      	beq.n	8008f3a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00b      	beq.n	8008f3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2201      	movs	r2, #1
 8008f28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f30:	f043 0201 	orr.w	r2, r3, #1
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d011      	beq.n	8008f6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2202      	movs	r2, #2
 8008f58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f60:	f043 0204 	orr.w	r2, r3, #4
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d011      	beq.n	8008f9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008f76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00b      	beq.n	8008f9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2204      	movs	r2, #4
 8008f88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f90:	f043 0202 	orr.w	r2, r3, #2
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d006      	beq.n	8008fb2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7fe faf7 	bl	8007598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f040 80a2 	bne.w	8009104 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008fce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fe2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008fe6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e2      	bne.n	8008fc0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3308      	adds	r3, #8
 8009000:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009002:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800900a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800900c:	4b6e      	ldr	r3, [pc, #440]	@ (80091c8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800900e:	4013      	ands	r3, r2
 8009010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800901e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009020:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009024:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800902c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e3      	bne.n	8008ffa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a60      	ldr	r2, [pc, #384]	@ (80091cc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d021      	beq.n	8009094 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d01a      	beq.n	8009094 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800906c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800906e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009072:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009080:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009082:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009086:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800908e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e4      	bne.n	800905e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009098:	2b01      	cmp	r3, #1
 800909a:	d130      	bne.n	80090fe <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090b2:	f023 0310 	bic.w	r3, r3, #16
 80090b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80090c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e4      	bne.n	80090a2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	f003 0310 	and.w	r3, r3, #16
 80090e2:	2b10      	cmp	r3, #16
 80090e4:	d103      	bne.n	80090ee <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2210      	movs	r2, #16
 80090ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7fe fa58 	bl	80075ac <HAL_UARTEx_RxEventCallback>
 80090fc:	e002      	b.n	8009104 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7f7 ff96 	bl	8001030 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009104:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800910c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009110:	f003 0320 	and.w	r3, r3, #32
 8009114:	2b00      	cmp	r3, #0
 8009116:	f47f aecd 	bne.w	8008eb4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009120:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009124:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009128:	2b00      	cmp	r3, #0
 800912a:	d049      	beq.n	80091c0 <UART_RxISR_16BIT_FIFOEN+0x354>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009132:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009136:	429a      	cmp	r2, r3
 8009138:	d242      	bcs.n	80091c0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	623b      	str	r3, [r7, #32]
   return(result);
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3308      	adds	r3, #8
 800915a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800915e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e3      	bne.n	800913a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a16      	ldr	r2, [pc, #88]	@ (80091d0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009176:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	60fb      	str	r3, [r7, #12]
   return(result);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f043 0320 	orr.w	r3, r3, #32
 800918c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800919a:	61fb      	str	r3, [r7, #28]
 800919c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	69b9      	ldr	r1, [r7, #24]
 80091a0:	69fa      	ldr	r2, [r7, #28]
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	617b      	str	r3, [r7, #20]
   return(result);
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e4      	bne.n	8009178 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091ae:	e007      	b.n	80091c0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0208 	orr.w	r2, r2, #8
 80091be:	619a      	str	r2, [r3, #24]
}
 80091c0:	bf00      	nop
 80091c2:	37b8      	adds	r7, #184	@ 0xb8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	effffffe 	.word	0xeffffffe
 80091cc:	58000c00 	.word	0x58000c00
 80091d0:	08008955 	.word	0x08008955

080091d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800921e:	2b01      	cmp	r3, #1
 8009220:	d101      	bne.n	8009226 <HAL_UARTEx_DisableFifoMode+0x16>
 8009222:	2302      	movs	r3, #2
 8009224:	e027      	b.n	8009276 <HAL_UARTEx_DisableFifoMode+0x66>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2224      	movs	r2, #36	@ 0x24
 8009232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f022 0201 	bic.w	r2, r2, #1
 800924c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009254:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009292:	2b01      	cmp	r3, #1
 8009294:	d101      	bne.n	800929a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009296:	2302      	movs	r3, #2
 8009298:	e02d      	b.n	80092f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2224      	movs	r2, #36	@ 0x24
 80092a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 0201 	bic.w	r2, r2, #1
 80092c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f850 	bl	800937c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009312:	2302      	movs	r3, #2
 8009314:	e02d      	b.n	8009372 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2224      	movs	r2, #36	@ 0x24
 8009322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f022 0201 	bic.w	r2, r2, #1
 800933c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f812 	bl	800937c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
	...

0800937c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009388:	2b00      	cmp	r3, #0
 800938a:	d108      	bne.n	800939e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800939c:	e031      	b.n	8009402 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800939e:	2310      	movs	r3, #16
 80093a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093a2:	2310      	movs	r3, #16
 80093a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	0e5b      	lsrs	r3, r3, #25
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	f003 0307 	and.w	r3, r3, #7
 80093b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	0f5b      	lsrs	r3, r3, #29
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f003 0307 	and.w	r3, r3, #7
 80093c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	7b3a      	ldrb	r2, [r7, #12]
 80093ca:	4911      	ldr	r1, [pc, #68]	@ (8009410 <UARTEx_SetNbDataToProcess+0x94>)
 80093cc:	5c8a      	ldrb	r2, [r1, r2]
 80093ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093d2:	7b3a      	ldrb	r2, [r7, #12]
 80093d4:	490f      	ldr	r1, [pc, #60]	@ (8009414 <UARTEx_SetNbDataToProcess+0x98>)
 80093d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80093dc:	b29a      	uxth	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
 80093e6:	7b7a      	ldrb	r2, [r7, #13]
 80093e8:	4909      	ldr	r1, [pc, #36]	@ (8009410 <UARTEx_SetNbDataToProcess+0x94>)
 80093ea:	5c8a      	ldrb	r2, [r1, r2]
 80093ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093f0:	7b7a      	ldrb	r2, [r7, #13]
 80093f2:	4908      	ldr	r1, [pc, #32]	@ (8009414 <UARTEx_SetNbDataToProcess+0x98>)
 80093f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	0800a468 	.word	0x0800a468
 8009414:	0800a470 	.word	0x0800a470

08009418 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009418:	b084      	sub	sp, #16
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	f107 001c 	add.w	r0, r7, #28
 8009426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800942a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800942e:	2b01      	cmp	r3, #1
 8009430:	d121      	bne.n	8009476 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009436:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	4b2c      	ldr	r3, [pc, #176]	@ (80094f4 <USB_CoreInit+0xdc>)
 8009444:	4013      	ands	r3, r2
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009456:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800945a:	2b01      	cmp	r3, #1
 800945c:	d105      	bne.n	800946a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 faaa 	bl	80099c4 <USB_CoreReset>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]
 8009474:	e01b      	b.n	80094ae <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa9e 	bl	80099c4 <USB_CoreReset>
 8009488:	4603      	mov	r3, r0
 800948a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800948c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009498:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	639a      	str	r2, [r3, #56]	@ 0x38
 80094a0:	e005      	b.n	80094ae <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094ae:	7fbb      	ldrb	r3, [r7, #30]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d116      	bne.n	80094e2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80094c2:	4b0d      	ldr	r3, [pc, #52]	@ (80094f8 <USB_CoreInit+0xe0>)
 80094c4:	4313      	orrs	r3, r2
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f043 0206 	orr.w	r2, r3, #6
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f043 0220 	orr.w	r2, r3, #32
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094ee:	b004      	add	sp, #16
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	ffbdffbf 	.word	0xffbdffbf
 80094f8:	03ee0000 	.word	0x03ee0000

080094fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f023 0201 	bic.w	r2, r3, #1
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800953a:	78fb      	ldrb	r3, [r7, #3]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d115      	bne.n	800956c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800954c:	200a      	movs	r0, #10
 800954e:	f7f8 f957 	bl	8001800 <HAL_Delay>
      ms += 10U;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	330a      	adds	r3, #10
 8009556:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fa25 	bl	80099a8 <USB_GetMode>
 800955e:	4603      	mov	r3, r0
 8009560:	2b01      	cmp	r3, #1
 8009562:	d01e      	beq.n	80095a2 <USB_SetCurrentMode+0x84>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2bc7      	cmp	r3, #199	@ 0xc7
 8009568:	d9f0      	bls.n	800954c <USB_SetCurrentMode+0x2e>
 800956a:	e01a      	b.n	80095a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d115      	bne.n	800959e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800957e:	200a      	movs	r0, #10
 8009580:	f7f8 f93e 	bl	8001800 <HAL_Delay>
      ms += 10U;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	330a      	adds	r3, #10
 8009588:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa0c 	bl	80099a8 <USB_GetMode>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d005      	beq.n	80095a2 <USB_SetCurrentMode+0x84>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2bc7      	cmp	r3, #199	@ 0xc7
 800959a:	d9f0      	bls.n	800957e <USB_SetCurrentMode+0x60>
 800959c:	e001      	b.n	80095a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e005      	b.n	80095ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80095a6:	d101      	bne.n	80095ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e000      	b.n	80095ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095b8:	b084      	sub	sp, #16
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b086      	sub	sp, #24
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80095c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095d2:	2300      	movs	r3, #0
 80095d4:	613b      	str	r3, [r7, #16]
 80095d6:	e009      	b.n	80095ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	3340      	adds	r3, #64	@ 0x40
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	3301      	adds	r3, #1
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2b0e      	cmp	r3, #14
 80095f0:	d9f2      	bls.n	80095d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d11c      	bne.n	8009634 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009608:	f043 0302 	orr.w	r3, r3, #2
 800960c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009612:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	e005      	b.n	8009640 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009638:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009646:	461a      	mov	r2, r3
 8009648:	2300      	movs	r3, #0
 800964a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800964c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009650:	2b01      	cmp	r3, #1
 8009652:	d10d      	bne.n	8009670 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009658:	2b00      	cmp	r3, #0
 800965a:	d104      	bne.n	8009666 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800965c:	2100      	movs	r1, #0
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f968 	bl	8009934 <USB_SetDevSpeed>
 8009664:	e008      	b.n	8009678 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009666:	2101      	movs	r1, #1
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f963 	bl	8009934 <USB_SetDevSpeed>
 800966e:	e003      	b.n	8009678 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009670:	2103      	movs	r1, #3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f95e 	bl	8009934 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009678:	2110      	movs	r1, #16
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f8fa 	bl	8009874 <USB_FlushTxFifo>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f924 	bl	80098d8 <USB_FlushRxFifo>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a0:	461a      	mov	r2, r3
 80096a2:	2300      	movs	r3, #0
 80096a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ac:	461a      	mov	r2, r3
 80096ae:	2300      	movs	r3, #0
 80096b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096b8:	461a      	mov	r2, r3
 80096ba:	2300      	movs	r3, #0
 80096bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096be:	2300      	movs	r3, #0
 80096c0:	613b      	str	r3, [r7, #16]
 80096c2:	e043      	b.n	800974c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096da:	d118      	bne.n	800970e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10a      	bne.n	80096f8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ee:	461a      	mov	r2, r3
 80096f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096f4:	6013      	str	r3, [r2, #0]
 80096f6:	e013      	b.n	8009720 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009704:	461a      	mov	r2, r3
 8009706:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	e008      	b.n	8009720 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800971a:	461a      	mov	r2, r3
 800971c:	2300      	movs	r3, #0
 800971e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800972c:	461a      	mov	r2, r3
 800972e:	2300      	movs	r3, #0
 8009730:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800973e:	461a      	mov	r2, r3
 8009740:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009744:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	3301      	adds	r3, #1
 800974a:	613b      	str	r3, [r7, #16]
 800974c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009750:	461a      	mov	r2, r3
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	4293      	cmp	r3, r2
 8009756:	d3b5      	bcc.n	80096c4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009758:	2300      	movs	r3, #0
 800975a:	613b      	str	r3, [r7, #16]
 800975c:	e043      	b.n	80097e6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	015a      	lsls	r2, r3, #5
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4413      	add	r3, r2
 8009766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009770:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009774:	d118      	bne.n	80097a8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10a      	bne.n	8009792 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009788:	461a      	mov	r2, r3
 800978a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	e013      	b.n	80097ba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800979e:	461a      	mov	r2, r3
 80097a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	e008      	b.n	80097ba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097b4:	461a      	mov	r2, r3
 80097b6:	2300      	movs	r3, #0
 80097b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c6:	461a      	mov	r2, r3
 80097c8:	2300      	movs	r3, #0
 80097ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	015a      	lsls	r2, r3, #5
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	4413      	add	r3, r2
 80097d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d8:	461a      	mov	r2, r3
 80097da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80097de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	3301      	adds	r3, #1
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097ea:	461a      	mov	r2, r3
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d3b5      	bcc.n	800975e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009804:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009812:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009814:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009818:	2b00      	cmp	r3, #0
 800981a:	d105      	bne.n	8009828 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	f043 0210 	orr.w	r2, r3, #16
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	699a      	ldr	r2, [r3, #24]
 800982c:	4b0f      	ldr	r3, [pc, #60]	@ (800986c <USB_DevInit+0x2b4>)
 800982e:	4313      	orrs	r3, r2
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009834:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	f043 0208 	orr.w	r2, r3, #8
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009848:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800984c:	2b01      	cmp	r3, #1
 800984e:	d105      	bne.n	800985c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	699a      	ldr	r2, [r3, #24]
 8009854:	4b06      	ldr	r3, [pc, #24]	@ (8009870 <USB_DevInit+0x2b8>)
 8009856:	4313      	orrs	r3, r2
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800985c:	7dfb      	ldrb	r3, [r7, #23]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009868:	b004      	add	sp, #16
 800986a:	4770      	bx	lr
 800986c:	803c3800 	.word	0x803c3800
 8009870:	40000004 	.word	0x40000004

08009874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	3301      	adds	r3, #1
 8009886:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800988e:	d901      	bls.n	8009894 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e01b      	b.n	80098cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	daf2      	bge.n	8009882 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	019b      	lsls	r3, r3, #6
 80098a4:	f043 0220 	orr.w	r2, r3, #32
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098b8:	d901      	bls.n	80098be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e006      	b.n	80098cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	f003 0320 	and.w	r3, r3, #32
 80098c6:	2b20      	cmp	r3, #32
 80098c8:	d0f0      	beq.n	80098ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3301      	adds	r3, #1
 80098e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098f0:	d901      	bls.n	80098f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e018      	b.n	8009928 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	daf2      	bge.n	80098e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2210      	movs	r2, #16
 8009906:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3301      	adds	r3, #1
 800990c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009914:	d901      	bls.n	800991a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009916:	2303      	movs	r3, #3
 8009918:	e006      	b.n	8009928 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f003 0310 	and.w	r3, r3, #16
 8009922:	2b10      	cmp	r3, #16
 8009924:	d0f0      	beq.n	8009908 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009954:	4313      	orrs	r3, r2
 8009956:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009966:	b480      	push	{r7}
 8009968:	b085      	sub	sp, #20
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009980:	f023 0303 	bic.w	r3, r3, #3
 8009984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009994:	f043 0302 	orr.w	r3, r3, #2
 8009998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	f003 0301 	and.w	r3, r3, #1
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099cc:	2300      	movs	r3, #0
 80099ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3301      	adds	r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099dc:	d901      	bls.n	80099e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e01b      	b.n	8009a1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	daf2      	bge.n	80099d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	f043 0201 	orr.w	r2, r3, #1
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3301      	adds	r3, #1
 80099fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a06:	d901      	bls.n	8009a0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e006      	b.n	8009a1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d0f0      	beq.n	80099fa <USB_CoreReset+0x36>

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
	...

08009a28 <siprintf>:
 8009a28:	b40e      	push	{r1, r2, r3}
 8009a2a:	b500      	push	{lr}
 8009a2c:	b09c      	sub	sp, #112	@ 0x70
 8009a2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009a30:	9002      	str	r0, [sp, #8]
 8009a32:	9006      	str	r0, [sp, #24]
 8009a34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a38:	4809      	ldr	r0, [pc, #36]	@ (8009a60 <siprintf+0x38>)
 8009a3a:	9107      	str	r1, [sp, #28]
 8009a3c:	9104      	str	r1, [sp, #16]
 8009a3e:	4909      	ldr	r1, [pc, #36]	@ (8009a64 <siprintf+0x3c>)
 8009a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a44:	9105      	str	r1, [sp, #20]
 8009a46:	6800      	ldr	r0, [r0, #0]
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	a902      	add	r1, sp, #8
 8009a4c:	f000 f994 	bl	8009d78 <_svfiprintf_r>
 8009a50:	9b02      	ldr	r3, [sp, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	701a      	strb	r2, [r3, #0]
 8009a56:	b01c      	add	sp, #112	@ 0x70
 8009a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a5c:	b003      	add	sp, #12
 8009a5e:	4770      	bx	lr
 8009a60:	24000010 	.word	0x24000010
 8009a64:	ffff0208 	.word	0xffff0208

08009a68 <memset>:
 8009a68:	4402      	add	r2, r0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d100      	bne.n	8009a72 <memset+0xa>
 8009a70:	4770      	bx	lr
 8009a72:	f803 1b01 	strb.w	r1, [r3], #1
 8009a76:	e7f9      	b.n	8009a6c <memset+0x4>

08009a78 <__errno>:
 8009a78:	4b01      	ldr	r3, [pc, #4]	@ (8009a80 <__errno+0x8>)
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	24000010 	.word	0x24000010

08009a84 <__libc_init_array>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	4d0d      	ldr	r5, [pc, #52]	@ (8009abc <__libc_init_array+0x38>)
 8009a88:	4c0d      	ldr	r4, [pc, #52]	@ (8009ac0 <__libc_init_array+0x3c>)
 8009a8a:	1b64      	subs	r4, r4, r5
 8009a8c:	10a4      	asrs	r4, r4, #2
 8009a8e:	2600      	movs	r6, #0
 8009a90:	42a6      	cmp	r6, r4
 8009a92:	d109      	bne.n	8009aa8 <__libc_init_array+0x24>
 8009a94:	4d0b      	ldr	r5, [pc, #44]	@ (8009ac4 <__libc_init_array+0x40>)
 8009a96:	4c0c      	ldr	r4, [pc, #48]	@ (8009ac8 <__libc_init_array+0x44>)
 8009a98:	f000 fc66 	bl	800a368 <_init>
 8009a9c:	1b64      	subs	r4, r4, r5
 8009a9e:	10a4      	asrs	r4, r4, #2
 8009aa0:	2600      	movs	r6, #0
 8009aa2:	42a6      	cmp	r6, r4
 8009aa4:	d105      	bne.n	8009ab2 <__libc_init_array+0x2e>
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}
 8009aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aac:	4798      	blx	r3
 8009aae:	3601      	adds	r6, #1
 8009ab0:	e7ee      	b.n	8009a90 <__libc_init_array+0xc>
 8009ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ab6:	4798      	blx	r3
 8009ab8:	3601      	adds	r6, #1
 8009aba:	e7f2      	b.n	8009aa2 <__libc_init_array+0x1e>
 8009abc:	0800a4b4 	.word	0x0800a4b4
 8009ac0:	0800a4b4 	.word	0x0800a4b4
 8009ac4:	0800a4b4 	.word	0x0800a4b4
 8009ac8:	0800a4b8 	.word	0x0800a4b8

08009acc <__retarget_lock_acquire_recursive>:
 8009acc:	4770      	bx	lr

08009ace <__retarget_lock_release_recursive>:
 8009ace:	4770      	bx	lr

08009ad0 <_free_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	d041      	beq.n	8009b5c <_free_r+0x8c>
 8009ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009adc:	1f0c      	subs	r4, r1, #4
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	bfb8      	it	lt
 8009ae2:	18e4      	addlt	r4, r4, r3
 8009ae4:	f000 f8e0 	bl	8009ca8 <__malloc_lock>
 8009ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b60 <_free_r+0x90>)
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	b933      	cbnz	r3, 8009afc <_free_r+0x2c>
 8009aee:	6063      	str	r3, [r4, #4]
 8009af0:	6014      	str	r4, [r2, #0]
 8009af2:	4628      	mov	r0, r5
 8009af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009af8:	f000 b8dc 	b.w	8009cb4 <__malloc_unlock>
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	d908      	bls.n	8009b12 <_free_r+0x42>
 8009b00:	6820      	ldr	r0, [r4, #0]
 8009b02:	1821      	adds	r1, r4, r0
 8009b04:	428b      	cmp	r3, r1
 8009b06:	bf01      	itttt	eq
 8009b08:	6819      	ldreq	r1, [r3, #0]
 8009b0a:	685b      	ldreq	r3, [r3, #4]
 8009b0c:	1809      	addeq	r1, r1, r0
 8009b0e:	6021      	streq	r1, [r4, #0]
 8009b10:	e7ed      	b.n	8009aee <_free_r+0x1e>
 8009b12:	461a      	mov	r2, r3
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	b10b      	cbz	r3, 8009b1c <_free_r+0x4c>
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	d9fa      	bls.n	8009b12 <_free_r+0x42>
 8009b1c:	6811      	ldr	r1, [r2, #0]
 8009b1e:	1850      	adds	r0, r2, r1
 8009b20:	42a0      	cmp	r0, r4
 8009b22:	d10b      	bne.n	8009b3c <_free_r+0x6c>
 8009b24:	6820      	ldr	r0, [r4, #0]
 8009b26:	4401      	add	r1, r0
 8009b28:	1850      	adds	r0, r2, r1
 8009b2a:	4283      	cmp	r3, r0
 8009b2c:	6011      	str	r1, [r2, #0]
 8009b2e:	d1e0      	bne.n	8009af2 <_free_r+0x22>
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	6053      	str	r3, [r2, #4]
 8009b36:	4408      	add	r0, r1
 8009b38:	6010      	str	r0, [r2, #0]
 8009b3a:	e7da      	b.n	8009af2 <_free_r+0x22>
 8009b3c:	d902      	bls.n	8009b44 <_free_r+0x74>
 8009b3e:	230c      	movs	r3, #12
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	e7d6      	b.n	8009af2 <_free_r+0x22>
 8009b44:	6820      	ldr	r0, [r4, #0]
 8009b46:	1821      	adds	r1, r4, r0
 8009b48:	428b      	cmp	r3, r1
 8009b4a:	bf04      	itt	eq
 8009b4c:	6819      	ldreq	r1, [r3, #0]
 8009b4e:	685b      	ldreq	r3, [r3, #4]
 8009b50:	6063      	str	r3, [r4, #4]
 8009b52:	bf04      	itt	eq
 8009b54:	1809      	addeq	r1, r1, r0
 8009b56:	6021      	streq	r1, [r4, #0]
 8009b58:	6054      	str	r4, [r2, #4]
 8009b5a:	e7ca      	b.n	8009af2 <_free_r+0x22>
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}
 8009b5e:	bf00      	nop
 8009b60:	24000824 	.word	0x24000824

08009b64 <sbrk_aligned>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4e0f      	ldr	r6, [pc, #60]	@ (8009ba4 <sbrk_aligned+0x40>)
 8009b68:	460c      	mov	r4, r1
 8009b6a:	6831      	ldr	r1, [r6, #0]
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	b911      	cbnz	r1, 8009b76 <sbrk_aligned+0x12>
 8009b70:	f000 fba6 	bl	800a2c0 <_sbrk_r>
 8009b74:	6030      	str	r0, [r6, #0]
 8009b76:	4621      	mov	r1, r4
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f000 fba1 	bl	800a2c0 <_sbrk_r>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d103      	bne.n	8009b8a <sbrk_aligned+0x26>
 8009b82:	f04f 34ff 	mov.w	r4, #4294967295
 8009b86:	4620      	mov	r0, r4
 8009b88:	bd70      	pop	{r4, r5, r6, pc}
 8009b8a:	1cc4      	adds	r4, r0, #3
 8009b8c:	f024 0403 	bic.w	r4, r4, #3
 8009b90:	42a0      	cmp	r0, r4
 8009b92:	d0f8      	beq.n	8009b86 <sbrk_aligned+0x22>
 8009b94:	1a21      	subs	r1, r4, r0
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 fb92 	bl	800a2c0 <_sbrk_r>
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d1f2      	bne.n	8009b86 <sbrk_aligned+0x22>
 8009ba0:	e7ef      	b.n	8009b82 <sbrk_aligned+0x1e>
 8009ba2:	bf00      	nop
 8009ba4:	24000820 	.word	0x24000820

08009ba8 <_malloc_r>:
 8009ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bac:	1ccd      	adds	r5, r1, #3
 8009bae:	f025 0503 	bic.w	r5, r5, #3
 8009bb2:	3508      	adds	r5, #8
 8009bb4:	2d0c      	cmp	r5, #12
 8009bb6:	bf38      	it	cc
 8009bb8:	250c      	movcc	r5, #12
 8009bba:	2d00      	cmp	r5, #0
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	db01      	blt.n	8009bc4 <_malloc_r+0x1c>
 8009bc0:	42a9      	cmp	r1, r5
 8009bc2:	d904      	bls.n	8009bce <_malloc_r+0x26>
 8009bc4:	230c      	movs	r3, #12
 8009bc6:	6033      	str	r3, [r6, #0]
 8009bc8:	2000      	movs	r0, #0
 8009bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ca4 <_malloc_r+0xfc>
 8009bd2:	f000 f869 	bl	8009ca8 <__malloc_lock>
 8009bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8009bda:	461c      	mov	r4, r3
 8009bdc:	bb44      	cbnz	r4, 8009c30 <_malloc_r+0x88>
 8009bde:	4629      	mov	r1, r5
 8009be0:	4630      	mov	r0, r6
 8009be2:	f7ff ffbf 	bl	8009b64 <sbrk_aligned>
 8009be6:	1c43      	adds	r3, r0, #1
 8009be8:	4604      	mov	r4, r0
 8009bea:	d158      	bne.n	8009c9e <_malloc_r+0xf6>
 8009bec:	f8d8 4000 	ldr.w	r4, [r8]
 8009bf0:	4627      	mov	r7, r4
 8009bf2:	2f00      	cmp	r7, #0
 8009bf4:	d143      	bne.n	8009c7e <_malloc_r+0xd6>
 8009bf6:	2c00      	cmp	r4, #0
 8009bf8:	d04b      	beq.n	8009c92 <_malloc_r+0xea>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	4630      	mov	r0, r6
 8009c00:	eb04 0903 	add.w	r9, r4, r3
 8009c04:	f000 fb5c 	bl	800a2c0 <_sbrk_r>
 8009c08:	4581      	cmp	r9, r0
 8009c0a:	d142      	bne.n	8009c92 <_malloc_r+0xea>
 8009c0c:	6821      	ldr	r1, [r4, #0]
 8009c0e:	1a6d      	subs	r5, r5, r1
 8009c10:	4629      	mov	r1, r5
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7ff ffa6 	bl	8009b64 <sbrk_aligned>
 8009c18:	3001      	adds	r0, #1
 8009c1a:	d03a      	beq.n	8009c92 <_malloc_r+0xea>
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	442b      	add	r3, r5
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	f8d8 3000 	ldr.w	r3, [r8]
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	bb62      	cbnz	r2, 8009c84 <_malloc_r+0xdc>
 8009c2a:	f8c8 7000 	str.w	r7, [r8]
 8009c2e:	e00f      	b.n	8009c50 <_malloc_r+0xa8>
 8009c30:	6822      	ldr	r2, [r4, #0]
 8009c32:	1b52      	subs	r2, r2, r5
 8009c34:	d420      	bmi.n	8009c78 <_malloc_r+0xd0>
 8009c36:	2a0b      	cmp	r2, #11
 8009c38:	d917      	bls.n	8009c6a <_malloc_r+0xc2>
 8009c3a:	1961      	adds	r1, r4, r5
 8009c3c:	42a3      	cmp	r3, r4
 8009c3e:	6025      	str	r5, [r4, #0]
 8009c40:	bf18      	it	ne
 8009c42:	6059      	strne	r1, [r3, #4]
 8009c44:	6863      	ldr	r3, [r4, #4]
 8009c46:	bf08      	it	eq
 8009c48:	f8c8 1000 	streq.w	r1, [r8]
 8009c4c:	5162      	str	r2, [r4, r5]
 8009c4e:	604b      	str	r3, [r1, #4]
 8009c50:	4630      	mov	r0, r6
 8009c52:	f000 f82f 	bl	8009cb4 <__malloc_unlock>
 8009c56:	f104 000b 	add.w	r0, r4, #11
 8009c5a:	1d23      	adds	r3, r4, #4
 8009c5c:	f020 0007 	bic.w	r0, r0, #7
 8009c60:	1ac2      	subs	r2, r0, r3
 8009c62:	bf1c      	itt	ne
 8009c64:	1a1b      	subne	r3, r3, r0
 8009c66:	50a3      	strne	r3, [r4, r2]
 8009c68:	e7af      	b.n	8009bca <_malloc_r+0x22>
 8009c6a:	6862      	ldr	r2, [r4, #4]
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	bf0c      	ite	eq
 8009c70:	f8c8 2000 	streq.w	r2, [r8]
 8009c74:	605a      	strne	r2, [r3, #4]
 8009c76:	e7eb      	b.n	8009c50 <_malloc_r+0xa8>
 8009c78:	4623      	mov	r3, r4
 8009c7a:	6864      	ldr	r4, [r4, #4]
 8009c7c:	e7ae      	b.n	8009bdc <_malloc_r+0x34>
 8009c7e:	463c      	mov	r4, r7
 8009c80:	687f      	ldr	r7, [r7, #4]
 8009c82:	e7b6      	b.n	8009bf2 <_malloc_r+0x4a>
 8009c84:	461a      	mov	r2, r3
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	42a3      	cmp	r3, r4
 8009c8a:	d1fb      	bne.n	8009c84 <_malloc_r+0xdc>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	6053      	str	r3, [r2, #4]
 8009c90:	e7de      	b.n	8009c50 <_malloc_r+0xa8>
 8009c92:	230c      	movs	r3, #12
 8009c94:	6033      	str	r3, [r6, #0]
 8009c96:	4630      	mov	r0, r6
 8009c98:	f000 f80c 	bl	8009cb4 <__malloc_unlock>
 8009c9c:	e794      	b.n	8009bc8 <_malloc_r+0x20>
 8009c9e:	6005      	str	r5, [r0, #0]
 8009ca0:	e7d6      	b.n	8009c50 <_malloc_r+0xa8>
 8009ca2:	bf00      	nop
 8009ca4:	24000824 	.word	0x24000824

08009ca8 <__malloc_lock>:
 8009ca8:	4801      	ldr	r0, [pc, #4]	@ (8009cb0 <__malloc_lock+0x8>)
 8009caa:	f7ff bf0f 	b.w	8009acc <__retarget_lock_acquire_recursive>
 8009cae:	bf00      	nop
 8009cb0:	2400081c 	.word	0x2400081c

08009cb4 <__malloc_unlock>:
 8009cb4:	4801      	ldr	r0, [pc, #4]	@ (8009cbc <__malloc_unlock+0x8>)
 8009cb6:	f7ff bf0a 	b.w	8009ace <__retarget_lock_release_recursive>
 8009cba:	bf00      	nop
 8009cbc:	2400081c 	.word	0x2400081c

08009cc0 <__ssputs_r>:
 8009cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	688e      	ldr	r6, [r1, #8]
 8009cc6:	461f      	mov	r7, r3
 8009cc8:	42be      	cmp	r6, r7
 8009cca:	680b      	ldr	r3, [r1, #0]
 8009ccc:	4682      	mov	sl, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	4690      	mov	r8, r2
 8009cd2:	d82d      	bhi.n	8009d30 <__ssputs_r+0x70>
 8009cd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cdc:	d026      	beq.n	8009d2c <__ssputs_r+0x6c>
 8009cde:	6965      	ldr	r5, [r4, #20]
 8009ce0:	6909      	ldr	r1, [r1, #16]
 8009ce2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ce6:	eba3 0901 	sub.w	r9, r3, r1
 8009cea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cee:	1c7b      	adds	r3, r7, #1
 8009cf0:	444b      	add	r3, r9
 8009cf2:	106d      	asrs	r5, r5, #1
 8009cf4:	429d      	cmp	r5, r3
 8009cf6:	bf38      	it	cc
 8009cf8:	461d      	movcc	r5, r3
 8009cfa:	0553      	lsls	r3, r2, #21
 8009cfc:	d527      	bpl.n	8009d4e <__ssputs_r+0x8e>
 8009cfe:	4629      	mov	r1, r5
 8009d00:	f7ff ff52 	bl	8009ba8 <_malloc_r>
 8009d04:	4606      	mov	r6, r0
 8009d06:	b360      	cbz	r0, 8009d62 <__ssputs_r+0xa2>
 8009d08:	6921      	ldr	r1, [r4, #16]
 8009d0a:	464a      	mov	r2, r9
 8009d0c:	f000 fae8 	bl	800a2e0 <memcpy>
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d1a:	81a3      	strh	r3, [r4, #12]
 8009d1c:	6126      	str	r6, [r4, #16]
 8009d1e:	6165      	str	r5, [r4, #20]
 8009d20:	444e      	add	r6, r9
 8009d22:	eba5 0509 	sub.w	r5, r5, r9
 8009d26:	6026      	str	r6, [r4, #0]
 8009d28:	60a5      	str	r5, [r4, #8]
 8009d2a:	463e      	mov	r6, r7
 8009d2c:	42be      	cmp	r6, r7
 8009d2e:	d900      	bls.n	8009d32 <__ssputs_r+0x72>
 8009d30:	463e      	mov	r6, r7
 8009d32:	6820      	ldr	r0, [r4, #0]
 8009d34:	4632      	mov	r2, r6
 8009d36:	4641      	mov	r1, r8
 8009d38:	f000 faa8 	bl	800a28c <memmove>
 8009d3c:	68a3      	ldr	r3, [r4, #8]
 8009d3e:	1b9b      	subs	r3, r3, r6
 8009d40:	60a3      	str	r3, [r4, #8]
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	4433      	add	r3, r6
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	2000      	movs	r0, #0
 8009d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d4e:	462a      	mov	r2, r5
 8009d50:	f000 fad4 	bl	800a2fc <_realloc_r>
 8009d54:	4606      	mov	r6, r0
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d1e0      	bne.n	8009d1c <__ssputs_r+0x5c>
 8009d5a:	6921      	ldr	r1, [r4, #16]
 8009d5c:	4650      	mov	r0, sl
 8009d5e:	f7ff feb7 	bl	8009ad0 <_free_r>
 8009d62:	230c      	movs	r3, #12
 8009d64:	f8ca 3000 	str.w	r3, [sl]
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	e7e9      	b.n	8009d4a <__ssputs_r+0x8a>
	...

08009d78 <_svfiprintf_r>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	4698      	mov	r8, r3
 8009d7e:	898b      	ldrh	r3, [r1, #12]
 8009d80:	061b      	lsls	r3, r3, #24
 8009d82:	b09d      	sub	sp, #116	@ 0x74
 8009d84:	4607      	mov	r7, r0
 8009d86:	460d      	mov	r5, r1
 8009d88:	4614      	mov	r4, r2
 8009d8a:	d510      	bpl.n	8009dae <_svfiprintf_r+0x36>
 8009d8c:	690b      	ldr	r3, [r1, #16]
 8009d8e:	b973      	cbnz	r3, 8009dae <_svfiprintf_r+0x36>
 8009d90:	2140      	movs	r1, #64	@ 0x40
 8009d92:	f7ff ff09 	bl	8009ba8 <_malloc_r>
 8009d96:	6028      	str	r0, [r5, #0]
 8009d98:	6128      	str	r0, [r5, #16]
 8009d9a:	b930      	cbnz	r0, 8009daa <_svfiprintf_r+0x32>
 8009d9c:	230c      	movs	r3, #12
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	b01d      	add	sp, #116	@ 0x74
 8009da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009daa:	2340      	movs	r3, #64	@ 0x40
 8009dac:	616b      	str	r3, [r5, #20]
 8009dae:	2300      	movs	r3, #0
 8009db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009db2:	2320      	movs	r3, #32
 8009db4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dbc:	2330      	movs	r3, #48	@ 0x30
 8009dbe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f5c <_svfiprintf_r+0x1e4>
 8009dc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dc6:	f04f 0901 	mov.w	r9, #1
 8009dca:	4623      	mov	r3, r4
 8009dcc:	469a      	mov	sl, r3
 8009dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd2:	b10a      	cbz	r2, 8009dd8 <_svfiprintf_r+0x60>
 8009dd4:	2a25      	cmp	r2, #37	@ 0x25
 8009dd6:	d1f9      	bne.n	8009dcc <_svfiprintf_r+0x54>
 8009dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8009ddc:	d00b      	beq.n	8009df6 <_svfiprintf_r+0x7e>
 8009dde:	465b      	mov	r3, fp
 8009de0:	4622      	mov	r2, r4
 8009de2:	4629      	mov	r1, r5
 8009de4:	4638      	mov	r0, r7
 8009de6:	f7ff ff6b 	bl	8009cc0 <__ssputs_r>
 8009dea:	3001      	adds	r0, #1
 8009dec:	f000 80a7 	beq.w	8009f3e <_svfiprintf_r+0x1c6>
 8009df0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df2:	445a      	add	r2, fp
 8009df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009df6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 809f 	beq.w	8009f3e <_svfiprintf_r+0x1c6>
 8009e00:	2300      	movs	r3, #0
 8009e02:	f04f 32ff 	mov.w	r2, #4294967295
 8009e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e0a:	f10a 0a01 	add.w	sl, sl, #1
 8009e0e:	9304      	str	r3, [sp, #16]
 8009e10:	9307      	str	r3, [sp, #28]
 8009e12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e16:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e18:	4654      	mov	r4, sl
 8009e1a:	2205      	movs	r2, #5
 8009e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e20:	484e      	ldr	r0, [pc, #312]	@ (8009f5c <_svfiprintf_r+0x1e4>)
 8009e22:	f7f6 fa75 	bl	8000310 <memchr>
 8009e26:	9a04      	ldr	r2, [sp, #16]
 8009e28:	b9d8      	cbnz	r0, 8009e62 <_svfiprintf_r+0xea>
 8009e2a:	06d0      	lsls	r0, r2, #27
 8009e2c:	bf44      	itt	mi
 8009e2e:	2320      	movmi	r3, #32
 8009e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e34:	0711      	lsls	r1, r2, #28
 8009e36:	bf44      	itt	mi
 8009e38:	232b      	movmi	r3, #43	@ 0x2b
 8009e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e44:	d015      	beq.n	8009e72 <_svfiprintf_r+0xfa>
 8009e46:	9a07      	ldr	r2, [sp, #28]
 8009e48:	4654      	mov	r4, sl
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f04f 0c0a 	mov.w	ip, #10
 8009e50:	4621      	mov	r1, r4
 8009e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e56:	3b30      	subs	r3, #48	@ 0x30
 8009e58:	2b09      	cmp	r3, #9
 8009e5a:	d94b      	bls.n	8009ef4 <_svfiprintf_r+0x17c>
 8009e5c:	b1b0      	cbz	r0, 8009e8c <_svfiprintf_r+0x114>
 8009e5e:	9207      	str	r2, [sp, #28]
 8009e60:	e014      	b.n	8009e8c <_svfiprintf_r+0x114>
 8009e62:	eba0 0308 	sub.w	r3, r0, r8
 8009e66:	fa09 f303 	lsl.w	r3, r9, r3
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	46a2      	mov	sl, r4
 8009e70:	e7d2      	b.n	8009e18 <_svfiprintf_r+0xa0>
 8009e72:	9b03      	ldr	r3, [sp, #12]
 8009e74:	1d19      	adds	r1, r3, #4
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	9103      	str	r1, [sp, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	bfbb      	ittet	lt
 8009e7e:	425b      	neglt	r3, r3
 8009e80:	f042 0202 	orrlt.w	r2, r2, #2
 8009e84:	9307      	strge	r3, [sp, #28]
 8009e86:	9307      	strlt	r3, [sp, #28]
 8009e88:	bfb8      	it	lt
 8009e8a:	9204      	strlt	r2, [sp, #16]
 8009e8c:	7823      	ldrb	r3, [r4, #0]
 8009e8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e90:	d10a      	bne.n	8009ea8 <_svfiprintf_r+0x130>
 8009e92:	7863      	ldrb	r3, [r4, #1]
 8009e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e96:	d132      	bne.n	8009efe <_svfiprintf_r+0x186>
 8009e98:	9b03      	ldr	r3, [sp, #12]
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	9203      	str	r2, [sp, #12]
 8009ea0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ea4:	3402      	adds	r4, #2
 8009ea6:	9305      	str	r3, [sp, #20]
 8009ea8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f6c <_svfiprintf_r+0x1f4>
 8009eac:	7821      	ldrb	r1, [r4, #0]
 8009eae:	2203      	movs	r2, #3
 8009eb0:	4650      	mov	r0, sl
 8009eb2:	f7f6 fa2d 	bl	8000310 <memchr>
 8009eb6:	b138      	cbz	r0, 8009ec8 <_svfiprintf_r+0x150>
 8009eb8:	9b04      	ldr	r3, [sp, #16]
 8009eba:	eba0 000a 	sub.w	r0, r0, sl
 8009ebe:	2240      	movs	r2, #64	@ 0x40
 8009ec0:	4082      	lsls	r2, r0
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	3401      	adds	r4, #1
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ecc:	4824      	ldr	r0, [pc, #144]	@ (8009f60 <_svfiprintf_r+0x1e8>)
 8009ece:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ed2:	2206      	movs	r2, #6
 8009ed4:	f7f6 fa1c 	bl	8000310 <memchr>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d036      	beq.n	8009f4a <_svfiprintf_r+0x1d2>
 8009edc:	4b21      	ldr	r3, [pc, #132]	@ (8009f64 <_svfiprintf_r+0x1ec>)
 8009ede:	bb1b      	cbnz	r3, 8009f28 <_svfiprintf_r+0x1b0>
 8009ee0:	9b03      	ldr	r3, [sp, #12]
 8009ee2:	3307      	adds	r3, #7
 8009ee4:	f023 0307 	bic.w	r3, r3, #7
 8009ee8:	3308      	adds	r3, #8
 8009eea:	9303      	str	r3, [sp, #12]
 8009eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eee:	4433      	add	r3, r6
 8009ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef2:	e76a      	b.n	8009dca <_svfiprintf_r+0x52>
 8009ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ef8:	460c      	mov	r4, r1
 8009efa:	2001      	movs	r0, #1
 8009efc:	e7a8      	b.n	8009e50 <_svfiprintf_r+0xd8>
 8009efe:	2300      	movs	r3, #0
 8009f00:	3401      	adds	r4, #1
 8009f02:	9305      	str	r3, [sp, #20]
 8009f04:	4619      	mov	r1, r3
 8009f06:	f04f 0c0a 	mov.w	ip, #10
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f10:	3a30      	subs	r2, #48	@ 0x30
 8009f12:	2a09      	cmp	r2, #9
 8009f14:	d903      	bls.n	8009f1e <_svfiprintf_r+0x1a6>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0c6      	beq.n	8009ea8 <_svfiprintf_r+0x130>
 8009f1a:	9105      	str	r1, [sp, #20]
 8009f1c:	e7c4      	b.n	8009ea8 <_svfiprintf_r+0x130>
 8009f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f22:	4604      	mov	r4, r0
 8009f24:	2301      	movs	r3, #1
 8009f26:	e7f0      	b.n	8009f0a <_svfiprintf_r+0x192>
 8009f28:	ab03      	add	r3, sp, #12
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	462a      	mov	r2, r5
 8009f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f68 <_svfiprintf_r+0x1f0>)
 8009f30:	a904      	add	r1, sp, #16
 8009f32:	4638      	mov	r0, r7
 8009f34:	f3af 8000 	nop.w
 8009f38:	1c42      	adds	r2, r0, #1
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	d1d6      	bne.n	8009eec <_svfiprintf_r+0x174>
 8009f3e:	89ab      	ldrh	r3, [r5, #12]
 8009f40:	065b      	lsls	r3, r3, #25
 8009f42:	f53f af2d 	bmi.w	8009da0 <_svfiprintf_r+0x28>
 8009f46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f48:	e72c      	b.n	8009da4 <_svfiprintf_r+0x2c>
 8009f4a:	ab03      	add	r3, sp, #12
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	462a      	mov	r2, r5
 8009f50:	4b05      	ldr	r3, [pc, #20]	@ (8009f68 <_svfiprintf_r+0x1f0>)
 8009f52:	a904      	add	r1, sp, #16
 8009f54:	4638      	mov	r0, r7
 8009f56:	f000 f879 	bl	800a04c <_printf_i>
 8009f5a:	e7ed      	b.n	8009f38 <_svfiprintf_r+0x1c0>
 8009f5c:	0800a478 	.word	0x0800a478
 8009f60:	0800a482 	.word	0x0800a482
 8009f64:	00000000 	.word	0x00000000
 8009f68:	08009cc1 	.word	0x08009cc1
 8009f6c:	0800a47e 	.word	0x0800a47e

08009f70 <_printf_common>:
 8009f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	4616      	mov	r6, r2
 8009f76:	4698      	mov	r8, r3
 8009f78:	688a      	ldr	r2, [r1, #8]
 8009f7a:	690b      	ldr	r3, [r1, #16]
 8009f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f80:	4293      	cmp	r3, r2
 8009f82:	bfb8      	it	lt
 8009f84:	4613      	movlt	r3, r2
 8009f86:	6033      	str	r3, [r6, #0]
 8009f88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	b10a      	cbz	r2, 8009f96 <_printf_common+0x26>
 8009f92:	3301      	adds	r3, #1
 8009f94:	6033      	str	r3, [r6, #0]
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	0699      	lsls	r1, r3, #26
 8009f9a:	bf42      	ittt	mi
 8009f9c:	6833      	ldrmi	r3, [r6, #0]
 8009f9e:	3302      	addmi	r3, #2
 8009fa0:	6033      	strmi	r3, [r6, #0]
 8009fa2:	6825      	ldr	r5, [r4, #0]
 8009fa4:	f015 0506 	ands.w	r5, r5, #6
 8009fa8:	d106      	bne.n	8009fb8 <_printf_common+0x48>
 8009faa:	f104 0a19 	add.w	sl, r4, #25
 8009fae:	68e3      	ldr	r3, [r4, #12]
 8009fb0:	6832      	ldr	r2, [r6, #0]
 8009fb2:	1a9b      	subs	r3, r3, r2
 8009fb4:	42ab      	cmp	r3, r5
 8009fb6:	dc26      	bgt.n	800a006 <_printf_common+0x96>
 8009fb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fbc:	6822      	ldr	r2, [r4, #0]
 8009fbe:	3b00      	subs	r3, #0
 8009fc0:	bf18      	it	ne
 8009fc2:	2301      	movne	r3, #1
 8009fc4:	0692      	lsls	r2, r2, #26
 8009fc6:	d42b      	bmi.n	800a020 <_printf_common+0xb0>
 8009fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fcc:	4641      	mov	r1, r8
 8009fce:	4638      	mov	r0, r7
 8009fd0:	47c8      	blx	r9
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d01e      	beq.n	800a014 <_printf_common+0xa4>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	6922      	ldr	r2, [r4, #16]
 8009fda:	f003 0306 	and.w	r3, r3, #6
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	bf02      	ittt	eq
 8009fe2:	68e5      	ldreq	r5, [r4, #12]
 8009fe4:	6833      	ldreq	r3, [r6, #0]
 8009fe6:	1aed      	subeq	r5, r5, r3
 8009fe8:	68a3      	ldr	r3, [r4, #8]
 8009fea:	bf0c      	ite	eq
 8009fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ff0:	2500      	movne	r5, #0
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	bfc4      	itt	gt
 8009ff6:	1a9b      	subgt	r3, r3, r2
 8009ff8:	18ed      	addgt	r5, r5, r3
 8009ffa:	2600      	movs	r6, #0
 8009ffc:	341a      	adds	r4, #26
 8009ffe:	42b5      	cmp	r5, r6
 800a000:	d11a      	bne.n	800a038 <_printf_common+0xc8>
 800a002:	2000      	movs	r0, #0
 800a004:	e008      	b.n	800a018 <_printf_common+0xa8>
 800a006:	2301      	movs	r3, #1
 800a008:	4652      	mov	r2, sl
 800a00a:	4641      	mov	r1, r8
 800a00c:	4638      	mov	r0, r7
 800a00e:	47c8      	blx	r9
 800a010:	3001      	adds	r0, #1
 800a012:	d103      	bne.n	800a01c <_printf_common+0xac>
 800a014:	f04f 30ff 	mov.w	r0, #4294967295
 800a018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01c:	3501      	adds	r5, #1
 800a01e:	e7c6      	b.n	8009fae <_printf_common+0x3e>
 800a020:	18e1      	adds	r1, r4, r3
 800a022:	1c5a      	adds	r2, r3, #1
 800a024:	2030      	movs	r0, #48	@ 0x30
 800a026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a02a:	4422      	add	r2, r4
 800a02c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a034:	3302      	adds	r3, #2
 800a036:	e7c7      	b.n	8009fc8 <_printf_common+0x58>
 800a038:	2301      	movs	r3, #1
 800a03a:	4622      	mov	r2, r4
 800a03c:	4641      	mov	r1, r8
 800a03e:	4638      	mov	r0, r7
 800a040:	47c8      	blx	r9
 800a042:	3001      	adds	r0, #1
 800a044:	d0e6      	beq.n	800a014 <_printf_common+0xa4>
 800a046:	3601      	adds	r6, #1
 800a048:	e7d9      	b.n	8009ffe <_printf_common+0x8e>
	...

0800a04c <_printf_i>:
 800a04c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a050:	7e0f      	ldrb	r7, [r1, #24]
 800a052:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a054:	2f78      	cmp	r7, #120	@ 0x78
 800a056:	4691      	mov	r9, r2
 800a058:	4680      	mov	r8, r0
 800a05a:	460c      	mov	r4, r1
 800a05c:	469a      	mov	sl, r3
 800a05e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a062:	d807      	bhi.n	800a074 <_printf_i+0x28>
 800a064:	2f62      	cmp	r7, #98	@ 0x62
 800a066:	d80a      	bhi.n	800a07e <_printf_i+0x32>
 800a068:	2f00      	cmp	r7, #0
 800a06a:	f000 80d2 	beq.w	800a212 <_printf_i+0x1c6>
 800a06e:	2f58      	cmp	r7, #88	@ 0x58
 800a070:	f000 80b9 	beq.w	800a1e6 <_printf_i+0x19a>
 800a074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a07c:	e03a      	b.n	800a0f4 <_printf_i+0xa8>
 800a07e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a082:	2b15      	cmp	r3, #21
 800a084:	d8f6      	bhi.n	800a074 <_printf_i+0x28>
 800a086:	a101      	add	r1, pc, #4	@ (adr r1, 800a08c <_printf_i+0x40>)
 800a088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a08c:	0800a0e5 	.word	0x0800a0e5
 800a090:	0800a0f9 	.word	0x0800a0f9
 800a094:	0800a075 	.word	0x0800a075
 800a098:	0800a075 	.word	0x0800a075
 800a09c:	0800a075 	.word	0x0800a075
 800a0a0:	0800a075 	.word	0x0800a075
 800a0a4:	0800a0f9 	.word	0x0800a0f9
 800a0a8:	0800a075 	.word	0x0800a075
 800a0ac:	0800a075 	.word	0x0800a075
 800a0b0:	0800a075 	.word	0x0800a075
 800a0b4:	0800a075 	.word	0x0800a075
 800a0b8:	0800a1f9 	.word	0x0800a1f9
 800a0bc:	0800a123 	.word	0x0800a123
 800a0c0:	0800a1b3 	.word	0x0800a1b3
 800a0c4:	0800a075 	.word	0x0800a075
 800a0c8:	0800a075 	.word	0x0800a075
 800a0cc:	0800a21b 	.word	0x0800a21b
 800a0d0:	0800a075 	.word	0x0800a075
 800a0d4:	0800a123 	.word	0x0800a123
 800a0d8:	0800a075 	.word	0x0800a075
 800a0dc:	0800a075 	.word	0x0800a075
 800a0e0:	0800a1bb 	.word	0x0800a1bb
 800a0e4:	6833      	ldr	r3, [r6, #0]
 800a0e6:	1d1a      	adds	r2, r3, #4
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6032      	str	r2, [r6, #0]
 800a0ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e09d      	b.n	800a234 <_printf_i+0x1e8>
 800a0f8:	6833      	ldr	r3, [r6, #0]
 800a0fa:	6820      	ldr	r0, [r4, #0]
 800a0fc:	1d19      	adds	r1, r3, #4
 800a0fe:	6031      	str	r1, [r6, #0]
 800a100:	0606      	lsls	r6, r0, #24
 800a102:	d501      	bpl.n	800a108 <_printf_i+0xbc>
 800a104:	681d      	ldr	r5, [r3, #0]
 800a106:	e003      	b.n	800a110 <_printf_i+0xc4>
 800a108:	0645      	lsls	r5, r0, #25
 800a10a:	d5fb      	bpl.n	800a104 <_printf_i+0xb8>
 800a10c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a110:	2d00      	cmp	r5, #0
 800a112:	da03      	bge.n	800a11c <_printf_i+0xd0>
 800a114:	232d      	movs	r3, #45	@ 0x2d
 800a116:	426d      	negs	r5, r5
 800a118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a11c:	4859      	ldr	r0, [pc, #356]	@ (800a284 <_printf_i+0x238>)
 800a11e:	230a      	movs	r3, #10
 800a120:	e011      	b.n	800a146 <_printf_i+0xfa>
 800a122:	6821      	ldr	r1, [r4, #0]
 800a124:	6833      	ldr	r3, [r6, #0]
 800a126:	0608      	lsls	r0, r1, #24
 800a128:	f853 5b04 	ldr.w	r5, [r3], #4
 800a12c:	d402      	bmi.n	800a134 <_printf_i+0xe8>
 800a12e:	0649      	lsls	r1, r1, #25
 800a130:	bf48      	it	mi
 800a132:	b2ad      	uxthmi	r5, r5
 800a134:	2f6f      	cmp	r7, #111	@ 0x6f
 800a136:	4853      	ldr	r0, [pc, #332]	@ (800a284 <_printf_i+0x238>)
 800a138:	6033      	str	r3, [r6, #0]
 800a13a:	bf14      	ite	ne
 800a13c:	230a      	movne	r3, #10
 800a13e:	2308      	moveq	r3, #8
 800a140:	2100      	movs	r1, #0
 800a142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a146:	6866      	ldr	r6, [r4, #4]
 800a148:	60a6      	str	r6, [r4, #8]
 800a14a:	2e00      	cmp	r6, #0
 800a14c:	bfa2      	ittt	ge
 800a14e:	6821      	ldrge	r1, [r4, #0]
 800a150:	f021 0104 	bicge.w	r1, r1, #4
 800a154:	6021      	strge	r1, [r4, #0]
 800a156:	b90d      	cbnz	r5, 800a15c <_printf_i+0x110>
 800a158:	2e00      	cmp	r6, #0
 800a15a:	d04b      	beq.n	800a1f4 <_printf_i+0x1a8>
 800a15c:	4616      	mov	r6, r2
 800a15e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a162:	fb03 5711 	mls	r7, r3, r1, r5
 800a166:	5dc7      	ldrb	r7, [r0, r7]
 800a168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a16c:	462f      	mov	r7, r5
 800a16e:	42bb      	cmp	r3, r7
 800a170:	460d      	mov	r5, r1
 800a172:	d9f4      	bls.n	800a15e <_printf_i+0x112>
 800a174:	2b08      	cmp	r3, #8
 800a176:	d10b      	bne.n	800a190 <_printf_i+0x144>
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	07df      	lsls	r7, r3, #31
 800a17c:	d508      	bpl.n	800a190 <_printf_i+0x144>
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	6861      	ldr	r1, [r4, #4]
 800a182:	4299      	cmp	r1, r3
 800a184:	bfde      	ittt	le
 800a186:	2330      	movle	r3, #48	@ 0x30
 800a188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a18c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a190:	1b92      	subs	r2, r2, r6
 800a192:	6122      	str	r2, [r4, #16]
 800a194:	f8cd a000 	str.w	sl, [sp]
 800a198:	464b      	mov	r3, r9
 800a19a:	aa03      	add	r2, sp, #12
 800a19c:	4621      	mov	r1, r4
 800a19e:	4640      	mov	r0, r8
 800a1a0:	f7ff fee6 	bl	8009f70 <_printf_common>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d14a      	bne.n	800a23e <_printf_i+0x1f2>
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ac:	b004      	add	sp, #16
 800a1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	f043 0320 	orr.w	r3, r3, #32
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	4833      	ldr	r0, [pc, #204]	@ (800a288 <_printf_i+0x23c>)
 800a1bc:	2778      	movs	r7, #120	@ 0x78
 800a1be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	6831      	ldr	r1, [r6, #0]
 800a1c6:	061f      	lsls	r7, r3, #24
 800a1c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1cc:	d402      	bmi.n	800a1d4 <_printf_i+0x188>
 800a1ce:	065f      	lsls	r7, r3, #25
 800a1d0:	bf48      	it	mi
 800a1d2:	b2ad      	uxthmi	r5, r5
 800a1d4:	6031      	str	r1, [r6, #0]
 800a1d6:	07d9      	lsls	r1, r3, #31
 800a1d8:	bf44      	itt	mi
 800a1da:	f043 0320 	orrmi.w	r3, r3, #32
 800a1de:	6023      	strmi	r3, [r4, #0]
 800a1e0:	b11d      	cbz	r5, 800a1ea <_printf_i+0x19e>
 800a1e2:	2310      	movs	r3, #16
 800a1e4:	e7ac      	b.n	800a140 <_printf_i+0xf4>
 800a1e6:	4827      	ldr	r0, [pc, #156]	@ (800a284 <_printf_i+0x238>)
 800a1e8:	e7e9      	b.n	800a1be <_printf_i+0x172>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	f023 0320 	bic.w	r3, r3, #32
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	e7f6      	b.n	800a1e2 <_printf_i+0x196>
 800a1f4:	4616      	mov	r6, r2
 800a1f6:	e7bd      	b.n	800a174 <_printf_i+0x128>
 800a1f8:	6833      	ldr	r3, [r6, #0]
 800a1fa:	6825      	ldr	r5, [r4, #0]
 800a1fc:	6961      	ldr	r1, [r4, #20]
 800a1fe:	1d18      	adds	r0, r3, #4
 800a200:	6030      	str	r0, [r6, #0]
 800a202:	062e      	lsls	r6, r5, #24
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	d501      	bpl.n	800a20c <_printf_i+0x1c0>
 800a208:	6019      	str	r1, [r3, #0]
 800a20a:	e002      	b.n	800a212 <_printf_i+0x1c6>
 800a20c:	0668      	lsls	r0, r5, #25
 800a20e:	d5fb      	bpl.n	800a208 <_printf_i+0x1bc>
 800a210:	8019      	strh	r1, [r3, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	6123      	str	r3, [r4, #16]
 800a216:	4616      	mov	r6, r2
 800a218:	e7bc      	b.n	800a194 <_printf_i+0x148>
 800a21a:	6833      	ldr	r3, [r6, #0]
 800a21c:	1d1a      	adds	r2, r3, #4
 800a21e:	6032      	str	r2, [r6, #0]
 800a220:	681e      	ldr	r6, [r3, #0]
 800a222:	6862      	ldr	r2, [r4, #4]
 800a224:	2100      	movs	r1, #0
 800a226:	4630      	mov	r0, r6
 800a228:	f7f6 f872 	bl	8000310 <memchr>
 800a22c:	b108      	cbz	r0, 800a232 <_printf_i+0x1e6>
 800a22e:	1b80      	subs	r0, r0, r6
 800a230:	6060      	str	r0, [r4, #4]
 800a232:	6863      	ldr	r3, [r4, #4]
 800a234:	6123      	str	r3, [r4, #16]
 800a236:	2300      	movs	r3, #0
 800a238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a23c:	e7aa      	b.n	800a194 <_printf_i+0x148>
 800a23e:	6923      	ldr	r3, [r4, #16]
 800a240:	4632      	mov	r2, r6
 800a242:	4649      	mov	r1, r9
 800a244:	4640      	mov	r0, r8
 800a246:	47d0      	blx	sl
 800a248:	3001      	adds	r0, #1
 800a24a:	d0ad      	beq.n	800a1a8 <_printf_i+0x15c>
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	079b      	lsls	r3, r3, #30
 800a250:	d413      	bmi.n	800a27a <_printf_i+0x22e>
 800a252:	68e0      	ldr	r0, [r4, #12]
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	4298      	cmp	r0, r3
 800a258:	bfb8      	it	lt
 800a25a:	4618      	movlt	r0, r3
 800a25c:	e7a6      	b.n	800a1ac <_printf_i+0x160>
 800a25e:	2301      	movs	r3, #1
 800a260:	4632      	mov	r2, r6
 800a262:	4649      	mov	r1, r9
 800a264:	4640      	mov	r0, r8
 800a266:	47d0      	blx	sl
 800a268:	3001      	adds	r0, #1
 800a26a:	d09d      	beq.n	800a1a8 <_printf_i+0x15c>
 800a26c:	3501      	adds	r5, #1
 800a26e:	68e3      	ldr	r3, [r4, #12]
 800a270:	9903      	ldr	r1, [sp, #12]
 800a272:	1a5b      	subs	r3, r3, r1
 800a274:	42ab      	cmp	r3, r5
 800a276:	dcf2      	bgt.n	800a25e <_printf_i+0x212>
 800a278:	e7eb      	b.n	800a252 <_printf_i+0x206>
 800a27a:	2500      	movs	r5, #0
 800a27c:	f104 0619 	add.w	r6, r4, #25
 800a280:	e7f5      	b.n	800a26e <_printf_i+0x222>
 800a282:	bf00      	nop
 800a284:	0800a489 	.word	0x0800a489
 800a288:	0800a49a 	.word	0x0800a49a

0800a28c <memmove>:
 800a28c:	4288      	cmp	r0, r1
 800a28e:	b510      	push	{r4, lr}
 800a290:	eb01 0402 	add.w	r4, r1, r2
 800a294:	d902      	bls.n	800a29c <memmove+0x10>
 800a296:	4284      	cmp	r4, r0
 800a298:	4623      	mov	r3, r4
 800a29a:	d807      	bhi.n	800a2ac <memmove+0x20>
 800a29c:	1e43      	subs	r3, r0, #1
 800a29e:	42a1      	cmp	r1, r4
 800a2a0:	d008      	beq.n	800a2b4 <memmove+0x28>
 800a2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2aa:	e7f8      	b.n	800a29e <memmove+0x12>
 800a2ac:	4402      	add	r2, r0
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	428a      	cmp	r2, r1
 800a2b2:	d100      	bne.n	800a2b6 <memmove+0x2a>
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2be:	e7f7      	b.n	800a2b0 <memmove+0x24>

0800a2c0 <_sbrk_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d06      	ldr	r5, [pc, #24]	@ (800a2dc <_sbrk_r+0x1c>)
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	602b      	str	r3, [r5, #0]
 800a2cc:	f7f7 f91e 	bl	800150c <_sbrk>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d102      	bne.n	800a2da <_sbrk_r+0x1a>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	b103      	cbz	r3, 800a2da <_sbrk_r+0x1a>
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	24000818 	.word	0x24000818

0800a2e0 <memcpy>:
 800a2e0:	440a      	add	r2, r1
 800a2e2:	4291      	cmp	r1, r2
 800a2e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2e8:	d100      	bne.n	800a2ec <memcpy+0xc>
 800a2ea:	4770      	bx	lr
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2f6:	4291      	cmp	r1, r2
 800a2f8:	d1f9      	bne.n	800a2ee <memcpy+0xe>
 800a2fa:	bd10      	pop	{r4, pc}

0800a2fc <_realloc_r>:
 800a2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a300:	4680      	mov	r8, r0
 800a302:	4615      	mov	r5, r2
 800a304:	460c      	mov	r4, r1
 800a306:	b921      	cbnz	r1, 800a312 <_realloc_r+0x16>
 800a308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a30c:	4611      	mov	r1, r2
 800a30e:	f7ff bc4b 	b.w	8009ba8 <_malloc_r>
 800a312:	b92a      	cbnz	r2, 800a320 <_realloc_r+0x24>
 800a314:	f7ff fbdc 	bl	8009ad0 <_free_r>
 800a318:	2400      	movs	r4, #0
 800a31a:	4620      	mov	r0, r4
 800a31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a320:	f000 f81a 	bl	800a358 <_malloc_usable_size_r>
 800a324:	4285      	cmp	r5, r0
 800a326:	4606      	mov	r6, r0
 800a328:	d802      	bhi.n	800a330 <_realloc_r+0x34>
 800a32a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a32e:	d8f4      	bhi.n	800a31a <_realloc_r+0x1e>
 800a330:	4629      	mov	r1, r5
 800a332:	4640      	mov	r0, r8
 800a334:	f7ff fc38 	bl	8009ba8 <_malloc_r>
 800a338:	4607      	mov	r7, r0
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d0ec      	beq.n	800a318 <_realloc_r+0x1c>
 800a33e:	42b5      	cmp	r5, r6
 800a340:	462a      	mov	r2, r5
 800a342:	4621      	mov	r1, r4
 800a344:	bf28      	it	cs
 800a346:	4632      	movcs	r2, r6
 800a348:	f7ff ffca 	bl	800a2e0 <memcpy>
 800a34c:	4621      	mov	r1, r4
 800a34e:	4640      	mov	r0, r8
 800a350:	f7ff fbbe 	bl	8009ad0 <_free_r>
 800a354:	463c      	mov	r4, r7
 800a356:	e7e0      	b.n	800a31a <_realloc_r+0x1e>

0800a358 <_malloc_usable_size_r>:
 800a358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a35c:	1f18      	subs	r0, r3, #4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	bfbc      	itt	lt
 800a362:	580b      	ldrlt	r3, [r1, r0]
 800a364:	18c0      	addlt	r0, r0, r3
 800a366:	4770      	bx	lr

0800a368 <_init>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	bf00      	nop
 800a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36e:	bc08      	pop	{r3}
 800a370:	469e      	mov	lr, r3
 800a372:	4770      	bx	lr

0800a374 <_fini>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	bf00      	nop
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr
