
Tutorial_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800c940  0800c940  0000d940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c9cc  0800c9cc  0000d9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c9d4  0800c9d4  0000d9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c9d8  0800c9d8  0000d9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800c9dc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800ca40  0000e064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800caa0  0000e0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b84  24000124  0800cb00  0000e124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ca8  0800cb00  0000eca8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cf0  00000000  00000000  0000e152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd9  00000000  00000000  00027e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0002ab20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc8  00000000  00000000  0002bba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038164  00000000  00000000  0002c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001776b  00000000  00000000  000649d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016195d  00000000  00000000  0007c13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dda9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b18  00000000  00000000  001ddae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001e25f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c928 	.word	0x0800c928

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800c928 	.word	0x0800c928

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <piscaLED>:
int ledCount = 0;
volatile int isSending = 0;
volatile uint8_t counter_received = 0;
volatile uint8_t tabela_received = 0;

void piscaLED(int count) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < count; i++) {
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e012      	b.n	80006b4 <piscaLED+0x34>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800068e:	2101      	movs	r1, #1
 8000690:	480d      	ldr	r0, [pc, #52]	@ (80006c8 <piscaLED+0x48>)
 8000692:	f005 f99a 	bl	80059ca <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 8000696:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800069a:	f001 f917 	bl	80018cc <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800069e:	2101      	movs	r1, #1
 80006a0:	4809      	ldr	r0, [pc, #36]	@ (80006c8 <piscaLED+0x48>)
 80006a2:	f005 f992 	bl	80059ca <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 80006a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006aa:	f001 f90f 	bl	80018cc <HAL_Delay>
    for (int i = 0; i < count; i++) {
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbe8      	blt.n	800068e <piscaLED+0xe>
    }
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	58020400 	.word	0x58020400

080006cc <enviarParaPC>:

void enviarParaPC(int count) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    char msg[30];
    sprintf(msg, "\nNumero de eventos = %d", count);
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4913      	ldr	r1, [pc, #76]	@ (8000728 <enviarParaPC+0x5c>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f00b fc83 	bl	800bfe8 <siprintf>
    HAL_UART_Transmit_IT(&huart3, (uint8_t *)msg, strlen(msg));
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fdfa 	bl	80002e0 <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	4619      	mov	r1, r3
 80006f6:	480d      	ldr	r0, [pc, #52]	@ (800072c <enviarParaPC+0x60>)
 80006f8:	f008 f9b8 	bl	8008a6c <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 80006fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000700:	f001 f8e4 	bl	80018cc <HAL_Delay>
    HAL_UART_Transmit_IT(&huart3, (uint8_t *)tabelaEquipe, sizeof(tabelaEquipe));
 8000704:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000708:	4909      	ldr	r1, [pc, #36]	@ (8000730 <enviarParaPC+0x64>)
 800070a:	4808      	ldr	r0, [pc, #32]	@ (800072c <enviarParaPC+0x60>)
 800070c:	f008 f9ae 	bl	8008a6c <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 8000710:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000714:	f001 f8da 	bl	80018cc <HAL_Delay>
    isSending = 0;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <enviarParaPC+0x68>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	3728      	adds	r7, #40	@ 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	0800c940 	.word	0x0800c940
 800072c:	240002bc 	.word	0x240002bc
 8000730:	24000a18 	.word	0x24000a18
 8000734:	24000b48 	.word	0x24000b48

08000738 <restart_uart>:

void restart_uart(UART_HandleTypeDef *huart) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
                __HAL_UART_DISABLE(huart);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f022 0201 	bic.w	r2, r2, #1
 800074e:	601a      	str	r2, [r3, #0]

                HAL_UART_DeInit(huart);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f008 f94b 	bl	80089ec <HAL_UART_DeInit>
                HAL_UART_Init(huart);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f008 f8f8 	bl	800894c <HAL_UART_Init>

                __HAL_UART_ENABLE(huart);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f042 0201 	orr.w	r2, r2, #1
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <init_receive_DMA>:

void init_receive_DMA(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	if (counter_received) {
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <init_receive_DMA+0x3c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d010      	beq.n	80007a6 <init_receive_DMA+0x32>
		restart_uart(&huart2);
 8000784:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <init_receive_DMA+0x40>)
 8000786:	f7ff ffd7 	bl	8000738 <restart_uart>
		HAL_UART_Receive_DMA(&huart2, (uint8_t *)tabelaEquipe, sizeof(tabelaEquipe));
 800078a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800078e:	490a      	ldr	r1, [pc, #40]	@ (80007b8 <init_receive_DMA+0x44>)
 8000790:	4808      	ldr	r0, [pc, #32]	@ (80007b4 <init_receive_DMA+0x40>)
 8000792:	f008 fa4b 	bl	8008c2c <HAL_UART_Receive_DMA>
		uint8_t readyToReceive = 0x5A;
 8000796:	235a      	movs	r3, #90	@ 0x5a
 8000798:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit_IT(&huart2, &readyToReceive, sizeof(readyToReceive));
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	2201      	movs	r2, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <init_receive_DMA+0x40>)
 80007a2:	f008 f963 	bl	8008a6c <HAL_UART_Transmit_IT>
	}
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	24000b4c 	.word	0x24000b4c
 80007b4:	24000228 	.word	0x24000228
 80007b8:	24000a18 	.word	0x24000a18

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fff2 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f836 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f9fe 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007cc:	f000 f9c4 	bl	8000b58 <MX_DMA_Init>
  MX_ETH_Init();
 80007d0:	f000 f8ac 	bl	800092c <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007d4:	f000 f98e 	bl	8000af4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80007d8:	f000 f8f4 	bl	80009c4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80007dc:	f000 f93e 	bl	8000a5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &counter, sizeof(counter));
 80007e0:	2201      	movs	r2, #1
 80007e2:	4910      	ldr	r1, [pc, #64]	@ (8000824 <main+0x68>)
 80007e4:	4810      	ldr	r0, [pc, #64]	@ (8000828 <main+0x6c>)
 80007e6:	f008 f9d5 	bl	8008b94 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Receive_IT(&huart2, &counter, sizeof(counter));
 80007ea:	2201      	movs	r2, #1
 80007ec:	490d      	ldr	r1, [pc, #52]	@ (8000824 <main+0x68>)
 80007ee:	480e      	ldr	r0, [pc, #56]	@ (8000828 <main+0x6c>)
 80007f0:	f008 f9d0 	bl	8008b94 <HAL_UART_Receive_IT>

	if (ledCount > 0) {
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <main+0x70>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	ddf6      	ble.n	80007ea <main+0x2e>
	   isSending = 1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <main+0x74>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
	   init_receive_DMA();
 8000802:	f7ff ffb7 	bl	8000774 <init_receive_DMA>
	   piscaLED(ledCount);
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <main+0x70>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff38 	bl	8000680 <piscaLED>
	   enviarParaPC(ledCount);
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <main+0x70>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff59 	bl	80006cc <enviarParaPC>
	   ledCount = 0;
 800081a:	4b04      	ldr	r3, [pc, #16]	@ (800082c <main+0x70>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &counter, sizeof(counter));
 8000820:	e7e3      	b.n	80007ea <main+0x2e>
 8000822:	bf00      	nop
 8000824:	24000a14 	.word	0x24000a14
 8000828:	24000228 	.word	0x24000228
 800082c:	24000b44 	.word	0x24000b44
 8000830:	24000b48 	.word	0x24000b48

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09c      	sub	sp, #112	@ 0x70
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	224c      	movs	r2, #76	@ 0x4c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f00b fbf0 	bl	800c028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f00b fbea 	bl	800c028 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000854:	2002      	movs	r0, #2
 8000856:	f005 fa1d 	bl	8005c94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <SystemClock_Config+0xf0>)
 8000860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000862:	4a30      	ldr	r2, [pc, #192]	@ (8000924 <SystemClock_Config+0xf0>)
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800086a:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <SystemClock_Config+0xf0>)
 800086c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b2c      	ldr	r3, [pc, #176]	@ (8000928 <SystemClock_Config+0xf4>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800087c:	4a2a      	ldr	r2, [pc, #168]	@ (8000928 <SystemClock_Config+0xf4>)
 800087e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <SystemClock_Config+0xf4>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000890:	bf00      	nop
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <SystemClock_Config+0xf4>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800089a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800089e:	d1f8      	bne.n	8000892 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 80008b6:	232a      	movs	r3, #42	@ 0x2a
 80008b8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008be:	2306      	movs	r3, #6
 80008c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008c6:	230c      	movs	r3, #12
 80008c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f005 fa26 	bl	8005d28 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008e2:	f000 fabb 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	233f      	movs	r3, #63	@ 0x3f
 80008e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2303      	movs	r3, #3
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008f6:	2340      	movs	r3, #64	@ 0x40
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80008fa:	2350      	movs	r3, #80	@ 0x50
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2103      	movs	r1, #3
 800090c:	4618      	mov	r0, r3
 800090e:	f005 fe65 	bl	80065dc <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000918:	f000 faa0 	bl	8000e5c <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3770      	adds	r7, #112	@ 0x70
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58000400 	.word	0x58000400
 8000928:	58024800 	.word	0x58024800

0800092c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <MX_ETH_Init+0x80>)
 8000932:	4a1f      	ldr	r2, [pc, #124]	@ (80009b0 <MX_ETH_Init+0x84>)
 8000934:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000936:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <MX_ETH_Init+0x88>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_ETH_Init+0x88>)
 800093e:	2280      	movs	r2, #128	@ 0x80
 8000940:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_ETH_Init+0x88>)
 8000944:	22e1      	movs	r2, #225	@ 0xe1
 8000946:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_ETH_Init+0x88>)
 800094a:	2200      	movs	r2, #0
 800094c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_ETH_Init+0x88>)
 8000950:	2200      	movs	r2, #0
 8000952:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_ETH_Init+0x88>)
 8000956:	2200      	movs	r2, #0
 8000958:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_ETH_Init+0x80>)
 800095c:	4a15      	ldr	r2, [pc, #84]	@ (80009b4 <MX_ETH_Init+0x88>)
 800095e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_ETH_Init+0x80>)
 8000962:	2201      	movs	r2, #1
 8000964:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_ETH_Init+0x80>)
 8000968:	4a13      	ldr	r2, [pc, #76]	@ (80009b8 <MX_ETH_Init+0x8c>)
 800096a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_ETH_Init+0x80>)
 800096e:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <MX_ETH_Init+0x90>)
 8000970:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_ETH_Init+0x80>)
 8000974:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000978:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800097a:	480c      	ldr	r0, [pc, #48]	@ (80009ac <MX_ETH_Init+0x80>)
 800097c:	f004 f91e 	bl	8004bbc <HAL_ETH_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000986:	f000 fa69 	bl	8000e5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800098a:	2238      	movs	r2, #56	@ 0x38
 800098c:	2100      	movs	r1, #0
 800098e:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <MX_ETH_Init+0x94>)
 8000990:	f00b fb4a 	bl	800c028 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000994:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <MX_ETH_Init+0x94>)
 8000996:	2221      	movs	r2, #33	@ 0x21
 8000998:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_ETH_Init+0x94>)
 800099c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009a0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <MX_ETH_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	24000178 	.word	0x24000178
 80009b0:	40028000 	.word	0x40028000
 80009b4:	24000b50 	.word	0x24000b50
 80009b8:	240000c4 	.word	0x240000c4
 80009bc:	24000064 	.word	0x24000064
 80009c0:	24000140 	.word	0x24000140

080009c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009ca:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <MX_USART2_UART_Init+0x94>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0c:	4811      	ldr	r0, [pc, #68]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a0e:	f007 ff9d 	bl	800894c <HAL_UART_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a18:	f000 fa20 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a20:	f00a ff0f 	bl	800b842 <HAL_UARTEx_SetTxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2a:	f000 fa17 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4808      	ldr	r0, [pc, #32]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a32:	f00a ff44 	bl	800b8be <HAL_UARTEx_SetRxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a3c:	f000 fa0e 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a42:	f00a fec5 	bl	800b7d0 <HAL_UARTEx_DisableFifoMode>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 fa06 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	24000228 	.word	0x24000228
 8000a58:	40004400 	.word	0x40004400

08000a5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a60:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a62:	4a23      	ldr	r2, [pc, #140]	@ (8000af0 <MX_USART3_UART_Init+0x94>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a66:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa4:	4811      	ldr	r0, [pc, #68]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000aa6:	f007 ff51 	bl	800894c <HAL_UART_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f000 f9d4 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000ab8:	f00a fec3 	bl	800b842 <HAL_UARTEx_SetTxFifoThreshold>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac2:	f000 f9cb 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4808      	ldr	r0, [pc, #32]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000aca:	f00a fef8 	bl	800b8be <HAL_UARTEx_SetRxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f000 f9c2 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000ada:	f00a fe79 	bl	800b7d0 <HAL_UARTEx_DisableFifoMode>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 f9ba 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	240002bc 	.word	0x240002bc
 8000af0:	40004800 	.word	0x40004800

08000af4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af8:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afa:	4a16      	ldr	r2, [pc, #88]	@ (8000b54 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000afc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000afe:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b00:	2209      	movs	r2, #9
 8000b02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3c:	f004 ff79 	bl	8005a32 <HAL_PCD_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b46:	f000 f989 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	24000530 	.word	0x24000530
 8000b54:	40080000 	.word	0x40080000

08000b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_DMA_Init+0x6c>)
 8000b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b64:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <MX_DMA_Init+0x6c>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <MX_DMA_Init+0x6c>)
 8000b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	200b      	movs	r0, #11
 8000b82:	f000 ffe6 	bl	8001b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b86:	200b      	movs	r0, #11
 8000b88:	f000 fffd 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	200c      	movs	r0, #12
 8000b92:	f000 ffde 	bl	8001b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b96:	200c      	movs	r0, #12
 8000b98:	f000 fff5 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	200d      	movs	r0, #13
 8000ba2:	f000 ffd6 	bl	8001b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ba6:	200d      	movs	r0, #13
 8000ba8:	f000 ffed 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	200e      	movs	r0, #14
 8000bb2:	f000 ffce 	bl	8001b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bb6:	200e      	movs	r0, #14
 8000bb8:	f000 ffe5 	bl	8001b86 <HAL_NVIC_EnableIRQ>

}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	58024400 	.word	0x58024400

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	@ 0x30
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b6d      	ldr	r3, [pc, #436]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be4:	4a6b      	ldr	r2, [pc, #428]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bee:	4b69      	ldr	r3, [pc, #420]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfc:	4b65      	ldr	r3, [pc, #404]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	4a64      	ldr	r2, [pc, #400]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0c:	4b61      	ldr	r3, [pc, #388]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c20:	4a5c      	ldr	r2, [pc, #368]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b56      	ldr	r3, [pc, #344]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3e:	4a55      	ldr	r2, [pc, #340]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c48:	4b52      	ldr	r3, [pc, #328]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	4a4d      	ldr	r2, [pc, #308]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c66:	4b4b      	ldr	r3, [pc, #300]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c74:	4b47      	ldr	r3, [pc, #284]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	4a46      	ldr	r2, [pc, #280]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c84:	4b43      	ldr	r3, [pc, #268]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c92:	4b40      	ldr	r3, [pc, #256]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	4a3e      	ldr	r2, [pc, #248]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8000d94 <MX_GPIO_Init+0x1cc>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000cb6:	4838      	ldr	r0, [pc, #224]	@ (8000d98 <MX_GPIO_Init+0x1d0>)
 8000cb8:	f004 fe6e 	bl	8005998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	4836      	ldr	r0, [pc, #216]	@ (8000d9c <MX_GPIO_Init+0x1d4>)
 8000cc4:	f004 fe68 	bl	8005998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4834      	ldr	r0, [pc, #208]	@ (8000da0 <MX_GPIO_Init+0x1d8>)
 8000cce:	f004 fe63 	bl	8005998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	482e      	ldr	r0, [pc, #184]	@ (8000da4 <MX_GPIO_Init+0x1dc>)
 8000cea:	f004 fb9b 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4824      	ldr	r0, [pc, #144]	@ (8000d98 <MX_GPIO_Init+0x1d0>)
 8000d06:	f004 fb8d 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	481d      	ldr	r0, [pc, #116]	@ (8000d98 <MX_GPIO_Init+0x1d0>)
 8000d24:	f004 fb7e 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4816      	ldr	r0, [pc, #88]	@ (8000d9c <MX_GPIO_Init+0x1d4>)
 8000d42:	f004 fb6f 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d46:	2380      	movs	r3, #128	@ 0x80
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4813      	ldr	r0, [pc, #76]	@ (8000da8 <MX_GPIO_Init+0x1e0>)
 8000d5c:	f004 fb62 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <MX_GPIO_Init+0x1d8>)
 8000d78:	f004 fb54 	bl	8005424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2028      	movs	r0, #40	@ 0x28
 8000d82:	f000 fee6 	bl	8001b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d86:	2028      	movs	r0, #40	@ 0x28
 8000d88:	f000 fefd 	bl	8001b86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3730      	adds	r7, #48	@ 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58020400 	.word	0x58020400
 8000d9c:	58020c00 	.word	0x58020c00
 8000da0:	58021000 	.word	0x58021000
 8000da4:	58020800 	.word	0x58020800
 8000da8:	58021800 	.word	0x58021800

08000dac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13 && !isSending) {
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dbc:	d108      	bne.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x24>
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x24>
    	HAL_UART_Transmit_IT(&huart2, &txData, sizeof(txData));
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4904      	ldr	r1, [pc, #16]	@ (8000ddc <HAL_GPIO_EXTI_Callback+0x30>)
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000dcc:	f007 fe4e 	bl	8008a6c <HAL_UART_Transmit_IT>
    }
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000b48 	.word	0x24000b48
 8000ddc:	24000000 	.word	0x24000000
 8000de0:	24000228 	.word	0x24000228

08000de4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a16      	ldr	r2, [pc, #88]	@ (8000e48 <HAL_UART_RxCpltCallback+0x64>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d124      	bne.n	8000e3e <HAL_UART_RxCpltCallback+0x5a>
        if (!counter_received) {
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <HAL_UART_RxCpltCallback+0x68>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10c      	bne.n	8000e18 <HAL_UART_RxCpltCallback+0x34>
        	if (counter > 0){
 8000dfe:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <HAL_UART_RxCpltCallback+0x6c>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d01b      	beq.n	8000e3e <HAL_UART_RxCpltCallback+0x5a>
            ledCount = counter;
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_UART_RxCpltCallback+0x6c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <HAL_UART_RxCpltCallback+0x70>)
 8000e0e:	601a      	str	r2, [r3, #0]
            counter_received = 1;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_UART_RxCpltCallback+0x68>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
            counter_received = 0;
            tabela_received = 0;
            HAL_UART_Receive_IT(&huart2, &counter, sizeof(counter));
        }
    }
}
 8000e16:	e012      	b.n	8000e3e <HAL_UART_RxCpltCallback+0x5a>
        } else if (!tabela_received) {
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_UART_RxCpltCallback+0x74>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10d      	bne.n	8000e3e <HAL_UART_RxCpltCallback+0x5a>
            tabela_received = 1;
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <HAL_UART_RxCpltCallback+0x74>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
            counter_received = 0;
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <HAL_UART_RxCpltCallback+0x68>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
            tabela_received = 0;
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_UART_RxCpltCallback+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart2, &counter, sizeof(counter));
 8000e34:	2201      	movs	r2, #1
 8000e36:	4906      	ldr	r1, [pc, #24]	@ (8000e50 <HAL_UART_RxCpltCallback+0x6c>)
 8000e38:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <HAL_UART_RxCpltCallback+0x64>)
 8000e3a:	f007 feab 	bl	8008b94 <HAL_UART_Receive_IT>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	24000228 	.word	0x24000228
 8000e4c:	24000b4c 	.word	0x24000b4c
 8000e50:	24000a14 	.word	0x24000a14
 8000e54:	24000b44 	.word	0x24000b44
 8000e58:	24000b4d 	.word	0x24000b4d

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <Error_Handler+0x8>

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_MspInit+0x30>)
 8000e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e74:	4a08      	ldr	r2, [pc, #32]	@ (8000e98 <HAL_MspInit+0x30>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_MspInit+0x30>)
 8000e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58024400 	.word	0x58024400

08000e9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	@ 0x38
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a59      	ldr	r2, [pc, #356]	@ (8001020 <HAL_ETH_MspInit+0x184>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	f040 80ab 	bne.w	8001016 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ec0:	4b58      	ldr	r3, [pc, #352]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec6:	4a57      	ldr	r2, [pc, #348]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ecc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ed0:	4b54      	ldr	r3, [pc, #336]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ede:	4b51      	ldr	r3, [pc, #324]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000ee0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee4:	4a4f      	ldr	r2, [pc, #316]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eee:	4b4d      	ldr	r3, [pc, #308]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000efc:	4b49      	ldr	r3, [pc, #292]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000efe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f02:	4a48      	ldr	r2, [pc, #288]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f0c:	4b45      	ldr	r3, [pc, #276]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	4b42      	ldr	r3, [pc, #264]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	4a40      	ldr	r2, [pc, #256]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b3a      	ldr	r3, [pc, #232]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3e:	4a39      	ldr	r2, [pc, #228]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f48:	4b36      	ldr	r3, [pc, #216]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b33      	ldr	r3, [pc, #204]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	4a31      	ldr	r2, [pc, #196]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f66:	4b2f      	ldr	r3, [pc, #188]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f74:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f84:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <HAL_ETH_MspInit+0x188>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f92:	2332      	movs	r3, #50	@ 0x32
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa2:	230b      	movs	r3, #11
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	481e      	ldr	r0, [pc, #120]	@ (8001028 <HAL_ETH_MspInit+0x18c>)
 8000fae:	f004 fa39 	bl	8005424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000fb2:	2386      	movs	r3, #134	@ 0x86
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc2:	230b      	movs	r3, #11
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4817      	ldr	r0, [pc, #92]	@ (800102c <HAL_ETH_MspInit+0x190>)
 8000fce:	f004 fa29 	bl	8005424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	4810      	ldr	r0, [pc, #64]	@ (8001030 <HAL_ETH_MspInit+0x194>)
 8000ff0:	f004 fa18 	bl	8005424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ff4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001006:	230b      	movs	r3, #11
 8001008:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	4808      	ldr	r0, [pc, #32]	@ (8001034 <HAL_ETH_MspInit+0x198>)
 8001012:	f004 fa07 	bl	8005424 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001016:	bf00      	nop
 8001018:	3738      	adds	r7, #56	@ 0x38
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40028000 	.word	0x40028000
 8001024:	58024400 	.word	0x58024400
 8001028:	58020800 	.word	0x58020800
 800102c:	58020000 	.word	0x58020000
 8001030:	58020400 	.word	0x58020400
 8001034:	58021800 	.word	0x58021800

08001038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0bc      	sub	sp, #240	@ 0xf0
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	22c0      	movs	r2, #192	@ 0xc0
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f00a ffe5 	bl	800c028 <memset>
  if(huart->Instance==USART2)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4ab1      	ldr	r2, [pc, #708]	@ (8001328 <HAL_UART_MspInit+0x2f0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	f040 80aa 	bne.w	80011be <HAL_UART_MspInit+0x186>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800106a:	f04f 0202 	mov.w	r2, #2
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	4618      	mov	r0, r3
 8001082:	f005 fe37 	bl	8006cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800108c:	f7ff fee6 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001090:	4ba6      	ldr	r3, [pc, #664]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 8001092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001096:	4aa5      	ldr	r2, [pc, #660]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010a0:	4ba2      	ldr	r3, [pc, #648]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 80010a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b9f      	ldr	r3, [pc, #636]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b4:	4a9d      	ldr	r2, [pc, #628]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010be:	4b9b      	ldr	r3, [pc, #620]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010cc:	2360      	movs	r3, #96	@ 0x60
 80010ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e4:	2307      	movs	r3, #7
 80010e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010ee:	4619      	mov	r1, r3
 80010f0:	488f      	ldr	r0, [pc, #572]	@ (8001330 <HAL_UART_MspInit+0x2f8>)
 80010f2:	f004 f997 	bl	8005424 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream0;
 80010f6:	4b8f      	ldr	r3, [pc, #572]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 80010f8:	4a8f      	ldr	r2, [pc, #572]	@ (8001338 <HAL_UART_MspInit+0x300>)
 80010fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010fc:	4b8d      	ldr	r3, [pc, #564]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 80010fe:	222c      	movs	r2, #44	@ 0x2c
 8001100:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001102:	4b8c      	ldr	r3, [pc, #560]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 8001104:	2240      	movs	r2, #64	@ 0x40
 8001106:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001108:	4b8a      	ldr	r3, [pc, #552]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800110e:	4b89      	ldr	r3, [pc, #548]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 8001110:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001114:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001116:	4b87      	ldr	r3, [pc, #540]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111c:	4b85      	ldr	r3, [pc, #532]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001122:	4b84      	ldr	r3, [pc, #528]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001128:	4b82      	ldr	r3, [pc, #520]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800112e:	4b81      	ldr	r3, [pc, #516]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001134:	487f      	ldr	r0, [pc, #508]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 8001136:	f000 fd4f 	bl	8001bd8 <HAL_DMA_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001140:	f7ff fe8c 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a7b      	ldr	r2, [pc, #492]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 8001148:	67da      	str	r2, [r3, #124]	@ 0x7c
 800114a:	4a7a      	ldr	r2, [pc, #488]	@ (8001334 <HAL_UART_MspInit+0x2fc>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8001150:	4b7a      	ldr	r3, [pc, #488]	@ (800133c <HAL_UART_MspInit+0x304>)
 8001152:	4a7b      	ldr	r2, [pc, #492]	@ (8001340 <HAL_UART_MspInit+0x308>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001156:	4b79      	ldr	r3, [pc, #484]	@ (800133c <HAL_UART_MspInit+0x304>)
 8001158:	222b      	movs	r2, #43	@ 0x2b
 800115a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115c:	4b77      	ldr	r3, [pc, #476]	@ (800133c <HAL_UART_MspInit+0x304>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b76      	ldr	r3, [pc, #472]	@ (800133c <HAL_UART_MspInit+0x304>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b74      	ldr	r3, [pc, #464]	@ (800133c <HAL_UART_MspInit+0x304>)
 800116a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800116e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001170:	4b72      	ldr	r3, [pc, #456]	@ (800133c <HAL_UART_MspInit+0x304>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001176:	4b71      	ldr	r3, [pc, #452]	@ (800133c <HAL_UART_MspInit+0x304>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800117c:	4b6f      	ldr	r3, [pc, #444]	@ (800133c <HAL_UART_MspInit+0x304>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	4b6e      	ldr	r3, [pc, #440]	@ (800133c <HAL_UART_MspInit+0x304>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001188:	4b6c      	ldr	r3, [pc, #432]	@ (800133c <HAL_UART_MspInit+0x304>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800118e:	486b      	ldr	r0, [pc, #428]	@ (800133c <HAL_UART_MspInit+0x304>)
 8001190:	f000 fd22 	bl	8001bd8 <HAL_DMA_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800119a:	f7ff fe5f 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a66      	ldr	r2, [pc, #408]	@ (800133c <HAL_UART_MspInit+0x304>)
 80011a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80011a6:	4a65      	ldr	r2, [pc, #404]	@ (800133c <HAL_UART_MspInit+0x304>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2026      	movs	r0, #38	@ 0x26
 80011b2:	f000 fcce 	bl	8001b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011b6:	2026      	movs	r0, #38	@ 0x26
 80011b8:	f000 fce5 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011bc:	e0af      	b.n	800131e <HAL_UART_MspInit+0x2e6>
  else if(huart->Instance==USART3)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a60      	ldr	r2, [pc, #384]	@ (8001344 <HAL_UART_MspInit+0x30c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	f040 80aa 	bne.w	800131e <HAL_UART_MspInit+0x2e6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ca:	f04f 0202 	mov.w	r2, #2
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 fd87 	bl	8006cf4 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80011ec:	f7ff fe36 	bl	8000e5c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f0:	4b4e      	ldr	r3, [pc, #312]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 80011f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f6:	4a4d      	ldr	r2, [pc, #308]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001200:	4b4a      	ldr	r3, [pc, #296]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 8001202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b47      	ldr	r3, [pc, #284]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001214:	4a45      	ldr	r2, [pc, #276]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800121e:	4b43      	ldr	r3, [pc, #268]	@ (800132c <HAL_UART_MspInit+0x2f4>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800122c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001230:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001246:	2307      	movs	r3, #7
 8001248:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001250:	4619      	mov	r1, r3
 8001252:	4837      	ldr	r0, [pc, #220]	@ (8001330 <HAL_UART_MspInit+0x2f8>)
 8001254:	f004 f8e6 	bl	8005424 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8001258:	4b3b      	ldr	r3, [pc, #236]	@ (8001348 <HAL_UART_MspInit+0x310>)
 800125a:	4a3c      	ldr	r2, [pc, #240]	@ (800134c <HAL_UART_MspInit+0x314>)
 800125c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800125e:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <HAL_UART_MspInit+0x310>)
 8001260:	222d      	movs	r2, #45	@ 0x2d
 8001262:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001264:	4b38      	ldr	r3, [pc, #224]	@ (8001348 <HAL_UART_MspInit+0x310>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b37      	ldr	r3, [pc, #220]	@ (8001348 <HAL_UART_MspInit+0x310>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b35      	ldr	r3, [pc, #212]	@ (8001348 <HAL_UART_MspInit+0x310>)
 8001272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001276:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001278:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <HAL_UART_MspInit+0x310>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127e:	4b32      	ldr	r3, [pc, #200]	@ (8001348 <HAL_UART_MspInit+0x310>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <HAL_UART_MspInit+0x310>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128a:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <HAL_UART_MspInit+0x310>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001290:	4b2d      	ldr	r3, [pc, #180]	@ (8001348 <HAL_UART_MspInit+0x310>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001296:	482c      	ldr	r0, [pc, #176]	@ (8001348 <HAL_UART_MspInit+0x310>)
 8001298:	f000 fc9e 	bl	8001bd8 <HAL_DMA_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 80012a2:	f7ff fddb 	bl	8000e5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a27      	ldr	r2, [pc, #156]	@ (8001348 <HAL_UART_MspInit+0x310>)
 80012aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80012ae:	4a26      	ldr	r2, [pc, #152]	@ (8001348 <HAL_UART_MspInit+0x310>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012b6:	4a27      	ldr	r2, [pc, #156]	@ (8001354 <HAL_UART_MspInit+0x31c>)
 80012b8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012bc:	222e      	movs	r2, #46	@ 0x2e
 80012be:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c0:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012c2:	2240      	movs	r2, #64	@ 0x40
 80012c4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c6:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012cc:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012da:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012f2:	4817      	ldr	r0, [pc, #92]	@ (8001350 <HAL_UART_MspInit+0x318>)
 80012f4:	f000 fc70 	bl	8001bd8 <HAL_DMA_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 80012fe:	f7ff fdad 	bl	8000e5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <HAL_UART_MspInit+0x318>)
 8001306:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001308:	4a11      	ldr	r2, [pc, #68]	@ (8001350 <HAL_UART_MspInit+0x318>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2027      	movs	r0, #39	@ 0x27
 8001314:	f000 fc1d 	bl	8001b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001318:	2027      	movs	r0, #39	@ 0x27
 800131a:	f000 fc34 	bl	8001b86 <HAL_NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	37f0      	adds	r7, #240	@ 0xf0
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40004400 	.word	0x40004400
 800132c:	58024400 	.word	0x58024400
 8001330:	58020c00 	.word	0x58020c00
 8001334:	24000350 	.word	0x24000350
 8001338:	40020010 	.word	0x40020010
 800133c:	240003c8 	.word	0x240003c8
 8001340:	40020028 	.word	0x40020028
 8001344:	40004800 	.word	0x40004800
 8001348:	24000440 	.word	0x24000440
 800134c:	40020040 	.word	0x40020040
 8001350:	240004b8 	.word	0x240004b8
 8001354:	40020058 	.word	0x40020058

08001358 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a20      	ldr	r2, [pc, #128]	@ (80013e8 <HAL_UART_MspDeInit+0x90>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d11a      	bne.n	80013a0 <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800136a:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <HAL_UART_MspDeInit+0x94>)
 800136c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001370:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <HAL_UART_MspDeInit+0x94>)
 8001372:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001376:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 800137a:	2160      	movs	r1, #96	@ 0x60
 800137c:	481c      	ldr	r0, [pc, #112]	@ (80013f0 <HAL_UART_MspDeInit+0x98>)
 800137e:	f004 fa01 	bl	8005784 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001386:	4618      	mov	r0, r3
 8001388:	f000 ff82 	bl	8002290 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001392:	4618      	mov	r0, r3
 8001394:	f000 ff7c 	bl	8002290 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001398:	2026      	movs	r0, #38	@ 0x26
 800139a:	f000 fc02 	bl	8001ba2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800139e:	e01f      	b.n	80013e0 <HAL_UART_MspDeInit+0x88>
  else if(huart->Instance==USART3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a13      	ldr	r2, [pc, #76]	@ (80013f4 <HAL_UART_MspDeInit+0x9c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d11a      	bne.n	80013e0 <HAL_UART_MspDeInit+0x88>
    __HAL_RCC_USART3_CLK_DISABLE();
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <HAL_UART_MspDeInit+0x94>)
 80013ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b0:	4a0e      	ldr	r2, [pc, #56]	@ (80013ec <HAL_UART_MspDeInit+0x94>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    HAL_GPIO_DeInit(GPIOD, STLINK_RX_Pin|STLINK_TX_Pin);
 80013ba:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80013be:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <HAL_UART_MspDeInit+0x98>)
 80013c0:	f004 f9e0 	bl	8005784 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 ff60 	bl	8002290 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 ff5b 	bl	8002290 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80013da:	2027      	movs	r0, #39	@ 0x27
 80013dc:	f000 fbe1 	bl	8001ba2 <HAL_NVIC_DisableIRQ>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40004400 	.word	0x40004400
 80013ec:	58024400 	.word	0x58024400
 80013f0:	58020c00 	.word	0x58020c00
 80013f4:	40004800 	.word	0x40004800

080013f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0ba      	sub	sp, #232	@ 0xe8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	22c0      	movs	r2, #192	@ 0xc0
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f00a fe05 	bl	800c028 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a30      	ldr	r2, [pc, #192]	@ (80014e4 <HAL_PCD_MspInit+0xec>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d159      	bne.n	80014dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001428:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001434:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4618      	mov	r0, r3
 8001442:	f005 fc57 	bl	8006cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800144c:	f7ff fd06 	bl	8000e5c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001450:	f004 fc5a 	bl	8005d08 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_PCD_MspInit+0xf0>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <HAL_PCD_MspInit+0xf0>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001464:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_PCD_MspInit+0xf0>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001472:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800148c:	230a      	movs	r3, #10
 800148e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001496:	4619      	mov	r1, r3
 8001498:	4814      	ldr	r0, [pc, #80]	@ (80014ec <HAL_PCD_MspInit+0xf4>)
 800149a:	f003 ffc3 	bl	8005424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800149e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014b6:	4619      	mov	r1, r3
 80014b8:	480c      	ldr	r0, [pc, #48]	@ (80014ec <HAL_PCD_MspInit+0xf4>)
 80014ba:	f003 ffb3 	bl	8005424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_PCD_MspInit+0xf0>)
 80014c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014c4:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <HAL_PCD_MspInit+0xf0>)
 80014c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_PCD_MspInit+0xf0>)
 80014d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80014dc:	bf00      	nop
 80014de:	37e8      	adds	r7, #232	@ 0xe8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40080000 	.word	0x40080000
 80014e8:	58024400 	.word	0x58024400
 80014ec:	58020000 	.word	0x58020000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <NMI_Handler+0x4>

080014f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <MemManage_Handler+0x4>

08001508 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <UsageFault_Handler+0x4>

08001518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001546:	f000 f9a1 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <DMA1_Stream0_IRQHandler+0x10>)
 8001556:	f002 f81f 	bl	8003598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	24000350 	.word	0x24000350

08001564 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <DMA1_Stream1_IRQHandler+0x10>)
 800156a:	f002 f815 	bl	8003598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	240003c8 	.word	0x240003c8

08001578 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <DMA1_Stream2_IRQHandler+0x10>)
 800157e:	f002 f80b 	bl	8003598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	24000440 	.word	0x24000440

0800158c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <DMA1_Stream3_IRQHandler+0x10>)
 8001592:	f002 f801 	bl	8003598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	240004b8 	.word	0x240004b8

080015a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <USART2_IRQHandler+0x10>)
 80015a6:	f007 fb8d 	bl	8008cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	24000228 	.word	0x24000228

080015b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <USART3_IRQHandler+0x10>)
 80015ba:	f007 fb83 	bl	8008cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	240002bc 	.word	0x240002bc

080015c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015d0:	f004 fa15 	bl	80059fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001608:	f00a fd16 	bl	800c038 <__errno>
 800160c:	4603      	mov	r3, r0
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	24080000 	.word	0x24080000
 8001638:	00000400 	.word	0x00000400
 800163c:	24000b58 	.word	0x24000b58
 8001640:	24000ca8 	.word	0x24000ca8

08001644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <SystemInit+0xe4>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164e:	4a36      	ldr	r2, [pc, #216]	@ (8001728 <SystemInit+0xe4>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001658:	4b34      	ldr	r3, [pc, #208]	@ (800172c <SystemInit+0xe8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	2b06      	cmp	r3, #6
 8001662:	d807      	bhi.n	8001674 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001664:	4b31      	ldr	r3, [pc, #196]	@ (800172c <SystemInit+0xe8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 030f 	bic.w	r3, r3, #15
 800166c:	4a2f      	ldr	r2, [pc, #188]	@ (800172c <SystemInit+0xe8>)
 800166e:	f043 0307 	orr.w	r3, r3, #7
 8001672:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001674:	4b2e      	ldr	r3, [pc, #184]	@ (8001730 <SystemInit+0xec>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a2d      	ldr	r2, [pc, #180]	@ (8001730 <SystemInit+0xec>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001680:	4b2b      	ldr	r3, [pc, #172]	@ (8001730 <SystemInit+0xec>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001686:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <SystemInit+0xec>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4929      	ldr	r1, [pc, #164]	@ (8001730 <SystemInit+0xec>)
 800168c:	4b29      	ldr	r3, [pc, #164]	@ (8001734 <SystemInit+0xf0>)
 800168e:	4013      	ands	r3, r2
 8001690:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <SystemInit+0xe8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800169e:	4b23      	ldr	r3, [pc, #140]	@ (800172c <SystemInit+0xe8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 030f 	bic.w	r3, r3, #15
 80016a6:	4a21      	ldr	r2, [pc, #132]	@ (800172c <SystemInit+0xe8>)
 80016a8:	f043 0307 	orr.w	r3, r3, #7
 80016ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016ae:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <SystemInit+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <SystemInit+0xec>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <SystemInit+0xec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <SystemInit+0xec>)
 80016c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <SystemInit+0xf4>)
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <SystemInit+0xec>)
 80016c8:	4a1c      	ldr	r2, [pc, #112]	@ (800173c <SystemInit+0xf8>)
 80016ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <SystemInit+0xec>)
 80016ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <SystemInit+0xfc>)
 80016d0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <SystemInit+0xec>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <SystemInit+0xec>)
 80016da:	4a19      	ldr	r2, [pc, #100]	@ (8001740 <SystemInit+0xfc>)
 80016dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016de:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <SystemInit+0xec>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <SystemInit+0xec>)
 80016e6:	4a16      	ldr	r2, [pc, #88]	@ (8001740 <SystemInit+0xfc>)
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <SystemInit+0xec>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <SystemInit+0xec>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <SystemInit+0xec>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <SystemInit+0xec>)
 80016fe:	2200      	movs	r2, #0
 8001700:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <SystemInit+0x100>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <SystemInit+0x104>)
 8001708:	4013      	ands	r3, r2
 800170a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800170e:	d202      	bcs.n	8001716 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <SystemInit+0x108>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <SystemInit+0x10c>)
 8001718:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800171c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00
 800172c:	52002000 	.word	0x52002000
 8001730:	58024400 	.word	0x58024400
 8001734:	eaf6ed7f 	.word	0xeaf6ed7f
 8001738:	02020200 	.word	0x02020200
 800173c:	01ff0000 	.word	0x01ff0000
 8001740:	01010280 	.word	0x01010280
 8001744:	5c001000 	.word	0x5c001000
 8001748:	ffff0000 	.word	0xffff0000
 800174c:	51008108 	.word	0x51008108
 8001750:	52004000 	.word	0x52004000

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800178c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001758:	f7ff ff74 	bl	8001644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	@ (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	@ (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001782:	f00a fc5f 	bl	800c044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7ff f819 	bl	80007bc <main>
  bx  lr
 800178a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001790:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001794:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001798:	0800c9dc 	.word	0x0800c9dc
  ldr r2, =_sbss
 800179c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80017a0:	24000ca8 	.word	0x24000ca8

080017a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC3_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f000 f9c4 	bl	8001b3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017b4:	f005 f8c8 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <HAL_Init+0x68>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	4913      	ldr	r1, [pc, #76]	@ (8001814 <HAL_Init+0x6c>)
 80017c6:	5ccb      	ldrb	r3, [r1, r3]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	fa22 f303 	lsr.w	r3, r2, r3
 80017d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <HAL_Init+0x68>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	4a0e      	ldr	r2, [pc, #56]	@ (8001814 <HAL_Init+0x6c>)
 80017dc:	5cd3      	ldrb	r3, [r2, r3]
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_Init+0x70>)
 80017ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017ec:	4a0b      	ldr	r2, [pc, #44]	@ (800181c <HAL_Init+0x74>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f814 	bl	8001820 <HAL_InitTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e002      	b.n	8001808 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001802:	f7ff fb31 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	58024400 	.word	0x58024400
 8001814:	0800c958 	.word	0x0800c958
 8001818:	24000008 	.word	0x24000008
 800181c:	24000004 	.word	0x24000004

08001820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_InitTick+0x60>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e021      	b.n	8001878 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001834:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <HAL_InitTick+0x64>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <HAL_InitTick+0x60>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001842:	fbb3 f3f1 	udiv	r3, r3, r1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f9b7 	bl	8001bbe <HAL_SYSTICK_Config>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00e      	b.n	8001878 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d80a      	bhi.n	8001876 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f000 f973 	bl	8001b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800186c:	4a06      	ldr	r2, [pc, #24]	@ (8001888 <HAL_InitTick+0x68>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	24000010 	.word	0x24000010
 8001884:	24000004 	.word	0x24000004
 8001888:	2400000c 	.word	0x2400000c

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	24000010 	.word	0x24000010
 80018b0:	24000b5c 	.word	0x24000b5c

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	24000b5c 	.word	0x24000b5c

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff ffee 	bl	80018b4 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffde 	bl	80018b4 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	24000010 	.word	0x24000010

08001914 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_GetREVID+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0c1b      	lsrs	r3, r3, #16
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	5c001000 	.word	0x5c001000

0800192c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800193c:	4904      	ldr	r1, [pc, #16]	@ (8001950 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	58000400 	.word	0x58000400

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <__NVIC_SetPriorityGrouping+0x40>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	4313      	orrs	r3, r2
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <__NVIC_SetPriorityGrouping+0x40>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00
 8001998:	05fa0000 	.word	0x05fa0000

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	@ (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db12      	blt.n	8001a2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	490a      	ldr	r1, [pc, #40]	@ (8001a38 <__NVIC_DisableIRQ+0x44>)
 8001a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	3320      	adds	r3, #32
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a20:	f3bf 8f4f 	dsb	sy
}
 8001a24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a26:	f3bf 8f6f 	isb	sy
}
 8001a2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db0a      	blt.n	8001a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	@ (8001a88 <__NVIC_SetPriority+0x4c>)
 8001a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a64:	e00a      	b.n	8001a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4908      	ldr	r1, [pc, #32]	@ (8001a8c <__NVIC_SetPriority+0x50>)
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3b04      	subs	r3, #4
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	761a      	strb	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	@ 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f1c3 0307 	rsb	r3, r3, #7
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	bf28      	it	cs
 8001aae:	2304      	movcs	r3, #4
 8001ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d902      	bls.n	8001ac0 <NVIC_EncodePriority+0x30>
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b03      	subs	r3, #3
 8001abe:	e000      	b.n	8001ac2 <NVIC_EncodePriority+0x32>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	43d9      	mvns	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	4313      	orrs	r3, r2
         );
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	@ 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b08:	d301      	bcc.n	8001b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00f      	b.n	8001b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <SysTick_Config+0x40>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b16:	210f      	movs	r1, #15
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f7ff ff8e 	bl	8001a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <SysTick_Config+0x40>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b26:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <SysTick_Config+0x40>)
 8001b28:	2207      	movs	r2, #7
 8001b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	e000e010 	.word	0xe000e010

08001b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff05 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff1c 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff90 	bl	8001a90 <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5f 	bl	8001a3c <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff0f 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff1f 	bl	80019f4 <__NVIC_DisableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff96 	bl	8001af8 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff fe68 	bl	80018b4 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e316      	b.n	800221e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a66      	ldr	r2, [pc, #408]	@ (8001d90 <HAL_DMA_Init+0x1b8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d04a      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a65      	ldr	r2, [pc, #404]	@ (8001d94 <HAL_DMA_Init+0x1bc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d045      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a63      	ldr	r2, [pc, #396]	@ (8001d98 <HAL_DMA_Init+0x1c0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d040      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a62      	ldr	r2, [pc, #392]	@ (8001d9c <HAL_DMA_Init+0x1c4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d03b      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a60      	ldr	r2, [pc, #384]	@ (8001da0 <HAL_DMA_Init+0x1c8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d036      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a5f      	ldr	r2, [pc, #380]	@ (8001da4 <HAL_DMA_Init+0x1cc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d031      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a5d      	ldr	r2, [pc, #372]	@ (8001da8 <HAL_DMA_Init+0x1d0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d02c      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a5c      	ldr	r2, [pc, #368]	@ (8001dac <HAL_DMA_Init+0x1d4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d027      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a5a      	ldr	r2, [pc, #360]	@ (8001db0 <HAL_DMA_Init+0x1d8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d022      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a59      	ldr	r2, [pc, #356]	@ (8001db4 <HAL_DMA_Init+0x1dc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d01d      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a57      	ldr	r2, [pc, #348]	@ (8001db8 <HAL_DMA_Init+0x1e0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a56      	ldr	r2, [pc, #344]	@ (8001dbc <HAL_DMA_Init+0x1e4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d013      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a54      	ldr	r2, [pc, #336]	@ (8001dc0 <HAL_DMA_Init+0x1e8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00e      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a53      	ldr	r2, [pc, #332]	@ (8001dc4 <HAL_DMA_Init+0x1ec>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a51      	ldr	r2, [pc, #324]	@ (8001dc8 <HAL_DMA_Init+0x1f0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Init+0xb8>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a50      	ldr	r2, [pc, #320]	@ (8001dcc <HAL_DMA_Init+0x1f4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_DMA_Init+0xbc>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_DMA_Init+0xbe>
 8001c94:	2300      	movs	r3, #0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 813b 	beq.w	8001f12 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a37      	ldr	r2, [pc, #220]	@ (8001d90 <HAL_DMA_Init+0x1b8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d04a      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a36      	ldr	r2, [pc, #216]	@ (8001d94 <HAL_DMA_Init+0x1bc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d045      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a34      	ldr	r2, [pc, #208]	@ (8001d98 <HAL_DMA_Init+0x1c0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d040      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a33      	ldr	r2, [pc, #204]	@ (8001d9c <HAL_DMA_Init+0x1c4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d03b      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a31      	ldr	r2, [pc, #196]	@ (8001da0 <HAL_DMA_Init+0x1c8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d036      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a30      	ldr	r2, [pc, #192]	@ (8001da4 <HAL_DMA_Init+0x1cc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d031      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2e      	ldr	r2, [pc, #184]	@ (8001da8 <HAL_DMA_Init+0x1d0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02c      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8001dac <HAL_DMA_Init+0x1d4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d027      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2b      	ldr	r2, [pc, #172]	@ (8001db0 <HAL_DMA_Init+0x1d8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d022      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001db4 <HAL_DMA_Init+0x1dc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d01d      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a28      	ldr	r2, [pc, #160]	@ (8001db8 <HAL_DMA_Init+0x1e0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d018      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a27      	ldr	r2, [pc, #156]	@ (8001dbc <HAL_DMA_Init+0x1e4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a25      	ldr	r2, [pc, #148]	@ (8001dc0 <HAL_DMA_Init+0x1e8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00e      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a24      	ldr	r2, [pc, #144]	@ (8001dc4 <HAL_DMA_Init+0x1ec>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d009      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a22      	ldr	r2, [pc, #136]	@ (8001dc8 <HAL_DMA_Init+0x1f0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d004      	beq.n	8001d4c <HAL_DMA_Init+0x174>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a21      	ldr	r2, [pc, #132]	@ (8001dcc <HAL_DMA_Init+0x1f4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d108      	bne.n	8001d5e <HAL_DMA_Init+0x186>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e007      	b.n	8001d6e <HAL_DMA_Init+0x196>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d6e:	e02f      	b.n	8001dd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d70:	f7ff fda0 	bl	80018b4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d928      	bls.n	8001dd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2203      	movs	r2, #3
 8001d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e246      	b.n	800221e <HAL_DMA_Init+0x646>
 8001d90:	40020010 	.word	0x40020010
 8001d94:	40020028 	.word	0x40020028
 8001d98:	40020040 	.word	0x40020040
 8001d9c:	40020058 	.word	0x40020058
 8001da0:	40020070 	.word	0x40020070
 8001da4:	40020088 	.word	0x40020088
 8001da8:	400200a0 	.word	0x400200a0
 8001dac:	400200b8 	.word	0x400200b8
 8001db0:	40020410 	.word	0x40020410
 8001db4:	40020428 	.word	0x40020428
 8001db8:	40020440 	.word	0x40020440
 8001dbc:	40020458 	.word	0x40020458
 8001dc0:	40020470 	.word	0x40020470
 8001dc4:	40020488 	.word	0x40020488
 8001dc8:	400204a0 	.word	0x400204a0
 8001dcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1c8      	bne.n	8001d70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4b83      	ldr	r3, [pc, #524]	@ (8001ff8 <HAL_DMA_Init+0x420>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001df6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d107      	bne.n	8001e34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001e34:	4b71      	ldr	r3, [pc, #452]	@ (8001ffc <HAL_DMA_Init+0x424>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b71      	ldr	r3, [pc, #452]	@ (8002000 <HAL_DMA_Init+0x428>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e40:	d328      	bcc.n	8001e94 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b28      	cmp	r3, #40	@ 0x28
 8001e48:	d903      	bls.n	8001e52 <HAL_DMA_Init+0x27a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e50:	d917      	bls.n	8001e82 <HAL_DMA_Init+0x2aa>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e58:	d903      	bls.n	8001e62 <HAL_DMA_Init+0x28a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b42      	cmp	r3, #66	@ 0x42
 8001e60:	d90f      	bls.n	8001e82 <HAL_DMA_Init+0x2aa>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b46      	cmp	r3, #70	@ 0x46
 8001e68:	d903      	bls.n	8001e72 <HAL_DMA_Init+0x29a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b48      	cmp	r3, #72	@ 0x48
 8001e70:	d907      	bls.n	8001e82 <HAL_DMA_Init+0x2aa>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b4e      	cmp	r3, #78	@ 0x4e
 8001e78:	d905      	bls.n	8001e86 <HAL_DMA_Init+0x2ae>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b52      	cmp	r3, #82	@ 0x52
 8001e80:	d801      	bhi.n	8001e86 <HAL_DMA_Init+0x2ae>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_DMA_Init+0x2b0>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e92:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f023 0307 	bic.w	r3, r3, #7
 8001eaa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d117      	bne.n	8001eee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00e      	beq.n	8001eee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f002 fce9 	bl	80048a8 <DMA_CheckFifoParam>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2240      	movs	r2, #64	@ 0x40
 8001ee0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e197      	b.n	800221e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f002 fc24 	bl	8004744 <DMA_CalcBaseAndBitshift>
 8001efc:	4603      	mov	r3, r0
 8001efe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	223f      	movs	r2, #63	@ 0x3f
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	e0cd      	b.n	80020ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a3b      	ldr	r2, [pc, #236]	@ (8002004 <HAL_DMA_Init+0x42c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d022      	beq.n	8001f62 <HAL_DMA_Init+0x38a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a39      	ldr	r2, [pc, #228]	@ (8002008 <HAL_DMA_Init+0x430>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01d      	beq.n	8001f62 <HAL_DMA_Init+0x38a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a38      	ldr	r2, [pc, #224]	@ (800200c <HAL_DMA_Init+0x434>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d018      	beq.n	8001f62 <HAL_DMA_Init+0x38a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a36      	ldr	r2, [pc, #216]	@ (8002010 <HAL_DMA_Init+0x438>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_DMA_Init+0x38a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a35      	ldr	r2, [pc, #212]	@ (8002014 <HAL_DMA_Init+0x43c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00e      	beq.n	8001f62 <HAL_DMA_Init+0x38a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a33      	ldr	r2, [pc, #204]	@ (8002018 <HAL_DMA_Init+0x440>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_DMA_Init+0x38a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a32      	ldr	r2, [pc, #200]	@ (800201c <HAL_DMA_Init+0x444>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_DMA_Init+0x38a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a30      	ldr	r2, [pc, #192]	@ (8002020 <HAL_DMA_Init+0x448>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_DMA_Init+0x38e>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_DMA_Init+0x390>
 8001f66:	2300      	movs	r3, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8097 	beq.w	800209c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <HAL_DMA_Init+0x42c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d021      	beq.n	8001fbc <HAL_DMA_Init+0x3e4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a22      	ldr	r2, [pc, #136]	@ (8002008 <HAL_DMA_Init+0x430>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01c      	beq.n	8001fbc <HAL_DMA_Init+0x3e4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a21      	ldr	r2, [pc, #132]	@ (800200c <HAL_DMA_Init+0x434>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d017      	beq.n	8001fbc <HAL_DMA_Init+0x3e4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1f      	ldr	r2, [pc, #124]	@ (8002010 <HAL_DMA_Init+0x438>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d012      	beq.n	8001fbc <HAL_DMA_Init+0x3e4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002014 <HAL_DMA_Init+0x43c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00d      	beq.n	8001fbc <HAL_DMA_Init+0x3e4>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8002018 <HAL_DMA_Init+0x440>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d008      	beq.n	8001fbc <HAL_DMA_Init+0x3e4>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <HAL_DMA_Init+0x444>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <HAL_DMA_Init+0x3e4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <HAL_DMA_Init+0x448>)
 8001fba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4b13      	ldr	r3, [pc, #76]	@ (8002024 <HAL_DMA_Init+0x44c>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b40      	cmp	r3, #64	@ 0x40
 8001fe2:	d021      	beq.n	8002028 <HAL_DMA_Init+0x450>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b80      	cmp	r3, #128	@ 0x80
 8001fea:	d102      	bne.n	8001ff2 <HAL_DMA_Init+0x41a>
 8001fec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ff0:	e01b      	b.n	800202a <HAL_DMA_Init+0x452>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e019      	b.n	800202a <HAL_DMA_Init+0x452>
 8001ff6:	bf00      	nop
 8001ff8:	fe10803f 	.word	0xfe10803f
 8001ffc:	5c001000 	.word	0x5c001000
 8002000:	ffff0000 	.word	0xffff0000
 8002004:	58025408 	.word	0x58025408
 8002008:	5802541c 	.word	0x5802541c
 800200c:	58025430 	.word	0x58025430
 8002010:	58025444 	.word	0x58025444
 8002014:	58025458 	.word	0x58025458
 8002018:	5802546c 	.word	0x5802546c
 800201c:	58025480 	.word	0x58025480
 8002020:	58025494 	.word	0x58025494
 8002024:	fffe000f 	.word	0xfffe000f
 8002028:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68d2      	ldr	r2, [r2, #12]
 800202e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002030:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002038:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002040:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002048:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002050:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002058:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4b6e      	ldr	r3, [pc, #440]	@ (8002228 <HAL_DMA_Init+0x650>)
 8002070:	4413      	add	r3, r2
 8002072:	4a6e      	ldr	r2, [pc, #440]	@ (800222c <HAL_DMA_Init+0x654>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	009a      	lsls	r2, r3, #2
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f002 fb5f 	bl	8004744 <DMA_CalcBaseAndBitshift>
 8002086:	4603      	mov	r3, r0
 8002088:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	2201      	movs	r2, #1
 8002094:	409a      	lsls	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	e008      	b.n	80020ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2240      	movs	r2, #64	@ 0x40
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2203      	movs	r2, #3
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0b7      	b.n	800221e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002230 <HAL_DMA_Init+0x658>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d072      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002234 <HAL_DMA_Init+0x65c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d06d      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002238 <HAL_DMA_Init+0x660>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d068      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a5a      	ldr	r2, [pc, #360]	@ (800223c <HAL_DMA_Init+0x664>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d063      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a59      	ldr	r2, [pc, #356]	@ (8002240 <HAL_DMA_Init+0x668>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d05e      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a57      	ldr	r2, [pc, #348]	@ (8002244 <HAL_DMA_Init+0x66c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d059      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a56      	ldr	r2, [pc, #344]	@ (8002248 <HAL_DMA_Init+0x670>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d054      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a54      	ldr	r2, [pc, #336]	@ (800224c <HAL_DMA_Init+0x674>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d04f      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a53      	ldr	r2, [pc, #332]	@ (8002250 <HAL_DMA_Init+0x678>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04a      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a51      	ldr	r2, [pc, #324]	@ (8002254 <HAL_DMA_Init+0x67c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d045      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a50      	ldr	r2, [pc, #320]	@ (8002258 <HAL_DMA_Init+0x680>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a4e      	ldr	r2, [pc, #312]	@ (800225c <HAL_DMA_Init+0x684>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d03b      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a4d      	ldr	r2, [pc, #308]	@ (8002260 <HAL_DMA_Init+0x688>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d036      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a4b      	ldr	r2, [pc, #300]	@ (8002264 <HAL_DMA_Init+0x68c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a4a      	ldr	r2, [pc, #296]	@ (8002268 <HAL_DMA_Init+0x690>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d02c      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a48      	ldr	r2, [pc, #288]	@ (800226c <HAL_DMA_Init+0x694>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d027      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a47      	ldr	r2, [pc, #284]	@ (8002270 <HAL_DMA_Init+0x698>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a45      	ldr	r2, [pc, #276]	@ (8002274 <HAL_DMA_Init+0x69c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a44      	ldr	r2, [pc, #272]	@ (8002278 <HAL_DMA_Init+0x6a0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a42      	ldr	r2, [pc, #264]	@ (800227c <HAL_DMA_Init+0x6a4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a41      	ldr	r2, [pc, #260]	@ (8002280 <HAL_DMA_Init+0x6a8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a3f      	ldr	r2, [pc, #252]	@ (8002284 <HAL_DMA_Init+0x6ac>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a3e      	ldr	r2, [pc, #248]	@ (8002288 <HAL_DMA_Init+0x6b0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Init+0x5c6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a3c      	ldr	r2, [pc, #240]	@ (800228c <HAL_DMA_Init+0x6b4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_DMA_Init+0x5ca>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_DMA_Init+0x5cc>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d032      	beq.n	800220e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f002 fbf9 	bl	80049a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b80      	cmp	r3, #128	@ 0x80
 80021b4:	d102      	bne.n	80021bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d010      	beq.n	80021fc <HAL_DMA_Init+0x624>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d80c      	bhi.n	80021fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f002 fc76 	bl	8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	e008      	b.n	800220e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	a7fdabf8 	.word	0xa7fdabf8
 800222c:	cccccccd 	.word	0xcccccccd
 8002230:	40020010 	.word	0x40020010
 8002234:	40020028 	.word	0x40020028
 8002238:	40020040 	.word	0x40020040
 800223c:	40020058 	.word	0x40020058
 8002240:	40020070 	.word	0x40020070
 8002244:	40020088 	.word	0x40020088
 8002248:	400200a0 	.word	0x400200a0
 800224c:	400200b8 	.word	0x400200b8
 8002250:	40020410 	.word	0x40020410
 8002254:	40020428 	.word	0x40020428
 8002258:	40020440 	.word	0x40020440
 800225c:	40020458 	.word	0x40020458
 8002260:	40020470 	.word	0x40020470
 8002264:	40020488 	.word	0x40020488
 8002268:	400204a0 	.word	0x400204a0
 800226c:	400204b8 	.word	0x400204b8
 8002270:	58025408 	.word	0x58025408
 8002274:	5802541c 	.word	0x5802541c
 8002278:	58025430 	.word	0x58025430
 800227c:	58025444 	.word	0x58025444
 8002280:	58025458 	.word	0x58025458
 8002284:	5802546c 	.word	0x5802546c
 8002288:	58025480 	.word	0x58025480
 800228c:	58025494 	.word	0x58025494

08002290 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1a8      	b.n	80025f4 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a82      	ldr	r2, [pc, #520]	@ (80024b0 <HAL_DMA_DeInit+0x220>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d04a      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a80      	ldr	r2, [pc, #512]	@ (80024b4 <HAL_DMA_DeInit+0x224>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d045      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7f      	ldr	r2, [pc, #508]	@ (80024b8 <HAL_DMA_DeInit+0x228>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d040      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a7d      	ldr	r2, [pc, #500]	@ (80024bc <HAL_DMA_DeInit+0x22c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d03b      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7c      	ldr	r2, [pc, #496]	@ (80024c0 <HAL_DMA_DeInit+0x230>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d036      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a7a      	ldr	r2, [pc, #488]	@ (80024c4 <HAL_DMA_DeInit+0x234>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d031      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a79      	ldr	r2, [pc, #484]	@ (80024c8 <HAL_DMA_DeInit+0x238>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d02c      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a77      	ldr	r2, [pc, #476]	@ (80024cc <HAL_DMA_DeInit+0x23c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d027      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a76      	ldr	r2, [pc, #472]	@ (80024d0 <HAL_DMA_DeInit+0x240>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d022      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a74      	ldr	r2, [pc, #464]	@ (80024d4 <HAL_DMA_DeInit+0x244>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01d      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a73      	ldr	r2, [pc, #460]	@ (80024d8 <HAL_DMA_DeInit+0x248>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d018      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a71      	ldr	r2, [pc, #452]	@ (80024dc <HAL_DMA_DeInit+0x24c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a70      	ldr	r2, [pc, #448]	@ (80024e0 <HAL_DMA_DeInit+0x250>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00e      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6e      	ldr	r2, [pc, #440]	@ (80024e4 <HAL_DMA_DeInit+0x254>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6d      	ldr	r2, [pc, #436]	@ (80024e8 <HAL_DMA_DeInit+0x258>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_DMA_DeInit+0xb2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6b      	ldr	r2, [pc, #428]	@ (80024ec <HAL_DMA_DeInit+0x25c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d108      	bne.n	8002354 <HAL_DMA_DeInit+0xc4>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e007      	b.n	8002364 <HAL_DMA_DeInit+0xd4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a51      	ldr	r2, [pc, #324]	@ (80024b0 <HAL_DMA_DeInit+0x220>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d04a      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a50      	ldr	r2, [pc, #320]	@ (80024b4 <HAL_DMA_DeInit+0x224>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d045      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a4e      	ldr	r2, [pc, #312]	@ (80024b8 <HAL_DMA_DeInit+0x228>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d040      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a4d      	ldr	r2, [pc, #308]	@ (80024bc <HAL_DMA_DeInit+0x22c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d03b      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a4b      	ldr	r2, [pc, #300]	@ (80024c0 <HAL_DMA_DeInit+0x230>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d036      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a4a      	ldr	r2, [pc, #296]	@ (80024c4 <HAL_DMA_DeInit+0x234>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d031      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a48      	ldr	r2, [pc, #288]	@ (80024c8 <HAL_DMA_DeInit+0x238>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d02c      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a47      	ldr	r2, [pc, #284]	@ (80024cc <HAL_DMA_DeInit+0x23c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d027      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a45      	ldr	r2, [pc, #276]	@ (80024d0 <HAL_DMA_DeInit+0x240>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d022      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a44      	ldr	r2, [pc, #272]	@ (80024d4 <HAL_DMA_DeInit+0x244>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d01d      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a42      	ldr	r2, [pc, #264]	@ (80024d8 <HAL_DMA_DeInit+0x248>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d018      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a41      	ldr	r2, [pc, #260]	@ (80024dc <HAL_DMA_DeInit+0x24c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a3f      	ldr	r2, [pc, #252]	@ (80024e0 <HAL_DMA_DeInit+0x250>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00e      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a3e      	ldr	r2, [pc, #248]	@ (80024e4 <HAL_DMA_DeInit+0x254>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d009      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a3c      	ldr	r2, [pc, #240]	@ (80024e8 <HAL_DMA_DeInit+0x258>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_DMA_DeInit+0x174>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	@ (80024ec <HAL_DMA_DeInit+0x25c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_DMA_DeInit+0x178>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_DMA_DeInit+0x17a>
 8002408:	2300      	movs	r3, #0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d025      	beq.n	800245a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2200      	movs	r2, #0
 800241c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2221      	movs	r2, #33	@ 0x21
 800243c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f002 f980 	bl	8004744 <DMA_CalcBaseAndBitshift>
 8002444:	4603      	mov	r3, r0
 8002446:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	223f      	movs	r2, #63	@ 0x3f
 8002452:	409a      	lsls	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	e081      	b.n	800255e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a24      	ldr	r2, [pc, #144]	@ (80024f0 <HAL_DMA_DeInit+0x260>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d022      	beq.n	80024aa <HAL_DMA_DeInit+0x21a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a22      	ldr	r2, [pc, #136]	@ (80024f4 <HAL_DMA_DeInit+0x264>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01d      	beq.n	80024aa <HAL_DMA_DeInit+0x21a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a21      	ldr	r2, [pc, #132]	@ (80024f8 <HAL_DMA_DeInit+0x268>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d018      	beq.n	80024aa <HAL_DMA_DeInit+0x21a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1f      	ldr	r2, [pc, #124]	@ (80024fc <HAL_DMA_DeInit+0x26c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_DMA_DeInit+0x21a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1e      	ldr	r2, [pc, #120]	@ (8002500 <HAL_DMA_DeInit+0x270>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00e      	beq.n	80024aa <HAL_DMA_DeInit+0x21a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1c      	ldr	r2, [pc, #112]	@ (8002504 <HAL_DMA_DeInit+0x274>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_DMA_DeInit+0x21a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1b      	ldr	r2, [pc, #108]	@ (8002508 <HAL_DMA_DeInit+0x278>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_DMA_DeInit+0x21a>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	@ (800250c <HAL_DMA_DeInit+0x27c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d132      	bne.n	8002510 <HAL_DMA_DeInit+0x280>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e031      	b.n	8002512 <HAL_DMA_DeInit+0x282>
 80024ae:	bf00      	nop
 80024b0:	40020010 	.word	0x40020010
 80024b4:	40020028 	.word	0x40020028
 80024b8:	40020040 	.word	0x40020040
 80024bc:	40020058 	.word	0x40020058
 80024c0:	40020070 	.word	0x40020070
 80024c4:	40020088 	.word	0x40020088
 80024c8:	400200a0 	.word	0x400200a0
 80024cc:	400200b8 	.word	0x400200b8
 80024d0:	40020410 	.word	0x40020410
 80024d4:	40020428 	.word	0x40020428
 80024d8:	40020440 	.word	0x40020440
 80024dc:	40020458 	.word	0x40020458
 80024e0:	40020470 	.word	0x40020470
 80024e4:	40020488 	.word	0x40020488
 80024e8:	400204a0 	.word	0x400204a0
 80024ec:	400204b8 	.word	0x400204b8
 80024f0:	58025408 	.word	0x58025408
 80024f4:	5802541c 	.word	0x5802541c
 80024f8:	58025430 	.word	0x58025430
 80024fc:	58025444 	.word	0x58025444
 8002500:	58025458 	.word	0x58025458
 8002504:	5802546c 	.word	0x5802546c
 8002508:	58025480 	.word	0x58025480
 800250c:	58025494 	.word	0x58025494
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d021      	beq.n	800255a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2200      	movs	r2, #0
 8002524:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f002 f900 	bl	8004744 <DMA_CalcBaseAndBitshift>
 8002544:	4603      	mov	r3, r0
 8002546:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2201      	movs	r2, #1
 8002552:	409a      	lsls	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	e001      	b.n	800255e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e04a      	b.n	80025f4 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f002 fa1e 	bl	80049a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800257c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00f      	beq.n	80025a6 <HAL_DMA_DeInit+0x316>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b08      	cmp	r3, #8
 800258c:	d80b      	bhi.n	80025a6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f002 faa0 	bl	8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80025a4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e226      	b.n	8002a66 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_DMA_Start_IT+0x2a>
 8002622:	2302      	movs	r3, #2
 8002624:	e21f      	b.n	8002a66 <HAL_DMA_Start_IT+0x46a>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	f040 820a 	bne.w	8002a50 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a68      	ldr	r2, [pc, #416]	@ (80027f0 <HAL_DMA_Start_IT+0x1f4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d04a      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a66      	ldr	r2, [pc, #408]	@ (80027f4 <HAL_DMA_Start_IT+0x1f8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d045      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a65      	ldr	r2, [pc, #404]	@ (80027f8 <HAL_DMA_Start_IT+0x1fc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d040      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a63      	ldr	r2, [pc, #396]	@ (80027fc <HAL_DMA_Start_IT+0x200>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d03b      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a62      	ldr	r2, [pc, #392]	@ (8002800 <HAL_DMA_Start_IT+0x204>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d036      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a60      	ldr	r2, [pc, #384]	@ (8002804 <HAL_DMA_Start_IT+0x208>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d031      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a5f      	ldr	r2, [pc, #380]	@ (8002808 <HAL_DMA_Start_IT+0x20c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d02c      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a5d      	ldr	r2, [pc, #372]	@ (800280c <HAL_DMA_Start_IT+0x210>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d027      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a5c      	ldr	r2, [pc, #368]	@ (8002810 <HAL_DMA_Start_IT+0x214>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d022      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002814 <HAL_DMA_Start_IT+0x218>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01d      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a59      	ldr	r2, [pc, #356]	@ (8002818 <HAL_DMA_Start_IT+0x21c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d018      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a57      	ldr	r2, [pc, #348]	@ (800281c <HAL_DMA_Start_IT+0x220>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a56      	ldr	r2, [pc, #344]	@ (8002820 <HAL_DMA_Start_IT+0x224>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00e      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a54      	ldr	r2, [pc, #336]	@ (8002824 <HAL_DMA_Start_IT+0x228>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a53      	ldr	r2, [pc, #332]	@ (8002828 <HAL_DMA_Start_IT+0x22c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_DMA_Start_IT+0xee>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a51      	ldr	r2, [pc, #324]	@ (800282c <HAL_DMA_Start_IT+0x230>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d108      	bne.n	80026fc <HAL_DMA_Start_IT+0x100>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0201 	bic.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e007      	b.n	800270c <HAL_DMA_Start_IT+0x110>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f001 fe6a 	bl	80043ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a34      	ldr	r2, [pc, #208]	@ (80027f0 <HAL_DMA_Start_IT+0x1f4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d04a      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a33      	ldr	r2, [pc, #204]	@ (80027f4 <HAL_DMA_Start_IT+0x1f8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d045      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a31      	ldr	r2, [pc, #196]	@ (80027f8 <HAL_DMA_Start_IT+0x1fc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d040      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a30      	ldr	r2, [pc, #192]	@ (80027fc <HAL_DMA_Start_IT+0x200>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d03b      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a2e      	ldr	r2, [pc, #184]	@ (8002800 <HAL_DMA_Start_IT+0x204>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d036      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2d      	ldr	r2, [pc, #180]	@ (8002804 <HAL_DMA_Start_IT+0x208>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d031      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2b      	ldr	r2, [pc, #172]	@ (8002808 <HAL_DMA_Start_IT+0x20c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d02c      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <HAL_DMA_Start_IT+0x210>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d027      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a28      	ldr	r2, [pc, #160]	@ (8002810 <HAL_DMA_Start_IT+0x214>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d022      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a27      	ldr	r2, [pc, #156]	@ (8002814 <HAL_DMA_Start_IT+0x218>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d01d      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a25      	ldr	r2, [pc, #148]	@ (8002818 <HAL_DMA_Start_IT+0x21c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d018      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a24      	ldr	r2, [pc, #144]	@ (800281c <HAL_DMA_Start_IT+0x220>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d013      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a22      	ldr	r2, [pc, #136]	@ (8002820 <HAL_DMA_Start_IT+0x224>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00e      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a21      	ldr	r2, [pc, #132]	@ (8002824 <HAL_DMA_Start_IT+0x228>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d009      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002828 <HAL_DMA_Start_IT+0x22c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d004      	beq.n	80027b8 <HAL_DMA_Start_IT+0x1bc>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <HAL_DMA_Start_IT+0x230>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_DMA_Start_IT+0x1c0>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_DMA_Start_IT+0x1c2>
 80027bc:	2300      	movs	r3, #0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d036      	beq.n	8002830 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 021e 	bic.w	r2, r3, #30
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0216 	orr.w	r2, r2, #22
 80027d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d03e      	beq.n	800285c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0208 	orr.w	r2, r2, #8
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e035      	b.n	800285c <HAL_DMA_Start_IT+0x260>
 80027f0:	40020010 	.word	0x40020010
 80027f4:	40020028 	.word	0x40020028
 80027f8:	40020040 	.word	0x40020040
 80027fc:	40020058 	.word	0x40020058
 8002800:	40020070 	.word	0x40020070
 8002804:	40020088 	.word	0x40020088
 8002808:	400200a0 	.word	0x400200a0
 800280c:	400200b8 	.word	0x400200b8
 8002810:	40020410 	.word	0x40020410
 8002814:	40020428 	.word	0x40020428
 8002818:	40020440 	.word	0x40020440
 800281c:	40020458 	.word	0x40020458
 8002820:	40020470 	.word	0x40020470
 8002824:	40020488 	.word	0x40020488
 8002828:	400204a0 	.word	0x400204a0
 800282c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 020e 	bic.w	r2, r3, #14
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 020a 	orr.w	r2, r2, #10
 8002842:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0204 	orr.w	r2, r2, #4
 800285a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a83      	ldr	r2, [pc, #524]	@ (8002a70 <HAL_DMA_Start_IT+0x474>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d072      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a82      	ldr	r2, [pc, #520]	@ (8002a74 <HAL_DMA_Start_IT+0x478>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d06d      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a80      	ldr	r2, [pc, #512]	@ (8002a78 <HAL_DMA_Start_IT+0x47c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d068      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7f      	ldr	r2, [pc, #508]	@ (8002a7c <HAL_DMA_Start_IT+0x480>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d063      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a7d      	ldr	r2, [pc, #500]	@ (8002a80 <HAL_DMA_Start_IT+0x484>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d05e      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7c      	ldr	r2, [pc, #496]	@ (8002a84 <HAL_DMA_Start_IT+0x488>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d059      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a7a      	ldr	r2, [pc, #488]	@ (8002a88 <HAL_DMA_Start_IT+0x48c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d054      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a79      	ldr	r2, [pc, #484]	@ (8002a8c <HAL_DMA_Start_IT+0x490>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d04f      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a77      	ldr	r2, [pc, #476]	@ (8002a90 <HAL_DMA_Start_IT+0x494>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d04a      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a76      	ldr	r2, [pc, #472]	@ (8002a94 <HAL_DMA_Start_IT+0x498>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d045      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a74      	ldr	r2, [pc, #464]	@ (8002a98 <HAL_DMA_Start_IT+0x49c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d040      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a73      	ldr	r2, [pc, #460]	@ (8002a9c <HAL_DMA_Start_IT+0x4a0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d03b      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a71      	ldr	r2, [pc, #452]	@ (8002aa0 <HAL_DMA_Start_IT+0x4a4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d036      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a70      	ldr	r2, [pc, #448]	@ (8002aa4 <HAL_DMA_Start_IT+0x4a8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d031      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa8 <HAL_DMA_Start_IT+0x4ac>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d02c      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6d      	ldr	r2, [pc, #436]	@ (8002aac <HAL_DMA_Start_IT+0x4b0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d027      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab0 <HAL_DMA_Start_IT+0x4b4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d022      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ab4 <HAL_DMA_Start_IT+0x4b8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d01d      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a68      	ldr	r2, [pc, #416]	@ (8002ab8 <HAL_DMA_Start_IT+0x4bc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d018      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a67      	ldr	r2, [pc, #412]	@ (8002abc <HAL_DMA_Start_IT+0x4c0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d013      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a65      	ldr	r2, [pc, #404]	@ (8002ac0 <HAL_DMA_Start_IT+0x4c4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00e      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a64      	ldr	r2, [pc, #400]	@ (8002ac4 <HAL_DMA_Start_IT+0x4c8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d009      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a62      	ldr	r2, [pc, #392]	@ (8002ac8 <HAL_DMA_Start_IT+0x4cc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d004      	beq.n	800294c <HAL_DMA_Start_IT+0x350>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a61      	ldr	r2, [pc, #388]	@ (8002acc <HAL_DMA_Start_IT+0x4d0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_DMA_Start_IT+0x354>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_DMA_Start_IT+0x356>
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01a      	beq.n	800298c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002972:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002986:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800298a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a37      	ldr	r2, [pc, #220]	@ (8002a70 <HAL_DMA_Start_IT+0x474>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d04a      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a36      	ldr	r2, [pc, #216]	@ (8002a74 <HAL_DMA_Start_IT+0x478>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d045      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a34      	ldr	r2, [pc, #208]	@ (8002a78 <HAL_DMA_Start_IT+0x47c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d040      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a33      	ldr	r2, [pc, #204]	@ (8002a7c <HAL_DMA_Start_IT+0x480>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d03b      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a31      	ldr	r2, [pc, #196]	@ (8002a80 <HAL_DMA_Start_IT+0x484>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d036      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a30      	ldr	r2, [pc, #192]	@ (8002a84 <HAL_DMA_Start_IT+0x488>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d031      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002a88 <HAL_DMA_Start_IT+0x48c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d02c      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a2d      	ldr	r2, [pc, #180]	@ (8002a8c <HAL_DMA_Start_IT+0x490>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d027      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002a90 <HAL_DMA_Start_IT+0x494>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d022      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002a94 <HAL_DMA_Start_IT+0x498>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d01d      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a28      	ldr	r2, [pc, #160]	@ (8002a98 <HAL_DMA_Start_IT+0x49c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d018      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a27      	ldr	r2, [pc, #156]	@ (8002a9c <HAL_DMA_Start_IT+0x4a0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d013      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a25      	ldr	r2, [pc, #148]	@ (8002aa0 <HAL_DMA_Start_IT+0x4a4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00e      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a24      	ldr	r2, [pc, #144]	@ (8002aa4 <HAL_DMA_Start_IT+0x4a8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d009      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	@ (8002aa8 <HAL_DMA_Start_IT+0x4ac>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d004      	beq.n	8002a2c <HAL_DMA_Start_IT+0x430>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a21      	ldr	r2, [pc, #132]	@ (8002aac <HAL_DMA_Start_IT+0x4b0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d108      	bne.n	8002a3e <HAL_DMA_Start_IT+0x442>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e012      	b.n	8002a64 <HAL_DMA_Start_IT+0x468>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	e009      	b.n	8002a64 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40020010 	.word	0x40020010
 8002a74:	40020028 	.word	0x40020028
 8002a78:	40020040 	.word	0x40020040
 8002a7c:	40020058 	.word	0x40020058
 8002a80:	40020070 	.word	0x40020070
 8002a84:	40020088 	.word	0x40020088
 8002a88:	400200a0 	.word	0x400200a0
 8002a8c:	400200b8 	.word	0x400200b8
 8002a90:	40020410 	.word	0x40020410
 8002a94:	40020428 	.word	0x40020428
 8002a98:	40020440 	.word	0x40020440
 8002a9c:	40020458 	.word	0x40020458
 8002aa0:	40020470 	.word	0x40020470
 8002aa4:	40020488 	.word	0x40020488
 8002aa8:	400204a0 	.word	0x400204a0
 8002aac:	400204b8 	.word	0x400204b8
 8002ab0:	58025408 	.word	0x58025408
 8002ab4:	5802541c 	.word	0x5802541c
 8002ab8:	58025430 	.word	0x58025430
 8002abc:	58025444 	.word	0x58025444
 8002ac0:	58025458 	.word	0x58025458
 8002ac4:	5802546c 	.word	0x5802546c
 8002ac8:	58025480 	.word	0x58025480
 8002acc:	58025494 	.word	0x58025494

08002ad0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ad8:	f7fe feec 	bl	80018b4 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e2dc      	b.n	80030a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d008      	beq.n	8002b06 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2280      	movs	r2, #128	@ 0x80
 8002af8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e2cd      	b.n	80030a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a76      	ldr	r2, [pc, #472]	@ (8002ce4 <HAL_DMA_Abort+0x214>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d04a      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a74      	ldr	r2, [pc, #464]	@ (8002ce8 <HAL_DMA_Abort+0x218>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d045      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a73      	ldr	r2, [pc, #460]	@ (8002cec <HAL_DMA_Abort+0x21c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d040      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a71      	ldr	r2, [pc, #452]	@ (8002cf0 <HAL_DMA_Abort+0x220>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d03b      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a70      	ldr	r2, [pc, #448]	@ (8002cf4 <HAL_DMA_Abort+0x224>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d036      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002cf8 <HAL_DMA_Abort+0x228>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d031      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a6d      	ldr	r2, [pc, #436]	@ (8002cfc <HAL_DMA_Abort+0x22c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d02c      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a6b      	ldr	r2, [pc, #428]	@ (8002d00 <HAL_DMA_Abort+0x230>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d027      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6a      	ldr	r2, [pc, #424]	@ (8002d04 <HAL_DMA_Abort+0x234>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d022      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a68      	ldr	r2, [pc, #416]	@ (8002d08 <HAL_DMA_Abort+0x238>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01d      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a67      	ldr	r2, [pc, #412]	@ (8002d0c <HAL_DMA_Abort+0x23c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d018      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a65      	ldr	r2, [pc, #404]	@ (8002d10 <HAL_DMA_Abort+0x240>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a64      	ldr	r2, [pc, #400]	@ (8002d14 <HAL_DMA_Abort+0x244>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00e      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a62      	ldr	r2, [pc, #392]	@ (8002d18 <HAL_DMA_Abort+0x248>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a61      	ldr	r2, [pc, #388]	@ (8002d1c <HAL_DMA_Abort+0x24c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_DMA_Abort+0xd6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a5f      	ldr	r2, [pc, #380]	@ (8002d20 <HAL_DMA_Abort+0x250>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <HAL_DMA_Abort+0xda>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_DMA_Abort+0xdc>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 021e 	bic.w	r2, r2, #30
 8002bbe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	e00a      	b.n	8002bee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 020e 	bic.w	r2, r2, #14
 8002be6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ce4 <HAL_DMA_Abort+0x214>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d072      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce8 <HAL_DMA_Abort+0x218>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d06d      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a39      	ldr	r2, [pc, #228]	@ (8002cec <HAL_DMA_Abort+0x21c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d068      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a37      	ldr	r2, [pc, #220]	@ (8002cf0 <HAL_DMA_Abort+0x220>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d063      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a36      	ldr	r2, [pc, #216]	@ (8002cf4 <HAL_DMA_Abort+0x224>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d05e      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a34      	ldr	r2, [pc, #208]	@ (8002cf8 <HAL_DMA_Abort+0x228>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d059      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a33      	ldr	r2, [pc, #204]	@ (8002cfc <HAL_DMA_Abort+0x22c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d054      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a31      	ldr	r2, [pc, #196]	@ (8002d00 <HAL_DMA_Abort+0x230>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d04f      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a30      	ldr	r2, [pc, #192]	@ (8002d04 <HAL_DMA_Abort+0x234>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d04a      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d08 <HAL_DMA_Abort+0x238>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d045      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2d      	ldr	r2, [pc, #180]	@ (8002d0c <HAL_DMA_Abort+0x23c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d040      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a2b      	ldr	r2, [pc, #172]	@ (8002d10 <HAL_DMA_Abort+0x240>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d03b      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8002d14 <HAL_DMA_Abort+0x244>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d036      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a28      	ldr	r2, [pc, #160]	@ (8002d18 <HAL_DMA_Abort+0x248>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d031      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a27      	ldr	r2, [pc, #156]	@ (8002d1c <HAL_DMA_Abort+0x24c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d02c      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a25      	ldr	r2, [pc, #148]	@ (8002d20 <HAL_DMA_Abort+0x250>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d027      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a24      	ldr	r2, [pc, #144]	@ (8002d24 <HAL_DMA_Abort+0x254>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a22      	ldr	r2, [pc, #136]	@ (8002d28 <HAL_DMA_Abort+0x258>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01d      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a21      	ldr	r2, [pc, #132]	@ (8002d2c <HAL_DMA_Abort+0x25c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d018      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d30 <HAL_DMA_Abort+0x260>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1e      	ldr	r2, [pc, #120]	@ (8002d34 <HAL_DMA_Abort+0x264>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d38 <HAL_DMA_Abort+0x268>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1b      	ldr	r2, [pc, #108]	@ (8002d3c <HAL_DMA_Abort+0x26c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_DMA_Abort+0x20e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a19      	ldr	r2, [pc, #100]	@ (8002d40 <HAL_DMA_Abort+0x270>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d132      	bne.n	8002d44 <HAL_DMA_Abort+0x274>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e031      	b.n	8002d46 <HAL_DMA_Abort+0x276>
 8002ce2:	bf00      	nop
 8002ce4:	40020010 	.word	0x40020010
 8002ce8:	40020028 	.word	0x40020028
 8002cec:	40020040 	.word	0x40020040
 8002cf0:	40020058 	.word	0x40020058
 8002cf4:	40020070 	.word	0x40020070
 8002cf8:	40020088 	.word	0x40020088
 8002cfc:	400200a0 	.word	0x400200a0
 8002d00:	400200b8 	.word	0x400200b8
 8002d04:	40020410 	.word	0x40020410
 8002d08:	40020428 	.word	0x40020428
 8002d0c:	40020440 	.word	0x40020440
 8002d10:	40020458 	.word	0x40020458
 8002d14:	40020470 	.word	0x40020470
 8002d18:	40020488 	.word	0x40020488
 8002d1c:	400204a0 	.word	0x400204a0
 8002d20:	400204b8 	.word	0x400204b8
 8002d24:	58025408 	.word	0x58025408
 8002d28:	5802541c 	.word	0x5802541c
 8002d2c:	58025430 	.word	0x58025430
 8002d30:	58025444 	.word	0x58025444
 8002d34:	58025458 	.word	0x58025458
 8002d38:	5802546c 	.word	0x5802546c
 8002d3c:	58025480 	.word	0x58025480
 8002d40:	58025494 	.word	0x58025494
 8002d44:	2300      	movs	r3, #0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8002f14 <HAL_DMA_Abort+0x444>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d04a      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a6b      	ldr	r2, [pc, #428]	@ (8002f18 <HAL_DMA_Abort+0x448>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d045      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6a      	ldr	r2, [pc, #424]	@ (8002f1c <HAL_DMA_Abort+0x44c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d040      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a68      	ldr	r2, [pc, #416]	@ (8002f20 <HAL_DMA_Abort+0x450>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d03b      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a67      	ldr	r2, [pc, #412]	@ (8002f24 <HAL_DMA_Abort+0x454>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d036      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a65      	ldr	r2, [pc, #404]	@ (8002f28 <HAL_DMA_Abort+0x458>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d031      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a64      	ldr	r2, [pc, #400]	@ (8002f2c <HAL_DMA_Abort+0x45c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d02c      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a62      	ldr	r2, [pc, #392]	@ (8002f30 <HAL_DMA_Abort+0x460>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d027      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a61      	ldr	r2, [pc, #388]	@ (8002f34 <HAL_DMA_Abort+0x464>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d022      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5f      	ldr	r2, [pc, #380]	@ (8002f38 <HAL_DMA_Abort+0x468>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01d      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5e      	ldr	r2, [pc, #376]	@ (8002f3c <HAL_DMA_Abort+0x46c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d018      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5c      	ldr	r2, [pc, #368]	@ (8002f40 <HAL_DMA_Abort+0x470>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f44 <HAL_DMA_Abort+0x474>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a59      	ldr	r2, [pc, #356]	@ (8002f48 <HAL_DMA_Abort+0x478>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a58      	ldr	r2, [pc, #352]	@ (8002f4c <HAL_DMA_Abort+0x47c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_DMA_Abort+0x32a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a56      	ldr	r2, [pc, #344]	@ (8002f50 <HAL_DMA_Abort+0x480>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <HAL_DMA_Abort+0x33c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e007      	b.n	8002e1c <HAL_DMA_Abort+0x34c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e1c:	e013      	b.n	8002e46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e1e:	f7fe fd49 	bl	80018b4 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d90c      	bls.n	8002e46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2203      	movs	r2, #3
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e12d      	b.n	80030a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e5      	bne.n	8002e1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2f      	ldr	r2, [pc, #188]	@ (8002f14 <HAL_DMA_Abort+0x444>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d04a      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2d      	ldr	r2, [pc, #180]	@ (8002f18 <HAL_DMA_Abort+0x448>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d045      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f1c <HAL_DMA_Abort+0x44c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d040      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2a      	ldr	r2, [pc, #168]	@ (8002f20 <HAL_DMA_Abort+0x450>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d03b      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a29      	ldr	r2, [pc, #164]	@ (8002f24 <HAL_DMA_Abort+0x454>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d036      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a27      	ldr	r2, [pc, #156]	@ (8002f28 <HAL_DMA_Abort+0x458>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d031      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a26      	ldr	r2, [pc, #152]	@ (8002f2c <HAL_DMA_Abort+0x45c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d02c      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a24      	ldr	r2, [pc, #144]	@ (8002f30 <HAL_DMA_Abort+0x460>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d027      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a23      	ldr	r2, [pc, #140]	@ (8002f34 <HAL_DMA_Abort+0x464>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d022      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a21      	ldr	r2, [pc, #132]	@ (8002f38 <HAL_DMA_Abort+0x468>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01d      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a20      	ldr	r2, [pc, #128]	@ (8002f3c <HAL_DMA_Abort+0x46c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d018      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f40 <HAL_DMA_Abort+0x470>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1d      	ldr	r2, [pc, #116]	@ (8002f44 <HAL_DMA_Abort+0x474>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f48 <HAL_DMA_Abort+0x478>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d009      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f4c <HAL_DMA_Abort+0x47c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_DMA_Abort+0x422>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <HAL_DMA_Abort+0x480>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_Abort+0x426>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_DMA_Abort+0x428>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02b      	beq.n	8002f54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	223f      	movs	r2, #63	@ 0x3f
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	e02a      	b.n	8002f6a <HAL_DMA_Abort+0x49a>
 8002f14:	40020010 	.word	0x40020010
 8002f18:	40020028 	.word	0x40020028
 8002f1c:	40020040 	.word	0x40020040
 8002f20:	40020058 	.word	0x40020058
 8002f24:	40020070 	.word	0x40020070
 8002f28:	40020088 	.word	0x40020088
 8002f2c:	400200a0 	.word	0x400200a0
 8002f30:	400200b8 	.word	0x400200b8
 8002f34:	40020410 	.word	0x40020410
 8002f38:	40020428 	.word	0x40020428
 8002f3c:	40020440 	.word	0x40020440
 8002f40:	40020458 	.word	0x40020458
 8002f44:	40020470 	.word	0x40020470
 8002f48:	40020488 	.word	0x40020488
 8002f4c:	400204a0 	.word	0x400204a0
 8002f50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2201      	movs	r2, #1
 8002f64:	409a      	lsls	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a4f      	ldr	r2, [pc, #316]	@ (80030ac <HAL_DMA_Abort+0x5dc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d072      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a4d      	ldr	r2, [pc, #308]	@ (80030b0 <HAL_DMA_Abort+0x5e0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d06d      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a4c      	ldr	r2, [pc, #304]	@ (80030b4 <HAL_DMA_Abort+0x5e4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d068      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80030b8 <HAL_DMA_Abort+0x5e8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d063      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a49      	ldr	r2, [pc, #292]	@ (80030bc <HAL_DMA_Abort+0x5ec>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d05e      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a47      	ldr	r2, [pc, #284]	@ (80030c0 <HAL_DMA_Abort+0x5f0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d059      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a46      	ldr	r2, [pc, #280]	@ (80030c4 <HAL_DMA_Abort+0x5f4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d054      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a44      	ldr	r2, [pc, #272]	@ (80030c8 <HAL_DMA_Abort+0x5f8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d04f      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a43      	ldr	r2, [pc, #268]	@ (80030cc <HAL_DMA_Abort+0x5fc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d04a      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a41      	ldr	r2, [pc, #260]	@ (80030d0 <HAL_DMA_Abort+0x600>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d045      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a40      	ldr	r2, [pc, #256]	@ (80030d4 <HAL_DMA_Abort+0x604>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d040      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a3e      	ldr	r2, [pc, #248]	@ (80030d8 <HAL_DMA_Abort+0x608>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d03b      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a3d      	ldr	r2, [pc, #244]	@ (80030dc <HAL_DMA_Abort+0x60c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d036      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a3b      	ldr	r2, [pc, #236]	@ (80030e0 <HAL_DMA_Abort+0x610>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d031      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a3a      	ldr	r2, [pc, #232]	@ (80030e4 <HAL_DMA_Abort+0x614>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d02c      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a38      	ldr	r2, [pc, #224]	@ (80030e8 <HAL_DMA_Abort+0x618>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d027      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a37      	ldr	r2, [pc, #220]	@ (80030ec <HAL_DMA_Abort+0x61c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d022      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a35      	ldr	r2, [pc, #212]	@ (80030f0 <HAL_DMA_Abort+0x620>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01d      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a34      	ldr	r2, [pc, #208]	@ (80030f4 <HAL_DMA_Abort+0x624>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d018      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a32      	ldr	r2, [pc, #200]	@ (80030f8 <HAL_DMA_Abort+0x628>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a31      	ldr	r2, [pc, #196]	@ (80030fc <HAL_DMA_Abort+0x62c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00e      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2f      	ldr	r2, [pc, #188]	@ (8003100 <HAL_DMA_Abort+0x630>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2e      	ldr	r2, [pc, #184]	@ (8003104 <HAL_DMA_Abort+0x634>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_DMA_Abort+0x58a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2c      	ldr	r2, [pc, #176]	@ (8003108 <HAL_DMA_Abort+0x638>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_DMA_Abort+0x58e>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_DMA_Abort+0x590>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d015      	beq.n	8003090 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800306c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003084:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800308e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40020010 	.word	0x40020010
 80030b0:	40020028 	.word	0x40020028
 80030b4:	40020040 	.word	0x40020040
 80030b8:	40020058 	.word	0x40020058
 80030bc:	40020070 	.word	0x40020070
 80030c0:	40020088 	.word	0x40020088
 80030c4:	400200a0 	.word	0x400200a0
 80030c8:	400200b8 	.word	0x400200b8
 80030cc:	40020410 	.word	0x40020410
 80030d0:	40020428 	.word	0x40020428
 80030d4:	40020440 	.word	0x40020440
 80030d8:	40020458 	.word	0x40020458
 80030dc:	40020470 	.word	0x40020470
 80030e0:	40020488 	.word	0x40020488
 80030e4:	400204a0 	.word	0x400204a0
 80030e8:	400204b8 	.word	0x400204b8
 80030ec:	58025408 	.word	0x58025408
 80030f0:	5802541c 	.word	0x5802541c
 80030f4:	58025430 	.word	0x58025430
 80030f8:	58025444 	.word	0x58025444
 80030fc:	58025458 	.word	0x58025458
 8003100:	5802546c 	.word	0x5802546c
 8003104:	58025480 	.word	0x58025480
 8003108:	58025494 	.word	0x58025494

0800310c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e237      	b.n	800358e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d004      	beq.n	8003134 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2280      	movs	r2, #128	@ 0x80
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e22c      	b.n	800358e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5c      	ldr	r2, [pc, #368]	@ (80032ac <HAL_DMA_Abort_IT+0x1a0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d04a      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5b      	ldr	r2, [pc, #364]	@ (80032b0 <HAL_DMA_Abort_IT+0x1a4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d045      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a59      	ldr	r2, [pc, #356]	@ (80032b4 <HAL_DMA_Abort_IT+0x1a8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d040      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a58      	ldr	r2, [pc, #352]	@ (80032b8 <HAL_DMA_Abort_IT+0x1ac>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d03b      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a56      	ldr	r2, [pc, #344]	@ (80032bc <HAL_DMA_Abort_IT+0x1b0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d036      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a55      	ldr	r2, [pc, #340]	@ (80032c0 <HAL_DMA_Abort_IT+0x1b4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d031      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a53      	ldr	r2, [pc, #332]	@ (80032c4 <HAL_DMA_Abort_IT+0x1b8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02c      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a52      	ldr	r2, [pc, #328]	@ (80032c8 <HAL_DMA_Abort_IT+0x1bc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d027      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a50      	ldr	r2, [pc, #320]	@ (80032cc <HAL_DMA_Abort_IT+0x1c0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a4f      	ldr	r2, [pc, #316]	@ (80032d0 <HAL_DMA_Abort_IT+0x1c4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d01d      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a4d      	ldr	r2, [pc, #308]	@ (80032d4 <HAL_DMA_Abort_IT+0x1c8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a4c      	ldr	r2, [pc, #304]	@ (80032d8 <HAL_DMA_Abort_IT+0x1cc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a4a      	ldr	r2, [pc, #296]	@ (80032dc <HAL_DMA_Abort_IT+0x1d0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a49      	ldr	r2, [pc, #292]	@ (80032e0 <HAL_DMA_Abort_IT+0x1d4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a47      	ldr	r2, [pc, #284]	@ (80032e4 <HAL_DMA_Abort_IT+0x1d8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a46      	ldr	r2, [pc, #280]	@ (80032e8 <HAL_DMA_Abort_IT+0x1dc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_DMA_Abort_IT+0xcc>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <HAL_DMA_Abort_IT+0xce>
 80031d8:	2300      	movs	r3, #0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8086 	beq.w	80032ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2204      	movs	r2, #4
 80031e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2f      	ldr	r2, [pc, #188]	@ (80032ac <HAL_DMA_Abort_IT+0x1a0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d04a      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2e      	ldr	r2, [pc, #184]	@ (80032b0 <HAL_DMA_Abort_IT+0x1a4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d045      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2c      	ldr	r2, [pc, #176]	@ (80032b4 <HAL_DMA_Abort_IT+0x1a8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d040      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2b      	ldr	r2, [pc, #172]	@ (80032b8 <HAL_DMA_Abort_IT+0x1ac>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d03b      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a29      	ldr	r2, [pc, #164]	@ (80032bc <HAL_DMA_Abort_IT+0x1b0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d036      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a28      	ldr	r2, [pc, #160]	@ (80032c0 <HAL_DMA_Abort_IT+0x1b4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d031      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a26      	ldr	r2, [pc, #152]	@ (80032c4 <HAL_DMA_Abort_IT+0x1b8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d02c      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a25      	ldr	r2, [pc, #148]	@ (80032c8 <HAL_DMA_Abort_IT+0x1bc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d027      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a23      	ldr	r2, [pc, #140]	@ (80032cc <HAL_DMA_Abort_IT+0x1c0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d022      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a22      	ldr	r2, [pc, #136]	@ (80032d0 <HAL_DMA_Abort_IT+0x1c4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d01d      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a20      	ldr	r2, [pc, #128]	@ (80032d4 <HAL_DMA_Abort_IT+0x1c8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d018      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1f      	ldr	r2, [pc, #124]	@ (80032d8 <HAL_DMA_Abort_IT+0x1cc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <HAL_DMA_Abort_IT+0x1d0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1c      	ldr	r2, [pc, #112]	@ (80032e0 <HAL_DMA_Abort_IT+0x1d4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d009      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1a      	ldr	r2, [pc, #104]	@ (80032e4 <HAL_DMA_Abort_IT+0x1d8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_DMA_Abort_IT+0x17c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a19      	ldr	r2, [pc, #100]	@ (80032e8 <HAL_DMA_Abort_IT+0x1dc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d108      	bne.n	800329a <HAL_DMA_Abort_IT+0x18e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e178      	b.n	800358c <HAL_DMA_Abort_IT+0x480>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e16f      	b.n	800358c <HAL_DMA_Abort_IT+0x480>
 80032ac:	40020010 	.word	0x40020010
 80032b0:	40020028 	.word	0x40020028
 80032b4:	40020040 	.word	0x40020040
 80032b8:	40020058 	.word	0x40020058
 80032bc:	40020070 	.word	0x40020070
 80032c0:	40020088 	.word	0x40020088
 80032c4:	400200a0 	.word	0x400200a0
 80032c8:	400200b8 	.word	0x400200b8
 80032cc:	40020410 	.word	0x40020410
 80032d0:	40020428 	.word	0x40020428
 80032d4:	40020440 	.word	0x40020440
 80032d8:	40020458 	.word	0x40020458
 80032dc:	40020470 	.word	0x40020470
 80032e0:	40020488 	.word	0x40020488
 80032e4:	400204a0 	.word	0x400204a0
 80032e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 020e 	bic.w	r2, r2, #14
 80032fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6c      	ldr	r2, [pc, #432]	@ (80034b4 <HAL_DMA_Abort_IT+0x3a8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d04a      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a6b      	ldr	r2, [pc, #428]	@ (80034b8 <HAL_DMA_Abort_IT+0x3ac>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d045      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a69      	ldr	r2, [pc, #420]	@ (80034bc <HAL_DMA_Abort_IT+0x3b0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d040      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a68      	ldr	r2, [pc, #416]	@ (80034c0 <HAL_DMA_Abort_IT+0x3b4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d03b      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a66      	ldr	r2, [pc, #408]	@ (80034c4 <HAL_DMA_Abort_IT+0x3b8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d036      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a65      	ldr	r2, [pc, #404]	@ (80034c8 <HAL_DMA_Abort_IT+0x3bc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d031      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a63      	ldr	r2, [pc, #396]	@ (80034cc <HAL_DMA_Abort_IT+0x3c0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d02c      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a62      	ldr	r2, [pc, #392]	@ (80034d0 <HAL_DMA_Abort_IT+0x3c4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d027      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a60      	ldr	r2, [pc, #384]	@ (80034d4 <HAL_DMA_Abort_IT+0x3c8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d022      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5f      	ldr	r2, [pc, #380]	@ (80034d8 <HAL_DMA_Abort_IT+0x3cc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d01d      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5d      	ldr	r2, [pc, #372]	@ (80034dc <HAL_DMA_Abort_IT+0x3d0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d018      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a5c      	ldr	r2, [pc, #368]	@ (80034e0 <HAL_DMA_Abort_IT+0x3d4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a5a      	ldr	r2, [pc, #360]	@ (80034e4 <HAL_DMA_Abort_IT+0x3d8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00e      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a59      	ldr	r2, [pc, #356]	@ (80034e8 <HAL_DMA_Abort_IT+0x3dc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a57      	ldr	r2, [pc, #348]	@ (80034ec <HAL_DMA_Abort_IT+0x3e0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_DMA_Abort_IT+0x290>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a56      	ldr	r2, [pc, #344]	@ (80034f0 <HAL_DMA_Abort_IT+0x3e4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <HAL_DMA_Abort_IT+0x2a2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	e007      	b.n	80033be <HAL_DMA_Abort_IT+0x2b2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a3c      	ldr	r2, [pc, #240]	@ (80034b4 <HAL_DMA_Abort_IT+0x3a8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d072      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a3a      	ldr	r2, [pc, #232]	@ (80034b8 <HAL_DMA_Abort_IT+0x3ac>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d06d      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a39      	ldr	r2, [pc, #228]	@ (80034bc <HAL_DMA_Abort_IT+0x3b0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d068      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a37      	ldr	r2, [pc, #220]	@ (80034c0 <HAL_DMA_Abort_IT+0x3b4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d063      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a36      	ldr	r2, [pc, #216]	@ (80034c4 <HAL_DMA_Abort_IT+0x3b8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d05e      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a34      	ldr	r2, [pc, #208]	@ (80034c8 <HAL_DMA_Abort_IT+0x3bc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d059      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a33      	ldr	r2, [pc, #204]	@ (80034cc <HAL_DMA_Abort_IT+0x3c0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d054      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a31      	ldr	r2, [pc, #196]	@ (80034d0 <HAL_DMA_Abort_IT+0x3c4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d04f      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a30      	ldr	r2, [pc, #192]	@ (80034d4 <HAL_DMA_Abort_IT+0x3c8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d04a      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a2e      	ldr	r2, [pc, #184]	@ (80034d8 <HAL_DMA_Abort_IT+0x3cc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d045      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2d      	ldr	r2, [pc, #180]	@ (80034dc <HAL_DMA_Abort_IT+0x3d0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d040      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a2b      	ldr	r2, [pc, #172]	@ (80034e0 <HAL_DMA_Abort_IT+0x3d4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d03b      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a2a      	ldr	r2, [pc, #168]	@ (80034e4 <HAL_DMA_Abort_IT+0x3d8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d036      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a28      	ldr	r2, [pc, #160]	@ (80034e8 <HAL_DMA_Abort_IT+0x3dc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d031      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a27      	ldr	r2, [pc, #156]	@ (80034ec <HAL_DMA_Abort_IT+0x3e0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d02c      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a25      	ldr	r2, [pc, #148]	@ (80034f0 <HAL_DMA_Abort_IT+0x3e4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d027      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a24      	ldr	r2, [pc, #144]	@ (80034f4 <HAL_DMA_Abort_IT+0x3e8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d022      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a22      	ldr	r2, [pc, #136]	@ (80034f8 <HAL_DMA_Abort_IT+0x3ec>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01d      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a21      	ldr	r2, [pc, #132]	@ (80034fc <HAL_DMA_Abort_IT+0x3f0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d018      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1f      	ldr	r2, [pc, #124]	@ (8003500 <HAL_DMA_Abort_IT+0x3f4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1e      	ldr	r2, [pc, #120]	@ (8003504 <HAL_DMA_Abort_IT+0x3f8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00e      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1c      	ldr	r2, [pc, #112]	@ (8003508 <HAL_DMA_Abort_IT+0x3fc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d009      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1b      	ldr	r2, [pc, #108]	@ (800350c <HAL_DMA_Abort_IT+0x400>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_DMA_Abort_IT+0x3a2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a19      	ldr	r2, [pc, #100]	@ (8003510 <HAL_DMA_Abort_IT+0x404>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d132      	bne.n	8003514 <HAL_DMA_Abort_IT+0x408>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e031      	b.n	8003516 <HAL_DMA_Abort_IT+0x40a>
 80034b2:	bf00      	nop
 80034b4:	40020010 	.word	0x40020010
 80034b8:	40020028 	.word	0x40020028
 80034bc:	40020040 	.word	0x40020040
 80034c0:	40020058 	.word	0x40020058
 80034c4:	40020070 	.word	0x40020070
 80034c8:	40020088 	.word	0x40020088
 80034cc:	400200a0 	.word	0x400200a0
 80034d0:	400200b8 	.word	0x400200b8
 80034d4:	40020410 	.word	0x40020410
 80034d8:	40020428 	.word	0x40020428
 80034dc:	40020440 	.word	0x40020440
 80034e0:	40020458 	.word	0x40020458
 80034e4:	40020470 	.word	0x40020470
 80034e8:	40020488 	.word	0x40020488
 80034ec:	400204a0 	.word	0x400204a0
 80034f0:	400204b8 	.word	0x400204b8
 80034f4:	58025408 	.word	0x58025408
 80034f8:	5802541c 	.word	0x5802541c
 80034fc:	58025430 	.word	0x58025430
 8003500:	58025444 	.word	0x58025444
 8003504:	58025458 	.word	0x58025458
 8003508:	5802546c 	.word	0x5802546c
 800350c:	58025480 	.word	0x58025480
 8003510:	58025494 	.word	0x58025494
 8003514:	2300      	movs	r3, #0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d028      	beq.n	800356c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003528:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2201      	movs	r2, #1
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003548:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00c      	beq.n	800356c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800355c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003560:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800356a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop

08003598 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	@ 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035a4:	4b67      	ldr	r3, [pc, #412]	@ (8003744 <HAL_DMA_IRQHandler+0x1ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a67      	ldr	r2, [pc, #412]	@ (8003748 <HAL_DMA_IRQHandler+0x1b0>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0a9b      	lsrs	r3, r3, #10
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a5f      	ldr	r2, [pc, #380]	@ (800374c <HAL_DMA_IRQHandler+0x1b4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d04a      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003750 <HAL_DMA_IRQHandler+0x1b8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d045      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003754 <HAL_DMA_IRQHandler+0x1bc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003758 <HAL_DMA_IRQHandler+0x1c0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d03b      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a59      	ldr	r2, [pc, #356]	@ (800375c <HAL_DMA_IRQHandler+0x1c4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d036      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a57      	ldr	r2, [pc, #348]	@ (8003760 <HAL_DMA_IRQHandler+0x1c8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d031      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a56      	ldr	r2, [pc, #344]	@ (8003764 <HAL_DMA_IRQHandler+0x1cc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d02c      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a54      	ldr	r2, [pc, #336]	@ (8003768 <HAL_DMA_IRQHandler+0x1d0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d027      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a53      	ldr	r2, [pc, #332]	@ (800376c <HAL_DMA_IRQHandler+0x1d4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d022      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a51      	ldr	r2, [pc, #324]	@ (8003770 <HAL_DMA_IRQHandler+0x1d8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01d      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a50      	ldr	r2, [pc, #320]	@ (8003774 <HAL_DMA_IRQHandler+0x1dc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a4e      	ldr	r2, [pc, #312]	@ (8003778 <HAL_DMA_IRQHandler+0x1e0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a4d      	ldr	r2, [pc, #308]	@ (800377c <HAL_DMA_IRQHandler+0x1e4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4b      	ldr	r2, [pc, #300]	@ (8003780 <HAL_DMA_IRQHandler+0x1e8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a4a      	ldr	r2, [pc, #296]	@ (8003784 <HAL_DMA_IRQHandler+0x1ec>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a48      	ldr	r2, [pc, #288]	@ (8003788 <HAL_DMA_IRQHandler+0x1f0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_DMA_IRQHandler+0xd6>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_DMA_IRQHandler+0xd8>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 842b 	beq.w	8003ecc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2208      	movs	r2, #8
 8003680:	409a      	lsls	r2, r3
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80a2 	beq.w	80037d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2e      	ldr	r2, [pc, #184]	@ (800374c <HAL_DMA_IRQHandler+0x1b4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04a      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2d      	ldr	r2, [pc, #180]	@ (8003750 <HAL_DMA_IRQHandler+0x1b8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d045      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003754 <HAL_DMA_IRQHandler+0x1bc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d040      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003758 <HAL_DMA_IRQHandler+0x1c0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d03b      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a28      	ldr	r2, [pc, #160]	@ (800375c <HAL_DMA_IRQHandler+0x1c4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d036      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a27      	ldr	r2, [pc, #156]	@ (8003760 <HAL_DMA_IRQHandler+0x1c8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d031      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a25      	ldr	r2, [pc, #148]	@ (8003764 <HAL_DMA_IRQHandler+0x1cc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d02c      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a24      	ldr	r2, [pc, #144]	@ (8003768 <HAL_DMA_IRQHandler+0x1d0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d027      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a22      	ldr	r2, [pc, #136]	@ (800376c <HAL_DMA_IRQHandler+0x1d4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d022      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a21      	ldr	r2, [pc, #132]	@ (8003770 <HAL_DMA_IRQHandler+0x1d8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d01d      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003774 <HAL_DMA_IRQHandler+0x1dc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003778 <HAL_DMA_IRQHandler+0x1e0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <HAL_DMA_IRQHandler+0x1e4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <HAL_DMA_IRQHandler+0x1e8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a19      	ldr	r2, [pc, #100]	@ (8003784 <HAL_DMA_IRQHandler+0x1ec>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <HAL_DMA_IRQHandler+0x1f0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d12f      	bne.n	800378c <HAL_DMA_IRQHandler+0x1f4>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf14      	ite	ne
 800373a:	2301      	movne	r3, #1
 800373c:	2300      	moveq	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	e02e      	b.n	80037a0 <HAL_DMA_IRQHandler+0x208>
 8003742:	bf00      	nop
 8003744:	24000004 	.word	0x24000004
 8003748:	1b4e81b5 	.word	0x1b4e81b5
 800374c:	40020010 	.word	0x40020010
 8003750:	40020028 	.word	0x40020028
 8003754:	40020040 	.word	0x40020040
 8003758:	40020058 	.word	0x40020058
 800375c:	40020070 	.word	0x40020070
 8003760:	40020088 	.word	0x40020088
 8003764:	400200a0 	.word	0x400200a0
 8003768:	400200b8 	.word	0x400200b8
 800376c:	40020410 	.word	0x40020410
 8003770:	40020428 	.word	0x40020428
 8003774:	40020440 	.word	0x40020440
 8003778:	40020458 	.word	0x40020458
 800377c:	40020470 	.word	0x40020470
 8003780:	40020488 	.word	0x40020488
 8003784:	400204a0 	.word	0x400204a0
 8003788:	400204b8 	.word	0x400204b8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d015      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0204 	bic.w	r2, r2, #4
 80037b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2208      	movs	r2, #8
 80037be:	409a      	lsls	r2, r3
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d06e      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a69      	ldr	r2, [pc, #420]	@ (8003990 <HAL_DMA_IRQHandler+0x3f8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d04a      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a67      	ldr	r2, [pc, #412]	@ (8003994 <HAL_DMA_IRQHandler+0x3fc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d045      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a66      	ldr	r2, [pc, #408]	@ (8003998 <HAL_DMA_IRQHandler+0x400>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d040      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a64      	ldr	r2, [pc, #400]	@ (800399c <HAL_DMA_IRQHandler+0x404>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d03b      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a63      	ldr	r2, [pc, #396]	@ (80039a0 <HAL_DMA_IRQHandler+0x408>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d036      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a61      	ldr	r2, [pc, #388]	@ (80039a4 <HAL_DMA_IRQHandler+0x40c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d031      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a60      	ldr	r2, [pc, #384]	@ (80039a8 <HAL_DMA_IRQHandler+0x410>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d02c      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a5e      	ldr	r2, [pc, #376]	@ (80039ac <HAL_DMA_IRQHandler+0x414>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d027      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5d      	ldr	r2, [pc, #372]	@ (80039b0 <HAL_DMA_IRQHandler+0x418>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a5b      	ldr	r2, [pc, #364]	@ (80039b4 <HAL_DMA_IRQHandler+0x41c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5a      	ldr	r2, [pc, #360]	@ (80039b8 <HAL_DMA_IRQHandler+0x420>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d018      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a58      	ldr	r2, [pc, #352]	@ (80039bc <HAL_DMA_IRQHandler+0x424>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a57      	ldr	r2, [pc, #348]	@ (80039c0 <HAL_DMA_IRQHandler+0x428>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a55      	ldr	r2, [pc, #340]	@ (80039c4 <HAL_DMA_IRQHandler+0x42c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a54      	ldr	r2, [pc, #336]	@ (80039c8 <HAL_DMA_IRQHandler+0x430>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a52      	ldr	r2, [pc, #328]	@ (80039cc <HAL_DMA_IRQHandler+0x434>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10a      	bne.n	800389c <HAL_DMA_IRQHandler+0x304>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e003      	b.n	80038a4 <HAL_DMA_IRQHandler+0x30c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2201      	movs	r2, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f043 0202 	orr.w	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	2204      	movs	r2, #4
 80038ce:	409a      	lsls	r2, r3
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 808f 	beq.w	80039f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2c      	ldr	r2, [pc, #176]	@ (8003990 <HAL_DMA_IRQHandler+0x3f8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d04a      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003994 <HAL_DMA_IRQHandler+0x3fc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d045      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a29      	ldr	r2, [pc, #164]	@ (8003998 <HAL_DMA_IRQHandler+0x400>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d040      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a27      	ldr	r2, [pc, #156]	@ (800399c <HAL_DMA_IRQHandler+0x404>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d03b      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a26      	ldr	r2, [pc, #152]	@ (80039a0 <HAL_DMA_IRQHandler+0x408>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d036      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <HAL_DMA_IRQHandler+0x40c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a23      	ldr	r2, [pc, #140]	@ (80039a8 <HAL_DMA_IRQHandler+0x410>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d02c      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a21      	ldr	r2, [pc, #132]	@ (80039ac <HAL_DMA_IRQHandler+0x414>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d027      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a20      	ldr	r2, [pc, #128]	@ (80039b0 <HAL_DMA_IRQHandler+0x418>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1e      	ldr	r2, [pc, #120]	@ (80039b4 <HAL_DMA_IRQHandler+0x41c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01d      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1d      	ldr	r2, [pc, #116]	@ (80039b8 <HAL_DMA_IRQHandler+0x420>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1b      	ldr	r2, [pc, #108]	@ (80039bc <HAL_DMA_IRQHandler+0x424>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1a      	ldr	r2, [pc, #104]	@ (80039c0 <HAL_DMA_IRQHandler+0x428>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a18      	ldr	r2, [pc, #96]	@ (80039c4 <HAL_DMA_IRQHandler+0x42c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a17      	ldr	r2, [pc, #92]	@ (80039c8 <HAL_DMA_IRQHandler+0x430>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a15      	ldr	r2, [pc, #84]	@ (80039cc <HAL_DMA_IRQHandler+0x434>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d12a      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x438>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e023      	b.n	80039d8 <HAL_DMA_IRQHandler+0x440>
 8003990:	40020010 	.word	0x40020010
 8003994:	40020028 	.word	0x40020028
 8003998:	40020040 	.word	0x40020040
 800399c:	40020058 	.word	0x40020058
 80039a0:	40020070 	.word	0x40020070
 80039a4:	40020088 	.word	0x40020088
 80039a8:	400200a0 	.word	0x400200a0
 80039ac:	400200b8 	.word	0x400200b8
 80039b0:	40020410 	.word	0x40020410
 80039b4:	40020428 	.word	0x40020428
 80039b8:	40020440 	.word	0x40020440
 80039bc:	40020458 	.word	0x40020458
 80039c0:	40020470 	.word	0x40020470
 80039c4:	40020488 	.word	0x40020488
 80039c8:	400204a0 	.word	0x400204a0
 80039cc:	400204b8 	.word	0x400204b8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2300      	movs	r3, #0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00d      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2204      	movs	r2, #4
 80039e6:	409a      	lsls	r2, r3
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	2210      	movs	r2, #16
 8003a02:	409a      	lsls	r2, r3
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a6 	beq.w	8003b5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a85      	ldr	r2, [pc, #532]	@ (8003c28 <HAL_DMA_IRQHandler+0x690>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d04a      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a83      	ldr	r2, [pc, #524]	@ (8003c2c <HAL_DMA_IRQHandler+0x694>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d045      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a82      	ldr	r2, [pc, #520]	@ (8003c30 <HAL_DMA_IRQHandler+0x698>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d040      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a80      	ldr	r2, [pc, #512]	@ (8003c34 <HAL_DMA_IRQHandler+0x69c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d03b      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a7f      	ldr	r2, [pc, #508]	@ (8003c38 <HAL_DMA_IRQHandler+0x6a0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d036      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a7d      	ldr	r2, [pc, #500]	@ (8003c3c <HAL_DMA_IRQHandler+0x6a4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d031      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c40 <HAL_DMA_IRQHandler+0x6a8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d02c      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7a      	ldr	r2, [pc, #488]	@ (8003c44 <HAL_DMA_IRQHandler+0x6ac>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d027      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a79      	ldr	r2, [pc, #484]	@ (8003c48 <HAL_DMA_IRQHandler+0x6b0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d022      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a77      	ldr	r2, [pc, #476]	@ (8003c4c <HAL_DMA_IRQHandler+0x6b4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01d      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a76      	ldr	r2, [pc, #472]	@ (8003c50 <HAL_DMA_IRQHandler+0x6b8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d018      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a74      	ldr	r2, [pc, #464]	@ (8003c54 <HAL_DMA_IRQHandler+0x6bc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a73      	ldr	r2, [pc, #460]	@ (8003c58 <HAL_DMA_IRQHandler+0x6c0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00e      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a71      	ldr	r2, [pc, #452]	@ (8003c5c <HAL_DMA_IRQHandler+0x6c4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d009      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a70      	ldr	r2, [pc, #448]	@ (8003c60 <HAL_DMA_IRQHandler+0x6c8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8003c64 <HAL_DMA_IRQHandler+0x6cc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d10a      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x52c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e009      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x540>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03e      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d108      	bne.n	8003b1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d024      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
 8003b18:	e01f      	b.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01b      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
 8003b2a:	e016      	b.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0208 	bic.w	r2, r2, #8
 8003b48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	2220      	movs	r2, #32
 8003b64:	409a      	lsls	r2, r3
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8110 	beq.w	8003d90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2c      	ldr	r2, [pc, #176]	@ (8003c28 <HAL_DMA_IRQHandler+0x690>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d04a      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c2c <HAL_DMA_IRQHandler+0x694>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d045      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a29      	ldr	r2, [pc, #164]	@ (8003c30 <HAL_DMA_IRQHandler+0x698>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d040      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a28      	ldr	r2, [pc, #160]	@ (8003c34 <HAL_DMA_IRQHandler+0x69c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d03b      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a26      	ldr	r2, [pc, #152]	@ (8003c38 <HAL_DMA_IRQHandler+0x6a0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d036      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a25      	ldr	r2, [pc, #148]	@ (8003c3c <HAL_DMA_IRQHandler+0x6a4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d031      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a23      	ldr	r2, [pc, #140]	@ (8003c40 <HAL_DMA_IRQHandler+0x6a8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d02c      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a22      	ldr	r2, [pc, #136]	@ (8003c44 <HAL_DMA_IRQHandler+0x6ac>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d027      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a20      	ldr	r2, [pc, #128]	@ (8003c48 <HAL_DMA_IRQHandler+0x6b0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d022      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1f      	ldr	r2, [pc, #124]	@ (8003c4c <HAL_DMA_IRQHandler+0x6b4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d01d      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c50 <HAL_DMA_IRQHandler+0x6b8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d018      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c54 <HAL_DMA_IRQHandler+0x6bc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1a      	ldr	r2, [pc, #104]	@ (8003c58 <HAL_DMA_IRQHandler+0x6c0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00e      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a19      	ldr	r2, [pc, #100]	@ (8003c5c <HAL_DMA_IRQHandler+0x6c4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d009      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <HAL_DMA_IRQHandler+0x6c8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a16      	ldr	r2, [pc, #88]	@ (8003c64 <HAL_DMA_IRQHandler+0x6cc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d12b      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x6d0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e02a      	b.n	8003c7c <HAL_DMA_IRQHandler+0x6e4>
 8003c26:	bf00      	nop
 8003c28:	40020010 	.word	0x40020010
 8003c2c:	40020028 	.word	0x40020028
 8003c30:	40020040 	.word	0x40020040
 8003c34:	40020058 	.word	0x40020058
 8003c38:	40020070 	.word	0x40020070
 8003c3c:	40020088 	.word	0x40020088
 8003c40:	400200a0 	.word	0x400200a0
 8003c44:	400200b8 	.word	0x400200b8
 8003c48:	40020410 	.word	0x40020410
 8003c4c:	40020428 	.word	0x40020428
 8003c50:	40020440 	.word	0x40020440
 8003c54:	40020458 	.word	0x40020458
 8003c58:	40020470 	.word	0x40020470
 8003c5c:	40020488 	.word	0x40020488
 8003c60:	400204a0 	.word	0x400204a0
 8003c64:	400204b8 	.word	0x400204b8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8087 	beq.w	8003d90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d139      	bne.n	8003d12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0216 	bic.w	r2, r2, #22
 8003cac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_DMA_IRQHandler+0x736>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0208 	bic.w	r2, r2, #8
 8003cdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	223f      	movs	r2, #63	@ 0x3f
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 834a 	beq.w	800439c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
          }
          return;
 8003d10:	e344      	b.n	800439c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02c      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
 8003d3e:	e027      	b.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d023      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
 8003d50:	e01e      	b.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10f      	bne.n	8003d80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0210 	bic.w	r2, r2, #16
 8003d6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8306 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8088 	beq.w	8003eb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2204      	movs	r2, #4
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a7a      	ldr	r2, [pc, #488]	@ (8003fa0 <HAL_DMA_IRQHandler+0xa08>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d04a      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a79      	ldr	r2, [pc, #484]	@ (8003fa4 <HAL_DMA_IRQHandler+0xa0c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d045      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a77      	ldr	r2, [pc, #476]	@ (8003fa8 <HAL_DMA_IRQHandler+0xa10>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d040      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a76      	ldr	r2, [pc, #472]	@ (8003fac <HAL_DMA_IRQHandler+0xa14>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d03b      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a74      	ldr	r2, [pc, #464]	@ (8003fb0 <HAL_DMA_IRQHandler+0xa18>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d036      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a73      	ldr	r2, [pc, #460]	@ (8003fb4 <HAL_DMA_IRQHandler+0xa1c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d031      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a71      	ldr	r2, [pc, #452]	@ (8003fb8 <HAL_DMA_IRQHandler+0xa20>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02c      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a70      	ldr	r2, [pc, #448]	@ (8003fbc <HAL_DMA_IRQHandler+0xa24>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d027      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a6e      	ldr	r2, [pc, #440]	@ (8003fc0 <HAL_DMA_IRQHandler+0xa28>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d022      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a6d      	ldr	r2, [pc, #436]	@ (8003fc4 <HAL_DMA_IRQHandler+0xa2c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d01d      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6b      	ldr	r2, [pc, #428]	@ (8003fc8 <HAL_DMA_IRQHandler+0xa30>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6a      	ldr	r2, [pc, #424]	@ (8003fcc <HAL_DMA_IRQHandler+0xa34>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a68      	ldr	r2, [pc, #416]	@ (8003fd0 <HAL_DMA_IRQHandler+0xa38>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a67      	ldr	r2, [pc, #412]	@ (8003fd4 <HAL_DMA_IRQHandler+0xa3c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a65      	ldr	r2, [pc, #404]	@ (8003fd8 <HAL_DMA_IRQHandler+0xa40>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a64      	ldr	r2, [pc, #400]	@ (8003fdc <HAL_DMA_IRQHandler+0xa44>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d108      	bne.n	8003e62 <HAL_DMA_IRQHandler+0x8ca>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e007      	b.n	8003e72 <HAL_DMA_IRQHandler+0x8da>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d307      	bcc.n	8003e8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f2      	bne.n	8003e72 <HAL_DMA_IRQHandler+0x8da>
 8003e8c:	e000      	b.n	8003e90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003ea6:	e003      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8272 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
 8003eca:	e26c      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a43      	ldr	r2, [pc, #268]	@ (8003fe0 <HAL_DMA_IRQHandler+0xa48>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a42      	ldr	r2, [pc, #264]	@ (8003fe4 <HAL_DMA_IRQHandler+0xa4c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d01d      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a40      	ldr	r2, [pc, #256]	@ (8003fe8 <HAL_DMA_IRQHandler+0xa50>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3f      	ldr	r2, [pc, #252]	@ (8003fec <HAL_DMA_IRQHandler+0xa54>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff0 <HAL_DMA_IRQHandler+0xa58>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a3c      	ldr	r2, [pc, #240]	@ (8003ff4 <HAL_DMA_IRQHandler+0xa5c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003ff8 <HAL_DMA_IRQHandler+0xa60>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a39      	ldr	r2, [pc, #228]	@ (8003ffc <HAL_DMA_IRQHandler+0xa64>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x988>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_DMA_IRQHandler+0x98a>
 8003f20:	2300      	movs	r3, #0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 823f 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2204      	movs	r2, #4
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80cd 	beq.w	80040e0 <HAL_DMA_IRQHandler+0xb48>
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80c7 	beq.w	80040e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d049      	beq.n	8004000 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8210 	beq.w	80043a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f88:	e20a      	b.n	80043a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8206 	beq.w	80043a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f9c:	e200      	b.n	80043a0 <HAL_DMA_IRQHandler+0xe08>
 8003f9e:	bf00      	nop
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8
 8003fe0:	58025408 	.word	0x58025408
 8003fe4:	5802541c 	.word	0x5802541c
 8003fe8:	58025430 	.word	0x58025430
 8003fec:	58025444 	.word	0x58025444
 8003ff0:	58025458 	.word	0x58025458
 8003ff4:	5802546c 	.word	0x5802546c
 8003ff8:	58025480 	.word	0x58025480
 8003ffc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d160      	bne.n	80040cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7f      	ldr	r2, [pc, #508]	@ (800420c <HAL_DMA_IRQHandler+0xc74>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d04a      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a7d      	ldr	r2, [pc, #500]	@ (8004210 <HAL_DMA_IRQHandler+0xc78>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d045      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a7c      	ldr	r2, [pc, #496]	@ (8004214 <HAL_DMA_IRQHandler+0xc7c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d040      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a7a      	ldr	r2, [pc, #488]	@ (8004218 <HAL_DMA_IRQHandler+0xc80>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d03b      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a79      	ldr	r2, [pc, #484]	@ (800421c <HAL_DMA_IRQHandler+0xc84>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d036      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a77      	ldr	r2, [pc, #476]	@ (8004220 <HAL_DMA_IRQHandler+0xc88>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d031      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a76      	ldr	r2, [pc, #472]	@ (8004224 <HAL_DMA_IRQHandler+0xc8c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d02c      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a74      	ldr	r2, [pc, #464]	@ (8004228 <HAL_DMA_IRQHandler+0xc90>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d027      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a73      	ldr	r2, [pc, #460]	@ (800422c <HAL_DMA_IRQHandler+0xc94>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d022      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a71      	ldr	r2, [pc, #452]	@ (8004230 <HAL_DMA_IRQHandler+0xc98>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01d      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a70      	ldr	r2, [pc, #448]	@ (8004234 <HAL_DMA_IRQHandler+0xc9c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d018      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a6e      	ldr	r2, [pc, #440]	@ (8004238 <HAL_DMA_IRQHandler+0xca0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6d      	ldr	r2, [pc, #436]	@ (800423c <HAL_DMA_IRQHandler+0xca4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6b      	ldr	r2, [pc, #428]	@ (8004240 <HAL_DMA_IRQHandler+0xca8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6a      	ldr	r2, [pc, #424]	@ (8004244 <HAL_DMA_IRQHandler+0xcac>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a68      	ldr	r2, [pc, #416]	@ (8004248 <HAL_DMA_IRQHandler+0xcb0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <HAL_DMA_IRQHandler+0xb24>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e007      	b.n	80040cc <HAL_DMA_IRQHandler+0xb34>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8165 	beq.w	80043a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040de:	e15f      	b.n	80043a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2202      	movs	r2, #2
 80040ea:	409a      	lsls	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80c5 	beq.w	8004280 <HAL_DMA_IRQHandler+0xce8>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80bf 	beq.w	8004280 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	2202      	movs	r2, #2
 800410c:	409a      	lsls	r2, r3
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d018      	beq.n	800414e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 813a 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004138:	e134      	b.n	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8130 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800414c:	e12a      	b.n	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	f040 8089 	bne.w	800426c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2b      	ldr	r2, [pc, #172]	@ (800420c <HAL_DMA_IRQHandler+0xc74>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d04a      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a29      	ldr	r2, [pc, #164]	@ (8004210 <HAL_DMA_IRQHandler+0xc78>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d045      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a28      	ldr	r2, [pc, #160]	@ (8004214 <HAL_DMA_IRQHandler+0xc7c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d040      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a26      	ldr	r2, [pc, #152]	@ (8004218 <HAL_DMA_IRQHandler+0xc80>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d03b      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a25      	ldr	r2, [pc, #148]	@ (800421c <HAL_DMA_IRQHandler+0xc84>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d036      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a23      	ldr	r2, [pc, #140]	@ (8004220 <HAL_DMA_IRQHandler+0xc88>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d031      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a22      	ldr	r2, [pc, #136]	@ (8004224 <HAL_DMA_IRQHandler+0xc8c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d02c      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a20      	ldr	r2, [pc, #128]	@ (8004228 <HAL_DMA_IRQHandler+0xc90>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d027      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1f      	ldr	r2, [pc, #124]	@ (800422c <HAL_DMA_IRQHandler+0xc94>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d022      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004230 <HAL_DMA_IRQHandler+0xc98>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01d      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004234 <HAL_DMA_IRQHandler+0xc9c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d018      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004238 <HAL_DMA_IRQHandler+0xca0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a19      	ldr	r2, [pc, #100]	@ (800423c <HAL_DMA_IRQHandler+0xca4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a17      	ldr	r2, [pc, #92]	@ (8004240 <HAL_DMA_IRQHandler+0xca8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a16      	ldr	r2, [pc, #88]	@ (8004244 <HAL_DMA_IRQHandler+0xcac>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a14      	ldr	r2, [pc, #80]	@ (8004248 <HAL_DMA_IRQHandler+0xcb0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d128      	bne.n	800424c <HAL_DMA_IRQHandler+0xcb4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0214 	bic.w	r2, r2, #20
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e027      	b.n	800425c <HAL_DMA_IRQHandler+0xcc4>
 800420c:	40020010 	.word	0x40020010
 8004210:	40020028 	.word	0x40020028
 8004214:	40020040 	.word	0x40020040
 8004218:	40020058 	.word	0x40020058
 800421c:	40020070 	.word	0x40020070
 8004220:	40020088 	.word	0x40020088
 8004224:	400200a0 	.word	0x400200a0
 8004228:	400200b8 	.word	0x400200b8
 800422c:	40020410 	.word	0x40020410
 8004230:	40020428 	.word	0x40020428
 8004234:	40020440 	.word	0x40020440
 8004238:	40020458 	.word	0x40020458
 800423c:	40020470 	.word	0x40020470
 8004240:	40020488 	.word	0x40020488
 8004244:	400204a0 	.word	0x400204a0
 8004248:	400204b8 	.word	0x400204b8
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 020a 	bic.w	r2, r2, #10
 800425a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8097 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800427e:	e091      	b.n	80043a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2208      	movs	r2, #8
 800428a:	409a      	lsls	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8088 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8082 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a41      	ldr	r2, [pc, #260]	@ (80043ac <HAL_DMA_IRQHandler+0xe14>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d04a      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a3f      	ldr	r2, [pc, #252]	@ (80043b0 <HAL_DMA_IRQHandler+0xe18>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d045      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a3e      	ldr	r2, [pc, #248]	@ (80043b4 <HAL_DMA_IRQHandler+0xe1c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d040      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3c      	ldr	r2, [pc, #240]	@ (80043b8 <HAL_DMA_IRQHandler+0xe20>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d03b      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a3b      	ldr	r2, [pc, #236]	@ (80043bc <HAL_DMA_IRQHandler+0xe24>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d036      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a39      	ldr	r2, [pc, #228]	@ (80043c0 <HAL_DMA_IRQHandler+0xe28>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d031      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a38      	ldr	r2, [pc, #224]	@ (80043c4 <HAL_DMA_IRQHandler+0xe2c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d02c      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a36      	ldr	r2, [pc, #216]	@ (80043c8 <HAL_DMA_IRQHandler+0xe30>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d027      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a35      	ldr	r2, [pc, #212]	@ (80043cc <HAL_DMA_IRQHandler+0xe34>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d022      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a33      	ldr	r2, [pc, #204]	@ (80043d0 <HAL_DMA_IRQHandler+0xe38>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01d      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a32      	ldr	r2, [pc, #200]	@ (80043d4 <HAL_DMA_IRQHandler+0xe3c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d018      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a30      	ldr	r2, [pc, #192]	@ (80043d8 <HAL_DMA_IRQHandler+0xe40>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2f      	ldr	r2, [pc, #188]	@ (80043dc <HAL_DMA_IRQHandler+0xe44>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2d      	ldr	r2, [pc, #180]	@ (80043e0 <HAL_DMA_IRQHandler+0xe48>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2c      	ldr	r2, [pc, #176]	@ (80043e4 <HAL_DMA_IRQHandler+0xe4c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2a      	ldr	r2, [pc, #168]	@ (80043e8 <HAL_DMA_IRQHandler+0xe50>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d108      	bne.n	8004354 <HAL_DMA_IRQHandler+0xdbc>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 021c 	bic.w	r2, r2, #28
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e007      	b.n	8004364 <HAL_DMA_IRQHandler+0xdcc>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 020e 	bic.w	r2, r2, #14
 8004362:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
 800439a:	e004      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800439c:	bf00      	nop
 800439e:	e002      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043a6:	3728      	adds	r7, #40	@ 0x28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40020010 	.word	0x40020010
 80043b0:	40020028 	.word	0x40020028
 80043b4:	40020040 	.word	0x40020040
 80043b8:	40020058 	.word	0x40020058
 80043bc:	40020070 	.word	0x40020070
 80043c0:	40020088 	.word	0x40020088
 80043c4:	400200a0 	.word	0x400200a0
 80043c8:	400200b8 	.word	0x400200b8
 80043cc:	40020410 	.word	0x40020410
 80043d0:	40020428 	.word	0x40020428
 80043d4:	40020440 	.word	0x40020440
 80043d8:	40020458 	.word	0x40020458
 80043dc:	40020470 	.word	0x40020470
 80043e0:	40020488 	.word	0x40020488
 80043e4:	400204a0 	.word	0x400204a0
 80043e8:	400204b8 	.word	0x400204b8

080043ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004404:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a7f      	ldr	r2, [pc, #508]	@ (8004608 <DMA_SetConfig+0x21c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d072      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7d      	ldr	r2, [pc, #500]	@ (800460c <DMA_SetConfig+0x220>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d06d      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7c      	ldr	r2, [pc, #496]	@ (8004610 <DMA_SetConfig+0x224>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d068      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7a      	ldr	r2, [pc, #488]	@ (8004614 <DMA_SetConfig+0x228>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d063      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a79      	ldr	r2, [pc, #484]	@ (8004618 <DMA_SetConfig+0x22c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d05e      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a77      	ldr	r2, [pc, #476]	@ (800461c <DMA_SetConfig+0x230>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d059      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a76      	ldr	r2, [pc, #472]	@ (8004620 <DMA_SetConfig+0x234>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d054      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a74      	ldr	r2, [pc, #464]	@ (8004624 <DMA_SetConfig+0x238>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04f      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a73      	ldr	r2, [pc, #460]	@ (8004628 <DMA_SetConfig+0x23c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d04a      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a71      	ldr	r2, [pc, #452]	@ (800462c <DMA_SetConfig+0x240>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d045      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a70      	ldr	r2, [pc, #448]	@ (8004630 <DMA_SetConfig+0x244>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d040      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6e      	ldr	r2, [pc, #440]	@ (8004634 <DMA_SetConfig+0x248>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d03b      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6d      	ldr	r2, [pc, #436]	@ (8004638 <DMA_SetConfig+0x24c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d036      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6b      	ldr	r2, [pc, #428]	@ (800463c <DMA_SetConfig+0x250>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d031      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6a      	ldr	r2, [pc, #424]	@ (8004640 <DMA_SetConfig+0x254>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d02c      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a68      	ldr	r2, [pc, #416]	@ (8004644 <DMA_SetConfig+0x258>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d027      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a67      	ldr	r2, [pc, #412]	@ (8004648 <DMA_SetConfig+0x25c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a65      	ldr	r2, [pc, #404]	@ (800464c <DMA_SetConfig+0x260>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a64      	ldr	r2, [pc, #400]	@ (8004650 <DMA_SetConfig+0x264>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a62      	ldr	r2, [pc, #392]	@ (8004654 <DMA_SetConfig+0x268>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a61      	ldr	r2, [pc, #388]	@ (8004658 <DMA_SetConfig+0x26c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a5f      	ldr	r2, [pc, #380]	@ (800465c <DMA_SetConfig+0x270>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004660 <DMA_SetConfig+0x274>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a5c      	ldr	r2, [pc, #368]	@ (8004664 <DMA_SetConfig+0x278>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <DMA_SetConfig+0x10e>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <DMA_SetConfig+0x110>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00d      	beq.n	800451c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004508:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800451a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a39      	ldr	r2, [pc, #228]	@ (8004608 <DMA_SetConfig+0x21c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d04a      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a38      	ldr	r2, [pc, #224]	@ (800460c <DMA_SetConfig+0x220>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d045      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a36      	ldr	r2, [pc, #216]	@ (8004610 <DMA_SetConfig+0x224>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d040      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a35      	ldr	r2, [pc, #212]	@ (8004614 <DMA_SetConfig+0x228>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d03b      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a33      	ldr	r2, [pc, #204]	@ (8004618 <DMA_SetConfig+0x22c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d036      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a32      	ldr	r2, [pc, #200]	@ (800461c <DMA_SetConfig+0x230>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d031      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a30      	ldr	r2, [pc, #192]	@ (8004620 <DMA_SetConfig+0x234>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d02c      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2f      	ldr	r2, [pc, #188]	@ (8004624 <DMA_SetConfig+0x238>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d027      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2d      	ldr	r2, [pc, #180]	@ (8004628 <DMA_SetConfig+0x23c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d022      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2c      	ldr	r2, [pc, #176]	@ (800462c <DMA_SetConfig+0x240>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d01d      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2a      	ldr	r2, [pc, #168]	@ (8004630 <DMA_SetConfig+0x244>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d018      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a29      	ldr	r2, [pc, #164]	@ (8004634 <DMA_SetConfig+0x248>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d013      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a27      	ldr	r2, [pc, #156]	@ (8004638 <DMA_SetConfig+0x24c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00e      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a26      	ldr	r2, [pc, #152]	@ (800463c <DMA_SetConfig+0x250>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d009      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <DMA_SetConfig+0x254>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a23      	ldr	r2, [pc, #140]	@ (8004644 <DMA_SetConfig+0x258>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <DMA_SetConfig+0x1d4>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <DMA_SetConfig+0x1d6>
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d059      	beq.n	800467a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	223f      	movs	r2, #63	@ 0x3f
 80045d0:	409a      	lsls	r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80045e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b40      	cmp	r3, #64	@ 0x40
 80045f4:	d138      	bne.n	8004668 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004606:	e086      	b.n	8004716 <DMA_SetConfig+0x32a>
 8004608:	40020010 	.word	0x40020010
 800460c:	40020028 	.word	0x40020028
 8004610:	40020040 	.word	0x40020040
 8004614:	40020058 	.word	0x40020058
 8004618:	40020070 	.word	0x40020070
 800461c:	40020088 	.word	0x40020088
 8004620:	400200a0 	.word	0x400200a0
 8004624:	400200b8 	.word	0x400200b8
 8004628:	40020410 	.word	0x40020410
 800462c:	40020428 	.word	0x40020428
 8004630:	40020440 	.word	0x40020440
 8004634:	40020458 	.word	0x40020458
 8004638:	40020470 	.word	0x40020470
 800463c:	40020488 	.word	0x40020488
 8004640:	400204a0 	.word	0x400204a0
 8004644:	400204b8 	.word	0x400204b8
 8004648:	58025408 	.word	0x58025408
 800464c:	5802541c 	.word	0x5802541c
 8004650:	58025430 	.word	0x58025430
 8004654:	58025444 	.word	0x58025444
 8004658:	58025458 	.word	0x58025458
 800465c:	5802546c 	.word	0x5802546c
 8004660:	58025480 	.word	0x58025480
 8004664:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]
}
 8004678:	e04d      	b.n	8004716 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a29      	ldr	r2, [pc, #164]	@ (8004724 <DMA_SetConfig+0x338>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <DMA_SetConfig+0x2de>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a27      	ldr	r2, [pc, #156]	@ (8004728 <DMA_SetConfig+0x33c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01d      	beq.n	80046ca <DMA_SetConfig+0x2de>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a26      	ldr	r2, [pc, #152]	@ (800472c <DMA_SetConfig+0x340>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <DMA_SetConfig+0x2de>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a24      	ldr	r2, [pc, #144]	@ (8004730 <DMA_SetConfig+0x344>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a23      	ldr	r2, [pc, #140]	@ (8004734 <DMA_SetConfig+0x348>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a21      	ldr	r2, [pc, #132]	@ (8004738 <DMA_SetConfig+0x34c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a20      	ldr	r2, [pc, #128]	@ (800473c <DMA_SetConfig+0x350>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004740 <DMA_SetConfig+0x354>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d101      	bne.n	80046ce <DMA_SetConfig+0x2e2>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <DMA_SetConfig+0x2e4>
 80046ce:	2300      	movs	r3, #0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b40      	cmp	r3, #64	@ 0x40
 80046f2:	d108      	bne.n	8004706 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	60da      	str	r2, [r3, #12]
}
 8004704:	e007      	b.n	8004716 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	60da      	str	r2, [r3, #12]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	58025408 	.word	0x58025408
 8004728:	5802541c 	.word	0x5802541c
 800472c:	58025430 	.word	0x58025430
 8004730:	58025444 	.word	0x58025444
 8004734:	58025458 	.word	0x58025458
 8004738:	5802546c 	.word	0x5802546c
 800473c:	58025480 	.word	0x58025480
 8004740:	58025494 	.word	0x58025494

08004744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a42      	ldr	r2, [pc, #264]	@ (800485c <DMA_CalcBaseAndBitshift+0x118>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d04a      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a41      	ldr	r2, [pc, #260]	@ (8004860 <DMA_CalcBaseAndBitshift+0x11c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d045      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a3f      	ldr	r2, [pc, #252]	@ (8004864 <DMA_CalcBaseAndBitshift+0x120>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d040      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3e      	ldr	r2, [pc, #248]	@ (8004868 <DMA_CalcBaseAndBitshift+0x124>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d03b      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a3c      	ldr	r2, [pc, #240]	@ (800486c <DMA_CalcBaseAndBitshift+0x128>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d036      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a3b      	ldr	r2, [pc, #236]	@ (8004870 <DMA_CalcBaseAndBitshift+0x12c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d031      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a39      	ldr	r2, [pc, #228]	@ (8004874 <DMA_CalcBaseAndBitshift+0x130>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d02c      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a38      	ldr	r2, [pc, #224]	@ (8004878 <DMA_CalcBaseAndBitshift+0x134>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d027      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a36      	ldr	r2, [pc, #216]	@ (800487c <DMA_CalcBaseAndBitshift+0x138>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d022      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a35      	ldr	r2, [pc, #212]	@ (8004880 <DMA_CalcBaseAndBitshift+0x13c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d01d      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a33      	ldr	r2, [pc, #204]	@ (8004884 <DMA_CalcBaseAndBitshift+0x140>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d018      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a32      	ldr	r2, [pc, #200]	@ (8004888 <DMA_CalcBaseAndBitshift+0x144>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d013      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a30      	ldr	r2, [pc, #192]	@ (800488c <DMA_CalcBaseAndBitshift+0x148>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00e      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004890 <DMA_CalcBaseAndBitshift+0x14c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d009      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004894 <DMA_CalcBaseAndBitshift+0x150>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004898 <DMA_CalcBaseAndBitshift+0x154>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d101      	bne.n	80047f0 <DMA_CalcBaseAndBitshift+0xac>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <DMA_CalcBaseAndBitshift+0xae>
 80047f0:	2300      	movs	r3, #0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d024      	beq.n	8004840 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3b10      	subs	r3, #16
 80047fe:	4a27      	ldr	r2, [pc, #156]	@ (800489c <DMA_CalcBaseAndBitshift+0x158>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	4a24      	ldr	r2, [pc, #144]	@ (80048a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004810:	5cd3      	ldrb	r3, [r2, r3]
 8004812:	461a      	mov	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d908      	bls.n	8004830 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	4b1f      	ldr	r3, [pc, #124]	@ (80048a4 <DMA_CalcBaseAndBitshift+0x160>)
 8004826:	4013      	ands	r3, r2
 8004828:	1d1a      	adds	r2, r3, #4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	659a      	str	r2, [r3, #88]	@ 0x58
 800482e:	e00d      	b.n	800484c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <DMA_CalcBaseAndBitshift+0x160>)
 8004838:	4013      	ands	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6593      	str	r3, [r2, #88]	@ 0x58
 800483e:	e005      	b.n	800484c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40020010 	.word	0x40020010
 8004860:	40020028 	.word	0x40020028
 8004864:	40020040 	.word	0x40020040
 8004868:	40020058 	.word	0x40020058
 800486c:	40020070 	.word	0x40020070
 8004870:	40020088 	.word	0x40020088
 8004874:	400200a0 	.word	0x400200a0
 8004878:	400200b8 	.word	0x400200b8
 800487c:	40020410 	.word	0x40020410
 8004880:	40020428 	.word	0x40020428
 8004884:	40020440 	.word	0x40020440
 8004888:	40020458 	.word	0x40020458
 800488c:	40020470 	.word	0x40020470
 8004890:	40020488 	.word	0x40020488
 8004894:	400204a0 	.word	0x400204a0
 8004898:	400204b8 	.word	0x400204b8
 800489c:	aaaaaaab 	.word	0xaaaaaaab
 80048a0:	0800c968 	.word	0x0800c968
 80048a4:	fffffc00 	.word	0xfffffc00

080048a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d120      	bne.n	80048fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d858      	bhi.n	8004976 <DMA_CheckFifoParam+0xce>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <DMA_CheckFifoParam+0x24>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048ef 	.word	0x080048ef
 80048d4:	080048dd 	.word	0x080048dd
 80048d8:	08004977 	.word	0x08004977
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d048      	beq.n	800497a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048ec:	e045      	b.n	800497a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048f6:	d142      	bne.n	800497e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048fc:	e03f      	b.n	800497e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004906:	d123      	bne.n	8004950 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	2b03      	cmp	r3, #3
 800490e:	d838      	bhi.n	8004982 <DMA_CheckFifoParam+0xda>
 8004910:	a201      	add	r2, pc, #4	@ (adr r2, 8004918 <DMA_CheckFifoParam+0x70>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	08004929 	.word	0x08004929
 800491c:	0800492f 	.word	0x0800492f
 8004920:	08004929 	.word	0x08004929
 8004924:	08004941 	.word	0x08004941
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
        break;
 800492c:	e030      	b.n	8004990 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004932:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d025      	beq.n	8004986 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800493e:	e022      	b.n	8004986 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004944:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004948:	d11f      	bne.n	800498a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800494e:	e01c      	b.n	800498a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	2b02      	cmp	r3, #2
 8004956:	d902      	bls.n	800495e <DMA_CheckFifoParam+0xb6>
 8004958:	2b03      	cmp	r3, #3
 800495a:	d003      	beq.n	8004964 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800495c:	e018      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
        break;
 8004962:	e015      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
    break;
 8004974:	e00b      	b.n	800498e <DMA_CheckFifoParam+0xe6>
        break;
 8004976:	bf00      	nop
 8004978:	e00a      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 800497a:	bf00      	nop
 800497c:	e008      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 800497e:	bf00      	nop
 8004980:	e006      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 8004982:	bf00      	nop
 8004984:	e004      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 8004986:	bf00      	nop
 8004988:	e002      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
    break;
 800498e:	bf00      	nop
    }
  }

  return status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop

080049a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a38      	ldr	r2, [pc, #224]	@ (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a36      	ldr	r2, [pc, #216]	@ (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01d      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a35      	ldr	r2, [pc, #212]	@ (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a33      	ldr	r2, [pc, #204]	@ (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a32      	ldr	r2, [pc, #200]	@ (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a30      	ldr	r2, [pc, #192]	@ (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a2f      	ldr	r2, [pc, #188]	@ (8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	3b08      	subs	r3, #8
 8004a10:	4a28      	ldr	r2, [pc, #160]	@ (8004ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4b26      	ldr	r3, [pc, #152]	@ (8004ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a24      	ldr	r2, [pc, #144]	@ (8004abc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a2c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	2201      	movs	r2, #1
 8004a36:	409a      	lsls	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a3c:	e024      	b.n	8004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3b10      	subs	r3, #16
 8004a46:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d806      	bhi.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d902      	bls.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3308      	adds	r3, #8
 8004a64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4b18      	ldr	r3, [pc, #96]	@ (8004acc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	461a      	mov	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a16      	ldr	r2, [pc, #88]	@ (8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a78:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2201      	movs	r2, #1
 8004a82:	409a      	lsls	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	58025408 	.word	0x58025408
 8004a98:	5802541c 	.word	0x5802541c
 8004a9c:	58025430 	.word	0x58025430
 8004aa0:	58025444 	.word	0x58025444
 8004aa4:	58025458 	.word	0x58025458
 8004aa8:	5802546c 	.word	0x5802546c
 8004aac:	58025480 	.word	0x58025480
 8004ab0:	58025494 	.word	0x58025494
 8004ab4:	cccccccd 	.word	0xcccccccd
 8004ab8:	16009600 	.word	0x16009600
 8004abc:	58025880 	.word	0x58025880
 8004ac0:	aaaaaaab 	.word	0xaaaaaaab
 8004ac4:	400204b8 	.word	0x400204b8
 8004ac8:	4002040f 	.word	0x4002040f
 8004acc:	10008200 	.word	0x10008200
 8004ad0:	40020880 	.word	0x40020880

08004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04a      	beq.n	8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d847      	bhi.n	8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a25      	ldr	r2, [pc, #148]	@ (8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d022      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a24      	ldr	r2, [pc, #144]	@ (8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d01d      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a22      	ldr	r2, [pc, #136]	@ (8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d018      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a21      	ldr	r2, [pc, #132]	@ (8004b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d013      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00e      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d009      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d101      	bne.n	8004b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b44:	2300      	movs	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4b17      	ldr	r3, [pc, #92]	@ (8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	461a      	mov	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a15      	ldr	r2, [pc, #84]	@ (8004bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b5c:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b5e:	e009      	b.n	8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4b14      	ldr	r3, [pc, #80]	@ (8004bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a11      	ldr	r2, [pc, #68]	@ (8004bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b72:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	2201      	movs	r2, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	58025408 	.word	0x58025408
 8004b90:	5802541c 	.word	0x5802541c
 8004b94:	58025430 	.word	0x58025430
 8004b98:	58025444 	.word	0x58025444
 8004b9c:	58025458 	.word	0x58025458
 8004ba0:	5802546c 	.word	0x5802546c
 8004ba4:	58025480 	.word	0x58025480
 8004ba8:	58025494 	.word	0x58025494
 8004bac:	1600963f 	.word	0x1600963f
 8004bb0:	58025940 	.word	0x58025940
 8004bb4:	1000823f 	.word	0x1000823f
 8004bb8:	40020940 	.word	0x40020940

08004bbc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e0e3      	b.n	8004d96 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d106      	bne.n	8004be6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2223      	movs	r2, #35	@ 0x23
 8004bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fc f95b 	bl	8000e9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be6:	4b6e      	ldr	r3, [pc, #440]	@ (8004da0 <HAL_ETH_Init+0x1e4>)
 8004be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bec:	4a6c      	ldr	r2, [pc, #432]	@ (8004da0 <HAL_ETH_Init+0x1e4>)
 8004bee:	f043 0302 	orr.w	r3, r3, #2
 8004bf2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8004da0 <HAL_ETH_Init+0x1e4>)
 8004bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	7a1b      	ldrb	r3, [r3, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f7fc fe8d 	bl	800192c <HAL_SYSCFG_ETHInterfaceSelect>
 8004c12:	e003      	b.n	8004c1c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004c14:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004c18:	f7fc fe88 	bl	800192c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004c1c:	4b61      	ldr	r3, [pc, #388]	@ (8004da4 <HAL_ETH_Init+0x1e8>)
 8004c1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c38:	f7fc fe3c 	bl	80018b4 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c3e:	e011      	b.n	8004c64 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004c40:	f7fc fe38 	bl	80018b4 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004c4e:	d909      	bls.n	8004c64 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2204      	movs	r2, #4
 8004c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	22e0      	movs	r2, #224	@ 0xe0
 8004c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e098      	b.n	8004d96 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e4      	bne.n	8004c40 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f89e 	bl	8004db8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004c7c:	f001 ffde 	bl	8006c3c <HAL_RCC_GetHCLKFreq>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4a49      	ldr	r2, [pc, #292]	@ (8004da8 <HAL_ETH_Init+0x1ec>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	0c9a      	lsrs	r2, r3, #18
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3a01      	subs	r2, #1
 8004c90:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fa81 	bl	800519c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ca2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004ca6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004cb6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	22e0      	movs	r2, #224	@ 0xe0
 8004cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e05d      	b.n	8004d96 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ce2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004ce6:	4b31      	ldr	r3, [pc, #196]	@ (8004dac <HAL_ETH_Init+0x1f0>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6952      	ldr	r2, [r2, #20]
 8004cee:	0051      	lsls	r1, r2, #1
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004cfa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fae9 	bl	80052d6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fb2f 	bl	8005368 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	3305      	adds	r3, #5
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	021a      	lsls	r2, r3, #8
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	3303      	adds	r3, #3
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	061a      	lsls	r2, r3, #24
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	3302      	adds	r3, #2
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	3301      	adds	r3, #1
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d48:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d56:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d58:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b11      	ldr	r3, [pc, #68]	@ (8004db0 <HAL_ETH_Init+0x1f4>)
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <HAL_ETH_Init+0x1f8>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2210      	movs	r2, #16
 8004d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	58024400 	.word	0x58024400
 8004da4:	58000400 	.word	0x58000400
 8004da8:	431bde83 	.word	0x431bde83
 8004dac:	ffff8001 	.word	0xffff8001
 8004db0:	0c020060 	.word	0x0c020060
 8004db4:	0c20c000 	.word	0x0c20c000

08004db8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004dd2:	f001 ff33 	bl	8006c3c <HAL_RCC_GetHCLKFreq>
 8004dd6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a1a      	ldr	r2, [pc, #104]	@ (8004e44 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d804      	bhi.n	8004dea <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e022      	b.n	8004e30 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4a16      	ldr	r2, [pc, #88]	@ (8004e48 <HAL_ETH_SetMDIOClockRange+0x90>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d204      	bcs.n	8004dfc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e019      	b.n	8004e30 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a13      	ldr	r2, [pc, #76]	@ (8004e4c <HAL_ETH_SetMDIOClockRange+0x94>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d915      	bls.n	8004e30 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a12      	ldr	r2, [pc, #72]	@ (8004e50 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d804      	bhi.n	8004e16 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e00c      	b.n	8004e30 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4a0e      	ldr	r2, [pc, #56]	@ (8004e54 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d804      	bhi.n	8004e28 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e003      	b.n	8004e30 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8004e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	02160ebf 	.word	0x02160ebf
 8004e48:	03938700 	.word	0x03938700
 8004e4c:	05f5e0ff 	.word	0x05f5e0ff
 8004e50:	08f0d17f 	.word	0x08f0d17f
 8004e54:	0ee6b27f 	.word	0x0ee6b27f

08004e58 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004e6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	791b      	ldrb	r3, [r3, #4]
 8004e70:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004e72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	7b1b      	ldrb	r3, [r3, #12]
 8004e78:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004e7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	7b5b      	ldrb	r3, [r3, #13]
 8004e80:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	7b9b      	ldrb	r3, [r3, #14]
 8004e88:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	7bdb      	ldrb	r3, [r3, #15]
 8004e90:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e92:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	7c12      	ldrb	r2, [r2, #16]
 8004e98:	2a00      	cmp	r2, #0
 8004e9a:	d102      	bne.n	8004ea2 <ETH_SetMACConfig+0x4a>
 8004e9c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004ea0:	e000      	b.n	8004ea4 <ETH_SetMACConfig+0x4c>
 8004ea2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004ea4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	7c52      	ldrb	r2, [r2, #17]
 8004eaa:	2a00      	cmp	r2, #0
 8004eac:	d102      	bne.n	8004eb4 <ETH_SetMACConfig+0x5c>
 8004eae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004eb2:	e000      	b.n	8004eb6 <ETH_SetMACConfig+0x5e>
 8004eb4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004eb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	7c9b      	ldrb	r3, [r3, #18]
 8004ebc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004ebe:	431a      	orrs	r2, r3
               macconf->Speed |
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004ec4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004eca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	7f1b      	ldrb	r3, [r3, #28]
 8004ed0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004ed2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	7f5b      	ldrb	r3, [r3, #29]
 8004ed8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004eda:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	7f92      	ldrb	r2, [r2, #30]
 8004ee0:	2a00      	cmp	r2, #0
 8004ee2:	d102      	bne.n	8004eea <ETH_SetMACConfig+0x92>
 8004ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ee8:	e000      	b.n	8004eec <ETH_SetMACConfig+0x94>
 8004eea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004eec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	7fdb      	ldrb	r3, [r3, #31]
 8004ef2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004ef4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004efc:	2a00      	cmp	r2, #0
 8004efe:	d102      	bne.n	8004f06 <ETH_SetMACConfig+0xae>
 8004f00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f04:	e000      	b.n	8004f08 <ETH_SetMACConfig+0xb0>
 8004f06:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004f08:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004f0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f16:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004f18:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b56      	ldr	r3, [pc, #344]	@ (8005084 <ETH_SetMACConfig+0x22c>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	68f9      	ldr	r1, [r7, #12]
 8004f32:	430b      	orrs	r3, r1
 8004f34:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f42:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004f44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f4c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004f4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004f56:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004f58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004f60:	2a00      	cmp	r2, #0
 8004f62:	d102      	bne.n	8004f6a <ETH_SetMACConfig+0x112>
 8004f64:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004f68:	e000      	b.n	8004f6c <ETH_SetMACConfig+0x114>
 8004f6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004f6c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	4b42      	ldr	r3, [pc, #264]	@ (8005088 <ETH_SetMACConfig+0x230>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	68f9      	ldr	r1, [r7, #12]
 8004f86:	430b      	orrs	r3, r1
 8004f88:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f90:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800508c <ETH_SetMACConfig+0x234>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	68f9      	ldr	r1, [r7, #12]
 8004faa:	430b      	orrs	r3, r1
 8004fac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004fb4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004fba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004fc2:	2a00      	cmp	r2, #0
 8004fc4:	d101      	bne.n	8004fca <ETH_SetMACConfig+0x172>
 8004fc6:	2280      	movs	r2, #128	@ 0x80
 8004fc8:	e000      	b.n	8004fcc <ETH_SetMACConfig+0x174>
 8004fca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004fcc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fde:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	68f9      	ldr	r1, [r7, #12]
 8004fea:	430b      	orrs	r3, r1
 8004fec:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004ff4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004ffc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500a:	f023 0103 	bic.w	r1, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	430a      	orrs	r2, r1
 8005016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005022:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800503e:	2a00      	cmp	r2, #0
 8005040:	d101      	bne.n	8005046 <ETH_SetMACConfig+0x1ee>
 8005042:	2240      	movs	r2, #64	@ 0x40
 8005044:	e000      	b.n	8005048 <ETH_SetMACConfig+0x1f0>
 8005046:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005048:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005050:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005052:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800505a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005068:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	430a      	orrs	r2, r1
 8005074:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	00048083 	.word	0x00048083
 8005088:	c0f88000 	.word	0xc0f88000
 800508c:	fffffef0 	.word	0xfffffef0

08005090 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b38      	ldr	r3, [pc, #224]	@ (8005188 <ETH_SetDMAConfig+0xf8>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	6811      	ldr	r1, [r2, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	430b      	orrs	r3, r1
 80050b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050b6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	791b      	ldrb	r3, [r3, #4]
 80050bc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	7b1b      	ldrb	r3, [r3, #12]
 80050c8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	4b2c      	ldr	r3, [pc, #176]	@ (800518c <ETH_SetDMAConfig+0xfc>)
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	68f9      	ldr	r1, [r7, #12]
 80050e2:	430b      	orrs	r3, r1
 80050e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050e8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	7b5b      	ldrb	r3, [r3, #13]
 80050ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005100:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005104:	4b22      	ldr	r3, [pc, #136]	@ (8005190 <ETH_SetDMAConfig+0x100>)
 8005106:	4013      	ands	r3, r2
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	68f9      	ldr	r1, [r7, #12]
 800510e:	430b      	orrs	r3, r1
 8005110:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005114:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	7d1b      	ldrb	r3, [r3, #20]
 8005120:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005122:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	7f5b      	ldrb	r3, [r3, #29]
 8005128:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005136:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800513a:	4b16      	ldr	r3, [pc, #88]	@ (8005194 <ETH_SetDMAConfig+0x104>)
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	430b      	orrs	r3, r1
 8005146:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800514a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	7f1b      	ldrb	r3, [r3, #28]
 8005152:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005164:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005168:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <ETH_SetDMAConfig+0x108>)
 800516a:	4013      	ands	r3, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	68f9      	ldr	r1, [r7, #12]
 8005172:	430b      	orrs	r3, r1
 8005174:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005178:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	ffff87fd 	.word	0xffff87fd
 800518c:	ffff2ffe 	.word	0xffff2ffe
 8005190:	fffec000 	.word	0xfffec000
 8005194:	ffc0efef 	.word	0xffc0efef
 8005198:	7fc0ffff 	.word	0x7fc0ffff

0800519c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b0a4      	sub	sp, #144	@ 0x90
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80051aa:	2300      	movs	r3, #0
 80051ac:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80051d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051dc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80051f4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80051f8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005200:	2300      	movs	r3, #0
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005210:	2300      	movs	r3, #0
 8005212:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005216:	2300      	movs	r3, #0
 8005218:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800521a:	2300      	movs	r3, #0
 800521c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800521e:	2300      	movs	r3, #0
 8005220:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005234:	2320      	movs	r3, #32
 8005236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005240:	2300      	movs	r3, #0
 8005242:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005246:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800524a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800524c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005250:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005252:	2300      	movs	r3, #0
 8005254:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005258:	2302      	movs	r3, #2
 800525a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005264:	2300      	movs	r3, #0
 8005266:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800526a:	2300      	movs	r3, #0
 800526c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005276:	2300      	movs	r3, #0
 8005278:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005280:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005284:	4619      	mov	r1, r3
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fde6 	bl	8004e58 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800528c:	2301      	movs	r3, #1
 800528e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005290:	2301      	movs	r3, #1
 8005292:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005294:	2300      	movs	r3, #0
 8005296:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005298:	2300      	movs	r3, #0
 800529a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800529e:	2300      	movs	r3, #0
 80052a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80052a6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80052aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80052b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80052b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80052bc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80052c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff fee1 	bl	8005090 <ETH_SetDMAConfig>
}
 80052ce:	bf00      	nop
 80052d0:	3790      	adds	r7, #144	@ 0x90
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e01d      	b.n	8005320 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68d9      	ldr	r1, [r3, #12]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4613      	mov	r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	440b      	add	r3, r1
 80052f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2200      	movs	r2, #0
 8005300:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2200      	movs	r2, #0
 8005306:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2200      	movs	r2, #0
 800530c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	3206      	adds	r2, #6
 8005316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b03      	cmp	r3, #3
 8005324:	d9de      	bls.n	80052e4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005334:	461a      	mov	r2, r3
 8005336:	2303      	movs	r3, #3
 8005338:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005348:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005358:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800535c:	bf00      	nop
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e023      	b.n	80053be <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6919      	ldr	r1, [r3, #16]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4613      	mov	r3, r2
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	4413      	add	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	440b      	add	r3, r1
 8005386:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2200      	movs	r2, #0
 8005392:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2200      	movs	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2200      	movs	r2, #0
 800539e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2200      	movs	r2, #0
 80053aa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	3212      	adds	r2, #18
 80053b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d9d8      	bls.n	8005376 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ea:	461a      	mov	r2, r3
 80053ec:	2303      	movs	r3, #3
 80053ee:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053fe:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005412:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	@ 0x24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005432:	4b89      	ldr	r3, [pc, #548]	@ (8005658 <HAL_GPIO_Init+0x234>)
 8005434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005436:	e194      	b.n	8005762 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2101      	movs	r1, #1
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	4013      	ands	r3, r2
 8005446:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8186 	beq.w	800575c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d005      	beq.n	8005468 <HAL_GPIO_Init+0x44>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d130      	bne.n	80054ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	2203      	movs	r2, #3
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4013      	ands	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4313      	orrs	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800549e:	2201      	movs	r2, #1
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	4013      	ands	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 0201 	and.w	r2, r3, #1
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d017      	beq.n	8005506 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	2203      	movs	r2, #3
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4013      	ands	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d123      	bne.n	800555a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	08da      	lsrs	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3208      	adds	r2, #8
 800551a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	220f      	movs	r2, #15
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4013      	ands	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	08da      	lsrs	r2, r3, #3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3208      	adds	r2, #8
 8005554:	69b9      	ldr	r1, [r7, #24]
 8005556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	2203      	movs	r2, #3
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4013      	ands	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 0203 	and.w	r2, r3, #3
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80e0 	beq.w	800575c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800559c:	4b2f      	ldr	r3, [pc, #188]	@ (800565c <HAL_GPIO_Init+0x238>)
 800559e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055a2:	4a2e      	ldr	r2, [pc, #184]	@ (800565c <HAL_GPIO_Init+0x238>)
 80055a4:	f043 0302 	orr.w	r3, r3, #2
 80055a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80055ac:	4b2b      	ldr	r3, [pc, #172]	@ (800565c <HAL_GPIO_Init+0x238>)
 80055ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ba:	4a29      	ldr	r2, [pc, #164]	@ (8005660 <HAL_GPIO_Init+0x23c>)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	089b      	lsrs	r3, r3, #2
 80055c0:	3302      	adds	r3, #2
 80055c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	220f      	movs	r2, #15
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a20      	ldr	r2, [pc, #128]	@ (8005664 <HAL_GPIO_Init+0x240>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d052      	beq.n	800568c <HAL_GPIO_Init+0x268>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005668 <HAL_GPIO_Init+0x244>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d031      	beq.n	8005652 <HAL_GPIO_Init+0x22e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1e      	ldr	r2, [pc, #120]	@ (800566c <HAL_GPIO_Init+0x248>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d02b      	beq.n	800564e <HAL_GPIO_Init+0x22a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005670 <HAL_GPIO_Init+0x24c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d025      	beq.n	800564a <HAL_GPIO_Init+0x226>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1c      	ldr	r2, [pc, #112]	@ (8005674 <HAL_GPIO_Init+0x250>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01f      	beq.n	8005646 <HAL_GPIO_Init+0x222>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a1b      	ldr	r2, [pc, #108]	@ (8005678 <HAL_GPIO_Init+0x254>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d019      	beq.n	8005642 <HAL_GPIO_Init+0x21e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1a      	ldr	r2, [pc, #104]	@ (800567c <HAL_GPIO_Init+0x258>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <HAL_GPIO_Init+0x21a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a19      	ldr	r2, [pc, #100]	@ (8005680 <HAL_GPIO_Init+0x25c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00d      	beq.n	800563a <HAL_GPIO_Init+0x216>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a18      	ldr	r2, [pc, #96]	@ (8005684 <HAL_GPIO_Init+0x260>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <HAL_GPIO_Init+0x212>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a17      	ldr	r2, [pc, #92]	@ (8005688 <HAL_GPIO_Init+0x264>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d101      	bne.n	8005632 <HAL_GPIO_Init+0x20e>
 800562e:	2309      	movs	r3, #9
 8005630:	e02d      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005632:	230a      	movs	r3, #10
 8005634:	e02b      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005636:	2308      	movs	r3, #8
 8005638:	e029      	b.n	800568e <HAL_GPIO_Init+0x26a>
 800563a:	2307      	movs	r3, #7
 800563c:	e027      	b.n	800568e <HAL_GPIO_Init+0x26a>
 800563e:	2306      	movs	r3, #6
 8005640:	e025      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005642:	2305      	movs	r3, #5
 8005644:	e023      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005646:	2304      	movs	r3, #4
 8005648:	e021      	b.n	800568e <HAL_GPIO_Init+0x26a>
 800564a:	2303      	movs	r3, #3
 800564c:	e01f      	b.n	800568e <HAL_GPIO_Init+0x26a>
 800564e:	2302      	movs	r3, #2
 8005650:	e01d      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005652:	2301      	movs	r3, #1
 8005654:	e01b      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005656:	bf00      	nop
 8005658:	58000080 	.word	0x58000080
 800565c:	58024400 	.word	0x58024400
 8005660:	58000400 	.word	0x58000400
 8005664:	58020000 	.word	0x58020000
 8005668:	58020400 	.word	0x58020400
 800566c:	58020800 	.word	0x58020800
 8005670:	58020c00 	.word	0x58020c00
 8005674:	58021000 	.word	0x58021000
 8005678:	58021400 	.word	0x58021400
 800567c:	58021800 	.word	0x58021800
 8005680:	58021c00 	.word	0x58021c00
 8005684:	58022000 	.word	0x58022000
 8005688:	58022400 	.word	0x58022400
 800568c:	2300      	movs	r3, #0
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	f002 0203 	and.w	r2, r2, #3
 8005694:	0092      	lsls	r2, r2, #2
 8005696:	4093      	lsls	r3, r2
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4313      	orrs	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800569e:	4938      	ldr	r1, [pc, #224]	@ (8005780 <HAL_GPIO_Init+0x35c>)
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	089b      	lsrs	r3, r3, #2
 80056a4:	3302      	adds	r3, #2
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	43db      	mvns	r3, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4013      	ands	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80056d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4013      	ands	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005700:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	43db      	mvns	r3, r3
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4013      	ands	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	43db      	mvns	r3, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4013      	ands	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	3301      	adds	r3, #1
 8005760:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	f47f ae63 	bne.w	8005438 <HAL_GPIO_Init+0x14>
  }
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	3724      	adds	r7, #36	@ 0x24
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	58000400 	.word	0x58000400

08005784 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005792:	4b75      	ldr	r3, [pc, #468]	@ (8005968 <HAL_GPIO_DeInit+0x1e4>)
 8005794:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005796:	e0d9      	b.n	800594c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005798:	2201      	movs	r2, #1
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	4013      	ands	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80cc 	beq.w	8005946 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80057ae:	4a6f      	ldr	r2, [pc, #444]	@ (800596c <HAL_GPIO_DeInit+0x1e8>)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	089b      	lsrs	r3, r3, #2
 80057b4:	3302      	adds	r3, #2
 80057b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ba:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	220f      	movs	r2, #15
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a67      	ldr	r2, [pc, #412]	@ (8005970 <HAL_GPIO_DeInit+0x1ec>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d037      	beq.n	8005848 <HAL_GPIO_DeInit+0xc4>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a66      	ldr	r2, [pc, #408]	@ (8005974 <HAL_GPIO_DeInit+0x1f0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d031      	beq.n	8005844 <HAL_GPIO_DeInit+0xc0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a65      	ldr	r2, [pc, #404]	@ (8005978 <HAL_GPIO_DeInit+0x1f4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d02b      	beq.n	8005840 <HAL_GPIO_DeInit+0xbc>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a64      	ldr	r2, [pc, #400]	@ (800597c <HAL_GPIO_DeInit+0x1f8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d025      	beq.n	800583c <HAL_GPIO_DeInit+0xb8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a63      	ldr	r2, [pc, #396]	@ (8005980 <HAL_GPIO_DeInit+0x1fc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d01f      	beq.n	8005838 <HAL_GPIO_DeInit+0xb4>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a62      	ldr	r2, [pc, #392]	@ (8005984 <HAL_GPIO_DeInit+0x200>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d019      	beq.n	8005834 <HAL_GPIO_DeInit+0xb0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a61      	ldr	r2, [pc, #388]	@ (8005988 <HAL_GPIO_DeInit+0x204>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d013      	beq.n	8005830 <HAL_GPIO_DeInit+0xac>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a60      	ldr	r2, [pc, #384]	@ (800598c <HAL_GPIO_DeInit+0x208>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00d      	beq.n	800582c <HAL_GPIO_DeInit+0xa8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a5f      	ldr	r2, [pc, #380]	@ (8005990 <HAL_GPIO_DeInit+0x20c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d007      	beq.n	8005828 <HAL_GPIO_DeInit+0xa4>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a5e      	ldr	r2, [pc, #376]	@ (8005994 <HAL_GPIO_DeInit+0x210>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d101      	bne.n	8005824 <HAL_GPIO_DeInit+0xa0>
 8005820:	2309      	movs	r3, #9
 8005822:	e012      	b.n	800584a <HAL_GPIO_DeInit+0xc6>
 8005824:	230a      	movs	r3, #10
 8005826:	e010      	b.n	800584a <HAL_GPIO_DeInit+0xc6>
 8005828:	2308      	movs	r3, #8
 800582a:	e00e      	b.n	800584a <HAL_GPIO_DeInit+0xc6>
 800582c:	2307      	movs	r3, #7
 800582e:	e00c      	b.n	800584a <HAL_GPIO_DeInit+0xc6>
 8005830:	2306      	movs	r3, #6
 8005832:	e00a      	b.n	800584a <HAL_GPIO_DeInit+0xc6>
 8005834:	2305      	movs	r3, #5
 8005836:	e008      	b.n	800584a <HAL_GPIO_DeInit+0xc6>
 8005838:	2304      	movs	r3, #4
 800583a:	e006      	b.n	800584a <HAL_GPIO_DeInit+0xc6>
 800583c:	2303      	movs	r3, #3
 800583e:	e004      	b.n	800584a <HAL_GPIO_DeInit+0xc6>
 8005840:	2302      	movs	r3, #2
 8005842:	e002      	b.n	800584a <HAL_GPIO_DeInit+0xc6>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_GPIO_DeInit+0xc6>
 8005848:	2300      	movs	r3, #0
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	f002 0203 	and.w	r2, r2, #3
 8005850:	0092      	lsls	r2, r2, #2
 8005852:	4093      	lsls	r3, r2
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	429a      	cmp	r2, r3
 8005858:	d136      	bne.n	80058c8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	43db      	mvns	r3, r3
 8005870:	401a      	ands	r2, r3
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	43db      	mvns	r3, r3
 8005880:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005884:	4013      	ands	r3, r2
 8005886:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	43db      	mvns	r3, r3
 8005892:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005896:	4013      	ands	r3, r2
 8005898:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	220f      	movs	r2, #15
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80058aa:	4a30      	ldr	r2, [pc, #192]	@ (800596c <HAL_GPIO_DeInit+0x1e8>)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	089b      	lsrs	r3, r3, #2
 80058b0:	3302      	adds	r3, #2
 80058b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	43da      	mvns	r2, r3
 80058ba:	482c      	ldr	r0, [pc, #176]	@ (800596c <HAL_GPIO_DeInit+0x1e8>)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	089b      	lsrs	r3, r3, #2
 80058c0:	400a      	ands	r2, r1
 80058c2:	3302      	adds	r3, #2
 80058c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	2103      	movs	r1, #3
 80058d2:	fa01 f303 	lsl.w	r3, r1, r3
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	08da      	lsrs	r2, r3, #3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3208      	adds	r2, #8
 80058e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	220f      	movs	r2, #15
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	08d2      	lsrs	r2, r2, #3
 80058fc:	4019      	ands	r1, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3208      	adds	r2, #8
 8005902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	2103      	movs	r1, #3
 8005910:	fa01 f303 	lsl.w	r3, r1, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	401a      	ands	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	2101      	movs	r1, #1
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	43db      	mvns	r3, r3
 800592a:	401a      	ands	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	2103      	movs	r1, #3
 800593a:	fa01 f303 	lsl.w	r3, r1, r3
 800593e:	43db      	mvns	r3, r3
 8005940:	401a      	ands	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	3301      	adds	r3, #1
 800594a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	fa22 f303 	lsr.w	r3, r2, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	f47f af1f 	bne.w	8005798 <HAL_GPIO_DeInit+0x14>
  }
}
 800595a:	bf00      	nop
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	58000080 	.word	0x58000080
 800596c:	58000400 	.word	0x58000400
 8005970:	58020000 	.word	0x58020000
 8005974:	58020400 	.word	0x58020400
 8005978:	58020800 	.word	0x58020800
 800597c:	58020c00 	.word	0x58020c00
 8005980:	58021000 	.word	0x58021000
 8005984:	58021400 	.word	0x58021400
 8005988:	58021800 	.word	0x58021800
 800598c:	58021c00 	.word	0x58021c00
 8005990:	58022000 	.word	0x58022000
 8005994:	58022400 	.word	0x58022400

08005998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	807b      	strh	r3, [r7, #2]
 80059a4:	4613      	mov	r3, r2
 80059a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059a8:	787b      	ldrb	r3, [r7, #1]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059ae:	887a      	ldrh	r2, [r7, #2]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059b4:	e003      	b.n	80059be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059b6:	887b      	ldrh	r3, [r7, #2]
 80059b8:	041a      	lsls	r2, r3, #16
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	619a      	str	r2, [r3, #24]
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	460b      	mov	r3, r1
 80059d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059dc:	887a      	ldrh	r2, [r7, #2]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4013      	ands	r3, r2
 80059e2:	041a      	lsls	r2, r3, #16
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	43d9      	mvns	r1, r3
 80059e8:	887b      	ldrh	r3, [r7, #2]
 80059ea:	400b      	ands	r3, r1
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	619a      	str	r2, [r3, #24]
}
 80059f2:	bf00      	nop
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	4603      	mov	r3, r0
 8005a06:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fb f9c1 	bl	8000dac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005a2a:	bf00      	nop
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b086      	sub	sp, #24
 8005a36:	af02      	add	r7, sp, #8
 8005a38:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0fe      	b.n	8005c42 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7fb fccd 	bl	80013f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2203      	movs	r2, #3
 8005a62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f006 f826 	bl	800babc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	7c1a      	ldrb	r2, [r3, #16]
 8005a78:	f88d 2000 	strb.w	r2, [sp]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a80:	f005 ffaa 	bl	800b9d8 <USB_CoreInit>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e0d5      	b.n	8005c42 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f006 f81e 	bl	800bade <USB_SetCurrentMode>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0c6      	b.n	8005c42 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	73fb      	strb	r3, [r7, #15]
 8005ab8:	e04a      	b.n	8005b50 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005aba:	7bfa      	ldrb	r2, [r7, #15]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	3315      	adds	r3, #21
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ace:	7bfa      	ldrb	r2, [r7, #15]
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	3314      	adds	r3, #20
 8005ade:	7bfa      	ldrb	r2, [r7, #15]
 8005ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ae2:	7bfa      	ldrb	r2, [r7, #15]
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	b298      	uxth	r0, r3
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	332e      	adds	r3, #46	@ 0x2e
 8005af6:	4602      	mov	r2, r0
 8005af8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005afa:	7bfa      	ldrb	r2, [r7, #15]
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	3318      	adds	r3, #24
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b0e:	7bfa      	ldrb	r2, [r7, #15]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	331c      	adds	r3, #28
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b22:	7bfa      	ldrb	r2, [r7, #15]
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	3320      	adds	r3, #32
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b36:	7bfa      	ldrb	r2, [r7, #15]
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	3324      	adds	r3, #36	@ 0x24
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	791b      	ldrb	r3, [r3, #4]
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d3af      	bcc.n	8005aba <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
 8005b5e:	e044      	b.n	8005bea <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b60:	7bfa      	ldrb	r2, [r7, #15]
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b76:	7bfa      	ldrb	r2, [r7, #15]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005b88:	7bfa      	ldrb	r2, [r7, #15]
 8005b8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b8c:	7bfa      	ldrb	r2, [r7, #15]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ba2:	7bfa      	ldrb	r2, [r7, #15]
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005bb8:	7bfa      	ldrb	r2, [r7, #15]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bce:	7bfa      	ldrb	r2, [r7, #15]
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	3301      	adds	r3, #1
 8005be8:	73fb      	strb	r3, [r7, #15]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	791b      	ldrb	r3, [r3, #4]
 8005bee:	7bfa      	ldrb	r2, [r7, #15]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d3b5      	bcc.n	8005b60 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7c1a      	ldrb	r2, [r3, #16]
 8005bfc:	f88d 2000 	strb.w	r2, [sp]
 8005c00:	3304      	adds	r3, #4
 8005c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c04:	f005 ffb8 	bl	800bb78 <USB_DevInit>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e013      	b.n	8005c42 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	7b1b      	ldrb	r3, [r3, #12]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d102      	bne.n	8005c36 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f80b 	bl	8005c4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f006 f973 	bl	800bf26 <USB_DevDisconnect>

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c7a:	4b05      	ldr	r3, [pc, #20]	@ (8005c90 <HAL_PCDEx_ActivateLPM+0x44>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	10000003 	.word	0x10000003

08005c94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c9c:	4b19      	ldr	r3, [pc, #100]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x70>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d00a      	beq.n	8005cbe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ca8:	4b16      	ldr	r3, [pc, #88]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x70>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d001      	beq.n	8005cba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e01f      	b.n	8005cfa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e01d      	b.n	8005cfa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005cbe:	4b11      	ldr	r3, [pc, #68]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x70>)
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f023 0207 	bic.w	r2, r3, #7
 8005cc6:	490f      	ldr	r1, [pc, #60]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x70>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cce:	f7fb fdf1 	bl	80018b4 <HAL_GetTick>
 8005cd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cd4:	e009      	b.n	8005cea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cd6:	f7fb fded 	bl	80018b4 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ce4:	d901      	bls.n	8005cea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e007      	b.n	8005cfa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cea:	4b06      	ldr	r3, [pc, #24]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x70>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf6:	d1ee      	bne.n	8005cd6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	58024800 	.word	0x58024800

08005d08 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005d0c:	4b05      	ldr	r3, [pc, #20]	@ (8005d24 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4a04      	ldr	r2, [pc, #16]	@ (8005d24 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d16:	60d3      	str	r3, [r2, #12]
}
 8005d18:	bf00      	nop
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	58024800 	.word	0x58024800

08005d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08c      	sub	sp, #48	@ 0x30
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f000 bc48 	b.w	80065cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8088 	beq.w	8005e5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4a:	4b99      	ldr	r3, [pc, #612]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d54:	4b96      	ldr	r3, [pc, #600]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d007      	beq.n	8005d70 <HAL_RCC_OscConfig+0x48>
 8005d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d62:	2b18      	cmp	r3, #24
 8005d64:	d111      	bne.n	8005d8a <HAL_RCC_OscConfig+0x62>
 8005d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d10c      	bne.n	8005d8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d70:	4b8f      	ldr	r3, [pc, #572]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d06d      	beq.n	8005e58 <HAL_RCC_OscConfig+0x130>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d169      	bne.n	8005e58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	f000 bc21 	b.w	80065cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d92:	d106      	bne.n	8005da2 <HAL_RCC_OscConfig+0x7a>
 8005d94:	4b86      	ldr	r3, [pc, #536]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a85      	ldr	r2, [pc, #532]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e02e      	b.n	8005e00 <HAL_RCC_OscConfig+0xd8>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x9c>
 8005daa:	4b81      	ldr	r3, [pc, #516]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a80      	ldr	r2, [pc, #512]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	4b7e      	ldr	r3, [pc, #504]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a7d      	ldr	r2, [pc, #500]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	e01d      	b.n	8005e00 <HAL_RCC_OscConfig+0xd8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dcc:	d10c      	bne.n	8005de8 <HAL_RCC_OscConfig+0xc0>
 8005dce:	4b78      	ldr	r3, [pc, #480]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a77      	ldr	r2, [pc, #476]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	4b75      	ldr	r3, [pc, #468]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a74      	ldr	r2, [pc, #464]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	e00b      	b.n	8005e00 <HAL_RCC_OscConfig+0xd8>
 8005de8:	4b71      	ldr	r3, [pc, #452]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a70      	ldr	r2, [pc, #448]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	4b6e      	ldr	r3, [pc, #440]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a6d      	ldr	r2, [pc, #436]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d013      	beq.n	8005e30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fb fd54 	bl	80018b4 <HAL_GetTick>
 8005e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e10:	f7fb fd50 	bl	80018b4 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	@ 0x64
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e3d4      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e22:	4b63      	ldr	r3, [pc, #396]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f0      	beq.n	8005e10 <HAL_RCC_OscConfig+0xe8>
 8005e2e:	e014      	b.n	8005e5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7fb fd40 	bl	80018b4 <HAL_GetTick>
 8005e34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e38:	f7fb fd3c 	bl	80018b4 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b64      	cmp	r3, #100	@ 0x64
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e3c0      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e4a:	4b59      	ldr	r3, [pc, #356]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x110>
 8005e56:	e000      	b.n	8005e5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 80ca 	beq.w	8005ffc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e68:	4b51      	ldr	r3, [pc, #324]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e72:	4b4f      	ldr	r3, [pc, #316]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <HAL_RCC_OscConfig+0x166>
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	2b18      	cmp	r3, #24
 8005e82:	d156      	bne.n	8005f32 <HAL_RCC_OscConfig+0x20a>
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d151      	bne.n	8005f32 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e8e:	4b48      	ldr	r3, [pc, #288]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x17e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e392      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ea6:	4b42      	ldr	r3, [pc, #264]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f023 0219 	bic.w	r2, r3, #25
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	493f      	ldr	r1, [pc, #252]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb8:	f7fb fcfc 	bl	80018b4 <HAL_GetTick>
 8005ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec0:	f7fb fcf8 	bl	80018b4 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e37c      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ed2:	4b37      	ldr	r3, [pc, #220]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ede:	f7fb fd19 	bl	8001914 <HAL_GetREVID>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d817      	bhi.n	8005f1c <HAL_RCC_OscConfig+0x1f4>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b40      	cmp	r3, #64	@ 0x40
 8005ef2:	d108      	bne.n	8005f06 <HAL_RCC_OscConfig+0x1de>
 8005ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005efc:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f02:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f04:	e07a      	b.n	8005ffc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f06:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	031b      	lsls	r3, r3, #12
 8005f14:	4926      	ldr	r1, [pc, #152]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f1a:	e06f      	b.n	8005ffc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1c:	4b24      	ldr	r3, [pc, #144]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	061b      	lsls	r3, r3, #24
 8005f2a:	4921      	ldr	r1, [pc, #132]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f30:	e064      	b.n	8005ffc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d047      	beq.n	8005fca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 0219 	bic.w	r2, r3, #25
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	491a      	ldr	r1, [pc, #104]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4c:	f7fb fcb2 	bl	80018b4 <HAL_GetTick>
 8005f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f54:	f7fb fcae 	bl	80018b4 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e332      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f66:	4b12      	ldr	r3, [pc, #72]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f72:	f7fb fccf 	bl	8001914 <HAL_GetREVID>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d819      	bhi.n	8005fb4 <HAL_RCC_OscConfig+0x28c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b40      	cmp	r3, #64	@ 0x40
 8005f86:	d108      	bne.n	8005f9a <HAL_RCC_OscConfig+0x272>
 8005f88:	4b09      	ldr	r3, [pc, #36]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f90:	4a07      	ldr	r2, [pc, #28]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f96:	6053      	str	r3, [r2, #4]
 8005f98:	e030      	b.n	8005ffc <HAL_RCC_OscConfig+0x2d4>
 8005f9a:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	031b      	lsls	r3, r3, #12
 8005fa8:	4901      	ldr	r1, [pc, #4]	@ (8005fb0 <HAL_RCC_OscConfig+0x288>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	604b      	str	r3, [r1, #4]
 8005fae:	e025      	b.n	8005ffc <HAL_RCC_OscConfig+0x2d4>
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	4b9a      	ldr	r3, [pc, #616]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	061b      	lsls	r3, r3, #24
 8005fc2:	4997      	ldr	r1, [pc, #604]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	604b      	str	r3, [r1, #4]
 8005fc8:	e018      	b.n	8005ffc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fca:	4b95      	ldr	r3, [pc, #596]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a94      	ldr	r2, [pc, #592]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8005fd0:	f023 0301 	bic.w	r3, r3, #1
 8005fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd6:	f7fb fc6d 	bl	80018b4 <HAL_GetTick>
 8005fda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fde:	f7fb fc69 	bl	80018b4 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e2ed      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ff0:	4b8b      	ldr	r3, [pc, #556]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f0      	bne.n	8005fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 80a9 	beq.w	800615c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800600a:	4b85      	ldr	r3, [pc, #532]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006012:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006014:	4b82      	ldr	r3, [pc, #520]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006018:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b08      	cmp	r3, #8
 800601e:	d007      	beq.n	8006030 <HAL_RCC_OscConfig+0x308>
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b18      	cmp	r3, #24
 8006024:	d13a      	bne.n	800609c <HAL_RCC_OscConfig+0x374>
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	2b01      	cmp	r3, #1
 800602e:	d135      	bne.n	800609c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006030:	4b7b      	ldr	r3, [pc, #492]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <HAL_RCC_OscConfig+0x320>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	2b80      	cmp	r3, #128	@ 0x80
 8006042:	d001      	beq.n	8006048 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e2c1      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006048:	f7fb fc64 	bl	8001914 <HAL_GetREVID>
 800604c:	4603      	mov	r3, r0
 800604e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006052:	4293      	cmp	r3, r2
 8006054:	d817      	bhi.n	8006086 <HAL_RCC_OscConfig+0x35e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	2b20      	cmp	r3, #32
 800605c:	d108      	bne.n	8006070 <HAL_RCC_OscConfig+0x348>
 800605e:	4b70      	ldr	r3, [pc, #448]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006066:	4a6e      	ldr	r2, [pc, #440]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800606c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800606e:	e075      	b.n	800615c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006070:	4b6b      	ldr	r3, [pc, #428]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	069b      	lsls	r3, r3, #26
 800607e:	4968      	ldr	r1, [pc, #416]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006080:	4313      	orrs	r3, r2
 8006082:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006084:	e06a      	b.n	800615c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006086:	4b66      	ldr	r3, [pc, #408]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	061b      	lsls	r3, r3, #24
 8006094:	4962      	ldr	r1, [pc, #392]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006096:	4313      	orrs	r3, r2
 8006098:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800609a:	e05f      	b.n	800615c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d042      	beq.n	800612a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060a4:	4b5e      	ldr	r3, [pc, #376]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 80060aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fb fc00 	bl	80018b4 <HAL_GetTick>
 80060b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80060b8:	f7fb fbfc 	bl	80018b4 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e280      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060ca:	4b55      	ldr	r3, [pc, #340]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060d6:	f7fb fc1d 	bl	8001914 <HAL_GetREVID>
 80060da:	4603      	mov	r3, r0
 80060dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d817      	bhi.n	8006114 <HAL_RCC_OscConfig+0x3ec>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d108      	bne.n	80060fe <HAL_RCC_OscConfig+0x3d6>
 80060ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80060f4:	4a4a      	ldr	r2, [pc, #296]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 80060f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060fa:	6053      	str	r3, [r2, #4]
 80060fc:	e02e      	b.n	800615c <HAL_RCC_OscConfig+0x434>
 80060fe:	4b48      	ldr	r3, [pc, #288]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	069b      	lsls	r3, r3, #26
 800610c:	4944      	ldr	r1, [pc, #272]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 800610e:	4313      	orrs	r3, r2
 8006110:	604b      	str	r3, [r1, #4]
 8006112:	e023      	b.n	800615c <HAL_RCC_OscConfig+0x434>
 8006114:	4b42      	ldr	r3, [pc, #264]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	061b      	lsls	r3, r3, #24
 8006122:	493f      	ldr	r1, [pc, #252]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006124:	4313      	orrs	r3, r2
 8006126:	60cb      	str	r3, [r1, #12]
 8006128:	e018      	b.n	800615c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800612a:	4b3d      	ldr	r3, [pc, #244]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a3c      	ldr	r2, [pc, #240]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006136:	f7fb fbbd 	bl	80018b4 <HAL_GetTick>
 800613a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800613e:	f7fb fbb9 	bl	80018b4 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e23d      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006150:	4b33      	ldr	r3, [pc, #204]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1f0      	bne.n	800613e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	2b00      	cmp	r3, #0
 8006166:	d036      	beq.n	80061d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d019      	beq.n	80061a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006170:	4b2b      	ldr	r3, [pc, #172]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006174:	4a2a      	ldr	r2, [pc, #168]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617c:	f7fb fb9a 	bl	80018b4 <HAL_GetTick>
 8006180:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006184:	f7fb fb96 	bl	80018b4 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e21a      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006196:	4b22      	ldr	r3, [pc, #136]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0f0      	beq.n	8006184 <HAL_RCC_OscConfig+0x45c>
 80061a2:	e018      	b.n	80061d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 80061a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 80061aa:	f023 0301 	bic.w	r3, r3, #1
 80061ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b0:	f7fb fb80 	bl	80018b4 <HAL_GetTick>
 80061b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061b8:	f7fb fb7c 	bl	80018b4 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e200      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061ca:	4b15      	ldr	r3, [pc, #84]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 80061cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d039      	beq.n	8006256 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01c      	beq.n	8006224 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 80061f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80061f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061f6:	f7fb fb5d 	bl	80018b4 <HAL_GetTick>
 80061fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061fe:	f7fb fb59 	bl	80018b4 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e1dd      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006210:	4b03      	ldr	r3, [pc, #12]	@ (8006220 <HAL_RCC_OscConfig+0x4f8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x4d6>
 800621c:	e01b      	b.n	8006256 <HAL_RCC_OscConfig+0x52e>
 800621e:	bf00      	nop
 8006220:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006224:	4b9b      	ldr	r3, [pc, #620]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a9a      	ldr	r2, [pc, #616]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800622a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800622e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006230:	f7fb fb40 	bl	80018b4 <HAL_GetTick>
 8006234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006238:	f7fb fb3c 	bl	80018b4 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e1c0      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800624a:	4b92      	ldr	r3, [pc, #584]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8081 	beq.w	8006366 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006264:	4b8c      	ldr	r3, [pc, #560]	@ (8006498 <HAL_RCC_OscConfig+0x770>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a8b      	ldr	r2, [pc, #556]	@ (8006498 <HAL_RCC_OscConfig+0x770>)
 800626a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800626e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006270:	f7fb fb20 	bl	80018b4 <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006278:	f7fb fb1c 	bl	80018b4 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b64      	cmp	r3, #100	@ 0x64
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e1a0      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800628a:	4b83      	ldr	r3, [pc, #524]	@ (8006498 <HAL_RCC_OscConfig+0x770>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d106      	bne.n	80062ac <HAL_RCC_OscConfig+0x584>
 800629e:	4b7d      	ldr	r3, [pc, #500]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a2:	4a7c      	ldr	r2, [pc, #496]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062aa:	e02d      	b.n	8006308 <HAL_RCC_OscConfig+0x5e0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10c      	bne.n	80062ce <HAL_RCC_OscConfig+0x5a6>
 80062b4:	4b77      	ldr	r3, [pc, #476]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b8:	4a76      	ldr	r2, [pc, #472]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	6713      	str	r3, [r2, #112]	@ 0x70
 80062c0:	4b74      	ldr	r3, [pc, #464]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c4:	4a73      	ldr	r2, [pc, #460]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062c6:	f023 0304 	bic.w	r3, r3, #4
 80062ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80062cc:	e01c      	b.n	8006308 <HAL_RCC_OscConfig+0x5e0>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	d10c      	bne.n	80062f0 <HAL_RCC_OscConfig+0x5c8>
 80062d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062da:	4a6e      	ldr	r2, [pc, #440]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062dc:	f043 0304 	orr.w	r3, r3, #4
 80062e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062e2:	4b6c      	ldr	r3, [pc, #432]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e6:	4a6b      	ldr	r2, [pc, #428]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ee:	e00b      	b.n	8006308 <HAL_RCC_OscConfig+0x5e0>
 80062f0:	4b68      	ldr	r3, [pc, #416]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f4:	4a67      	ldr	r2, [pc, #412]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80062fc:	4b65      	ldr	r3, [pc, #404]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80062fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006300:	4a64      	ldr	r2, [pc, #400]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006302:	f023 0304 	bic.w	r3, r3, #4
 8006306:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d015      	beq.n	800633c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006310:	f7fb fad0 	bl	80018b4 <HAL_GetTick>
 8006314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006316:	e00a      	b.n	800632e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006318:	f7fb facc 	bl	80018b4 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e14e      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800632e:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0ee      	beq.n	8006318 <HAL_RCC_OscConfig+0x5f0>
 800633a:	e014      	b.n	8006366 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800633c:	f7fb faba 	bl	80018b4 <HAL_GetTick>
 8006340:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006342:	e00a      	b.n	800635a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006344:	f7fb fab6 	bl	80018b4 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006352:	4293      	cmp	r3, r2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e138      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800635a:	4b4e      	ldr	r3, [pc, #312]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800635c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1ee      	bne.n	8006344 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 812d 	beq.w	80065ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006370:	4b48      	ldr	r3, [pc, #288]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006378:	2b18      	cmp	r3, #24
 800637a:	f000 80bd 	beq.w	80064f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	2b02      	cmp	r3, #2
 8006384:	f040 809e 	bne.w	80064c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006388:	4b42      	ldr	r3, [pc, #264]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a41      	ldr	r2, [pc, #260]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800638e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fb fa8e 	bl	80018b4 <HAL_GetTick>
 8006398:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800639c:	f7fb fa8a 	bl	80018b4 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e10e      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063ae:	4b39      	ldr	r3, [pc, #228]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f0      	bne.n	800639c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063ba:	4b36      	ldr	r3, [pc, #216]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80063bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063be:	4b37      	ldr	r3, [pc, #220]	@ (800649c <HAL_RCC_OscConfig+0x774>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063ca:	0112      	lsls	r2, r2, #4
 80063cc:	430a      	orrs	r2, r1
 80063ce:	4931      	ldr	r1, [pc, #196]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d8:	3b01      	subs	r3, #1
 80063da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e2:	3b01      	subs	r3, #1
 80063e4:	025b      	lsls	r3, r3, #9
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ee:	3b01      	subs	r3, #1
 80063f0:	041b      	lsls	r3, r3, #16
 80063f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fc:	3b01      	subs	r3, #1
 80063fe:	061b      	lsls	r3, r3, #24
 8006400:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006404:	4923      	ldr	r1, [pc, #140]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006406:	4313      	orrs	r3, r2
 8006408:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800640a:	4b22      	ldr	r3, [pc, #136]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	4a21      	ldr	r2, [pc, #132]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006416:	4b1f      	ldr	r3, [pc, #124]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800641a:	4b21      	ldr	r3, [pc, #132]	@ (80064a0 <HAL_RCC_OscConfig+0x778>)
 800641c:	4013      	ands	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006422:	00d2      	lsls	r2, r2, #3
 8006424:	491b      	ldr	r1, [pc, #108]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006426:	4313      	orrs	r3, r2
 8006428:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800642a:	4b1a      	ldr	r3, [pc, #104]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	f023 020c 	bic.w	r2, r3, #12
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006436:	4917      	ldr	r1, [pc, #92]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006438:	4313      	orrs	r3, r2
 800643a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800643c:	4b15      	ldr	r3, [pc, #84]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	f023 0202 	bic.w	r2, r3, #2
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006448:	4912      	ldr	r1, [pc, #72]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800644a:	4313      	orrs	r3, r2
 800644c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800644e:	4b11      	ldr	r3, [pc, #68]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	4a10      	ldr	r2, [pc, #64]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006458:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645a:	4b0e      	ldr	r3, [pc, #56]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645e:	4a0d      	ldr	r2, [pc, #52]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006466:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646a:	4a0a      	ldr	r2, [pc, #40]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 800646c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006470:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006472:	4b08      	ldr	r3, [pc, #32]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	4a07      	ldr	r2, [pc, #28]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800647e:	4b05      	ldr	r3, [pc, #20]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a04      	ldr	r2, [pc, #16]	@ (8006494 <HAL_RCC_OscConfig+0x76c>)
 8006484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648a:	f7fb fa13 	bl	80018b4 <HAL_GetTick>
 800648e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006490:	e011      	b.n	80064b6 <HAL_RCC_OscConfig+0x78e>
 8006492:	bf00      	nop
 8006494:	58024400 	.word	0x58024400
 8006498:	58024800 	.word	0x58024800
 800649c:	fffffc0c 	.word	0xfffffc0c
 80064a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fb fa06 	bl	80018b4 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e08a      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064b6:	4b47      	ldr	r3, [pc, #284]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f0      	beq.n	80064a4 <HAL_RCC_OscConfig+0x77c>
 80064c2:	e082      	b.n	80065ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c4:	4b43      	ldr	r3, [pc, #268]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a42      	ldr	r2, [pc, #264]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 80064ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d0:	f7fb f9f0 	bl	80018b4 <HAL_GetTick>
 80064d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064d8:	f7fb f9ec 	bl	80018b4 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e070      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064ea:	4b3a      	ldr	r3, [pc, #232]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f0      	bne.n	80064d8 <HAL_RCC_OscConfig+0x7b0>
 80064f6:	e068      	b.n	80065ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064f8:	4b36      	ldr	r3, [pc, #216]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064fe:	4b35      	ldr	r3, [pc, #212]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 8006500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006502:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006508:	2b01      	cmp	r3, #1
 800650a:	d031      	beq.n	8006570 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f003 0203 	and.w	r2, r3, #3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006516:	429a      	cmp	r2, r3
 8006518:	d12a      	bne.n	8006570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006526:	429a      	cmp	r2, r3
 8006528:	d122      	bne.n	8006570 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006534:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006536:	429a      	cmp	r2, r3
 8006538:	d11a      	bne.n	8006570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	0a5b      	lsrs	r3, r3, #9
 800653e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006546:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006548:	429a      	cmp	r2, r3
 800654a:	d111      	bne.n	8006570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	0c1b      	lsrs	r3, r3, #16
 8006550:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800655a:	429a      	cmp	r2, r3
 800655c:	d108      	bne.n	8006570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	0e1b      	lsrs	r3, r3, #24
 8006562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800656c:	429a      	cmp	r2, r3
 800656e:	d001      	beq.n	8006574 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e02b      	b.n	80065cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006574:	4b17      	ldr	r3, [pc, #92]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 8006576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006578:	08db      	lsrs	r3, r3, #3
 800657a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800657e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d01f      	beq.n	80065ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800658a:	4b12      	ldr	r3, [pc, #72]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 800658c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658e:	4a11      	ldr	r2, [pc, #68]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 8006590:	f023 0301 	bic.w	r3, r3, #1
 8006594:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006596:	f7fb f98d 	bl	80018b4 <HAL_GetTick>
 800659a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800659c:	bf00      	nop
 800659e:	f7fb f989 	bl	80018b4 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d0f9      	beq.n	800659e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065aa:	4b0a      	ldr	r3, [pc, #40]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 80065ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ae:	4b0a      	ldr	r3, [pc, #40]	@ (80065d8 <HAL_RCC_OscConfig+0x8b0>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065b6:	00d2      	lsls	r2, r2, #3
 80065b8:	4906      	ldr	r1, [pc, #24]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80065be:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 80065c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c2:	4a04      	ldr	r2, [pc, #16]	@ (80065d4 <HAL_RCC_OscConfig+0x8ac>)
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3730      	adds	r7, #48	@ 0x30
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	58024400 	.word	0x58024400
 80065d8:	ffff0007 	.word	0xffff0007

080065dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e19c      	b.n	800692a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065f0:	4b8a      	ldr	r3, [pc, #552]	@ (800681c <HAL_RCC_ClockConfig+0x240>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d910      	bls.n	8006620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fe:	4b87      	ldr	r3, [pc, #540]	@ (800681c <HAL_RCC_ClockConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 020f 	bic.w	r2, r3, #15
 8006606:	4985      	ldr	r1, [pc, #532]	@ (800681c <HAL_RCC_ClockConfig+0x240>)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	4313      	orrs	r3, r2
 800660c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b83      	ldr	r3, [pc, #524]	@ (800681c <HAL_RCC_ClockConfig+0x240>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e184      	b.n	800692a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d010      	beq.n	800664e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	4b7b      	ldr	r3, [pc, #492]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006638:	429a      	cmp	r2, r3
 800663a:	d908      	bls.n	800664e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800663c:	4b78      	ldr	r3, [pc, #480]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	4975      	ldr	r1, [pc, #468]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 800664a:	4313      	orrs	r3, r2
 800664c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d010      	beq.n	800667c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	695a      	ldr	r2, [r3, #20]
 800665e:	4b70      	ldr	r3, [pc, #448]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006666:	429a      	cmp	r2, r3
 8006668:	d908      	bls.n	800667c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800666a:	4b6d      	ldr	r3, [pc, #436]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	496a      	ldr	r1, [pc, #424]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 8006678:	4313      	orrs	r3, r2
 800667a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b00      	cmp	r3, #0
 8006686:	d010      	beq.n	80066aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699a      	ldr	r2, [r3, #24]
 800668c:	4b64      	ldr	r3, [pc, #400]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006694:	429a      	cmp	r2, r3
 8006696:	d908      	bls.n	80066aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006698:	4b61      	ldr	r3, [pc, #388]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	495e      	ldr	r1, [pc, #376]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d010      	beq.n	80066d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69da      	ldr	r2, [r3, #28]
 80066ba:	4b59      	ldr	r3, [pc, #356]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d908      	bls.n	80066d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066c6:	4b56      	ldr	r3, [pc, #344]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	4953      	ldr	r1, [pc, #332]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d010      	beq.n	8006706 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	4b4d      	ldr	r3, [pc, #308]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d908      	bls.n	8006706 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066f4:	4b4a      	ldr	r3, [pc, #296]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	f023 020f 	bic.w	r2, r3, #15
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	4947      	ldr	r1, [pc, #284]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 8006702:	4313      	orrs	r3, r2
 8006704:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d055      	beq.n	80067be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006712:	4b43      	ldr	r3, [pc, #268]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	4940      	ldr	r1, [pc, #256]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 8006720:	4313      	orrs	r3, r2
 8006722:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d107      	bne.n	800673c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800672c:	4b3c      	ldr	r3, [pc, #240]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d121      	bne.n	800677c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0f6      	b.n	800692a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b03      	cmp	r3, #3
 8006742:	d107      	bne.n	8006754 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006744:	4b36      	ldr	r3, [pc, #216]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d115      	bne.n	800677c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e0ea      	b.n	800692a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d107      	bne.n	800676c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800675c:	4b30      	ldr	r3, [pc, #192]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006764:	2b00      	cmp	r3, #0
 8006766:	d109      	bne.n	800677c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0de      	b.n	800692a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800676c:	4b2c      	ldr	r3, [pc, #176]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0d6      	b.n	800692a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800677c:	4b28      	ldr	r3, [pc, #160]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f023 0207 	bic.w	r2, r3, #7
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	4925      	ldr	r1, [pc, #148]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 800678a:	4313      	orrs	r3, r2
 800678c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800678e:	f7fb f891 	bl	80018b4 <HAL_GetTick>
 8006792:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006794:	e00a      	b.n	80067ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006796:	f7fb f88d 	bl	80018b4 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e0be      	b.n	800692a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d1eb      	bne.n	8006796 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d010      	beq.n	80067ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	4b14      	ldr	r3, [pc, #80]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d208      	bcs.n	80067ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067da:	4b11      	ldr	r3, [pc, #68]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f023 020f 	bic.w	r2, r3, #15
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	490e      	ldr	r1, [pc, #56]	@ (8006820 <HAL_RCC_ClockConfig+0x244>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067ec:	4b0b      	ldr	r3, [pc, #44]	@ (800681c <HAL_RCC_ClockConfig+0x240>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d214      	bcs.n	8006824 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fa:	4b08      	ldr	r3, [pc, #32]	@ (800681c <HAL_RCC_ClockConfig+0x240>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f023 020f 	bic.w	r2, r3, #15
 8006802:	4906      	ldr	r1, [pc, #24]	@ (800681c <HAL_RCC_ClockConfig+0x240>)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	4313      	orrs	r3, r2
 8006808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800680a:	4b04      	ldr	r3, [pc, #16]	@ (800681c <HAL_RCC_ClockConfig+0x240>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d005      	beq.n	8006824 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e086      	b.n	800692a <HAL_RCC_ClockConfig+0x34e>
 800681c:	52002000 	.word	0x52002000
 8006820:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d010      	beq.n	8006852 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	4b3f      	ldr	r3, [pc, #252]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800683c:	429a      	cmp	r2, r3
 800683e:	d208      	bcs.n	8006852 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006840:	4b3c      	ldr	r3, [pc, #240]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	4939      	ldr	r1, [pc, #228]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 800684e:	4313      	orrs	r3, r2
 8006850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d010      	beq.n	8006880 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695a      	ldr	r2, [r3, #20]
 8006862:	4b34      	ldr	r3, [pc, #208]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800686a:	429a      	cmp	r2, r3
 800686c:	d208      	bcs.n	8006880 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800686e:	4b31      	ldr	r3, [pc, #196]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	492e      	ldr	r1, [pc, #184]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 800687c:	4313      	orrs	r3, r2
 800687e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b00      	cmp	r3, #0
 800688a:	d010      	beq.n	80068ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699a      	ldr	r2, [r3, #24]
 8006890:	4b28      	ldr	r3, [pc, #160]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006898:	429a      	cmp	r2, r3
 800689a:	d208      	bcs.n	80068ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800689c:	4b25      	ldr	r3, [pc, #148]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	4922      	ldr	r1, [pc, #136]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d010      	beq.n	80068dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69da      	ldr	r2, [r3, #28]
 80068be:	4b1d      	ldr	r3, [pc, #116]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d208      	bcs.n	80068dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	4917      	ldr	r1, [pc, #92]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068dc:	f000 f834 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 80068e0:	4602      	mov	r2, r0
 80068e2:	4b14      	ldr	r3, [pc, #80]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	0a1b      	lsrs	r3, r3, #8
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	4912      	ldr	r1, [pc, #72]	@ (8006938 <HAL_RCC_ClockConfig+0x35c>)
 80068ee:	5ccb      	ldrb	r3, [r1, r3]
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	fa22 f303 	lsr.w	r3, r2, r3
 80068f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006934 <HAL_RCC_ClockConfig+0x358>)
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	4a0d      	ldr	r2, [pc, #52]	@ (8006938 <HAL_RCC_ClockConfig+0x35c>)
 8006904:	5cd3      	ldrb	r3, [r2, r3]
 8006906:	f003 031f 	and.w	r3, r3, #31
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	fa22 f303 	lsr.w	r3, r2, r3
 8006910:	4a0a      	ldr	r2, [pc, #40]	@ (800693c <HAL_RCC_ClockConfig+0x360>)
 8006912:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006914:	4a0a      	ldr	r2, [pc, #40]	@ (8006940 <HAL_RCC_ClockConfig+0x364>)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800691a:	4b0a      	ldr	r3, [pc, #40]	@ (8006944 <HAL_RCC_ClockConfig+0x368>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7fa ff7e 	bl	8001820 <HAL_InitTick>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	58024400 	.word	0x58024400
 8006938:	0800c958 	.word	0x0800c958
 800693c:	24000008 	.word	0x24000008
 8006940:	24000004 	.word	0x24000004
 8006944:	2400000c 	.word	0x2400000c

08006948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006948:	b480      	push	{r7}
 800694a:	b089      	sub	sp, #36	@ 0x24
 800694c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800694e:	4bb3      	ldr	r3, [pc, #716]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006956:	2b18      	cmp	r3, #24
 8006958:	f200 8155 	bhi.w	8006c06 <HAL_RCC_GetSysClockFreq+0x2be>
 800695c:	a201      	add	r2, pc, #4	@ (adr r2, 8006964 <HAL_RCC_GetSysClockFreq+0x1c>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	080069c9 	.word	0x080069c9
 8006968:	08006c07 	.word	0x08006c07
 800696c:	08006c07 	.word	0x08006c07
 8006970:	08006c07 	.word	0x08006c07
 8006974:	08006c07 	.word	0x08006c07
 8006978:	08006c07 	.word	0x08006c07
 800697c:	08006c07 	.word	0x08006c07
 8006980:	08006c07 	.word	0x08006c07
 8006984:	080069ef 	.word	0x080069ef
 8006988:	08006c07 	.word	0x08006c07
 800698c:	08006c07 	.word	0x08006c07
 8006990:	08006c07 	.word	0x08006c07
 8006994:	08006c07 	.word	0x08006c07
 8006998:	08006c07 	.word	0x08006c07
 800699c:	08006c07 	.word	0x08006c07
 80069a0:	08006c07 	.word	0x08006c07
 80069a4:	080069f5 	.word	0x080069f5
 80069a8:	08006c07 	.word	0x08006c07
 80069ac:	08006c07 	.word	0x08006c07
 80069b0:	08006c07 	.word	0x08006c07
 80069b4:	08006c07 	.word	0x08006c07
 80069b8:	08006c07 	.word	0x08006c07
 80069bc:	08006c07 	.word	0x08006c07
 80069c0:	08006c07 	.word	0x08006c07
 80069c4:	080069fb 	.word	0x080069fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069c8:	4b94      	ldr	r3, [pc, #592]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d009      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069d4:	4b91      	ldr	r3, [pc, #580]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	08db      	lsrs	r3, r3, #3
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	4a90      	ldr	r2, [pc, #576]	@ (8006c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
 80069e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80069e6:	e111      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069e8:	4b8d      	ldr	r3, [pc, #564]	@ (8006c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069ea:	61bb      	str	r3, [r7, #24]
      break;
 80069ec:	e10e      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069f0:	61bb      	str	r3, [r7, #24]
      break;
 80069f2:	e10b      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80069f4:	4b8c      	ldr	r3, [pc, #560]	@ (8006c28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069f6:	61bb      	str	r3, [r7, #24]
      break;
 80069f8:	e108      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069fa:	4b88      	ldr	r3, [pc, #544]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a04:	4b85      	ldr	r3, [pc, #532]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a08:	091b      	lsrs	r3, r3, #4
 8006a0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a10:	4b82      	ldr	r3, [pc, #520]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a1a:	4b80      	ldr	r3, [pc, #512]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1e:	08db      	lsrs	r3, r3, #3
 8006a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 80e1 	beq.w	8006c00 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	f000 8083 	beq.w	8006b4c <HAL_RCC_GetSysClockFreq+0x204>
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	f200 80a1 	bhi.w	8006b90 <HAL_RCC_GetSysClockFreq+0x248>
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_RCC_GetSysClockFreq+0x114>
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d056      	beq.n	8006b08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a5a:	e099      	b.n	8006b90 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d02d      	beq.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a68:	4b6c      	ldr	r3, [pc, #432]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	08db      	lsrs	r3, r3, #3
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	4a6b      	ldr	r2, [pc, #428]	@ (8006c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
 8006a78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a92:	4b62      	ldr	r3, [pc, #392]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aa6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006abe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006ac2:	e087      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ace:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad6:	4b51      	ldr	r3, [pc, #324]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b06:	e065      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1a:	4b40      	ldr	r3, [pc, #256]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b2e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b4a:	e043      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b56:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b72:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b8e:	e021      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bb6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bd2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006bd4:	4b11      	ldr	r3, [pc, #68]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd8:	0a5b      	lsrs	r3, r3, #9
 8006bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bde:	3301      	adds	r3, #1
 8006be0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	ee07 3a90 	vmov	s15, r3
 8006be8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf8:	ee17 3a90 	vmov	r3, s15
 8006bfc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006bfe:	e005      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	61bb      	str	r3, [r7, #24]
      break;
 8006c04:	e002      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c06:	4b07      	ldr	r3, [pc, #28]	@ (8006c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c08:	61bb      	str	r3, [r7, #24]
      break;
 8006c0a:	bf00      	nop
  }

  return sysclockfreq;
 8006c0c:	69bb      	ldr	r3, [r7, #24]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3724      	adds	r7, #36	@ 0x24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	03d09000 	.word	0x03d09000
 8006c24:	003d0900 	.word	0x003d0900
 8006c28:	007a1200 	.word	0x007a1200
 8006c2c:	46000000 	.word	0x46000000
 8006c30:	4c742400 	.word	0x4c742400
 8006c34:	4a742400 	.word	0x4a742400
 8006c38:	4af42400 	.word	0x4af42400

08006c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c42:	f7ff fe81 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 8006c46:	4602      	mov	r2, r0
 8006c48:	4b10      	ldr	r3, [pc, #64]	@ (8006c8c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	0a1b      	lsrs	r3, r3, #8
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	490f      	ldr	r1, [pc, #60]	@ (8006c90 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c54:	5ccb      	ldrb	r3, [r1, r3]
 8006c56:	f003 031f 	and.w	r3, r3, #31
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c60:	4b0a      	ldr	r3, [pc, #40]	@ (8006c8c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	4a09      	ldr	r2, [pc, #36]	@ (8006c90 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c6a:	5cd3      	ldrb	r3, [r2, r3]
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	fa22 f303 	lsr.w	r3, r2, r3
 8006c76:	4a07      	ldr	r2, [pc, #28]	@ (8006c94 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c7a:	4a07      	ldr	r2, [pc, #28]	@ (8006c98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c80:	4b04      	ldr	r3, [pc, #16]	@ (8006c94 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c82:	681b      	ldr	r3, [r3, #0]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	58024400 	.word	0x58024400
 8006c90:	0800c958 	.word	0x0800c958
 8006c94:	24000008 	.word	0x24000008
 8006c98:	24000004 	.word	0x24000004

08006c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ca0:	f7ff ffcc 	bl	8006c3c <HAL_RCC_GetHCLKFreq>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	091b      	lsrs	r3, r3, #4
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	4904      	ldr	r1, [pc, #16]	@ (8006cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cb2:	5ccb      	ldrb	r3, [r1, r3]
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	58024400 	.word	0x58024400
 8006cc4:	0800c958 	.word	0x0800c958

08006cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ccc:	f7ff ffb6 	bl	8006c3c <HAL_RCC_GetHCLKFreq>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	4b06      	ldr	r3, [pc, #24]	@ (8006cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	4904      	ldr	r1, [pc, #16]	@ (8006cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cde:	5ccb      	ldrb	r3, [r1, r3]
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	58024400 	.word	0x58024400
 8006cf0:	0800c958 	.word	0x0800c958

08006cf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf8:	b0ca      	sub	sp, #296	@ 0x128
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d00:	2300      	movs	r3, #0
 8006d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d06:	2300      	movs	r3, #0
 8006d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006d18:	2500      	movs	r5, #0
 8006d1a:	ea54 0305 	orrs.w	r3, r4, r5
 8006d1e:	d049      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d2a:	d02f      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d30:	d828      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d36:	d01a      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d3c:	d822      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d46:	d007      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d48:	e01c      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d4a:	4bb8      	ldr	r3, [pc, #736]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	4ab7      	ldr	r2, [pc, #732]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d56:	e01a      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	2102      	movs	r1, #2
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 fc8f 	bl	8008684 <RCCEx_PLL2_Config>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d6c:	e00f      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	3328      	adds	r3, #40	@ 0x28
 8006d74:	2102      	movs	r1, #2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 fd36 	bl	80087e8 <RCCEx_PLL3_Config>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d82:	e004      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d8a:	e000      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d96:	4ba5      	ldr	r3, [pc, #660]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006da4:	4aa1      	ldr	r2, [pc, #644]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006da6:	430b      	orrs	r3, r1
 8006da8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006daa:	e003      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006dc0:	f04f 0900 	mov.w	r9, #0
 8006dc4:	ea58 0309 	orrs.w	r3, r8, r9
 8006dc8:	d047      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d82a      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ddc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006df1 	.word	0x08006df1
 8006de0:	08006dff 	.word	0x08006dff
 8006de4:	08006e15 	.word	0x08006e15
 8006de8:	08006e33 	.word	0x08006e33
 8006dec:	08006e33 	.word	0x08006e33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df0:	4b8e      	ldr	r3, [pc, #568]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	4a8d      	ldr	r2, [pc, #564]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dfc:	e01a      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	3308      	adds	r3, #8
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 fc3c 	bl	8008684 <RCCEx_PLL2_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e12:	e00f      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e18:	3328      	adds	r3, #40	@ 0x28
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 fce3 	bl	80087e8 <RCCEx_PLL3_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e28:	e004      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e30:	e000      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e3c:	4b7b      	ldr	r3, [pc, #492]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e40:	f023 0107 	bic.w	r1, r3, #7
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e4a:	4a78      	ldr	r2, [pc, #480]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e50:	e003      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006e66:	f04f 0b00 	mov.w	fp, #0
 8006e6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e6e:	d04c      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e7a:	d030      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e80:	d829      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e84:	d02d      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e88:	d825      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e8a:	2b80      	cmp	r3, #128	@ 0x80
 8006e8c:	d018      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e8e:	2b80      	cmp	r3, #128	@ 0x80
 8006e90:	d821      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e96:	2b40      	cmp	r3, #64	@ 0x40
 8006e98:	d007      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006e9a:	e01c      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e9c:	4b63      	ldr	r3, [pc, #396]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	4a62      	ldr	r2, [pc, #392]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ea8:	e01c      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eae:	3308      	adds	r3, #8
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 fbe6 	bl	8008684 <RCCEx_PLL2_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ebe:	e011      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec4:	3328      	adds	r3, #40	@ 0x28
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f001 fc8d 	bl	80087e8 <RCCEx_PLL3_Config>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ed4:	e006      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006edc:	e002      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006ede:	bf00      	nop
 8006ee0:	e000      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006eec:	4b4f      	ldr	r3, [pc, #316]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006efa:	4a4c      	ldr	r2, [pc, #304]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f00:	e003      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006f16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006f20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006f24:	460b      	mov	r3, r1
 8006f26:	4313      	orrs	r3, r2
 8006f28:	d053      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f36:	d035      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f3c:	d82e      	bhi.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f42:	d031      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f48:	d828      	bhi.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f4e:	d01a      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f54:	d822      	bhi.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f5e:	d007      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f60:	e01c      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f62:	4b32      	ldr	r3, [pc, #200]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f66:	4a31      	ldr	r2, [pc, #196]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f6e:	e01c      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f74:	3308      	adds	r3, #8
 8006f76:	2100      	movs	r1, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 fb83 	bl	8008684 <RCCEx_PLL2_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f84:	e011      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8a:	3328      	adds	r3, #40	@ 0x28
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f001 fc2a 	bl	80087e8 <RCCEx_PLL3_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f9a:	e006      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fa2:	e002      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fa4:	bf00      	nop
 8006fa6:	e000      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fc8:	e003      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006fde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006fe8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006fec:	460b      	mov	r3, r1
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	d056      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ffa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ffe:	d038      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007000:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007004:	d831      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007006:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800700a:	d034      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800700c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007010:	d82b      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007016:	d01d      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800701c:	d825      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d006      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007026:	d00a      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007028:	e01f      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800702a:	bf00      	nop
 800702c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007030:	4ba2      	ldr	r3, [pc, #648]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007034:	4aa1      	ldr	r2, [pc, #644]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800703a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800703c:	e01c      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800703e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007042:	3308      	adds	r3, #8
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f001 fb1c 	bl	8008684 <RCCEx_PLL2_Config>
 800704c:	4603      	mov	r3, r0
 800704e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007052:	e011      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007058:	3328      	adds	r3, #40	@ 0x28
 800705a:	2100      	movs	r1, #0
 800705c:	4618      	mov	r0, r3
 800705e:	f001 fbc3 	bl	80087e8 <RCCEx_PLL3_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007068:	e006      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007070:	e002      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007072:	bf00      	nop
 8007074:	e000      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10b      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007080:	4b8e      	ldr	r3, [pc, #568]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007084:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007090:	4a8a      	ldr	r2, [pc, #552]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007092:	430b      	orrs	r3, r1
 8007094:	6593      	str	r3, [r2, #88]	@ 0x58
 8007096:	e003      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800709c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80070ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070b0:	2300      	movs	r3, #0
 80070b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80070ba:	460b      	mov	r3, r1
 80070bc:	4313      	orrs	r3, r2
 80070be:	d03a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80070c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c6:	2b30      	cmp	r3, #48	@ 0x30
 80070c8:	d01f      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80070ca:	2b30      	cmp	r3, #48	@ 0x30
 80070cc:	d819      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d00c      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d815      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d019      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80070da:	2b10      	cmp	r3, #16
 80070dc:	d111      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070de:	4b77      	ldr	r3, [pc, #476]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e2:	4a76      	ldr	r2, [pc, #472]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070ea:	e011      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f0:	3308      	adds	r3, #8
 80070f2:	2102      	movs	r1, #2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fac5 	bl	8008684 <RCCEx_PLL2_Config>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007100:	e006      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007108:	e002      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800710a:	bf00      	nop
 800710c:	e000      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800710e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007118:	4b68      	ldr	r3, [pc, #416]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800711a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800711c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007126:	4a65      	ldr	r2, [pc, #404]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007128:	430b      	orrs	r3, r1
 800712a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800712c:	e003      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007142:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007146:	2300      	movs	r3, #0
 8007148:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800714c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007150:	460b      	mov	r3, r1
 8007152:	4313      	orrs	r3, r2
 8007154:	d051      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800715c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007160:	d035      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007166:	d82e      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007168:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800716c:	d031      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800716e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007172:	d828      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007178:	d01a      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800717a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800717e:	d822      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007188:	d007      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800718a:	e01c      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800718c:	4b4b      	ldr	r3, [pc, #300]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	4a4a      	ldr	r2, [pc, #296]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007198:	e01c      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719e:	3308      	adds	r3, #8
 80071a0:	2100      	movs	r1, #0
 80071a2:	4618      	mov	r0, r3
 80071a4:	f001 fa6e 	bl	8008684 <RCCEx_PLL2_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071ae:	e011      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b4:	3328      	adds	r3, #40	@ 0x28
 80071b6:	2100      	movs	r1, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 fb15 	bl	80087e8 <RCCEx_PLL3_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071c4:	e006      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071cc:	e002      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071ce:	bf00      	nop
 80071d0:	e000      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071dc:	4b37      	ldr	r3, [pc, #220]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80071e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ea:	4a34      	ldr	r2, [pc, #208]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071ec:	430b      	orrs	r3, r1
 80071ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80071f0:	e003      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007206:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800720a:	2300      	movs	r3, #0
 800720c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007210:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007214:	460b      	mov	r3, r1
 8007216:	4313      	orrs	r3, r2
 8007218:	d056      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800721a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007224:	d033      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007226:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800722a:	d82c      	bhi.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800722c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007230:	d02f      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007236:	d826      	bhi.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007238:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800723c:	d02b      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800723e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007242:	d820      	bhi.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007248:	d012      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800724a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800724e:	d81a      	bhi.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d022      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007258:	d115      	bne.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800725a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725e:	3308      	adds	r3, #8
 8007260:	2101      	movs	r1, #1
 8007262:	4618      	mov	r0, r3
 8007264:	f001 fa0e 	bl	8008684 <RCCEx_PLL2_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800726e:	e015      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	3328      	adds	r3, #40	@ 0x28
 8007276:	2101      	movs	r1, #1
 8007278:	4618      	mov	r0, r3
 800727a:	f001 fab5 	bl	80087e8 <RCCEx_PLL3_Config>
 800727e:	4603      	mov	r3, r0
 8007280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007284:	e00a      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800728c:	e006      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800728e:	bf00      	nop
 8007290:	e004      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007292:	bf00      	nop
 8007294:	e002      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007296:	bf00      	nop
 8007298:	e000      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800729a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800729c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10d      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072a4:	4b05      	ldr	r3, [pc, #20]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072b2:	4a02      	ldr	r2, [pc, #8]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072b4:	430b      	orrs	r3, r1
 80072b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80072b8:	e006      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80072ba:	bf00      	nop
 80072bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80072d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072d8:	2300      	movs	r3, #0
 80072da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4313      	orrs	r3, r2
 80072e6:	d055      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80072e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072f4:	d033      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80072f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072fa:	d82c      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007300:	d02f      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007306:	d826      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007308:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800730c:	d02b      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800730e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007312:	d820      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007318:	d012      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800731a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800731e:	d81a      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d022      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007328:	d115      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	3308      	adds	r3, #8
 8007330:	2101      	movs	r1, #1
 8007332:	4618      	mov	r0, r3
 8007334:	f001 f9a6 	bl	8008684 <RCCEx_PLL2_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800733e:	e015      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007344:	3328      	adds	r3, #40	@ 0x28
 8007346:	2101      	movs	r1, #1
 8007348:	4618      	mov	r0, r3
 800734a:	f001 fa4d 	bl	80087e8 <RCCEx_PLL3_Config>
 800734e:	4603      	mov	r3, r0
 8007350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007354:	e00a      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800735c:	e006      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800735e:	bf00      	nop
 8007360:	e004      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007362:	bf00      	nop
 8007364:	e002      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007366:	bf00      	nop
 8007368:	e000      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800736a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10b      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007374:	4ba3      	ldr	r3, [pc, #652]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007378:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800737c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007384:	4a9f      	ldr	r2, [pc, #636]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007386:	430b      	orrs	r3, r1
 8007388:	6593      	str	r3, [r2, #88]	@ 0x58
 800738a:	e003      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80073a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073a4:	2300      	movs	r3, #0
 80073a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073ae:	460b      	mov	r3, r1
 80073b0:	4313      	orrs	r3, r2
 80073b2:	d037      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073be:	d00e      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80073c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073c4:	d816      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d018      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80073ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ce:	d111      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d0:	4b8c      	ldr	r3, [pc, #560]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d4:	4a8b      	ldr	r2, [pc, #556]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073dc:	e00f      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	3308      	adds	r3, #8
 80073e4:	2101      	movs	r1, #1
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 f94c 	bl	8008684 <RCCEx_PLL2_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073f2:	e004      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073fa:	e000      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80073fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007406:	4b7f      	ldr	r3, [pc, #508]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800740a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800740e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007414:	4a7b      	ldr	r2, [pc, #492]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007416:	430b      	orrs	r3, r1
 8007418:	6513      	str	r3, [r2, #80]	@ 0x50
 800741a:	e003      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007434:	2300      	movs	r3, #0
 8007436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800743a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800743e:	460b      	mov	r3, r1
 8007440:	4313      	orrs	r3, r2
 8007442:	d039      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800744a:	2b03      	cmp	r3, #3
 800744c:	d81c      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800744e:	a201      	add	r2, pc, #4	@ (adr r2, 8007454 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	08007491 	.word	0x08007491
 8007458:	08007465 	.word	0x08007465
 800745c:	08007473 	.word	0x08007473
 8007460:	08007491 	.word	0x08007491
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007464:	4b67      	ldr	r3, [pc, #412]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	4a66      	ldr	r2, [pc, #408]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800746a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800746e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007470:	e00f      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	3308      	adds	r3, #8
 8007478:	2102      	movs	r1, #2
 800747a:	4618      	mov	r0, r3
 800747c:	f001 f902 	bl	8008684 <RCCEx_PLL2_Config>
 8007480:	4603      	mov	r3, r0
 8007482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007486:	e004      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800748e:	e000      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800749a:	4b5a      	ldr	r3, [pc, #360]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800749c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800749e:	f023 0103 	bic.w	r1, r3, #3
 80074a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a8:	4a56      	ldr	r2, [pc, #344]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074aa:	430b      	orrs	r3, r1
 80074ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074ae:	e003      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80074c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074c8:	2300      	movs	r3, #0
 80074ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80074d2:	460b      	mov	r3, r1
 80074d4:	4313      	orrs	r3, r2
 80074d6:	f000 809f 	beq.w	8007618 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074da:	4b4b      	ldr	r3, [pc, #300]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a4a      	ldr	r2, [pc, #296]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074e6:	f7fa f9e5 	bl	80018b4 <HAL_GetTick>
 80074ea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ee:	e00b      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f0:	f7fa f9e0 	bl	80018b4 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b64      	cmp	r3, #100	@ 0x64
 80074fe:	d903      	bls.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007506:	e005      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007508:	4b3f      	ldr	r3, [pc, #252]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0ed      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007518:	2b00      	cmp	r3, #0
 800751a:	d179      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800751c:	4b39      	ldr	r3, [pc, #228]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800751e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007528:	4053      	eors	r3, r2
 800752a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800752e:	2b00      	cmp	r3, #0
 8007530:	d015      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007532:	4b34      	ldr	r3, [pc, #208]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800753a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800753e:	4b31      	ldr	r3, [pc, #196]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007542:	4a30      	ldr	r2, [pc, #192]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007548:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800754a:	4b2e      	ldr	r3, [pc, #184]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800754c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754e:	4a2d      	ldr	r2, [pc, #180]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007554:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007556:	4a2b      	ldr	r2, [pc, #172]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800755c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800756a:	d118      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756c:	f7fa f9a2 	bl	80018b4 <HAL_GetTick>
 8007570:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007574:	e00d      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007576:	f7fa f99d 	bl	80018b4 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007580:	1ad2      	subs	r2, r2, r3
 8007582:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007586:	429a      	cmp	r2, r3
 8007588:	d903      	bls.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007590:	e005      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007592:	4b1c      	ldr	r3, [pc, #112]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0eb      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800759e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d129      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075b6:	d10e      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80075b8:	4b12      	ldr	r3, [pc, #72]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075c8:	091a      	lsrs	r2, r3, #4
 80075ca:	4b10      	ldr	r3, [pc, #64]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	4a0d      	ldr	r2, [pc, #52]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075d0:	430b      	orrs	r3, r1
 80075d2:	6113      	str	r3, [r2, #16]
 80075d4:	e005      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80075d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	4a0a      	ldr	r2, [pc, #40]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075e0:	6113      	str	r3, [r2, #16]
 80075e2:	4b08      	ldr	r3, [pc, #32]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075f2:	4a04      	ldr	r2, [pc, #16]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075f8:	e00e      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007602:	e009      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007604:	58024400 	.word	0x58024400
 8007608:	58024800 	.word	0x58024800
 800760c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f002 0301 	and.w	r3, r2, #1
 8007624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800762e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007632:	460b      	mov	r3, r1
 8007634:	4313      	orrs	r3, r2
 8007636:	f000 8089 	beq.w	800774c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007640:	2b28      	cmp	r3, #40	@ 0x28
 8007642:	d86b      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007644:	a201      	add	r2, pc, #4	@ (adr r2, 800764c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	08007725 	.word	0x08007725
 8007650:	0800771d 	.word	0x0800771d
 8007654:	0800771d 	.word	0x0800771d
 8007658:	0800771d 	.word	0x0800771d
 800765c:	0800771d 	.word	0x0800771d
 8007660:	0800771d 	.word	0x0800771d
 8007664:	0800771d 	.word	0x0800771d
 8007668:	0800771d 	.word	0x0800771d
 800766c:	080076f1 	.word	0x080076f1
 8007670:	0800771d 	.word	0x0800771d
 8007674:	0800771d 	.word	0x0800771d
 8007678:	0800771d 	.word	0x0800771d
 800767c:	0800771d 	.word	0x0800771d
 8007680:	0800771d 	.word	0x0800771d
 8007684:	0800771d 	.word	0x0800771d
 8007688:	0800771d 	.word	0x0800771d
 800768c:	08007707 	.word	0x08007707
 8007690:	0800771d 	.word	0x0800771d
 8007694:	0800771d 	.word	0x0800771d
 8007698:	0800771d 	.word	0x0800771d
 800769c:	0800771d 	.word	0x0800771d
 80076a0:	0800771d 	.word	0x0800771d
 80076a4:	0800771d 	.word	0x0800771d
 80076a8:	0800771d 	.word	0x0800771d
 80076ac:	08007725 	.word	0x08007725
 80076b0:	0800771d 	.word	0x0800771d
 80076b4:	0800771d 	.word	0x0800771d
 80076b8:	0800771d 	.word	0x0800771d
 80076bc:	0800771d 	.word	0x0800771d
 80076c0:	0800771d 	.word	0x0800771d
 80076c4:	0800771d 	.word	0x0800771d
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	08007725 	.word	0x08007725
 80076d0:	0800771d 	.word	0x0800771d
 80076d4:	0800771d 	.word	0x0800771d
 80076d8:	0800771d 	.word	0x0800771d
 80076dc:	0800771d 	.word	0x0800771d
 80076e0:	0800771d 	.word	0x0800771d
 80076e4:	0800771d 	.word	0x0800771d
 80076e8:	0800771d 	.word	0x0800771d
 80076ec:	08007725 	.word	0x08007725
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f4:	3308      	adds	r3, #8
 80076f6:	2101      	movs	r1, #1
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 ffc3 	bl	8008684 <RCCEx_PLL2_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007704:	e00f      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770a:	3328      	adds	r3, #40	@ 0x28
 800770c:	2101      	movs	r1, #1
 800770e:	4618      	mov	r0, r3
 8007710:	f001 f86a 	bl	80087e8 <RCCEx_PLL3_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800771a:	e004      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007722:	e000      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10a      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800772e:	4bbf      	ldr	r3, [pc, #764]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007732:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800773c:	4abb      	ldr	r2, [pc, #748]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800773e:	430b      	orrs	r3, r1
 8007740:	6553      	str	r3, [r2, #84]	@ 0x54
 8007742:	e003      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f002 0302 	and.w	r3, r2, #2
 8007758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800775c:	2300      	movs	r3, #0
 800775e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007762:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007766:	460b      	mov	r3, r1
 8007768:	4313      	orrs	r3, r2
 800776a:	d041      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007772:	2b05      	cmp	r3, #5
 8007774:	d824      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007776:	a201      	add	r2, pc, #4	@ (adr r2, 800777c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777c:	080077c9 	.word	0x080077c9
 8007780:	08007795 	.word	0x08007795
 8007784:	080077ab 	.word	0x080077ab
 8007788:	080077c9 	.word	0x080077c9
 800778c:	080077c9 	.word	0x080077c9
 8007790:	080077c9 	.word	0x080077c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007798:	3308      	adds	r3, #8
 800779a:	2101      	movs	r1, #1
 800779c:	4618      	mov	r0, r3
 800779e:	f000 ff71 	bl	8008684 <RCCEx_PLL2_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077a8:	e00f      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ae:	3328      	adds	r3, #40	@ 0x28
 80077b0:	2101      	movs	r1, #1
 80077b2:	4618      	mov	r0, r3
 80077b4:	f001 f818 	bl	80087e8 <RCCEx_PLL3_Config>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077be:	e004      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077c6:	e000      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80077c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077d2:	4b96      	ldr	r3, [pc, #600]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d6:	f023 0107 	bic.w	r1, r3, #7
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077e0:	4a92      	ldr	r2, [pc, #584]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077e2:	430b      	orrs	r3, r1
 80077e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80077e6:	e003      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f002 0304 	and.w	r3, r2, #4
 80077fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007800:	2300      	movs	r3, #0
 8007802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007806:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800780a:	460b      	mov	r3, r1
 800780c:	4313      	orrs	r3, r2
 800780e:	d044      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007818:	2b05      	cmp	r3, #5
 800781a:	d825      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800781c:	a201      	add	r2, pc, #4	@ (adr r2, 8007824 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	08007871 	.word	0x08007871
 8007828:	0800783d 	.word	0x0800783d
 800782c:	08007853 	.word	0x08007853
 8007830:	08007871 	.word	0x08007871
 8007834:	08007871 	.word	0x08007871
 8007838:	08007871 	.word	0x08007871
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007840:	3308      	adds	r3, #8
 8007842:	2101      	movs	r1, #1
 8007844:	4618      	mov	r0, r3
 8007846:	f000 ff1d 	bl	8008684 <RCCEx_PLL2_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007850:	e00f      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007856:	3328      	adds	r3, #40	@ 0x28
 8007858:	2101      	movs	r1, #1
 800785a:	4618      	mov	r0, r3
 800785c:	f000 ffc4 	bl	80087e8 <RCCEx_PLL3_Config>
 8007860:	4603      	mov	r3, r0
 8007862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007866:	e004      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800786e:	e000      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10b      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800787a:	4b6c      	ldr	r3, [pc, #432]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800787c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787e:	f023 0107 	bic.w	r1, r3, #7
 8007882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800788a:	4a68      	ldr	r2, [pc, #416]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800788c:	430b      	orrs	r3, r1
 800788e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007890:	e003      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a2:	f002 0320 	and.w	r3, r2, #32
 80078a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078aa:	2300      	movs	r3, #0
 80078ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80078b4:	460b      	mov	r3, r1
 80078b6:	4313      	orrs	r3, r2
 80078b8:	d055      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078c6:	d033      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80078c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078cc:	d82c      	bhi.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d2:	d02f      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d8:	d826      	bhi.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078de:	d02b      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80078e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078e4:	d820      	bhi.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078ea:	d012      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80078ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078f0:	d81a      	bhi.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d022      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80078f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078fa:	d115      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007900:	3308      	adds	r3, #8
 8007902:	2100      	movs	r1, #0
 8007904:	4618      	mov	r0, r3
 8007906:	f000 febd 	bl	8008684 <RCCEx_PLL2_Config>
 800790a:	4603      	mov	r3, r0
 800790c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007910:	e015      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007916:	3328      	adds	r3, #40	@ 0x28
 8007918:	2102      	movs	r1, #2
 800791a:	4618      	mov	r0, r3
 800791c:	f000 ff64 	bl	80087e8 <RCCEx_PLL3_Config>
 8007920:	4603      	mov	r3, r0
 8007922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007926:	e00a      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800792e:	e006      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007930:	bf00      	nop
 8007932:	e004      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007934:	bf00      	nop
 8007936:	e002      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007938:	bf00      	nop
 800793a:	e000      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800793c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10b      	bne.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007946:	4b39      	ldr	r3, [pc, #228]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007956:	4a35      	ldr	r2, [pc, #212]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007958:	430b      	orrs	r3, r1
 800795a:	6553      	str	r3, [r2, #84]	@ 0x54
 800795c:	e003      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007962:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007976:	2300      	movs	r3, #0
 8007978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800797c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007980:	460b      	mov	r3, r1
 8007982:	4313      	orrs	r3, r2
 8007984:	d058      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800798e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007992:	d033      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007994:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007998:	d82c      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800799a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800799e:	d02f      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a4:	d826      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079aa:	d02b      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80079ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079b0:	d820      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079b6:	d012      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80079b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079bc:	d81a      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d022      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80079c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079c6:	d115      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079cc:	3308      	adds	r3, #8
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fe57 	bl	8008684 <RCCEx_PLL2_Config>
 80079d6:	4603      	mov	r3, r0
 80079d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079dc:	e015      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e2:	3328      	adds	r3, #40	@ 0x28
 80079e4:	2102      	movs	r1, #2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fefe 	bl	80087e8 <RCCEx_PLL3_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079f2:	e00a      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079fa:	e006      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079fc:	bf00      	nop
 80079fe:	e004      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a00:	bf00      	nop
 8007a02:	e002      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a04:	bf00      	nop
 8007a06:	e000      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10e      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a12:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a22:	4a02      	ldr	r2, [pc, #8]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a28:	e006      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a2a:	bf00      	nop
 8007a2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a52:	460b      	mov	r3, r1
 8007a54:	4313      	orrs	r3, r2
 8007a56:	d055      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a64:	d033      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a6a:	d82c      	bhi.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a70:	d02f      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a76:	d826      	bhi.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a7c:	d02b      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a82:	d820      	bhi.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a88:	d012      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a8e:	d81a      	bhi.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d022      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a98:	d115      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fdee 	bl	8008684 <RCCEx_PLL2_Config>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007aae:	e015      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab4:	3328      	adds	r3, #40	@ 0x28
 8007ab6:	2102      	movs	r1, #2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fe95 	bl	80087e8 <RCCEx_PLL3_Config>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ac4:	e00a      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007acc:	e006      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ace:	bf00      	nop
 8007ad0:	e004      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ad2:	bf00      	nop
 8007ad4:	e002      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ad6:	bf00      	nop
 8007ad8:	e000      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10b      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ae4:	4ba1      	ldr	r3, [pc, #644]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007af4:	4a9d      	ldr	r2, [pc, #628]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007af6:	430b      	orrs	r3, r1
 8007af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007afa:	e003      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f002 0308 	and.w	r3, r2, #8
 8007b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b14:	2300      	movs	r3, #0
 8007b16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	d01e      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b30:	d10c      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	3328      	adds	r3, #40	@ 0x28
 8007b38:	2102      	movs	r1, #2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fe54 	bl	80087e8 <RCCEx_PLL3_Config>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b4c:	4b87      	ldr	r3, [pc, #540]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b5c:	4a83      	ldr	r2, [pc, #524]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b5e:	430b      	orrs	r3, r1
 8007b60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f002 0310 	and.w	r3, r2, #16
 8007b6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b72:	2300      	movs	r3, #0
 8007b74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b78:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	d01e      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b8e:	d10c      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b94:	3328      	adds	r3, #40	@ 0x28
 8007b96:	2102      	movs	r1, #2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fe25 	bl	80087e8 <RCCEx_PLL3_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007baa:	4b70      	ldr	r3, [pc, #448]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bba:	4a6c      	ldr	r2, [pc, #432]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bd6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	d03e      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007be8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bec:	d022      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bf2:	d81b      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bfc:	d00b      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007bfe:	e015      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c04:	3308      	adds	r3, #8
 8007c06:	2100      	movs	r1, #0
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fd3b 	bl	8008684 <RCCEx_PLL2_Config>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c14:	e00f      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1a:	3328      	adds	r3, #40	@ 0x28
 8007c1c:	2102      	movs	r1, #2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fde2 	bl	80087e8 <RCCEx_PLL3_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c2a:	e004      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c32:	e000      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10b      	bne.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c4e:	4a47      	ldr	r2, [pc, #284]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c50:	430b      	orrs	r3, r1
 8007c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c54:	e003      	b.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007c74:	460b      	mov	r3, r1
 8007c76:	4313      	orrs	r3, r2
 8007c78:	d03b      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c86:	d01f      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c8c:	d818      	bhi.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c92:	d003      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007c94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c98:	d007      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007c9a:	e011      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c9c:	4b33      	ldr	r3, [pc, #204]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	4a32      	ldr	r2, [pc, #200]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ca8:	e00f      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cae:	3328      	adds	r3, #40	@ 0x28
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fd98 	bl	80087e8 <RCCEx_PLL3_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cbe:	e004      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cc6:	e000      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10b      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cd2:	4b26      	ldr	r3, [pc, #152]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce2:	4a22      	ldr	r2, [pc, #136]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ce4:	430b      	orrs	r3, r1
 8007ce6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ce8:	e003      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007cfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d00:	2300      	movs	r3, #0
 8007d02:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	d034      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d1c:	d007      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007d1e:	e011      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d20:	4b12      	ldr	r3, [pc, #72]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d24:	4a11      	ldr	r2, [pc, #68]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d2c:	e00e      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d32:	3308      	adds	r3, #8
 8007d34:	2102      	movs	r1, #2
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fca4 	bl	8008684 <RCCEx_PLL2_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d42:	e003      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10d      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d54:	4b05      	ldr	r3, [pc, #20]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d62:	4a02      	ldr	r2, [pc, #8]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d64:	430b      	orrs	r3, r1
 8007d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d68:	e006      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d6a:	bf00      	nop
 8007d6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007d84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d86:	2300      	movs	r3, #0
 8007d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4313      	orrs	r3, r2
 8007d92:	d00c      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d98:	3328      	adds	r3, #40	@ 0x28
 8007d9a:	2102      	movs	r1, #2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fd23 	bl	80087e8 <RCCEx_PLL3_Config>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007dba:	663b      	str	r3, [r7, #96]	@ 0x60
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8007dc0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	d038      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dd6:	d018      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007dd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ddc:	d811      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de2:	d014      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de8:	d80b      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d011      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007df2:	d106      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df4:	4bc3      	ldr	r3, [pc, #780]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df8:	4ac2      	ldr	r2, [pc, #776]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e00:	e008      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e08:	e004      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e0a:	bf00      	nop
 8007e0c:	e002      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e0e:	bf00      	nop
 8007e10:	e000      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10b      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e1c:	4bb9      	ldr	r3, [pc, #740]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e2c:	4ab5      	ldr	r2, [pc, #724]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e32:	e003      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e52:	460b      	mov	r3, r1
 8007e54:	4313      	orrs	r3, r2
 8007e56:	d009      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e58:	4baa      	ldr	r3, [pc, #680]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e66:	4aa7      	ldr	r2, [pc, #668]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e78:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007e82:	460b      	mov	r3, r1
 8007e84:	4313      	orrs	r3, r2
 8007e86:	d00a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e88:	4b9e      	ldr	r3, [pc, #632]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e98:	4a9a      	ldr	r2, [pc, #616]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e9a:	430b      	orrs	r3, r1
 8007e9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eac:	2300      	movs	r3, #0
 8007eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	d009      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007eba:	4b92      	ldr	r3, [pc, #584]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ebe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec8:	4a8e      	ldr	r2, [pc, #568]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8007edc:	2300      	movs	r3, #0
 8007ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ee0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	d00e      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007eea:	4b86      	ldr	r3, [pc, #536]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	4a85      	ldr	r2, [pc, #532]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ef4:	6113      	str	r3, [r2, #16]
 8007ef6:	4b83      	ldr	r3, [pc, #524]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef8:	6919      	ldr	r1, [r3, #16]
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007f02:	4a80      	ldr	r2, [pc, #512]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f04:	430b      	orrs	r3, r1
 8007f06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007f14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4313      	orrs	r3, r2
 8007f22:	d009      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f24:	4b77      	ldr	r3, [pc, #476]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f28:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f32:	4a74      	ldr	r2, [pc, #464]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f34:	430b      	orrs	r3, r1
 8007f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f46:	2300      	movs	r3, #0
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4313      	orrs	r3, r2
 8007f52:	d00a      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f54:	4b6b      	ldr	r3, [pc, #428]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f58:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f64:	4a67      	ldr	r2, [pc, #412]	@ (8008104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f66:	430b      	orrs	r3, r1
 8007f68:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	2100      	movs	r1, #0
 8007f74:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007f80:	460b      	mov	r3, r1
 8007f82:	4313      	orrs	r3, r2
 8007f84:	d011      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fb78 	bl	8008684 <RCCEx_PLL2_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	6239      	str	r1, [r7, #32]
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	d011      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fca:	3308      	adds	r3, #8
 8007fcc:	2101      	movs	r1, #1
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fb58 	bl	8008684 <RCCEx_PLL2_Config>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	61b9      	str	r1, [r7, #24]
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	61fb      	str	r3, [r7, #28]
 8007ffc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008000:	460b      	mov	r3, r1
 8008002:	4313      	orrs	r3, r2
 8008004:	d011      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800a:	3308      	adds	r3, #8
 800800c:	2102      	movs	r1, #2
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fb38 	bl	8008684 <RCCEx_PLL2_Config>
 8008014:	4603      	mov	r3, r0
 8008016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800801a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	2100      	movs	r1, #0
 8008034:	6139      	str	r1, [r7, #16]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008040:	460b      	mov	r3, r1
 8008042:	4313      	orrs	r3, r2
 8008044:	d011      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804a:	3328      	adds	r3, #40	@ 0x28
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fbca 	bl	80087e8 <RCCEx_PLL3_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800805a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	2100      	movs	r1, #0
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	f003 0310 	and.w	r3, r3, #16
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008080:	460b      	mov	r3, r1
 8008082:	4313      	orrs	r3, r2
 8008084:	d011      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808a:	3328      	adds	r3, #40	@ 0x28
 800808c:	2101      	movs	r1, #1
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fbaa 	bl	80087e8 <RCCEx_PLL3_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800809a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	2100      	movs	r1, #0
 80080b4:	6039      	str	r1, [r7, #0]
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	607b      	str	r3, [r7, #4]
 80080bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80080c0:	460b      	mov	r3, r1
 80080c2:	4313      	orrs	r3, r2
 80080c4:	d011      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ca:	3328      	adds	r3, #40	@ 0x28
 80080cc:	2102      	movs	r1, #2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fb8a 	bl	80087e8 <RCCEx_PLL3_Config>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80080ea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	e000      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80080fe:	46bd      	mov	sp, r7
 8008100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008104:	58024400 	.word	0x58024400

08008108 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800810c:	f7fe fd96 	bl	8006c3c <HAL_RCC_GetHCLKFreq>
 8008110:	4602      	mov	r2, r0
 8008112:	4b06      	ldr	r3, [pc, #24]	@ (800812c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	091b      	lsrs	r3, r3, #4
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	4904      	ldr	r1, [pc, #16]	@ (8008130 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800811e:	5ccb      	ldrb	r3, [r1, r3]
 8008120:	f003 031f 	and.w	r3, r3, #31
 8008124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008128:	4618      	mov	r0, r3
 800812a:	bd80      	pop	{r7, pc}
 800812c:	58024400 	.word	0x58024400
 8008130:	0800c958 	.word	0x0800c958

08008134 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008134:	b480      	push	{r7}
 8008136:	b089      	sub	sp, #36	@ 0x24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800813c:	4ba1      	ldr	r3, [pc, #644]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800813e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008140:	f003 0303 	and.w	r3, r3, #3
 8008144:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008146:	4b9f      	ldr	r3, [pc, #636]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814a:	0b1b      	lsrs	r3, r3, #12
 800814c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008150:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008152:	4b9c      	ldr	r3, [pc, #624]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008156:	091b      	lsrs	r3, r3, #4
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800815e:	4b99      	ldr	r3, [pc, #612]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008162:	08db      	lsrs	r3, r3, #3
 8008164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	fb02 f303 	mul.w	r3, r2, r3
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008176:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8111 	beq.w	80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b02      	cmp	r3, #2
 8008186:	f000 8083 	beq.w	8008290 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	2b02      	cmp	r3, #2
 800818e:	f200 80a1 	bhi.w	80082d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d056      	beq.n	800824c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800819e:	e099      	b.n	80082d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081a0:	4b88      	ldr	r3, [pc, #544]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0320 	and.w	r3, r3, #32
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d02d      	beq.n	8008208 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081ac:	4b85      	ldr	r3, [pc, #532]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	08db      	lsrs	r3, r3, #3
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	4a84      	ldr	r2, [pc, #528]	@ (80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
 80081bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	ee07 3a90 	vmov	s15, r3
 80081c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d6:	4b7b      	ldr	r3, [pc, #492]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008202:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008206:	e087      	b.n	8008318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821a:	4b6a      	ldr	r3, [pc, #424]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800821c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822a:	ed97 6a03 	vldr	s12, [r7, #12]
 800822e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800823e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800824a:	e065      	b.n	8008318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008256:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800825a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825e:	4b59      	ldr	r3, [pc, #356]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008272:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800827a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800828a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800828e:	e043      	b.n	8008318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800829e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a2:	4b48      	ldr	r3, [pc, #288]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082d2:	e021      	b.n	8008318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e6:	4b37      	ldr	r3, [pc, #220]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800830a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008316:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008318:	4b2a      	ldr	r3, [pc, #168]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800831a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831c:	0a5b      	lsrs	r3, r3, #9
 800831e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800832e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008332:	edd7 6a07 	vldr	s13, [r7, #28]
 8008336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800833a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800833e:	ee17 2a90 	vmov	r2, s15
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008346:	4b1f      	ldr	r3, [pc, #124]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834a:	0c1b      	lsrs	r3, r3, #16
 800834c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008350:	ee07 3a90 	vmov	s15, r3
 8008354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800835c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008360:	edd7 6a07 	vldr	s13, [r7, #28]
 8008364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800836c:	ee17 2a90 	vmov	r2, s15
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008374:	4b13      	ldr	r3, [pc, #76]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008378:	0e1b      	lsrs	r3, r3, #24
 800837a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008386:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800838a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800838e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800839a:	ee17 2a90 	vmov	r2, s15
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80083a2:	e008      	b.n	80083b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	609a      	str	r2, [r3, #8]
}
 80083b6:	bf00      	nop
 80083b8:	3724      	adds	r7, #36	@ 0x24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	58024400 	.word	0x58024400
 80083c8:	03d09000 	.word	0x03d09000
 80083cc:	46000000 	.word	0x46000000
 80083d0:	4c742400 	.word	0x4c742400
 80083d4:	4a742400 	.word	0x4a742400
 80083d8:	4af42400 	.word	0x4af42400

080083dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80083dc:	b480      	push	{r7}
 80083de:	b089      	sub	sp, #36	@ 0x24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083e4:	4ba1      	ldr	r3, [pc, #644]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e8:	f003 0303 	and.w	r3, r3, #3
 80083ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80083ee:	4b9f      	ldr	r3, [pc, #636]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f2:	0d1b      	lsrs	r3, r3, #20
 80083f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083fa:	4b9c      	ldr	r3, [pc, #624]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fe:	0a1b      	lsrs	r3, r3, #8
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008406:	4b99      	ldr	r3, [pc, #612]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800840a:	08db      	lsrs	r3, r3, #3
 800840c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	fb02 f303 	mul.w	r3, r2, r3
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 8111 	beq.w	800864c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	2b02      	cmp	r3, #2
 800842e:	f000 8083 	beq.w	8008538 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	2b02      	cmp	r3, #2
 8008436:	f200 80a1 	bhi.w	800857c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d056      	beq.n	80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008446:	e099      	b.n	800857c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008448:	4b88      	ldr	r3, [pc, #544]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0320 	and.w	r3, r3, #32
 8008450:	2b00      	cmp	r3, #0
 8008452:	d02d      	beq.n	80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008454:	4b85      	ldr	r3, [pc, #532]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	08db      	lsrs	r3, r3, #3
 800845a:	f003 0303 	and.w	r3, r3, #3
 800845e:	4a84      	ldr	r2, [pc, #528]	@ (8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008460:	fa22 f303 	lsr.w	r3, r2, r3
 8008464:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	ee07 3a90 	vmov	s15, r3
 800846c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847e:	4b7b      	ldr	r3, [pc, #492]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008492:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800849a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80084ae:	e087      	b.n	80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	ee07 3a90 	vmov	s15, r3
 80084b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80084be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c2:	4b6a      	ldr	r3, [pc, #424]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084f2:	e065      	b.n	80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	ee07 3a90 	vmov	s15, r3
 80084fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800867c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008506:	4b59      	ldr	r3, [pc, #356]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008516:	ed97 6a03 	vldr	s12, [r7, #12]
 800851a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800851e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800852a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008536:	e043      	b.n	80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	ee07 3a90 	vmov	s15, r3
 800853e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008542:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800854a:	4b48      	ldr	r3, [pc, #288]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800854c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800855a:	ed97 6a03 	vldr	s12, [r7, #12]
 800855e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800856a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800856e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800857a:	e021      	b.n	80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008586:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800867c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800858a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858e:	4b37      	ldr	r3, [pc, #220]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859e:	ed97 6a03 	vldr	s12, [r7, #12]
 80085a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80085c0:	4b2a      	ldr	r3, [pc, #168]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c4:	0a5b      	lsrs	r3, r3, #9
 80085c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085da:	edd7 6a07 	vldr	s13, [r7, #28]
 80085de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e6:	ee17 2a90 	vmov	r2, s15
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80085ee:	4b1f      	ldr	r3, [pc, #124]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f2:	0c1b      	lsrs	r3, r3, #16
 80085f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085f8:	ee07 3a90 	vmov	s15, r3
 80085fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008600:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008608:	edd7 6a07 	vldr	s13, [r7, #28]
 800860c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008614:	ee17 2a90 	vmov	r2, s15
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800861c:	4b13      	ldr	r3, [pc, #76]	@ (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800861e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008620:	0e1b      	lsrs	r3, r3, #24
 8008622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008636:	edd7 6a07 	vldr	s13, [r7, #28]
 800863a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800863e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008642:	ee17 2a90 	vmov	r2, s15
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800864a:	e008      	b.n	800865e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	609a      	str	r2, [r3, #8]
}
 800865e:	bf00      	nop
 8008660:	3724      	adds	r7, #36	@ 0x24
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	58024400 	.word	0x58024400
 8008670:	03d09000 	.word	0x03d09000
 8008674:	46000000 	.word	0x46000000
 8008678:	4c742400 	.word	0x4c742400
 800867c:	4a742400 	.word	0x4a742400
 8008680:	4af42400 	.word	0x4af42400

08008684 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008692:	4b53      	ldr	r3, [pc, #332]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 8008694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008696:	f003 0303 	and.w	r3, r3, #3
 800869a:	2b03      	cmp	r3, #3
 800869c:	d101      	bne.n	80086a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e099      	b.n	80087d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80086a2:	4b4f      	ldr	r3, [pc, #316]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a4e      	ldr	r2, [pc, #312]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 80086a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ae:	f7f9 f901 	bl	80018b4 <HAL_GetTick>
 80086b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086b4:	e008      	b.n	80086c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086b6:	f7f9 f8fd 	bl	80018b4 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d901      	bls.n	80086c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e086      	b.n	80087d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086c8:	4b45      	ldr	r3, [pc, #276]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1f0      	bne.n	80086b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80086d4:	4b42      	ldr	r3, [pc, #264]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 80086d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	031b      	lsls	r3, r3, #12
 80086e2:	493f      	ldr	r1, [pc, #252]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	025b      	lsls	r3, r3, #9
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	431a      	orrs	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	3b01      	subs	r3, #1
 8008704:	041b      	lsls	r3, r3, #16
 8008706:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	3b01      	subs	r3, #1
 8008712:	061b      	lsls	r3, r3, #24
 8008714:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008718:	4931      	ldr	r1, [pc, #196]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 800871a:	4313      	orrs	r3, r2
 800871c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800871e:	4b30      	ldr	r3, [pc, #192]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 8008720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008722:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	492d      	ldr	r1, [pc, #180]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 800872c:	4313      	orrs	r3, r2
 800872e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008730:	4b2b      	ldr	r3, [pc, #172]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 8008732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008734:	f023 0220 	bic.w	r2, r3, #32
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	4928      	ldr	r1, [pc, #160]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 800873e:	4313      	orrs	r3, r2
 8008740:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008742:	4b27      	ldr	r3, [pc, #156]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 8008744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008746:	4a26      	ldr	r2, [pc, #152]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 8008748:	f023 0310 	bic.w	r3, r3, #16
 800874c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800874e:	4b24      	ldr	r3, [pc, #144]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 8008750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008752:	4b24      	ldr	r3, [pc, #144]	@ (80087e4 <RCCEx_PLL2_Config+0x160>)
 8008754:	4013      	ands	r3, r2
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	69d2      	ldr	r2, [r2, #28]
 800875a:	00d2      	lsls	r2, r2, #3
 800875c:	4920      	ldr	r1, [pc, #128]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 800875e:	4313      	orrs	r3, r2
 8008760:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008762:	4b1f      	ldr	r3, [pc, #124]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 8008764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008766:	4a1e      	ldr	r2, [pc, #120]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 8008768:	f043 0310 	orr.w	r3, r3, #16
 800876c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d106      	bne.n	8008782 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008774:	4b1a      	ldr	r3, [pc, #104]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 8008776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008778:	4a19      	ldr	r2, [pc, #100]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 800877a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800877e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008780:	e00f      	b.n	80087a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d106      	bne.n	8008796 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008788:	4b15      	ldr	r3, [pc, #84]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 800878a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878c:	4a14      	ldr	r2, [pc, #80]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 800878e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008792:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008794:	e005      	b.n	80087a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008796:	4b12      	ldr	r3, [pc, #72]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 8008798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879a:	4a11      	ldr	r2, [pc, #68]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 800879c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80087a2:	4b0f      	ldr	r3, [pc, #60]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a0e      	ldr	r2, [pc, #56]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 80087a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087ae:	f7f9 f881 	bl	80018b4 <HAL_GetTick>
 80087b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087b4:	e008      	b.n	80087c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80087b6:	f7f9 f87d 	bl	80018b4 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d901      	bls.n	80087c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e006      	b.n	80087d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087c8:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <RCCEx_PLL2_Config+0x15c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0f0      	beq.n	80087b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	58024400 	.word	0x58024400
 80087e4:	ffff0007 	.word	0xffff0007

080087e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087f6:	4b53      	ldr	r3, [pc, #332]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80087f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d101      	bne.n	8008806 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e099      	b.n	800893a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008806:	4b4f      	ldr	r3, [pc, #316]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a4e      	ldr	r2, [pc, #312]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 800880c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008812:	f7f9 f84f 	bl	80018b4 <HAL_GetTick>
 8008816:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008818:	e008      	b.n	800882c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800881a:	f7f9 f84b 	bl	80018b4 <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	2b02      	cmp	r3, #2
 8008826:	d901      	bls.n	800882c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e086      	b.n	800893a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800882c:	4b45      	ldr	r3, [pc, #276]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1f0      	bne.n	800881a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008838:	4b42      	ldr	r3, [pc, #264]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 800883a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800883c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	051b      	lsls	r3, r3, #20
 8008846:	493f      	ldr	r1, [pc, #252]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 8008848:	4313      	orrs	r3, r2
 800884a:	628b      	str	r3, [r1, #40]	@ 0x28
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	3b01      	subs	r3, #1
 8008852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	3b01      	subs	r3, #1
 800885c:	025b      	lsls	r3, r3, #9
 800885e:	b29b      	uxth	r3, r3
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	3b01      	subs	r3, #1
 8008868:	041b      	lsls	r3, r3, #16
 800886a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	3b01      	subs	r3, #1
 8008876:	061b      	lsls	r3, r3, #24
 8008878:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800887c:	4931      	ldr	r1, [pc, #196]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 800887e:	4313      	orrs	r3, r2
 8008880:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008882:	4b30      	ldr	r3, [pc, #192]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 8008884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008886:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	492d      	ldr	r1, [pc, #180]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 8008890:	4313      	orrs	r3, r2
 8008892:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008894:	4b2b      	ldr	r3, [pc, #172]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	4928      	ldr	r1, [pc, #160]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80088a6:	4b27      	ldr	r3, [pc, #156]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088aa:	4a26      	ldr	r2, [pc, #152]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80088b2:	4b24      	ldr	r3, [pc, #144]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088b6:	4b24      	ldr	r3, [pc, #144]	@ (8008948 <RCCEx_PLL3_Config+0x160>)
 80088b8:	4013      	ands	r3, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	69d2      	ldr	r2, [r2, #28]
 80088be:	00d2      	lsls	r2, r2, #3
 80088c0:	4920      	ldr	r1, [pc, #128]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80088c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d106      	bne.n	80088e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80088d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088dc:	4a19      	ldr	r2, [pc, #100]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80088e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088e4:	e00f      	b.n	8008906 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d106      	bne.n	80088fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80088ec:	4b15      	ldr	r3, [pc, #84]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f0:	4a14      	ldr	r2, [pc, #80]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088f8:	e005      	b.n	8008906 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80088fa:	4b12      	ldr	r3, [pc, #72]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 80088fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fe:	4a11      	ldr	r2, [pc, #68]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 8008900:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008904:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008906:	4b0f      	ldr	r3, [pc, #60]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a0e      	ldr	r2, [pc, #56]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 800890c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008912:	f7f8 ffcf 	bl	80018b4 <HAL_GetTick>
 8008916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008918:	e008      	b.n	800892c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800891a:	f7f8 ffcb 	bl	80018b4 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b02      	cmp	r3, #2
 8008926:	d901      	bls.n	800892c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e006      	b.n	800893a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800892c:	4b05      	ldr	r3, [pc, #20]	@ (8008944 <RCCEx_PLL3_Config+0x15c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0f0      	beq.n	800891a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008938:	7bfb      	ldrb	r3, [r7, #15]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	58024400 	.word	0x58024400
 8008948:	ffff0007 	.word	0xffff0007

0800894c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e042      	b.n	80089e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7f8 fb61 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2224      	movs	r2, #36	@ 0x24
 800897a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0201 	bic.w	r2, r2, #1
 800898c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 fae0 	bl	8009f5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fd75 	bl	800948c <UART_SetConfig>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d101      	bne.n	80089ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e01b      	b.n	80089e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0201 	orr.w	r2, r2, #1
 80089da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 fb5f 	bl	800a0a0 <UART_CheckIdleState>
 80089e2:	4603      	mov	r3, r0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e031      	b.n	8008a62 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2224      	movs	r2, #36	@ 0x24
 8008a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 0201 	bic.w	r2, r2, #1
 8008a14:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7f8 fc92 	bl	8001358 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
	...

08008a6c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b091      	sub	sp, #68	@ 0x44
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a80:	2b20      	cmp	r3, #32
 8008a82:	d178      	bne.n	8008b76 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <HAL_UART_Transmit_IT+0x24>
 8008a8a:	88fb      	ldrh	r3, [r7, #6]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e071      	b.n	8008b78 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	88fa      	ldrh	r2, [r7, #6]
 8008a9e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	88fa      	ldrh	r2, [r7, #6]
 8008aa6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2221      	movs	r2, #33	@ 0x21
 8008abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac8:	d12a      	bne.n	8008b20 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ad2:	d107      	bne.n	8008ae4 <HAL_UART_Transmit_IT+0x78>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d103      	bne.n	8008ae4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4a29      	ldr	r2, [pc, #164]	@ (8008b84 <HAL_UART_Transmit_IT+0x118>)
 8008ae0:	679a      	str	r2, [r3, #120]	@ 0x78
 8008ae2:	e002      	b.n	8008aea <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4a28      	ldr	r2, [pc, #160]	@ (8008b88 <HAL_UART_Transmit_IT+0x11c>)
 8008ae8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008b00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b0a:	637a      	str	r2, [r7, #52]	@ 0x34
 8008b0c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e5      	bne.n	8008aea <HAL_UART_Transmit_IT+0x7e>
 8008b1e:	e028      	b.n	8008b72 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b28:	d107      	bne.n	8008b3a <HAL_UART_Transmit_IT+0xce>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4a15      	ldr	r2, [pc, #84]	@ (8008b8c <HAL_UART_Transmit_IT+0x120>)
 8008b36:	679a      	str	r2, [r3, #120]	@ 0x78
 8008b38:	e002      	b.n	8008b40 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	4a14      	ldr	r2, [pc, #80]	@ (8008b90 <HAL_UART_Transmit_IT+0x124>)
 8008b3e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b5e:	623b      	str	r3, [r7, #32]
 8008b60:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	69f9      	ldr	r1, [r7, #28]
 8008b64:	6a3a      	ldr	r2, [r7, #32]
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e6      	bne.n	8008b40 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	e000      	b.n	8008b78 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008b76:	2302      	movs	r3, #2
  }
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3744      	adds	r7, #68	@ 0x44
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	0800ac1d 	.word	0x0800ac1d
 8008b88:	0800ab3d 	.word	0x0800ab3d
 8008b8c:	0800aa7b 	.word	0x0800aa7b
 8008b90:	0800a9c3 	.word	0x0800a9c3

08008b94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	@ 0x28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d137      	bne.n	8008c1c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <HAL_UART_Receive_IT+0x24>
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e030      	b.n	8008c1e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a18      	ldr	r2, [pc, #96]	@ (8008c28 <HAL_UART_Receive_IT+0x94>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d01f      	beq.n	8008c0c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d018      	beq.n	8008c0c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	613b      	str	r3, [r7, #16]
   return(result);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf8:	623b      	str	r3, [r7, #32]
 8008bfa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	69f9      	ldr	r1, [r7, #28]
 8008bfe:	6a3a      	ldr	r2, [r7, #32]
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e6      	bne.n	8008bda <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c0c:	88fb      	ldrh	r3, [r7, #6]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	68b9      	ldr	r1, [r7, #8]
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f001 fb5c 	bl	800a2d0 <UART_Start_Receive_IT>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	e000      	b.n	8008c1e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c1c:	2302      	movs	r3, #2
  }
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3728      	adds	r7, #40	@ 0x28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	58000c00 	.word	0x58000c00

08008c2c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08a      	sub	sp, #40	@ 0x28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	4613      	mov	r3, r2
 8008c38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d137      	bne.n	8008cb4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <HAL_UART_Receive_DMA+0x24>
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e030      	b.n	8008cb6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a18      	ldr	r2, [pc, #96]	@ (8008cc0 <HAL_UART_Receive_DMA+0x94>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d01f      	beq.n	8008ca4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d018      	beq.n	8008ca4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	e853 3f00 	ldrex	r3, [r3]
 8008c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c90:	623b      	str	r3, [r7, #32]
 8008c92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	69f9      	ldr	r1, [r7, #28]
 8008c96:	6a3a      	ldr	r2, [r7, #32]
 8008c98:	e841 2300 	strex	r3, r2, [r1]
 8008c9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e6      	bne.n	8008c72 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	68b9      	ldr	r1, [r7, #8]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f001 fc32 	bl	800a514 <UART_Start_Receive_DMA>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	e000      	b.n	8008cb6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008cb4:	2302      	movs	r3, #2
  }
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3728      	adds	r7, #40	@ 0x28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	58000c00 	.word	0x58000c00

08008cc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b0ba      	sub	sp, #232	@ 0xe8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008cea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008cee:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d11b      	bne.n	8008d38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d04:	f003 0320 	and.w	r3, r3, #32
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d015      	beq.n	8008d38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d105      	bne.n	8008d24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d009      	beq.n	8008d38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 8377 	beq.w	800941c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	4798      	blx	r3
      }
      return;
 8008d36:	e371      	b.n	800941c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 8123 	beq.w	8008f88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d46:	4b8d      	ldr	r3, [pc, #564]	@ (8008f7c <HAL_UART_IRQHandler+0x2b8>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d106      	bne.n	8008d5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008d52:	4b8b      	ldr	r3, [pc, #556]	@ (8008f80 <HAL_UART_IRQHandler+0x2bc>)
 8008d54:	4013      	ands	r3, r2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 8116 	beq.w	8008f88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d011      	beq.n	8008d8c <HAL_UART_IRQHandler+0xc8>
 8008d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d82:	f043 0201 	orr.w	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d90:	f003 0302 	and.w	r3, r3, #2
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d011      	beq.n	8008dbc <HAL_UART_IRQHandler+0xf8>
 8008d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2202      	movs	r2, #2
 8008daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db2:	f043 0204 	orr.w	r2, r3, #4
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d011      	beq.n	8008dec <HAL_UART_IRQHandler+0x128>
 8008dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00b      	beq.n	8008dec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2204      	movs	r2, #4
 8008dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de2:	f043 0202 	orr.w	r2, r3, #2
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d017      	beq.n	8008e28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dfc:	f003 0320 	and.w	r3, r3, #32
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d105      	bne.n	8008e10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e08:	4b5c      	ldr	r3, [pc, #368]	@ (8008f7c <HAL_UART_IRQHandler+0x2b8>)
 8008e0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2208      	movs	r2, #8
 8008e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e1e:	f043 0208 	orr.w	r2, r3, #8
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d012      	beq.n	8008e5a <HAL_UART_IRQHandler+0x196>
 8008e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00c      	beq.n	8008e5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e50:	f043 0220 	orr.w	r2, r3, #32
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 82dd 	beq.w	8009420 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d013      	beq.n	8008e9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d105      	bne.n	8008e8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d007      	beq.n	8008e9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eae:	2b40      	cmp	r3, #64	@ 0x40
 8008eb0:	d005      	beq.n	8008ebe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008eb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d054      	beq.n	8008f68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 fc10 	bl	800a6e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ece:	2b40      	cmp	r3, #64	@ 0x40
 8008ed0:	d146      	bne.n	8008f60 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008efe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1d9      	bne.n	8008ed2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d017      	beq.n	8008f58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f2e:	4a15      	ldr	r2, [pc, #84]	@ (8008f84 <HAL_UART_IRQHandler+0x2c0>)
 8008f30:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fa f8e7 	bl	800310c <HAL_DMA_Abort_IT>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d019      	beq.n	8008f78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008f52:	4610      	mov	r0, r2
 8008f54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f56:	e00f      	b.n	8008f78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fa81 	bl	8009460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f5e:	e00b      	b.n	8008f78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fa7d 	bl	8009460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f66:	e007      	b.n	8008f78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fa79 	bl	8009460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f76:	e253      	b.n	8009420 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f78:	bf00      	nop
    return;
 8008f7a:	e251      	b.n	8009420 <HAL_UART_IRQHandler+0x75c>
 8008f7c:	10000001 	.word	0x10000001
 8008f80:	04000120 	.word	0x04000120
 8008f84:	0800a997 	.word	0x0800a997

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	f040 81e7 	bne.w	8009360 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f96:	f003 0310 	and.w	r3, r3, #16
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 81e0 	beq.w	8009360 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 81d9 	beq.w	8009360 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2210      	movs	r2, #16
 8008fb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc0:	2b40      	cmp	r3, #64	@ 0x40
 8008fc2:	f040 8151 	bne.w	8009268 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a96      	ldr	r2, [pc, #600]	@ (8009228 <HAL_UART_IRQHandler+0x564>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d068      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a93      	ldr	r2, [pc, #588]	@ (800922c <HAL_UART_IRQHandler+0x568>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d061      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a91      	ldr	r2, [pc, #580]	@ (8009230 <HAL_UART_IRQHandler+0x56c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d05a      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a8e      	ldr	r2, [pc, #568]	@ (8009234 <HAL_UART_IRQHandler+0x570>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d053      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a8c      	ldr	r2, [pc, #560]	@ (8009238 <HAL_UART_IRQHandler+0x574>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d04c      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a89      	ldr	r2, [pc, #548]	@ (800923c <HAL_UART_IRQHandler+0x578>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d045      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a87      	ldr	r2, [pc, #540]	@ (8009240 <HAL_UART_IRQHandler+0x57c>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d03e      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a84      	ldr	r2, [pc, #528]	@ (8009244 <HAL_UART_IRQHandler+0x580>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d037      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a82      	ldr	r2, [pc, #520]	@ (8009248 <HAL_UART_IRQHandler+0x584>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d030      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a7f      	ldr	r2, [pc, #508]	@ (800924c <HAL_UART_IRQHandler+0x588>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d029      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a7d      	ldr	r2, [pc, #500]	@ (8009250 <HAL_UART_IRQHandler+0x58c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d022      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a7a      	ldr	r2, [pc, #488]	@ (8009254 <HAL_UART_IRQHandler+0x590>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d01b      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a78      	ldr	r2, [pc, #480]	@ (8009258 <HAL_UART_IRQHandler+0x594>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d014      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a75      	ldr	r2, [pc, #468]	@ (800925c <HAL_UART_IRQHandler+0x598>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00d      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a73      	ldr	r2, [pc, #460]	@ (8009260 <HAL_UART_IRQHandler+0x59c>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d006      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3e2>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a70      	ldr	r2, [pc, #448]	@ (8009264 <HAL_UART_IRQHandler+0x5a0>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d106      	bne.n	80090b4 <HAL_UART_IRQHandler+0x3f0>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	e005      	b.n	80090c0 <HAL_UART_IRQHandler+0x3fc>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 81ab 	beq.w	8009424 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090d8:	429a      	cmp	r2, r3
 80090da:	f080 81a3 	bcs.w	8009424 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090f4:	f000 8087 	beq.w	8009206 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800910c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009126:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800912e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800913a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1da      	bne.n	80090f8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009154:	f023 0301 	bic.w	r3, r3, #1
 8009158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3308      	adds	r3, #8
 8009162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009166:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800916a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800916e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e1      	bne.n	8009142 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3308      	adds	r3, #8
 8009184:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800918e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3308      	adds	r3, #8
 800919e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80091a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80091a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80091a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80091b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e3      	bne.n	800917e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2220      	movs	r2, #32
 80091ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091d4:	f023 0310 	bic.w	r3, r3, #16
 80091d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	461a      	mov	r2, r3
 80091e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e4      	bne.n	80091c4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009200:	4618      	mov	r0, r3
 8009202:	f7f9 fc65 	bl	8002ad0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2202      	movs	r2, #2
 800920a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009218:	b29b      	uxth	r3, r3
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	b29b      	uxth	r3, r3
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f927 	bl	8009474 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009226:	e0fd      	b.n	8009424 <HAL_UART_IRQHandler+0x760>
 8009228:	40020010 	.word	0x40020010
 800922c:	40020028 	.word	0x40020028
 8009230:	40020040 	.word	0x40020040
 8009234:	40020058 	.word	0x40020058
 8009238:	40020070 	.word	0x40020070
 800923c:	40020088 	.word	0x40020088
 8009240:	400200a0 	.word	0x400200a0
 8009244:	400200b8 	.word	0x400200b8
 8009248:	40020410 	.word	0x40020410
 800924c:	40020428 	.word	0x40020428
 8009250:	40020440 	.word	0x40020440
 8009254:	40020458 	.word	0x40020458
 8009258:	40020470 	.word	0x40020470
 800925c:	40020488 	.word	0x40020488
 8009260:	400204a0 	.word	0x400204a0
 8009264:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009274:	b29b      	uxth	r3, r3
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009282:	b29b      	uxth	r3, r3
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80cf 	beq.w	8009428 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800928a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80ca 	beq.w	8009428 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80092b8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e4      	bne.n	8009294 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3308      	adds	r3, #8
 80092d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	623b      	str	r3, [r7, #32]
   return(result);
 80092da:	6a3a      	ldr	r2, [r7, #32]
 80092dc:	4b55      	ldr	r3, [pc, #340]	@ (8009434 <HAL_UART_IRQHandler+0x770>)
 80092de:	4013      	ands	r3, r2
 80092e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3308      	adds	r3, #8
 80092ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80092f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e3      	bne.n	80092ca <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	e853 3f00 	ldrex	r3, [r3]
 8009322:	60fb      	str	r3, [r7, #12]
   return(result);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f023 0310 	bic.w	r3, r3, #16
 800932a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009338:	61fb      	str	r3, [r7, #28]
 800933a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933c:	69b9      	ldr	r1, [r7, #24]
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	e841 2300 	strex	r3, r2, [r1]
 8009344:	617b      	str	r3, [r7, #20]
   return(result);
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e4      	bne.n	8009316 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f88b 	bl	8009474 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800935e:	e063      	b.n	8009428 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009364:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00e      	beq.n	800938a <HAL_UART_IRQHandler+0x6c6>
 800936c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d008      	beq.n	800938a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f002 fa06 	bl	800b794 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009388:	e051      	b.n	800942e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800938a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800938e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009392:	2b00      	cmp	r3, #0
 8009394:	d014      	beq.n	80093c0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800939a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d105      	bne.n	80093ae <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d008      	beq.n	80093c0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d03a      	beq.n	800942c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	4798      	blx	r3
    }
    return;
 80093be:	e035      	b.n	800942c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d009      	beq.n	80093e0 <HAL_UART_IRQHandler+0x71c>
 80093cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 fc94 	bl	800ad06 <UART_EndTransmit_IT>
    return;
 80093de:	e026      	b.n	800942e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d009      	beq.n	8009400 <HAL_UART_IRQHandler+0x73c>
 80093ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f002 f9df 	bl	800b7bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093fe:	e016      	b.n	800942e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d010      	beq.n	800942e <HAL_UART_IRQHandler+0x76a>
 800940c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009410:	2b00      	cmp	r3, #0
 8009412:	da0c      	bge.n	800942e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f002 f9c7 	bl	800b7a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800941a:	e008      	b.n	800942e <HAL_UART_IRQHandler+0x76a>
      return;
 800941c:	bf00      	nop
 800941e:	e006      	b.n	800942e <HAL_UART_IRQHandler+0x76a>
    return;
 8009420:	bf00      	nop
 8009422:	e004      	b.n	800942e <HAL_UART_IRQHandler+0x76a>
      return;
 8009424:	bf00      	nop
 8009426:	e002      	b.n	800942e <HAL_UART_IRQHandler+0x76a>
      return;
 8009428:	bf00      	nop
 800942a:	e000      	b.n	800942e <HAL_UART_IRQHandler+0x76a>
    return;
 800942c:	bf00      	nop
  }
}
 800942e:	37e8      	adds	r7, #232	@ 0xe8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	effffffe 	.word	0xeffffffe

08009438 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800948c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009490:	b092      	sub	sp, #72	@ 0x48
 8009492:	af00      	add	r7, sp, #0
 8009494:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	431a      	orrs	r2, r3
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	4bbe      	ldr	r3, [pc, #760]	@ (80097b4 <UART_SetConfig+0x328>)
 80094bc:	4013      	ands	r3, r2
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	6812      	ldr	r2, [r2, #0]
 80094c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80094c4:	430b      	orrs	r3, r1
 80094c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	430a      	orrs	r2, r1
 80094dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4ab3      	ldr	r2, [pc, #716]	@ (80097b8 <UART_SetConfig+0x32c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d004      	beq.n	80094f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094f4:	4313      	orrs	r3, r2
 80094f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	4baf      	ldr	r3, [pc, #700]	@ (80097bc <UART_SetConfig+0x330>)
 8009500:	4013      	ands	r3, r2
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	6812      	ldr	r2, [r2, #0]
 8009506:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009508:	430b      	orrs	r3, r1
 800950a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009512:	f023 010f 	bic.w	r1, r3, #15
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4aa6      	ldr	r2, [pc, #664]	@ (80097c0 <UART_SetConfig+0x334>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d177      	bne.n	800961c <UART_SetConfig+0x190>
 800952c:	4ba5      	ldr	r3, [pc, #660]	@ (80097c4 <UART_SetConfig+0x338>)
 800952e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009530:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009534:	2b28      	cmp	r3, #40	@ 0x28
 8009536:	d86d      	bhi.n	8009614 <UART_SetConfig+0x188>
 8009538:	a201      	add	r2, pc, #4	@ (adr r2, 8009540 <UART_SetConfig+0xb4>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	080095e5 	.word	0x080095e5
 8009544:	08009615 	.word	0x08009615
 8009548:	08009615 	.word	0x08009615
 800954c:	08009615 	.word	0x08009615
 8009550:	08009615 	.word	0x08009615
 8009554:	08009615 	.word	0x08009615
 8009558:	08009615 	.word	0x08009615
 800955c:	08009615 	.word	0x08009615
 8009560:	080095ed 	.word	0x080095ed
 8009564:	08009615 	.word	0x08009615
 8009568:	08009615 	.word	0x08009615
 800956c:	08009615 	.word	0x08009615
 8009570:	08009615 	.word	0x08009615
 8009574:	08009615 	.word	0x08009615
 8009578:	08009615 	.word	0x08009615
 800957c:	08009615 	.word	0x08009615
 8009580:	080095f5 	.word	0x080095f5
 8009584:	08009615 	.word	0x08009615
 8009588:	08009615 	.word	0x08009615
 800958c:	08009615 	.word	0x08009615
 8009590:	08009615 	.word	0x08009615
 8009594:	08009615 	.word	0x08009615
 8009598:	08009615 	.word	0x08009615
 800959c:	08009615 	.word	0x08009615
 80095a0:	080095fd 	.word	0x080095fd
 80095a4:	08009615 	.word	0x08009615
 80095a8:	08009615 	.word	0x08009615
 80095ac:	08009615 	.word	0x08009615
 80095b0:	08009615 	.word	0x08009615
 80095b4:	08009615 	.word	0x08009615
 80095b8:	08009615 	.word	0x08009615
 80095bc:	08009615 	.word	0x08009615
 80095c0:	08009605 	.word	0x08009605
 80095c4:	08009615 	.word	0x08009615
 80095c8:	08009615 	.word	0x08009615
 80095cc:	08009615 	.word	0x08009615
 80095d0:	08009615 	.word	0x08009615
 80095d4:	08009615 	.word	0x08009615
 80095d8:	08009615 	.word	0x08009615
 80095dc:	08009615 	.word	0x08009615
 80095e0:	0800960d 	.word	0x0800960d
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e222      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80095ec:	2304      	movs	r3, #4
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e21e      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80095f4:	2308      	movs	r3, #8
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e21a      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80095fc:	2310      	movs	r3, #16
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e216      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009604:	2320      	movs	r3, #32
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e212      	b.n	8009a32 <UART_SetConfig+0x5a6>
 800960c:	2340      	movs	r3, #64	@ 0x40
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e20e      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009614:	2380      	movs	r3, #128	@ 0x80
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e20a      	b.n	8009a32 <UART_SetConfig+0x5a6>
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a69      	ldr	r2, [pc, #420]	@ (80097c8 <UART_SetConfig+0x33c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d130      	bne.n	8009688 <UART_SetConfig+0x1fc>
 8009626:	4b67      	ldr	r3, [pc, #412]	@ (80097c4 <UART_SetConfig+0x338>)
 8009628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800962a:	f003 0307 	and.w	r3, r3, #7
 800962e:	2b05      	cmp	r3, #5
 8009630:	d826      	bhi.n	8009680 <UART_SetConfig+0x1f4>
 8009632:	a201      	add	r2, pc, #4	@ (adr r2, 8009638 <UART_SetConfig+0x1ac>)
 8009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009638:	08009651 	.word	0x08009651
 800963c:	08009659 	.word	0x08009659
 8009640:	08009661 	.word	0x08009661
 8009644:	08009669 	.word	0x08009669
 8009648:	08009671 	.word	0x08009671
 800964c:	08009679 	.word	0x08009679
 8009650:	2300      	movs	r3, #0
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e1ec      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009658:	2304      	movs	r3, #4
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e1e8      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009660:	2308      	movs	r3, #8
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e1e4      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009668:	2310      	movs	r3, #16
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e1e0      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009670:	2320      	movs	r3, #32
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009676:	e1dc      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009678:	2340      	movs	r3, #64	@ 0x40
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967e:	e1d8      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009680:	2380      	movs	r3, #128	@ 0x80
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009686:	e1d4      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a4f      	ldr	r2, [pc, #316]	@ (80097cc <UART_SetConfig+0x340>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d130      	bne.n	80096f4 <UART_SetConfig+0x268>
 8009692:	4b4c      	ldr	r3, [pc, #304]	@ (80097c4 <UART_SetConfig+0x338>)
 8009694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009696:	f003 0307 	and.w	r3, r3, #7
 800969a:	2b05      	cmp	r3, #5
 800969c:	d826      	bhi.n	80096ec <UART_SetConfig+0x260>
 800969e:	a201      	add	r2, pc, #4	@ (adr r2, 80096a4 <UART_SetConfig+0x218>)
 80096a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a4:	080096bd 	.word	0x080096bd
 80096a8:	080096c5 	.word	0x080096c5
 80096ac:	080096cd 	.word	0x080096cd
 80096b0:	080096d5 	.word	0x080096d5
 80096b4:	080096dd 	.word	0x080096dd
 80096b8:	080096e5 	.word	0x080096e5
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e1b6      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80096c4:	2304      	movs	r3, #4
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e1b2      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80096cc:	2308      	movs	r3, #8
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e1ae      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80096d4:	2310      	movs	r3, #16
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e1aa      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80096dc:	2320      	movs	r3, #32
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e1a6      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80096e4:	2340      	movs	r3, #64	@ 0x40
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e1a2      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80096ec:	2380      	movs	r3, #128	@ 0x80
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e19e      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a35      	ldr	r2, [pc, #212]	@ (80097d0 <UART_SetConfig+0x344>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d130      	bne.n	8009760 <UART_SetConfig+0x2d4>
 80096fe:	4b31      	ldr	r3, [pc, #196]	@ (80097c4 <UART_SetConfig+0x338>)
 8009700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009702:	f003 0307 	and.w	r3, r3, #7
 8009706:	2b05      	cmp	r3, #5
 8009708:	d826      	bhi.n	8009758 <UART_SetConfig+0x2cc>
 800970a:	a201      	add	r2, pc, #4	@ (adr r2, 8009710 <UART_SetConfig+0x284>)
 800970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009710:	08009729 	.word	0x08009729
 8009714:	08009731 	.word	0x08009731
 8009718:	08009739 	.word	0x08009739
 800971c:	08009741 	.word	0x08009741
 8009720:	08009749 	.word	0x08009749
 8009724:	08009751 	.word	0x08009751
 8009728:	2300      	movs	r3, #0
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e180      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009730:	2304      	movs	r3, #4
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e17c      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009738:	2308      	movs	r3, #8
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e178      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009740:	2310      	movs	r3, #16
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e174      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009748:	2320      	movs	r3, #32
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e170      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009750:	2340      	movs	r3, #64	@ 0x40
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e16c      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009758:	2380      	movs	r3, #128	@ 0x80
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e168      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1b      	ldr	r2, [pc, #108]	@ (80097d4 <UART_SetConfig+0x348>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d142      	bne.n	80097f0 <UART_SetConfig+0x364>
 800976a:	4b16      	ldr	r3, [pc, #88]	@ (80097c4 <UART_SetConfig+0x338>)
 800976c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976e:	f003 0307 	and.w	r3, r3, #7
 8009772:	2b05      	cmp	r3, #5
 8009774:	d838      	bhi.n	80097e8 <UART_SetConfig+0x35c>
 8009776:	a201      	add	r2, pc, #4	@ (adr r2, 800977c <UART_SetConfig+0x2f0>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	08009795 	.word	0x08009795
 8009780:	0800979d 	.word	0x0800979d
 8009784:	080097a5 	.word	0x080097a5
 8009788:	080097ad 	.word	0x080097ad
 800978c:	080097d9 	.word	0x080097d9
 8009790:	080097e1 	.word	0x080097e1
 8009794:	2300      	movs	r3, #0
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e14a      	b.n	8009a32 <UART_SetConfig+0x5a6>
 800979c:	2304      	movs	r3, #4
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e146      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80097a4:	2308      	movs	r3, #8
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e142      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80097ac:	2310      	movs	r3, #16
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e13e      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80097b4:	cfff69f3 	.word	0xcfff69f3
 80097b8:	58000c00 	.word	0x58000c00
 80097bc:	11fff4ff 	.word	0x11fff4ff
 80097c0:	40011000 	.word	0x40011000
 80097c4:	58024400 	.word	0x58024400
 80097c8:	40004400 	.word	0x40004400
 80097cc:	40004800 	.word	0x40004800
 80097d0:	40004c00 	.word	0x40004c00
 80097d4:	40005000 	.word	0x40005000
 80097d8:	2320      	movs	r3, #32
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097de:	e128      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80097e0:	2340      	movs	r3, #64	@ 0x40
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e124      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80097e8:	2380      	movs	r3, #128	@ 0x80
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e120      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4acb      	ldr	r2, [pc, #812]	@ (8009b24 <UART_SetConfig+0x698>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d176      	bne.n	80098e8 <UART_SetConfig+0x45c>
 80097fa:	4bcb      	ldr	r3, [pc, #812]	@ (8009b28 <UART_SetConfig+0x69c>)
 80097fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009802:	2b28      	cmp	r3, #40	@ 0x28
 8009804:	d86c      	bhi.n	80098e0 <UART_SetConfig+0x454>
 8009806:	a201      	add	r2, pc, #4	@ (adr r2, 800980c <UART_SetConfig+0x380>)
 8009808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980c:	080098b1 	.word	0x080098b1
 8009810:	080098e1 	.word	0x080098e1
 8009814:	080098e1 	.word	0x080098e1
 8009818:	080098e1 	.word	0x080098e1
 800981c:	080098e1 	.word	0x080098e1
 8009820:	080098e1 	.word	0x080098e1
 8009824:	080098e1 	.word	0x080098e1
 8009828:	080098e1 	.word	0x080098e1
 800982c:	080098b9 	.word	0x080098b9
 8009830:	080098e1 	.word	0x080098e1
 8009834:	080098e1 	.word	0x080098e1
 8009838:	080098e1 	.word	0x080098e1
 800983c:	080098e1 	.word	0x080098e1
 8009840:	080098e1 	.word	0x080098e1
 8009844:	080098e1 	.word	0x080098e1
 8009848:	080098e1 	.word	0x080098e1
 800984c:	080098c1 	.word	0x080098c1
 8009850:	080098e1 	.word	0x080098e1
 8009854:	080098e1 	.word	0x080098e1
 8009858:	080098e1 	.word	0x080098e1
 800985c:	080098e1 	.word	0x080098e1
 8009860:	080098e1 	.word	0x080098e1
 8009864:	080098e1 	.word	0x080098e1
 8009868:	080098e1 	.word	0x080098e1
 800986c:	080098c9 	.word	0x080098c9
 8009870:	080098e1 	.word	0x080098e1
 8009874:	080098e1 	.word	0x080098e1
 8009878:	080098e1 	.word	0x080098e1
 800987c:	080098e1 	.word	0x080098e1
 8009880:	080098e1 	.word	0x080098e1
 8009884:	080098e1 	.word	0x080098e1
 8009888:	080098e1 	.word	0x080098e1
 800988c:	080098d1 	.word	0x080098d1
 8009890:	080098e1 	.word	0x080098e1
 8009894:	080098e1 	.word	0x080098e1
 8009898:	080098e1 	.word	0x080098e1
 800989c:	080098e1 	.word	0x080098e1
 80098a0:	080098e1 	.word	0x080098e1
 80098a4:	080098e1 	.word	0x080098e1
 80098a8:	080098e1 	.word	0x080098e1
 80098ac:	080098d9 	.word	0x080098d9
 80098b0:	2301      	movs	r3, #1
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b6:	e0bc      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80098b8:	2304      	movs	r3, #4
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098be:	e0b8      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80098c0:	2308      	movs	r3, #8
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c6:	e0b4      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80098c8:	2310      	movs	r3, #16
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ce:	e0b0      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80098d0:	2320      	movs	r3, #32
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d6:	e0ac      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80098d8:	2340      	movs	r3, #64	@ 0x40
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098de:	e0a8      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80098e0:	2380      	movs	r3, #128	@ 0x80
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e6:	e0a4      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a8f      	ldr	r2, [pc, #572]	@ (8009b2c <UART_SetConfig+0x6a0>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d130      	bne.n	8009954 <UART_SetConfig+0x4c8>
 80098f2:	4b8d      	ldr	r3, [pc, #564]	@ (8009b28 <UART_SetConfig+0x69c>)
 80098f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	2b05      	cmp	r3, #5
 80098fc:	d826      	bhi.n	800994c <UART_SetConfig+0x4c0>
 80098fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009904 <UART_SetConfig+0x478>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	0800991d 	.word	0x0800991d
 8009908:	08009925 	.word	0x08009925
 800990c:	0800992d 	.word	0x0800992d
 8009910:	08009935 	.word	0x08009935
 8009914:	0800993d 	.word	0x0800993d
 8009918:	08009945 	.word	0x08009945
 800991c:	2300      	movs	r3, #0
 800991e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009922:	e086      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009924:	2304      	movs	r3, #4
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992a:	e082      	b.n	8009a32 <UART_SetConfig+0x5a6>
 800992c:	2308      	movs	r3, #8
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009932:	e07e      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009934:	2310      	movs	r3, #16
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993a:	e07a      	b.n	8009a32 <UART_SetConfig+0x5a6>
 800993c:	2320      	movs	r3, #32
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e076      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009944:	2340      	movs	r3, #64	@ 0x40
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e072      	b.n	8009a32 <UART_SetConfig+0x5a6>
 800994c:	2380      	movs	r3, #128	@ 0x80
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e06e      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a75      	ldr	r2, [pc, #468]	@ (8009b30 <UART_SetConfig+0x6a4>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d130      	bne.n	80099c0 <UART_SetConfig+0x534>
 800995e:	4b72      	ldr	r3, [pc, #456]	@ (8009b28 <UART_SetConfig+0x69c>)
 8009960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	2b05      	cmp	r3, #5
 8009968:	d826      	bhi.n	80099b8 <UART_SetConfig+0x52c>
 800996a:	a201      	add	r2, pc, #4	@ (adr r2, 8009970 <UART_SetConfig+0x4e4>)
 800996c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009970:	08009989 	.word	0x08009989
 8009974:	08009991 	.word	0x08009991
 8009978:	08009999 	.word	0x08009999
 800997c:	080099a1 	.word	0x080099a1
 8009980:	080099a9 	.word	0x080099a9
 8009984:	080099b1 	.word	0x080099b1
 8009988:	2300      	movs	r3, #0
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998e:	e050      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009990:	2304      	movs	r3, #4
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009996:	e04c      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009998:	2308      	movs	r3, #8
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999e:	e048      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80099a0:	2310      	movs	r3, #16
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a6:	e044      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80099a8:	2320      	movs	r3, #32
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ae:	e040      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80099b0:	2340      	movs	r3, #64	@ 0x40
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b6:	e03c      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80099b8:	2380      	movs	r3, #128	@ 0x80
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099be:	e038      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a5b      	ldr	r2, [pc, #364]	@ (8009b34 <UART_SetConfig+0x6a8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d130      	bne.n	8009a2c <UART_SetConfig+0x5a0>
 80099ca:	4b57      	ldr	r3, [pc, #348]	@ (8009b28 <UART_SetConfig+0x69c>)
 80099cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	d826      	bhi.n	8009a24 <UART_SetConfig+0x598>
 80099d6:	a201      	add	r2, pc, #4	@ (adr r2, 80099dc <UART_SetConfig+0x550>)
 80099d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099dc:	080099f5 	.word	0x080099f5
 80099e0:	080099fd 	.word	0x080099fd
 80099e4:	08009a05 	.word	0x08009a05
 80099e8:	08009a0d 	.word	0x08009a0d
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a1d 	.word	0x08009a1d
 80099f4:	2302      	movs	r3, #2
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fa:	e01a      	b.n	8009a32 <UART_SetConfig+0x5a6>
 80099fc:	2304      	movs	r3, #4
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a02:	e016      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009a04:	2308      	movs	r3, #8
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a0a:	e012      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a12:	e00e      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009a14:	2320      	movs	r3, #32
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a1a:	e00a      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009a1c:	2340      	movs	r3, #64	@ 0x40
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a22:	e006      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009a24:	2380      	movs	r3, #128	@ 0x80
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a2a:	e002      	b.n	8009a32 <UART_SetConfig+0x5a6>
 8009a2c:	2380      	movs	r3, #128	@ 0x80
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a3f      	ldr	r2, [pc, #252]	@ (8009b34 <UART_SetConfig+0x6a8>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	f040 80f8 	bne.w	8009c2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	dc46      	bgt.n	8009ad4 <UART_SetConfig+0x648>
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	f2c0 8082 	blt.w	8009b50 <UART_SetConfig+0x6c4>
 8009a4c:	3b02      	subs	r3, #2
 8009a4e:	2b1e      	cmp	r3, #30
 8009a50:	d87e      	bhi.n	8009b50 <UART_SetConfig+0x6c4>
 8009a52:	a201      	add	r2, pc, #4	@ (adr r2, 8009a58 <UART_SetConfig+0x5cc>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009adb 	.word	0x08009adb
 8009a5c:	08009b51 	.word	0x08009b51
 8009a60:	08009ae3 	.word	0x08009ae3
 8009a64:	08009b51 	.word	0x08009b51
 8009a68:	08009b51 	.word	0x08009b51
 8009a6c:	08009b51 	.word	0x08009b51
 8009a70:	08009af3 	.word	0x08009af3
 8009a74:	08009b51 	.word	0x08009b51
 8009a78:	08009b51 	.word	0x08009b51
 8009a7c:	08009b51 	.word	0x08009b51
 8009a80:	08009b51 	.word	0x08009b51
 8009a84:	08009b51 	.word	0x08009b51
 8009a88:	08009b51 	.word	0x08009b51
 8009a8c:	08009b51 	.word	0x08009b51
 8009a90:	08009b03 	.word	0x08009b03
 8009a94:	08009b51 	.word	0x08009b51
 8009a98:	08009b51 	.word	0x08009b51
 8009a9c:	08009b51 	.word	0x08009b51
 8009aa0:	08009b51 	.word	0x08009b51
 8009aa4:	08009b51 	.word	0x08009b51
 8009aa8:	08009b51 	.word	0x08009b51
 8009aac:	08009b51 	.word	0x08009b51
 8009ab0:	08009b51 	.word	0x08009b51
 8009ab4:	08009b51 	.word	0x08009b51
 8009ab8:	08009b51 	.word	0x08009b51
 8009abc:	08009b51 	.word	0x08009b51
 8009ac0:	08009b51 	.word	0x08009b51
 8009ac4:	08009b51 	.word	0x08009b51
 8009ac8:	08009b51 	.word	0x08009b51
 8009acc:	08009b51 	.word	0x08009b51
 8009ad0:	08009b43 	.word	0x08009b43
 8009ad4:	2b40      	cmp	r3, #64	@ 0x40
 8009ad6:	d037      	beq.n	8009b48 <UART_SetConfig+0x6bc>
 8009ad8:	e03a      	b.n	8009b50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ada:	f7fe fb15 	bl	8008108 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ade:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ae0:	e03c      	b.n	8009b5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fb24 	bl	8008134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009af0:	e034      	b.n	8009b5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009af2:	f107 0318 	add.w	r3, r7, #24
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fc70 	bl	80083dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b00:	e02c      	b.n	8009b5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b02:	4b09      	ldr	r3, [pc, #36]	@ (8009b28 <UART_SetConfig+0x69c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0320 	and.w	r3, r3, #32
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d016      	beq.n	8009b3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b0e:	4b06      	ldr	r3, [pc, #24]	@ (8009b28 <UART_SetConfig+0x69c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	08db      	lsrs	r3, r3, #3
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	4a07      	ldr	r2, [pc, #28]	@ (8009b38 <UART_SetConfig+0x6ac>)
 8009b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b20:	e01c      	b.n	8009b5c <UART_SetConfig+0x6d0>
 8009b22:	bf00      	nop
 8009b24:	40011400 	.word	0x40011400
 8009b28:	58024400 	.word	0x58024400
 8009b2c:	40007800 	.word	0x40007800
 8009b30:	40007c00 	.word	0x40007c00
 8009b34:	58000c00 	.word	0x58000c00
 8009b38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009b3c:	4b9d      	ldr	r3, [pc, #628]	@ (8009db4 <UART_SetConfig+0x928>)
 8009b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b40:	e00c      	b.n	8009b5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b42:	4b9d      	ldr	r3, [pc, #628]	@ (8009db8 <UART_SetConfig+0x92c>)
 8009b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b46:	e009      	b.n	8009b5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b4e:	e005      	b.n	8009b5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009b50:	2300      	movs	r3, #0
 8009b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 81de 	beq.w	8009f20 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b68:	4a94      	ldr	r2, [pc, #592]	@ (8009dbc <UART_SetConfig+0x930>)
 8009b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b76:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	4413      	add	r3, r2
 8009b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d305      	bcc.n	8009b94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d903      	bls.n	8009b9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b9a:	e1c1      	b.n	8009f20 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	60bb      	str	r3, [r7, #8]
 8009ba2:	60fa      	str	r2, [r7, #12]
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba8:	4a84      	ldr	r2, [pc, #528]	@ (8009dbc <UART_SetConfig+0x930>)
 8009baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	603b      	str	r3, [r7, #0]
 8009bb4:	607a      	str	r2, [r7, #4]
 8009bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bbe:	f7f6 fbe7 	bl	8000390 <__aeabi_uldivmod>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	4619      	mov	r1, r3
 8009bca:	f04f 0200 	mov.w	r2, #0
 8009bce:	f04f 0300 	mov.w	r3, #0
 8009bd2:	020b      	lsls	r3, r1, #8
 8009bd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bd8:	0202      	lsls	r2, r0, #8
 8009bda:	6979      	ldr	r1, [r7, #20]
 8009bdc:	6849      	ldr	r1, [r1, #4]
 8009bde:	0849      	lsrs	r1, r1, #1
 8009be0:	2000      	movs	r0, #0
 8009be2:	460c      	mov	r4, r1
 8009be4:	4605      	mov	r5, r0
 8009be6:	eb12 0804 	adds.w	r8, r2, r4
 8009bea:	eb43 0905 	adc.w	r9, r3, r5
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	469a      	mov	sl, r3
 8009bf6:	4693      	mov	fp, r2
 8009bf8:	4652      	mov	r2, sl
 8009bfa:	465b      	mov	r3, fp
 8009bfc:	4640      	mov	r0, r8
 8009bfe:	4649      	mov	r1, r9
 8009c00:	f7f6 fbc6 	bl	8000390 <__aeabi_uldivmod>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4613      	mov	r3, r2
 8009c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c12:	d308      	bcc.n	8009c26 <UART_SetConfig+0x79a>
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c1a:	d204      	bcs.n	8009c26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c22:	60da      	str	r2, [r3, #12]
 8009c24:	e17c      	b.n	8009f20 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c2c:	e178      	b.n	8009f20 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	69db      	ldr	r3, [r3, #28]
 8009c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c36:	f040 80c5 	bne.w	8009dc4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009c3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c3e:	2b20      	cmp	r3, #32
 8009c40:	dc48      	bgt.n	8009cd4 <UART_SetConfig+0x848>
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	db7b      	blt.n	8009d3e <UART_SetConfig+0x8b2>
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	d879      	bhi.n	8009d3e <UART_SetConfig+0x8b2>
 8009c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c50 <UART_SetConfig+0x7c4>)
 8009c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c50:	08009cdb 	.word	0x08009cdb
 8009c54:	08009ce3 	.word	0x08009ce3
 8009c58:	08009d3f 	.word	0x08009d3f
 8009c5c:	08009d3f 	.word	0x08009d3f
 8009c60:	08009ceb 	.word	0x08009ceb
 8009c64:	08009d3f 	.word	0x08009d3f
 8009c68:	08009d3f 	.word	0x08009d3f
 8009c6c:	08009d3f 	.word	0x08009d3f
 8009c70:	08009cfb 	.word	0x08009cfb
 8009c74:	08009d3f 	.word	0x08009d3f
 8009c78:	08009d3f 	.word	0x08009d3f
 8009c7c:	08009d3f 	.word	0x08009d3f
 8009c80:	08009d3f 	.word	0x08009d3f
 8009c84:	08009d3f 	.word	0x08009d3f
 8009c88:	08009d3f 	.word	0x08009d3f
 8009c8c:	08009d3f 	.word	0x08009d3f
 8009c90:	08009d0b 	.word	0x08009d0b
 8009c94:	08009d3f 	.word	0x08009d3f
 8009c98:	08009d3f 	.word	0x08009d3f
 8009c9c:	08009d3f 	.word	0x08009d3f
 8009ca0:	08009d3f 	.word	0x08009d3f
 8009ca4:	08009d3f 	.word	0x08009d3f
 8009ca8:	08009d3f 	.word	0x08009d3f
 8009cac:	08009d3f 	.word	0x08009d3f
 8009cb0:	08009d3f 	.word	0x08009d3f
 8009cb4:	08009d3f 	.word	0x08009d3f
 8009cb8:	08009d3f 	.word	0x08009d3f
 8009cbc:	08009d3f 	.word	0x08009d3f
 8009cc0:	08009d3f 	.word	0x08009d3f
 8009cc4:	08009d3f 	.word	0x08009d3f
 8009cc8:	08009d3f 	.word	0x08009d3f
 8009ccc:	08009d3f 	.word	0x08009d3f
 8009cd0:	08009d31 	.word	0x08009d31
 8009cd4:	2b40      	cmp	r3, #64	@ 0x40
 8009cd6:	d02e      	beq.n	8009d36 <UART_SetConfig+0x8aa>
 8009cd8:	e031      	b.n	8009d3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cda:	f7fc ffdf 	bl	8006c9c <HAL_RCC_GetPCLK1Freq>
 8009cde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ce0:	e033      	b.n	8009d4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ce2:	f7fc fff1 	bl	8006cc8 <HAL_RCC_GetPCLK2Freq>
 8009ce6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ce8:	e02f      	b.n	8009d4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe fa20 	bl	8008134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cf8:	e027      	b.n	8009d4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cfa:	f107 0318 	add.w	r3, r7, #24
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe fb6c 	bl	80083dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d08:	e01f      	b.n	8009d4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8009dc0 <UART_SetConfig+0x934>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0320 	and.w	r3, r3, #32
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d009      	beq.n	8009d2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d16:	4b2a      	ldr	r3, [pc, #168]	@ (8009dc0 <UART_SetConfig+0x934>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	08db      	lsrs	r3, r3, #3
 8009d1c:	f003 0303 	and.w	r3, r3, #3
 8009d20:	4a24      	ldr	r2, [pc, #144]	@ (8009db4 <UART_SetConfig+0x928>)
 8009d22:	fa22 f303 	lsr.w	r3, r2, r3
 8009d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d28:	e00f      	b.n	8009d4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009d2a:	4b22      	ldr	r3, [pc, #136]	@ (8009db4 <UART_SetConfig+0x928>)
 8009d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d2e:	e00c      	b.n	8009d4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d30:	4b21      	ldr	r3, [pc, #132]	@ (8009db8 <UART_SetConfig+0x92c>)
 8009d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d34:	e009      	b.n	8009d4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d3c:	e005      	b.n	8009d4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80e7 	beq.w	8009f20 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d56:	4a19      	ldr	r2, [pc, #100]	@ (8009dbc <UART_SetConfig+0x930>)
 8009d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d64:	005a      	lsls	r2, r3, #1
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	441a      	add	r2, r3
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d76:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7a:	2b0f      	cmp	r3, #15
 8009d7c:	d916      	bls.n	8009dac <UART_SetConfig+0x920>
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d84:	d212      	bcs.n	8009dac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f023 030f 	bic.w	r3, r3, #15
 8009d8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d92:	085b      	lsrs	r3, r3, #1
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009da8:	60da      	str	r2, [r3, #12]
 8009daa:	e0b9      	b.n	8009f20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009db2:	e0b5      	b.n	8009f20 <UART_SetConfig+0xa94>
 8009db4:	03d09000 	.word	0x03d09000
 8009db8:	003d0900 	.word	0x003d0900
 8009dbc:	0800c970 	.word	0x0800c970
 8009dc0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009dc8:	2b20      	cmp	r3, #32
 8009dca:	dc49      	bgt.n	8009e60 <UART_SetConfig+0x9d4>
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	db7c      	blt.n	8009eca <UART_SetConfig+0xa3e>
 8009dd0:	2b20      	cmp	r3, #32
 8009dd2:	d87a      	bhi.n	8009eca <UART_SetConfig+0xa3e>
 8009dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ddc <UART_SetConfig+0x950>)
 8009dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dda:	bf00      	nop
 8009ddc:	08009e67 	.word	0x08009e67
 8009de0:	08009e6f 	.word	0x08009e6f
 8009de4:	08009ecb 	.word	0x08009ecb
 8009de8:	08009ecb 	.word	0x08009ecb
 8009dec:	08009e77 	.word	0x08009e77
 8009df0:	08009ecb 	.word	0x08009ecb
 8009df4:	08009ecb 	.word	0x08009ecb
 8009df8:	08009ecb 	.word	0x08009ecb
 8009dfc:	08009e87 	.word	0x08009e87
 8009e00:	08009ecb 	.word	0x08009ecb
 8009e04:	08009ecb 	.word	0x08009ecb
 8009e08:	08009ecb 	.word	0x08009ecb
 8009e0c:	08009ecb 	.word	0x08009ecb
 8009e10:	08009ecb 	.word	0x08009ecb
 8009e14:	08009ecb 	.word	0x08009ecb
 8009e18:	08009ecb 	.word	0x08009ecb
 8009e1c:	08009e97 	.word	0x08009e97
 8009e20:	08009ecb 	.word	0x08009ecb
 8009e24:	08009ecb 	.word	0x08009ecb
 8009e28:	08009ecb 	.word	0x08009ecb
 8009e2c:	08009ecb 	.word	0x08009ecb
 8009e30:	08009ecb 	.word	0x08009ecb
 8009e34:	08009ecb 	.word	0x08009ecb
 8009e38:	08009ecb 	.word	0x08009ecb
 8009e3c:	08009ecb 	.word	0x08009ecb
 8009e40:	08009ecb 	.word	0x08009ecb
 8009e44:	08009ecb 	.word	0x08009ecb
 8009e48:	08009ecb 	.word	0x08009ecb
 8009e4c:	08009ecb 	.word	0x08009ecb
 8009e50:	08009ecb 	.word	0x08009ecb
 8009e54:	08009ecb 	.word	0x08009ecb
 8009e58:	08009ecb 	.word	0x08009ecb
 8009e5c:	08009ebd 	.word	0x08009ebd
 8009e60:	2b40      	cmp	r3, #64	@ 0x40
 8009e62:	d02e      	beq.n	8009ec2 <UART_SetConfig+0xa36>
 8009e64:	e031      	b.n	8009eca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e66:	f7fc ff19 	bl	8006c9c <HAL_RCC_GetPCLK1Freq>
 8009e6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e6c:	e033      	b.n	8009ed6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e6e:	f7fc ff2b 	bl	8006cc8 <HAL_RCC_GetPCLK2Freq>
 8009e72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e74:	e02f      	b.n	8009ed6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe f95a 	bl	8008134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e84:	e027      	b.n	8009ed6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e86:	f107 0318 	add.w	r3, r7, #24
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe faa6 	bl	80083dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e94:	e01f      	b.n	8009ed6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e96:	4b2d      	ldr	r3, [pc, #180]	@ (8009f4c <UART_SetConfig+0xac0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d009      	beq.n	8009eb6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8009f4c <UART_SetConfig+0xac0>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	08db      	lsrs	r3, r3, #3
 8009ea8:	f003 0303 	and.w	r3, r3, #3
 8009eac:	4a28      	ldr	r2, [pc, #160]	@ (8009f50 <UART_SetConfig+0xac4>)
 8009eae:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009eb4:	e00f      	b.n	8009ed6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009eb6:	4b26      	ldr	r3, [pc, #152]	@ (8009f50 <UART_SetConfig+0xac4>)
 8009eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eba:	e00c      	b.n	8009ed6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ebc:	4b25      	ldr	r3, [pc, #148]	@ (8009f54 <UART_SetConfig+0xac8>)
 8009ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ec0:	e009      	b.n	8009ed6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ec8:	e005      	b.n	8009ed6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ed4:	bf00      	nop
    }

    if (pclk != 0U)
 8009ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d021      	beq.n	8009f20 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f58 <UART_SetConfig+0xacc>)
 8009ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eea:	fbb3 f2f2 	udiv	r2, r3, r2
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	085b      	lsrs	r3, r3, #1
 8009ef4:	441a      	add	r2, r3
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009efe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f02:	2b0f      	cmp	r3, #15
 8009f04:	d909      	bls.n	8009f1a <UART_SetConfig+0xa8e>
 8009f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f0c:	d205      	bcs.n	8009f1a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60da      	str	r2, [r3, #12]
 8009f18:	e002      	b.n	8009f20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2200      	movs	r2, #0
 8009f34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f3c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3748      	adds	r7, #72	@ 0x48
 8009f44:	46bd      	mov	sp, r7
 8009f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f4a:	bf00      	nop
 8009f4c:	58024400 	.word	0x58024400
 8009f50:	03d09000 	.word	0x03d09000
 8009f54:	003d0900 	.word	0x003d0900
 8009f58:	0800c970 	.word	0x0800c970

08009f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f68:	f003 0308 	and.w	r3, r3, #8
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00a      	beq.n	8009f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fac:	f003 0302 	and.w	r3, r3, #2
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00a      	beq.n	8009fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00a      	beq.n	8009fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff0:	f003 0310 	and.w	r3, r3, #16
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00a      	beq.n	800a00e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	430a      	orrs	r2, r1
 800a02e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d01a      	beq.n	800a072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a05a:	d10a      	bne.n	800a072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	430a      	orrs	r2, r1
 800a070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00a      	beq.n	800a094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	430a      	orrs	r2, r1
 800a092:	605a      	str	r2, [r3, #4]
  }
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b098      	sub	sp, #96	@ 0x60
 800a0a4:	af02      	add	r7, sp, #8
 800a0a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0b0:	f7f7 fc00 	bl	80018b4 <HAL_GetTick>
 800a0b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 0308 	and.w	r3, r3, #8
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d12f      	bne.n	800a124 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f88e 	bl	800a1f4 <UART_WaitOnFlagUntilTimeout>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d022      	beq.n	800a124 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e6:	e853 3f00 	ldrex	r3, [r3]
 800a0ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a104:	e841 2300 	strex	r3, r2, [r1]
 800a108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e6      	bne.n	800a0de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2220      	movs	r2, #32
 800a114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e063      	b.n	800a1ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0304 	and.w	r3, r3, #4
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d149      	bne.n	800a1c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a132:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a13a:	2200      	movs	r2, #0
 800a13c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f857 	bl	800a1f4 <UART_WaitOnFlagUntilTimeout>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d03c      	beq.n	800a1c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	623b      	str	r3, [r7, #32]
   return(result);
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a16a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a16c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a172:	e841 2300 	strex	r3, r2, [r1]
 800a176:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1e6      	bne.n	800a14c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3308      	adds	r3, #8
 800a184:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f023 0301 	bic.w	r3, r3, #1
 800a194:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3308      	adds	r3, #8
 800a19c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a19e:	61fa      	str	r2, [r7, #28]
 800a1a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a2:	69b9      	ldr	r1, [r7, #24]
 800a1a4:	69fa      	ldr	r2, [r7, #28]
 800a1a6:	e841 2300 	strex	r3, r2, [r1]
 800a1aa:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e5      	bne.n	800a17e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2220      	movs	r2, #32
 800a1b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e012      	b.n	800a1ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3758      	adds	r7, #88	@ 0x58
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	603b      	str	r3, [r7, #0]
 800a200:	4613      	mov	r3, r2
 800a202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a204:	e04f      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20c:	d04b      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a20e:	f7f7 fb51 	bl	80018b4 <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	69ba      	ldr	r2, [r7, #24]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d302      	bcc.n	800a224 <UART_WaitOnFlagUntilTimeout+0x30>
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e04e      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	2b00      	cmp	r3, #0
 800a234:	d037      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	2b80      	cmp	r3, #128	@ 0x80
 800a23a:	d034      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b40      	cmp	r3, #64	@ 0x40
 800a240:	d031      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	69db      	ldr	r3, [r3, #28]
 800a248:	f003 0308 	and.w	r3, r3, #8
 800a24c:	2b08      	cmp	r3, #8
 800a24e:	d110      	bne.n	800a272 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2208      	movs	r2, #8
 800a256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 fa43 	bl	800a6e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2208      	movs	r2, #8
 800a262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e029      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a27c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a280:	d111      	bne.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a28a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f000 fa29 	bl	800a6e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2220      	movs	r2, #32
 800a296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e00f      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69da      	ldr	r2, [r3, #28]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	bf0c      	ite	eq
 800a2b6:	2301      	moveq	r3, #1
 800a2b8:	2300      	movne	r3, #0
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	461a      	mov	r2, r3
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d0a0      	beq.n	800a206 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b0a3      	sub	sp, #140	@ 0x8c
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	4613      	mov	r3, r2
 800a2dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	88fa      	ldrh	r2, [r7, #6]
 800a2e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	88fa      	ldrh	r2, [r7, #6]
 800a2f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a302:	d10e      	bne.n	800a322 <UART_Start_Receive_IT+0x52>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d105      	bne.n	800a318 <UART_Start_Receive_IT+0x48>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a312:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a316:	e02d      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	22ff      	movs	r2, #255	@ 0xff
 800a31c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a320:	e028      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10d      	bne.n	800a346 <UART_Start_Receive_IT+0x76>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d104      	bne.n	800a33c <UART_Start_Receive_IT+0x6c>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	22ff      	movs	r2, #255	@ 0xff
 800a336:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a33a:	e01b      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	227f      	movs	r2, #127	@ 0x7f
 800a340:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a344:	e016      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a34e:	d10d      	bne.n	800a36c <UART_Start_Receive_IT+0x9c>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d104      	bne.n	800a362 <UART_Start_Receive_IT+0x92>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	227f      	movs	r2, #127	@ 0x7f
 800a35c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a360:	e008      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	223f      	movs	r2, #63	@ 0x3f
 800a366:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a36a:	e003      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2222      	movs	r2, #34	@ 0x22
 800a380:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3308      	adds	r3, #8
 800a38a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a38e:	e853 3f00 	ldrex	r3, [r3]
 800a392:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a396:	f043 0301 	orr.w	r3, r3, #1
 800a39a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a3a8:	673a      	str	r2, [r7, #112]	@ 0x70
 800a3aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ac:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a3ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a3b0:	e841 2300 	strex	r3, r2, [r1]
 800a3b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a3b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1e3      	bne.n	800a384 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3c4:	d14f      	bne.n	800a466 <UART_Start_Receive_IT+0x196>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3cc:	88fa      	ldrh	r2, [r7, #6]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d349      	bcc.n	800a466 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3da:	d107      	bne.n	800a3ec <UART_Start_Receive_IT+0x11c>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d103      	bne.n	800a3ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4a47      	ldr	r2, [pc, #284]	@ (800a504 <UART_Start_Receive_IT+0x234>)
 800a3e8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a3ea:	e002      	b.n	800a3f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4a46      	ldr	r2, [pc, #280]	@ (800a508 <UART_Start_Receive_IT+0x238>)
 800a3f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d01a      	beq.n	800a430 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a402:	e853 3f00 	ldrex	r3, [r3]
 800a406:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a40a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a40e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	461a      	mov	r2, r3
 800a418:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a41c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a41e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a420:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a422:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a424:	e841 2300 	strex	r3, r2, [r1]
 800a428:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a42a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e4      	bne.n	800a3fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3308      	adds	r3, #8
 800a436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a43a:	e853 3f00 	ldrex	r3, [r3]
 800a43e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a446:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3308      	adds	r3, #8
 800a44e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a450:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a452:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a454:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a458:	e841 2300 	strex	r3, r2, [r1]
 800a45c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a45e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1e5      	bne.n	800a430 <UART_Start_Receive_IT+0x160>
 800a464:	e046      	b.n	800a4f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a46e:	d107      	bne.n	800a480 <UART_Start_Receive_IT+0x1b0>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d103      	bne.n	800a480 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	4a24      	ldr	r2, [pc, #144]	@ (800a50c <UART_Start_Receive_IT+0x23c>)
 800a47c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a47e:	e002      	b.n	800a486 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4a23      	ldr	r2, [pc, #140]	@ (800a510 <UART_Start_Receive_IT+0x240>)
 800a484:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d019      	beq.n	800a4c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a4a2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a4b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e6      	bne.n	800a48e <UART_Start_Receive_IT+0x1be>
 800a4c0:	e018      	b.n	800a4f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	f043 0320 	orr.w	r3, r3, #32
 800a4d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4e0:	623b      	str	r3, [r7, #32]
 800a4e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	69f9      	ldr	r1, [r7, #28]
 800a4e6:	6a3a      	ldr	r2, [r7, #32]
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e6      	bne.n	800a4c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	378c      	adds	r7, #140	@ 0x8c
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	0800b42d 	.word	0x0800b42d
 800a508:	0800b0cd 	.word	0x0800b0cd
 800a50c:	0800af15 	.word	0x0800af15
 800a510:	0800ad5d 	.word	0x0800ad5d

0800a514 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b096      	sub	sp, #88	@ 0x58
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	4613      	mov	r3, r2
 800a520:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	88fa      	ldrh	r2, [r7, #6]
 800a52c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2222      	movs	r2, #34	@ 0x22
 800a53c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a546:	2b00      	cmp	r3, #0
 800a548:	d02d      	beq.n	800a5a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a550:	4a40      	ldr	r2, [pc, #256]	@ (800a654 <UART_Start_Receive_DMA+0x140>)
 800a552:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a55a:	4a3f      	ldr	r2, [pc, #252]	@ (800a658 <UART_Start_Receive_DMA+0x144>)
 800a55c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a564:	4a3d      	ldr	r2, [pc, #244]	@ (800a65c <UART_Start_Receive_DMA+0x148>)
 800a566:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a56e:	2200      	movs	r2, #0
 800a570:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3324      	adds	r3, #36	@ 0x24
 800a57e:	4619      	mov	r1, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a584:	461a      	mov	r2, r3
 800a586:	88fb      	ldrh	r3, [r7, #6]
 800a588:	f7f8 f838 	bl	80025fc <HAL_DMA_Start_IT>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d009      	beq.n	800a5a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2210      	movs	r2, #16
 800a596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e051      	b.n	800a64a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d018      	beq.n	800a5e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5b6:	e853 3f00 	ldrex	r3, [r3]
 800a5ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5d4:	e841 2300 	strex	r3, r2, [r1]
 800a5d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a5da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1e6      	bne.n	800a5ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3308      	adds	r3, #8
 800a5e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ea:	e853 3f00 	ldrex	r3, [r3]
 800a5ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	f043 0301 	orr.w	r3, r3, #1
 800a5f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3308      	adds	r3, #8
 800a5fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a600:	637a      	str	r2, [r7, #52]	@ 0x34
 800a602:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a604:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a608:	e841 2300 	strex	r3, r2, [r1]
 800a60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e5      	bne.n	800a5e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3308      	adds	r3, #8
 800a61a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	e853 3f00 	ldrex	r3, [r3]
 800a622:	613b      	str	r3, [r7, #16]
   return(result);
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a62a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3308      	adds	r3, #8
 800a632:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a634:	623a      	str	r2, [r7, #32]
 800a636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a638:	69f9      	ldr	r1, [r7, #28]
 800a63a:	6a3a      	ldr	r2, [r7, #32]
 800a63c:	e841 2300 	strex	r3, r2, [r1]
 800a640:	61bb      	str	r3, [r7, #24]
   return(result);
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1e5      	bne.n	800a614 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3758      	adds	r7, #88	@ 0x58
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	0800a7b1 	.word	0x0800a7b1
 800a658:	0800a8d9 	.word	0x0800a8d9
 800a65c:	0800a917 	.word	0x0800a917

0800a660 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a660:	b480      	push	{r7}
 800a662:	b08f      	sub	sp, #60	@ 0x3c
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	6a3b      	ldr	r3, [r7, #32]
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	61fb      	str	r3, [r7, #28]
   return(result);
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a67c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a688:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a68c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e6      	bne.n	800a668 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3308      	adds	r3, #8
 800a6a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	e853 3f00 	ldrex	r3, [r3]
 800a6a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a6b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3308      	adds	r3, #8
 800a6b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6ba:	61ba      	str	r2, [r7, #24]
 800a6bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6be:	6979      	ldr	r1, [r7, #20]
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	e841 2300 	strex	r3, r2, [r1]
 800a6c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1e5      	bne.n	800a69a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a6d6:	bf00      	nop
 800a6d8:	373c      	adds	r7, #60	@ 0x3c
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
	...

0800a6e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b095      	sub	sp, #84	@ 0x54
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f4:	e853 3f00 	ldrex	r3, [r3]
 800a6f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	461a      	mov	r2, r3
 800a708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a70a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a70c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a710:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e6      	bne.n	800a6ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3308      	adds	r3, #8
 800a724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	e853 3f00 	ldrex	r3, [r3]
 800a72c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a72e:	69fa      	ldr	r2, [r7, #28]
 800a730:	4b1e      	ldr	r3, [pc, #120]	@ (800a7ac <UART_EndRxTransfer+0xc8>)
 800a732:	4013      	ands	r3, r2
 800a734:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3308      	adds	r3, #8
 800a73c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a73e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a740:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a742:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a746:	e841 2300 	strex	r3, r2, [r1]
 800a74a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1e5      	bne.n	800a71e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a756:	2b01      	cmp	r3, #1
 800a758:	d118      	bne.n	800a78c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	e853 3f00 	ldrex	r3, [r3]
 800a766:	60bb      	str	r3, [r7, #8]
   return(result);
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f023 0310 	bic.w	r3, r3, #16
 800a76e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	461a      	mov	r2, r3
 800a776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a778:	61bb      	str	r3, [r7, #24]
 800a77a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77c:	6979      	ldr	r1, [r7, #20]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	e841 2300 	strex	r3, r2, [r1]
 800a784:	613b      	str	r3, [r7, #16]
   return(result);
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1e6      	bne.n	800a75a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2220      	movs	r2, #32
 800a790:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7a0:	bf00      	nop
 800a7a2:	3754      	adds	r7, #84	@ 0x54
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	effffffe 	.word	0xeffffffe

0800a7b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b09c      	sub	sp, #112	@ 0x70
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7c6:	d071      	beq.n	800a8ac <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a7c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7d8:	e853 3f00 	ldrex	r3, [r3]
 800a7dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7f6:	e841 2300 	strex	r3, r2, [r1]
 800a7fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1e6      	bne.n	800a7d0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3308      	adds	r3, #8
 800a808:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80c:	e853 3f00 	ldrex	r3, [r3]
 800a810:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a814:	f023 0301 	bic.w	r3, r3, #1
 800a818:	667b      	str	r3, [r7, #100]	@ 0x64
 800a81a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3308      	adds	r3, #8
 800a820:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a822:	647a      	str	r2, [r7, #68]	@ 0x44
 800a824:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a826:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a82a:	e841 2300 	strex	r3, r2, [r1]
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e5      	bne.n	800a802 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3308      	adds	r3, #8
 800a83c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	623b      	str	r3, [r7, #32]
   return(result);
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a84c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a84e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3308      	adds	r3, #8
 800a854:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a856:	633a      	str	r2, [r7, #48]	@ 0x30
 800a858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a85c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e5      	bne.n	800a836 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a86a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a86c:	2220      	movs	r2, #32
 800a86e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a876:	2b01      	cmp	r3, #1
 800a878:	d118      	bne.n	800a8ac <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a87a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	e853 3f00 	ldrex	r3, [r3]
 800a886:	60fb      	str	r3, [r7, #12]
   return(result);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 0310 	bic.w	r3, r3, #16
 800a88e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	461a      	mov	r2, r3
 800a896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a898:	61fb      	str	r3, [r7, #28]
 800a89a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89c:	69b9      	ldr	r1, [r7, #24]
 800a89e:	69fa      	ldr	r2, [r7, #28]
 800a8a0:	e841 2300 	strex	r3, r2, [r1]
 800a8a4:	617b      	str	r3, [r7, #20]
   return(result);
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1e6      	bne.n	800a87a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d107      	bne.n	800a8ca <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8c4:	f7fe fdd6 	bl	8009474 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8c8:	e002      	b.n	800a8d0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a8ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8cc:	f7f6 fa8a 	bl	8000de4 <HAL_UART_RxCpltCallback>
}
 800a8d0:	bf00      	nop
 800a8d2:	3770      	adds	r7, #112	@ 0x70
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d109      	bne.n	800a908 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8fa:	085b      	lsrs	r3, r3, #1
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	4619      	mov	r1, r3
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f7fe fdb7 	bl	8009474 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a906:	e002      	b.n	800a90e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7fe fd9f 	bl	800944c <HAL_UART_RxHalfCpltCallback>
}
 800a90e:	bf00      	nop
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b086      	sub	sp, #24
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a922:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a92a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a932:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a93e:	2b80      	cmp	r3, #128	@ 0x80
 800a940:	d109      	bne.n	800a956 <UART_DMAError+0x40>
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b21      	cmp	r3, #33	@ 0x21
 800a946:	d106      	bne.n	800a956 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a950:	6978      	ldr	r0, [r7, #20]
 800a952:	f7ff fe85 	bl	800a660 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a960:	2b40      	cmp	r3, #64	@ 0x40
 800a962:	d109      	bne.n	800a978 <UART_DMAError+0x62>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b22      	cmp	r3, #34	@ 0x22
 800a968:	d106      	bne.n	800a978 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a972:	6978      	ldr	r0, [r7, #20]
 800a974:	f7ff feb6 	bl	800a6e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a97e:	f043 0210 	orr.w	r2, r3, #16
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a988:	6978      	ldr	r0, [r7, #20]
 800a98a:	f7fe fd69 	bl	8009460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a98e:	bf00      	nop
 800a990:	3718      	adds	r7, #24
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f7fe fd53 	bl	8009460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9ba:	bf00      	nop
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b08f      	sub	sp, #60	@ 0x3c
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9d0:	2b21      	cmp	r3, #33	@ 0x21
 800a9d2:	d14c      	bne.n	800aa6e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d132      	bne.n	800aa46 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa00:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e6      	bne.n	800a9e0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa26:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa30:	61bb      	str	r3, [r7, #24]
 800aa32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	6979      	ldr	r1, [r7, #20]
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e6      	bne.n	800aa12 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800aa44:	e013      	b.n	800aa6e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa4a:	781a      	ldrb	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b01      	subs	r3, #1
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800aa6e:	bf00      	nop
 800aa70:	373c      	adds	r7, #60	@ 0x3c
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b091      	sub	sp, #68	@ 0x44
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa88:	2b21      	cmp	r3, #33	@ 0x21
 800aa8a:	d151      	bne.n	800ab30 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d132      	bne.n	800aafe <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa0:	e853 3f00 	ldrex	r3, [r3]
 800aaa4:	623b      	str	r3, [r7, #32]
   return(result);
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaac:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab6:	633b      	str	r3, [r7, #48]	@ 0x30
 800aab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aabc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e6      	bne.n	800aa98 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	e853 3f00 	ldrex	r3, [r3]
 800aad6:	60fb      	str	r3, [r7, #12]
   return(result);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aade:	637b      	str	r3, [r7, #52]	@ 0x34
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	461a      	mov	r2, r3
 800aae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae8:	61fb      	str	r3, [r7, #28]
 800aaea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaec:	69b9      	ldr	r1, [r7, #24]
 800aaee:	69fa      	ldr	r2, [r7, #28]
 800aaf0:	e841 2300 	strex	r3, r2, [r1]
 800aaf4:	617b      	str	r3, [r7, #20]
   return(result);
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1e6      	bne.n	800aaca <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800aafc:	e018      	b.n	800ab30 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ab04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab12:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab18:	1c9a      	adds	r2, r3, #2
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	3b01      	subs	r3, #1
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800ab30:	bf00      	nop
 800ab32:	3744      	adds	r7, #68	@ 0x44
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b091      	sub	sp, #68	@ 0x44
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab4a:	2b21      	cmp	r3, #33	@ 0x21
 800ab4c:	d160      	bne.n	800ac10 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab54:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ab56:	e057      	b.n	800ac08 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d133      	bne.n	800abcc <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3308      	adds	r3, #8
 800ab6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6e:	e853 3f00 	ldrex	r3, [r3]
 800ab72:	623b      	str	r3, [r7, #32]
   return(result);
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ab7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3308      	adds	r3, #8
 800ab82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab84:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab8c:	e841 2300 	strex	r3, r2, [r1]
 800ab90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e5      	bne.n	800ab64 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abac:	637b      	str	r3, [r7, #52]	@ 0x34
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb6:	61fb      	str	r3, [r7, #28]
 800abb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abba:	69b9      	ldr	r1, [r7, #24]
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	e841 2300 	strex	r3, r2, [r1]
 800abc2:	617b      	str	r3, [r7, #20]
   return(result);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1e6      	bne.n	800ab98 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800abca:	e021      	b.n	800ac10 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	69db      	ldr	r3, [r3, #28]
 800abd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d013      	beq.n	800ac02 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abde:	781a      	ldrb	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ac02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ac04:	3b01      	subs	r3, #1
 800ac06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ac08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1a4      	bne.n	800ab58 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ac0e:	e7ff      	b.n	800ac10 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800ac10:	bf00      	nop
 800ac12:	3744      	adds	r7, #68	@ 0x44
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b091      	sub	sp, #68	@ 0x44
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac2a:	2b21      	cmp	r3, #33	@ 0x21
 800ac2c:	d165      	bne.n	800acfa <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ac36:	e05c      	b.n	800acf2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d133      	bne.n	800acac <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3308      	adds	r3, #8
 800ac4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4c:	6a3b      	ldr	r3, [r7, #32]
 800ac4e:	e853 3f00 	ldrex	r3, [r3]
 800ac52:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ac5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3308      	adds	r3, #8
 800ac62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac6c:	e841 2300 	strex	r3, r2, [r1]
 800ac70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1e5      	bne.n	800ac44 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	e853 3f00 	ldrex	r3, [r3]
 800ac84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac8c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac96:	61bb      	str	r3, [r7, #24]
 800ac98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	6979      	ldr	r1, [r7, #20]
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	613b      	str	r3, [r7, #16]
   return(result);
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e6      	bne.n	800ac78 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800acaa:	e026      	b.n	800acfa <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d018      	beq.n	800acec <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acbe:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800acc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acce:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acd4:	1c9a      	adds	r2, r3, #2
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	3b01      	subs	r3, #1
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800acec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800acee:	3b01      	subs	r3, #1
 800acf0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800acf2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d19f      	bne.n	800ac38 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800acf8:	e7ff      	b.n	800acfa <UART_TxISR_16BIT_FIFOEN+0xde>
 800acfa:	bf00      	nop
 800acfc:	3744      	adds	r7, #68	@ 0x44
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b088      	sub	sp, #32
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	e853 3f00 	ldrex	r3, [r3]
 800ad1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad22:	61fb      	str	r3, [r7, #28]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	61bb      	str	r3, [r7, #24]
 800ad2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad30:	6979      	ldr	r1, [r7, #20]
 800ad32:	69ba      	ldr	r2, [r7, #24]
 800ad34:	e841 2300 	strex	r3, r2, [r1]
 800ad38:	613b      	str	r3, [r7, #16]
   return(result);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1e6      	bne.n	800ad0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2220      	movs	r2, #32
 800ad44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7fe fb72 	bl	8009438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad54:	bf00      	nop
 800ad56:	3720      	adds	r7, #32
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b09c      	sub	sp, #112	@ 0x70
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ad6a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad74:	2b22      	cmp	r3, #34	@ 0x22
 800ad76:	f040 80be 	bne.w	800aef6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ad84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ad88:	b2d9      	uxtb	r1, r3
 800ad8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad94:	400a      	ands	r2, r1
 800ad96:	b2d2      	uxtb	r2, r2
 800ad98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adaa:	b29b      	uxth	r3, r3
 800adac:	3b01      	subs	r3, #1
 800adae:	b29a      	uxth	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f040 80a1 	bne.w	800af06 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adcc:	e853 3f00 	ldrex	r3, [r3]
 800add0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800add2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800add4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800add8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ade2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ade4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ade8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adea:	e841 2300 	strex	r3, r2, [r1]
 800adee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800adf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1e6      	bne.n	800adc4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3308      	adds	r3, #8
 800adfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae00:	e853 3f00 	ldrex	r3, [r3]
 800ae04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae08:	f023 0301 	bic.w	r3, r3, #1
 800ae0c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3308      	adds	r3, #8
 800ae14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ae16:	647a      	str	r2, [r7, #68]	@ 0x44
 800ae18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae1e:	e841 2300 	strex	r3, r2, [r1]
 800ae22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e5      	bne.n	800adf6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2220      	movs	r2, #32
 800ae2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a33      	ldr	r2, [pc, #204]	@ (800af10 <UART_RxISR_8BIT+0x1b4>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d01f      	beq.n	800ae88 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d018      	beq.n	800ae88 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	623b      	str	r3, [r7, #32]
   return(result);
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae6a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	461a      	mov	r2, r3
 800ae72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae74:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae7c:	e841 2300 	strex	r3, r2, [r1]
 800ae80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1e6      	bne.n	800ae56 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d12e      	bne.n	800aeee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	e853 3f00 	ldrex	r3, [r3]
 800aea2:	60fb      	str	r3, [r7, #12]
   return(result);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f023 0310 	bic.w	r3, r3, #16
 800aeaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aeb4:	61fb      	str	r3, [r7, #28]
 800aeb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb8:	69b9      	ldr	r1, [r7, #24]
 800aeba:	69fa      	ldr	r2, [r7, #28]
 800aebc:	e841 2300 	strex	r3, r2, [r1]
 800aec0:	617b      	str	r3, [r7, #20]
   return(result);
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1e6      	bne.n	800ae96 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	f003 0310 	and.w	r3, r3, #16
 800aed2:	2b10      	cmp	r3, #16
 800aed4:	d103      	bne.n	800aede <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2210      	movs	r2, #16
 800aedc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7fe fac4 	bl	8009474 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aeec:	e00b      	b.n	800af06 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7f5 ff78 	bl	8000de4 <HAL_UART_RxCpltCallback>
}
 800aef4:	e007      	b.n	800af06 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	699a      	ldr	r2, [r3, #24]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f042 0208 	orr.w	r2, r2, #8
 800af04:	619a      	str	r2, [r3, #24]
}
 800af06:	bf00      	nop
 800af08:	3770      	adds	r7, #112	@ 0x70
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	58000c00 	.word	0x58000c00

0800af14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b09c      	sub	sp, #112	@ 0x70
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af2c:	2b22      	cmp	r3, #34	@ 0x22
 800af2e:	f040 80be 	bne.w	800b0ae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800af42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800af46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800af4a:	4013      	ands	r3, r2
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af56:	1c9a      	adds	r2, r3, #2
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af62:	b29b      	uxth	r3, r3
 800af64:	3b01      	subs	r3, #1
 800af66:	b29a      	uxth	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af74:	b29b      	uxth	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	f040 80a1 	bne.w	800b0be <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af84:	e853 3f00 	ldrex	r3, [r3]
 800af88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800af8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af90:	667b      	str	r3, [r7, #100]	@ 0x64
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	461a      	mov	r2, r3
 800af98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af9a:	657b      	str	r3, [r7, #84]	@ 0x54
 800af9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800afa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800afa2:	e841 2300 	strex	r3, r2, [r1]
 800afa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800afa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1e6      	bne.n	800af7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3308      	adds	r3, #8
 800afb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb8:	e853 3f00 	ldrex	r3, [r3]
 800afbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800afbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc0:	f023 0301 	bic.w	r3, r3, #1
 800afc4:	663b      	str	r3, [r7, #96]	@ 0x60
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3308      	adds	r3, #8
 800afcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afce:	643a      	str	r2, [r7, #64]	@ 0x40
 800afd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800afd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800afd6:	e841 2300 	strex	r3, r2, [r1]
 800afda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800afdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1e5      	bne.n	800afae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2220      	movs	r2, #32
 800afe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a33      	ldr	r2, [pc, #204]	@ (800b0c8 <UART_RxISR_16BIT+0x1b4>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d01f      	beq.n	800b040 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d018      	beq.n	800b040 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	e853 3f00 	ldrex	r3, [r3]
 800b01a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b022:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	461a      	mov	r2, r3
 800b02a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b02e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b034:	e841 2300 	strex	r3, r2, [r1]
 800b038:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1e6      	bne.n	800b00e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b044:	2b01      	cmp	r3, #1
 800b046:	d12e      	bne.n	800b0a6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	e853 3f00 	ldrex	r3, [r3]
 800b05a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f023 0310 	bic.w	r3, r3, #16
 800b062:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	461a      	mov	r2, r3
 800b06a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b06c:	61bb      	str	r3, [r7, #24]
 800b06e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b070:	6979      	ldr	r1, [r7, #20]
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	e841 2300 	strex	r3, r2, [r1]
 800b078:	613b      	str	r3, [r7, #16]
   return(result);
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1e6      	bne.n	800b04e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	69db      	ldr	r3, [r3, #28]
 800b086:	f003 0310 	and.w	r3, r3, #16
 800b08a:	2b10      	cmp	r3, #16
 800b08c:	d103      	bne.n	800b096 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2210      	movs	r2, #16
 800b094:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7fe f9e8 	bl	8009474 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0a4:	e00b      	b.n	800b0be <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7f5 fe9c 	bl	8000de4 <HAL_UART_RxCpltCallback>
}
 800b0ac:	e007      	b.n	800b0be <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	699a      	ldr	r2, [r3, #24]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f042 0208 	orr.w	r2, r2, #8
 800b0bc:	619a      	str	r2, [r3, #24]
}
 800b0be:	bf00      	nop
 800b0c0:	3770      	adds	r7, #112	@ 0x70
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	58000c00 	.word	0x58000c00

0800b0cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b0ac      	sub	sp, #176	@ 0xb0
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b0da:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	69db      	ldr	r3, [r3, #28]
 800b0e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b102:	2b22      	cmp	r3, #34	@ 0x22
 800b104:	f040 8180 	bne.w	800b408 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b10e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b112:	e123      	b.n	800b35c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b11a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b11e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b122:	b2d9      	uxtb	r1, r3
 800b124:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b12e:	400a      	ands	r2, r1
 800b130:	b2d2      	uxtb	r2, r2
 800b132:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b138:	1c5a      	adds	r2, r3, #1
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b144:	b29b      	uxth	r3, r3
 800b146:	3b01      	subs	r3, #1
 800b148:	b29a      	uxth	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	69db      	ldr	r3, [r3, #28]
 800b156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b15a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b15e:	f003 0307 	and.w	r3, r3, #7
 800b162:	2b00      	cmp	r3, #0
 800b164:	d053      	beq.n	800b20e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b16a:	f003 0301 	and.w	r3, r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d011      	beq.n	800b196 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00b      	beq.n	800b196 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2201      	movs	r2, #1
 800b184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b18c:	f043 0201 	orr.w	r2, r3, #1
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b19a:	f003 0302 	and.w	r3, r3, #2
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d011      	beq.n	800b1c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b1a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00b      	beq.n	800b1c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1bc:	f043 0204 	orr.w	r2, r3, #4
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1ca:	f003 0304 	and.w	r3, r3, #4
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d011      	beq.n	800b1f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b1d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1d6:	f003 0301 	and.w	r3, r3, #1
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00b      	beq.n	800b1f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2204      	movs	r2, #4
 800b1e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ec:	f043 0202 	orr.w	r2, r3, #2
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d006      	beq.n	800b20e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7fe f92d 	bl	8009460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b214:	b29b      	uxth	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	f040 80a0 	bne.w	800b35c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b22a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b22c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	461a      	mov	r2, r3
 800b23a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b23e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b240:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b242:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b244:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b246:	e841 2300 	strex	r3, r2, [r1]
 800b24a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b24c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1e4      	bne.n	800b21c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3308      	adds	r3, #8
 800b258:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b262:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b264:	4b6e      	ldr	r3, [pc, #440]	@ (800b420 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b266:	4013      	ands	r3, r2
 800b268:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3308      	adds	r3, #8
 800b272:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b276:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b278:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b27c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b27e:	e841 2300 	strex	r3, r2, [r1]
 800b282:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1e3      	bne.n	800b252 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2220      	movs	r2, #32
 800b28e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a60      	ldr	r2, [pc, #384]	@ (800b424 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d021      	beq.n	800b2ec <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01a      	beq.n	800b2ec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2be:	e853 3f00 	ldrex	r3, [r3]
 800b2c2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b2c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b2ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b2d8:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2da:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b2de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b2e0:	e841 2300 	strex	r3, r2, [r1]
 800b2e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b2e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e4      	bne.n	800b2b6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d130      	bne.n	800b356 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b302:	e853 3f00 	ldrex	r3, [r3]
 800b306:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	f023 0310 	bic.w	r3, r3, #16
 800b30e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	461a      	mov	r2, r3
 800b318:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b31c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b31e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b320:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b322:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b324:	e841 2300 	strex	r3, r2, [r1]
 800b328:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1e4      	bne.n	800b2fa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	f003 0310 	and.w	r3, r3, #16
 800b33a:	2b10      	cmp	r3, #16
 800b33c:	d103      	bne.n	800b346 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2210      	movs	r2, #16
 800b344:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7fe f890 	bl	8009474 <HAL_UARTEx_RxEventCallback>
 800b354:	e002      	b.n	800b35c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7f5 fd44 	bl	8000de4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b35c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b360:	2b00      	cmp	r3, #0
 800b362:	d006      	beq.n	800b372 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b368:	f003 0320 	and.w	r3, r3, #32
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f47f aed1 	bne.w	800b114 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b378:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b37c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b380:	2b00      	cmp	r3, #0
 800b382:	d049      	beq.n	800b418 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b38a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b38e:	429a      	cmp	r2, r3
 800b390:	d242      	bcs.n	800b418 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	3308      	adds	r3, #8
 800b398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	e853 3f00 	ldrex	r3, [r3]
 800b3a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b3b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3be:	e841 2300 	strex	r3, r2, [r1]
 800b3c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1e3      	bne.n	800b392 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a16      	ldr	r2, [pc, #88]	@ (800b428 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b3ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	e853 3f00 	ldrex	r3, [r3]
 800b3dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f043 0320 	orr.w	r3, r3, #32
 800b3e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b3f2:	61bb      	str	r3, [r7, #24]
 800b3f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f6:	6979      	ldr	r1, [r7, #20]
 800b3f8:	69ba      	ldr	r2, [r7, #24]
 800b3fa:	e841 2300 	strex	r3, r2, [r1]
 800b3fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1e4      	bne.n	800b3d0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b406:	e007      	b.n	800b418 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	699a      	ldr	r2, [r3, #24]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f042 0208 	orr.w	r2, r2, #8
 800b416:	619a      	str	r2, [r3, #24]
}
 800b418:	bf00      	nop
 800b41a:	37b0      	adds	r7, #176	@ 0xb0
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	effffffe 	.word	0xeffffffe
 800b424:	58000c00 	.word	0x58000c00
 800b428:	0800ad5d 	.word	0x0800ad5d

0800b42c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b0ae      	sub	sp, #184	@ 0xb8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b43a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	69db      	ldr	r3, [r3, #28]
 800b444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b462:	2b22      	cmp	r3, #34	@ 0x22
 800b464:	f040 8184 	bne.w	800b770 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b46e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b472:	e127      	b.n	800b6c4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b486:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b48a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b48e:	4013      	ands	r3, r2
 800b490:	b29a      	uxth	r2, r3
 800b492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b496:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b49c:	1c9a      	adds	r2, r3, #2
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	69db      	ldr	r3, [r3, #28]
 800b4ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b4be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4c2:	f003 0307 	and.w	r3, r3, #7
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d053      	beq.n	800b572 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d011      	beq.n	800b4fa <UART_RxISR_16BIT_FIFOEN+0xce>
 800b4d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00b      	beq.n	800b4fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4f0:	f043 0201 	orr.w	r2, r3, #1
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4fe:	f003 0302 	and.w	r3, r3, #2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d011      	beq.n	800b52a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00b      	beq.n	800b52a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2202      	movs	r2, #2
 800b518:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b520:	f043 0204 	orr.w	r2, r3, #4
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b52a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b52e:	f003 0304 	and.w	r3, r3, #4
 800b532:	2b00      	cmp	r3, #0
 800b534:	d011      	beq.n	800b55a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00b      	beq.n	800b55a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2204      	movs	r2, #4
 800b548:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b550:	f043 0202 	orr.w	r2, r3, #2
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b560:	2b00      	cmp	r3, #0
 800b562:	d006      	beq.n	800b572 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7fd ff7b 	bl	8009460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b578:	b29b      	uxth	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f040 80a2 	bne.w	800b6c4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b586:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b588:	e853 3f00 	ldrex	r3, [r3]
 800b58c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b58e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	461a      	mov	r2, r3
 800b59e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b5a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b5a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b5aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b5ae:	e841 2300 	strex	r3, r2, [r1]
 800b5b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b5b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1e2      	bne.n	800b580 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3308      	adds	r3, #8
 800b5c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b5c4:	e853 3f00 	ldrex	r3, [r3]
 800b5c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b5ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b5cc:	4b6e      	ldr	r3, [pc, #440]	@ (800b788 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3308      	adds	r3, #8
 800b5da:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b5de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b5e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b5e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b5e6:	e841 2300 	strex	r3, r2, [r1]
 800b5ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b5ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e3      	bne.n	800b5ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a60      	ldr	r2, [pc, #384]	@ (800b78c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d021      	beq.n	800b654 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d01a      	beq.n	800b654 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b626:	e853 3f00 	ldrex	r3, [r3]
 800b62a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b62c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b62e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b632:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b640:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b642:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b644:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b646:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b648:	e841 2300 	strex	r3, r2, [r1]
 800b64c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b64e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1e4      	bne.n	800b61e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d130      	bne.n	800b6be <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b672:	f023 0310 	bic.w	r3, r3, #16
 800b676:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b684:	647b      	str	r3, [r7, #68]	@ 0x44
 800b686:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b68a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e4      	bne.n	800b662 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	f003 0310 	and.w	r3, r3, #16
 800b6a2:	2b10      	cmp	r3, #16
 800b6a4:	d103      	bne.n	800b6ae <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2210      	movs	r2, #16
 800b6ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7fd fedc 	bl	8009474 <HAL_UARTEx_RxEventCallback>
 800b6bc:	e002      	b.n	800b6c4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7f5 fb90 	bl	8000de4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b6c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d006      	beq.n	800b6da <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b6cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b6d0:	f003 0320 	and.w	r3, r3, #32
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f47f aecd 	bne.w	800b474 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6e0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b6e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d049      	beq.n	800b780 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b6f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d242      	bcs.n	800b780 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	3308      	adds	r3, #8
 800b700:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b704:	e853 3f00 	ldrex	r3, [r3]
 800b708:	623b      	str	r3, [r7, #32]
   return(result);
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3308      	adds	r3, #8
 800b71a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b71e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b720:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e3      	bne.n	800b6fa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a16      	ldr	r2, [pc, #88]	@ (800b790 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b736:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	e853 3f00 	ldrex	r3, [r3]
 800b744:	60fb      	str	r3, [r7, #12]
   return(result);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f043 0320 	orr.w	r3, r3, #32
 800b74c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	461a      	mov	r2, r3
 800b756:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b75a:	61fb      	str	r3, [r7, #28]
 800b75c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75e:	69b9      	ldr	r1, [r7, #24]
 800b760:	69fa      	ldr	r2, [r7, #28]
 800b762:	e841 2300 	strex	r3, r2, [r1]
 800b766:	617b      	str	r3, [r7, #20]
   return(result);
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1e4      	bne.n	800b738 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b76e:	e007      	b.n	800b780 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	699a      	ldr	r2, [r3, #24]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f042 0208 	orr.w	r2, r2, #8
 800b77e:	619a      	str	r2, [r3, #24]
}
 800b780:	bf00      	nop
 800b782:	37b8      	adds	r7, #184	@ 0xb8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	effffffe 	.word	0xeffffffe
 800b78c:	58000c00 	.word	0x58000c00
 800b790:	0800af15 	.word	0x0800af15

0800b794 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d101      	bne.n	800b7e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	e027      	b.n	800b836 <HAL_UARTEx_DisableFifoMode+0x66>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2224      	movs	r2, #36	@ 0x24
 800b7f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f022 0201 	bic.w	r2, r2, #1
 800b80c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b814:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2220      	movs	r2, #32
 800b828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b852:	2b01      	cmp	r3, #1
 800b854:	d101      	bne.n	800b85a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b856:	2302      	movs	r3, #2
 800b858:	e02d      	b.n	800b8b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2224      	movs	r2, #36	@ 0x24
 800b866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f022 0201 	bic.w	r2, r2, #1
 800b880:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	430a      	orrs	r2, r1
 800b894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f850 	bl	800b93c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2220      	movs	r2, #32
 800b8a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d101      	bne.n	800b8d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8d2:	2302      	movs	r3, #2
 800b8d4:	e02d      	b.n	800b932 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2224      	movs	r2, #36	@ 0x24
 800b8e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f022 0201 	bic.w	r2, r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	430a      	orrs	r2, r1
 800b910:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f812 	bl	800b93c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2220      	movs	r2, #32
 800b924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
	...

0800b93c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d108      	bne.n	800b95e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2201      	movs	r2, #1
 800b958:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b95c:	e031      	b.n	800b9c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b95e:	2310      	movs	r3, #16
 800b960:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b962:	2310      	movs	r3, #16
 800b964:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	0e5b      	lsrs	r3, r3, #25
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	f003 0307 	and.w	r3, r3, #7
 800b974:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	0f5b      	lsrs	r3, r3, #29
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 0307 	and.w	r3, r3, #7
 800b984:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b986:	7bbb      	ldrb	r3, [r7, #14]
 800b988:	7b3a      	ldrb	r2, [r7, #12]
 800b98a:	4911      	ldr	r1, [pc, #68]	@ (800b9d0 <UARTEx_SetNbDataToProcess+0x94>)
 800b98c:	5c8a      	ldrb	r2, [r1, r2]
 800b98e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b992:	7b3a      	ldrb	r2, [r7, #12]
 800b994:	490f      	ldr	r1, [pc, #60]	@ (800b9d4 <UARTEx_SetNbDataToProcess+0x98>)
 800b996:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b998:	fb93 f3f2 	sdiv	r3, r3, r2
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	7b7a      	ldrb	r2, [r7, #13]
 800b9a8:	4909      	ldr	r1, [pc, #36]	@ (800b9d0 <UARTEx_SetNbDataToProcess+0x94>)
 800b9aa:	5c8a      	ldrb	r2, [r1, r2]
 800b9ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b9b0:	7b7a      	ldrb	r2, [r7, #13]
 800b9b2:	4908      	ldr	r1, [pc, #32]	@ (800b9d4 <UARTEx_SetNbDataToProcess+0x98>)
 800b9b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b9c2:	bf00      	nop
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	0800c988 	.word	0x0800c988
 800b9d4:	0800c990 	.word	0x0800c990

0800b9d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9d8:	b084      	sub	sp, #16
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	f107 001c 	add.w	r0, r7, #28
 800b9e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d121      	bne.n	800ba36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68da      	ldr	r2, [r3, #12]
 800ba02:	4b2c      	ldr	r3, [pc, #176]	@ (800bab4 <USB_CoreInit+0xdc>)
 800ba04:	4013      	ands	r3, r2
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d105      	bne.n	800ba2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 faaa 	bl	800bf84 <USB_CoreReset>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73fb      	strb	r3, [r7, #15]
 800ba34:	e01b      	b.n	800ba6e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fa9e 	bl	800bf84 <USB_CoreReset>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d106      	bne.n	800ba62 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ba60:	e005      	b.n	800ba6e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ba6e:	7fbb      	ldrb	r3, [r7, #30]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d116      	bne.n	800baa2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba82:	4b0d      	ldr	r3, [pc, #52]	@ (800bab8 <USB_CoreInit+0xe0>)
 800ba84:	4313      	orrs	r3, r2
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f043 0206 	orr.w	r2, r3, #6
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f043 0220 	orr.w	r2, r3, #32
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800baae:	b004      	add	sp, #16
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	ffbdffbf 	.word	0xffbdffbf
 800bab8:	03ee0000 	.word	0x03ee0000

0800babc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f023 0201 	bic.w	r2, r3, #1
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	460b      	mov	r3, r1
 800bae8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800baea:	2300      	movs	r3, #0
 800baec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bafa:	78fb      	ldrb	r3, [r7, #3]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d115      	bne.n	800bb2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bb0c:	200a      	movs	r0, #10
 800bb0e:	f7f5 fedd 	bl	80018cc <HAL_Delay>
      ms += 10U;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	330a      	adds	r3, #10
 800bb16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fa25 	bl	800bf68 <USB_GetMode>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d01e      	beq.n	800bb62 <USB_SetCurrentMode+0x84>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2bc7      	cmp	r3, #199	@ 0xc7
 800bb28:	d9f0      	bls.n	800bb0c <USB_SetCurrentMode+0x2e>
 800bb2a:	e01a      	b.n	800bb62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb2c:	78fb      	ldrb	r3, [r7, #3]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d115      	bne.n	800bb5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bb3e:	200a      	movs	r0, #10
 800bb40:	f7f5 fec4 	bl	80018cc <HAL_Delay>
      ms += 10U;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	330a      	adds	r3, #10
 800bb48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fa0c 	bl	800bf68 <USB_GetMode>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d005      	beq.n	800bb62 <USB_SetCurrentMode+0x84>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2bc7      	cmp	r3, #199	@ 0xc7
 800bb5a:	d9f0      	bls.n	800bb3e <USB_SetCurrentMode+0x60>
 800bb5c:	e001      	b.n	800bb62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e005      	b.n	800bb6e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2bc8      	cmp	r3, #200	@ 0xc8
 800bb66:	d101      	bne.n	800bb6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e000      	b.n	800bb6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
	...

0800bb78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb78:	b084      	sub	sp, #16
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b086      	sub	sp, #24
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bb86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb92:	2300      	movs	r3, #0
 800bb94:	613b      	str	r3, [r7, #16]
 800bb96:	e009      	b.n	800bbac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	3340      	adds	r3, #64	@ 0x40
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4413      	add	r3, r2
 800bba2:	2200      	movs	r2, #0
 800bba4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	613b      	str	r3, [r7, #16]
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	2b0e      	cmp	r3, #14
 800bbb0:	d9f2      	bls.n	800bb98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bbb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d11c      	bne.n	800bbf4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbc8:	f043 0302 	orr.w	r3, r3, #2
 800bbcc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	e005      	b.n	800bc00 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbf8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc06:	461a      	mov	r2, r3
 800bc08:	2300      	movs	r3, #0
 800bc0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d10d      	bne.n	800bc30 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d104      	bne.n	800bc26 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f968 	bl	800bef4 <USB_SetDevSpeed>
 800bc24:	e008      	b.n	800bc38 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bc26:	2101      	movs	r1, #1
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f963 	bl	800bef4 <USB_SetDevSpeed>
 800bc2e:	e003      	b.n	800bc38 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bc30:	2103      	movs	r1, #3
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f95e 	bl	800bef4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bc38:	2110      	movs	r1, #16
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 f8fa 	bl	800be34 <USB_FlushTxFifo>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f924 	bl	800be98 <USB_FlushRxFifo>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc60:	461a      	mov	r2, r3
 800bc62:	2300      	movs	r3, #0
 800bc64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	2300      	movs	r3, #0
 800bc70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc78:	461a      	mov	r2, r3
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc7e:	2300      	movs	r3, #0
 800bc80:	613b      	str	r3, [r7, #16]
 800bc82:	e043      	b.n	800bd0c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	015a      	lsls	r2, r3, #5
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc9a:	d118      	bne.n	800bcce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	015a      	lsls	r2, r3, #5
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	e013      	b.n	800bce0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	015a      	lsls	r2, r3, #5
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	e008      	b.n	800bce0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	015a      	lsls	r2, r3, #5
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcda:	461a      	mov	r2, r3
 800bcdc:	2300      	movs	r3, #0
 800bcde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcec:	461a      	mov	r2, r3
 800bcee:	2300      	movs	r3, #0
 800bcf0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	015a      	lsls	r2, r3, #5
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcfe:	461a      	mov	r2, r3
 800bd00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bd04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	613b      	str	r3, [r7, #16]
 800bd0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bd10:	461a      	mov	r2, r3
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d3b5      	bcc.n	800bc84 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd18:	2300      	movs	r3, #0
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	e043      	b.n	800bda6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	015a      	lsls	r2, r3, #5
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	4413      	add	r3, r2
 800bd26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd34:	d118      	bne.n	800bd68 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10a      	bne.n	800bd52 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd48:	461a      	mov	r2, r3
 800bd4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bd4e:	6013      	str	r3, [r2, #0]
 800bd50:	e013      	b.n	800bd7a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	015a      	lsls	r2, r3, #5
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	4413      	add	r3, r2
 800bd5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	e008      	b.n	800bd7a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	015a      	lsls	r2, r3, #5
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4413      	add	r3, r2
 800bd70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd74:	461a      	mov	r2, r3
 800bd76:	2300      	movs	r3, #0
 800bd78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	015a      	lsls	r2, r3, #5
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd86:	461a      	mov	r2, r3
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	015a      	lsls	r2, r3, #5
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4413      	add	r3, r2
 800bd94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd98:	461a      	mov	r2, r3
 800bd9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bd9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	3301      	adds	r3, #1
 800bda4:	613b      	str	r3, [r7, #16]
 800bda6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bdaa:	461a      	mov	r2, r3
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d3b5      	bcc.n	800bd1e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bdc4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bdd2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bdd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d105      	bne.n	800bde8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	f043 0210 	orr.w	r2, r3, #16
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	699a      	ldr	r2, [r3, #24]
 800bdec:	4b0f      	ldr	r3, [pc, #60]	@ (800be2c <USB_DevInit+0x2b4>)
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bdf4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d005      	beq.n	800be08 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	f043 0208 	orr.w	r2, r3, #8
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800be08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d105      	bne.n	800be1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	699a      	ldr	r2, [r3, #24]
 800be14:	4b06      	ldr	r3, [pc, #24]	@ (800be30 <USB_DevInit+0x2b8>)
 800be16:	4313      	orrs	r3, r2
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800be1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be28:	b004      	add	sp, #16
 800be2a:	4770      	bx	lr
 800be2c:	803c3800 	.word	0x803c3800
 800be30:	40000004 	.word	0x40000004

0800be34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3301      	adds	r3, #1
 800be46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be4e:	d901      	bls.n	800be54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e01b      	b.n	800be8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	daf2      	bge.n	800be42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	019b      	lsls	r3, r3, #6
 800be64:	f043 0220 	orr.w	r2, r3, #32
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3301      	adds	r3, #1
 800be70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be78:	d901      	bls.n	800be7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e006      	b.n	800be8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	f003 0320 	and.w	r3, r3, #32
 800be86:	2b20      	cmp	r3, #32
 800be88:	d0f0      	beq.n	800be6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	3301      	adds	r3, #1
 800bea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800beb0:	d901      	bls.n	800beb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e018      	b.n	800bee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	daf2      	bge.n	800bea4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2210      	movs	r2, #16
 800bec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3301      	adds	r3, #1
 800becc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bed4:	d901      	bls.n	800beda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bed6:	2303      	movs	r3, #3
 800bed8:	e006      	b.n	800bee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	f003 0310 	and.w	r3, r3, #16
 800bee2:	2b10      	cmp	r3, #16
 800bee4:	d0f0      	beq.n	800bec8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3714      	adds	r7, #20
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	78fb      	ldrb	r3, [r7, #3]
 800bf0e:	68f9      	ldr	r1, [r7, #12]
 800bf10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf14:	4313      	orrs	r3, r2
 800bf16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b085      	sub	sp, #20
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf40:	f023 0303 	bic.w	r3, r3, #3
 800bf44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf54:	f043 0302 	orr.w	r3, r3, #2
 800bf58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3714      	adds	r7, #20
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	695b      	ldr	r3, [r3, #20]
 800bf74:	f003 0301 	and.w	r3, r3, #1
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	3301      	adds	r3, #1
 800bf94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf9c:	d901      	bls.n	800bfa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	e01b      	b.n	800bfda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	daf2      	bge.n	800bf90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	f043 0201 	orr.w	r2, r3, #1
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bfc6:	d901      	bls.n	800bfcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bfc8:	2303      	movs	r3, #3
 800bfca:	e006      	b.n	800bfda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d0f0      	beq.n	800bfba <USB_CoreReset+0x36>

  return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr
	...

0800bfe8 <siprintf>:
 800bfe8:	b40e      	push	{r1, r2, r3}
 800bfea:	b500      	push	{lr}
 800bfec:	b09c      	sub	sp, #112	@ 0x70
 800bfee:	ab1d      	add	r3, sp, #116	@ 0x74
 800bff0:	9002      	str	r0, [sp, #8]
 800bff2:	9006      	str	r0, [sp, #24]
 800bff4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bff8:	4809      	ldr	r0, [pc, #36]	@ (800c020 <siprintf+0x38>)
 800bffa:	9107      	str	r1, [sp, #28]
 800bffc:	9104      	str	r1, [sp, #16]
 800bffe:	4909      	ldr	r1, [pc, #36]	@ (800c024 <siprintf+0x3c>)
 800c000:	f853 2b04 	ldr.w	r2, [r3], #4
 800c004:	9105      	str	r1, [sp, #20]
 800c006:	6800      	ldr	r0, [r0, #0]
 800c008:	9301      	str	r3, [sp, #4]
 800c00a:	a902      	add	r1, sp, #8
 800c00c:	f000 f994 	bl	800c338 <_svfiprintf_r>
 800c010:	9b02      	ldr	r3, [sp, #8]
 800c012:	2200      	movs	r2, #0
 800c014:	701a      	strb	r2, [r3, #0]
 800c016:	b01c      	add	sp, #112	@ 0x70
 800c018:	f85d eb04 	ldr.w	lr, [sp], #4
 800c01c:	b003      	add	sp, #12
 800c01e:	4770      	bx	lr
 800c020:	24000014 	.word	0x24000014
 800c024:	ffff0208 	.word	0xffff0208

0800c028 <memset>:
 800c028:	4402      	add	r2, r0
 800c02a:	4603      	mov	r3, r0
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d100      	bne.n	800c032 <memset+0xa>
 800c030:	4770      	bx	lr
 800c032:	f803 1b01 	strb.w	r1, [r3], #1
 800c036:	e7f9      	b.n	800c02c <memset+0x4>

0800c038 <__errno>:
 800c038:	4b01      	ldr	r3, [pc, #4]	@ (800c040 <__errno+0x8>)
 800c03a:	6818      	ldr	r0, [r3, #0]
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	24000014 	.word	0x24000014

0800c044 <__libc_init_array>:
 800c044:	b570      	push	{r4, r5, r6, lr}
 800c046:	4d0d      	ldr	r5, [pc, #52]	@ (800c07c <__libc_init_array+0x38>)
 800c048:	4c0d      	ldr	r4, [pc, #52]	@ (800c080 <__libc_init_array+0x3c>)
 800c04a:	1b64      	subs	r4, r4, r5
 800c04c:	10a4      	asrs	r4, r4, #2
 800c04e:	2600      	movs	r6, #0
 800c050:	42a6      	cmp	r6, r4
 800c052:	d109      	bne.n	800c068 <__libc_init_array+0x24>
 800c054:	4d0b      	ldr	r5, [pc, #44]	@ (800c084 <__libc_init_array+0x40>)
 800c056:	4c0c      	ldr	r4, [pc, #48]	@ (800c088 <__libc_init_array+0x44>)
 800c058:	f000 fc66 	bl	800c928 <_init>
 800c05c:	1b64      	subs	r4, r4, r5
 800c05e:	10a4      	asrs	r4, r4, #2
 800c060:	2600      	movs	r6, #0
 800c062:	42a6      	cmp	r6, r4
 800c064:	d105      	bne.n	800c072 <__libc_init_array+0x2e>
 800c066:	bd70      	pop	{r4, r5, r6, pc}
 800c068:	f855 3b04 	ldr.w	r3, [r5], #4
 800c06c:	4798      	blx	r3
 800c06e:	3601      	adds	r6, #1
 800c070:	e7ee      	b.n	800c050 <__libc_init_array+0xc>
 800c072:	f855 3b04 	ldr.w	r3, [r5], #4
 800c076:	4798      	blx	r3
 800c078:	3601      	adds	r6, #1
 800c07a:	e7f2      	b.n	800c062 <__libc_init_array+0x1e>
 800c07c:	0800c9d4 	.word	0x0800c9d4
 800c080:	0800c9d4 	.word	0x0800c9d4
 800c084:	0800c9d4 	.word	0x0800c9d4
 800c088:	0800c9d8 	.word	0x0800c9d8

0800c08c <__retarget_lock_acquire_recursive>:
 800c08c:	4770      	bx	lr

0800c08e <__retarget_lock_release_recursive>:
 800c08e:	4770      	bx	lr

0800c090 <_free_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4605      	mov	r5, r0
 800c094:	2900      	cmp	r1, #0
 800c096:	d041      	beq.n	800c11c <_free_r+0x8c>
 800c098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c09c:	1f0c      	subs	r4, r1, #4
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	bfb8      	it	lt
 800c0a2:	18e4      	addlt	r4, r4, r3
 800c0a4:	f000 f8e0 	bl	800c268 <__malloc_lock>
 800c0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c120 <_free_r+0x90>)
 800c0aa:	6813      	ldr	r3, [r2, #0]
 800c0ac:	b933      	cbnz	r3, 800c0bc <_free_r+0x2c>
 800c0ae:	6063      	str	r3, [r4, #4]
 800c0b0:	6014      	str	r4, [r2, #0]
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0b8:	f000 b8dc 	b.w	800c274 <__malloc_unlock>
 800c0bc:	42a3      	cmp	r3, r4
 800c0be:	d908      	bls.n	800c0d2 <_free_r+0x42>
 800c0c0:	6820      	ldr	r0, [r4, #0]
 800c0c2:	1821      	adds	r1, r4, r0
 800c0c4:	428b      	cmp	r3, r1
 800c0c6:	bf01      	itttt	eq
 800c0c8:	6819      	ldreq	r1, [r3, #0]
 800c0ca:	685b      	ldreq	r3, [r3, #4]
 800c0cc:	1809      	addeq	r1, r1, r0
 800c0ce:	6021      	streq	r1, [r4, #0]
 800c0d0:	e7ed      	b.n	800c0ae <_free_r+0x1e>
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	b10b      	cbz	r3, 800c0dc <_free_r+0x4c>
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	d9fa      	bls.n	800c0d2 <_free_r+0x42>
 800c0dc:	6811      	ldr	r1, [r2, #0]
 800c0de:	1850      	adds	r0, r2, r1
 800c0e0:	42a0      	cmp	r0, r4
 800c0e2:	d10b      	bne.n	800c0fc <_free_r+0x6c>
 800c0e4:	6820      	ldr	r0, [r4, #0]
 800c0e6:	4401      	add	r1, r0
 800c0e8:	1850      	adds	r0, r2, r1
 800c0ea:	4283      	cmp	r3, r0
 800c0ec:	6011      	str	r1, [r2, #0]
 800c0ee:	d1e0      	bne.n	800c0b2 <_free_r+0x22>
 800c0f0:	6818      	ldr	r0, [r3, #0]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	6053      	str	r3, [r2, #4]
 800c0f6:	4408      	add	r0, r1
 800c0f8:	6010      	str	r0, [r2, #0]
 800c0fa:	e7da      	b.n	800c0b2 <_free_r+0x22>
 800c0fc:	d902      	bls.n	800c104 <_free_r+0x74>
 800c0fe:	230c      	movs	r3, #12
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	e7d6      	b.n	800c0b2 <_free_r+0x22>
 800c104:	6820      	ldr	r0, [r4, #0]
 800c106:	1821      	adds	r1, r4, r0
 800c108:	428b      	cmp	r3, r1
 800c10a:	bf04      	itt	eq
 800c10c:	6819      	ldreq	r1, [r3, #0]
 800c10e:	685b      	ldreq	r3, [r3, #4]
 800c110:	6063      	str	r3, [r4, #4]
 800c112:	bf04      	itt	eq
 800c114:	1809      	addeq	r1, r1, r0
 800c116:	6021      	streq	r1, [r4, #0]
 800c118:	6054      	str	r4, [r2, #4]
 800c11a:	e7ca      	b.n	800c0b2 <_free_r+0x22>
 800c11c:	bd38      	pop	{r3, r4, r5, pc}
 800c11e:	bf00      	nop
 800c120:	24000ca4 	.word	0x24000ca4

0800c124 <sbrk_aligned>:
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	4e0f      	ldr	r6, [pc, #60]	@ (800c164 <sbrk_aligned+0x40>)
 800c128:	460c      	mov	r4, r1
 800c12a:	6831      	ldr	r1, [r6, #0]
 800c12c:	4605      	mov	r5, r0
 800c12e:	b911      	cbnz	r1, 800c136 <sbrk_aligned+0x12>
 800c130:	f000 fba6 	bl	800c880 <_sbrk_r>
 800c134:	6030      	str	r0, [r6, #0]
 800c136:	4621      	mov	r1, r4
 800c138:	4628      	mov	r0, r5
 800c13a:	f000 fba1 	bl	800c880 <_sbrk_r>
 800c13e:	1c43      	adds	r3, r0, #1
 800c140:	d103      	bne.n	800c14a <sbrk_aligned+0x26>
 800c142:	f04f 34ff 	mov.w	r4, #4294967295
 800c146:	4620      	mov	r0, r4
 800c148:	bd70      	pop	{r4, r5, r6, pc}
 800c14a:	1cc4      	adds	r4, r0, #3
 800c14c:	f024 0403 	bic.w	r4, r4, #3
 800c150:	42a0      	cmp	r0, r4
 800c152:	d0f8      	beq.n	800c146 <sbrk_aligned+0x22>
 800c154:	1a21      	subs	r1, r4, r0
 800c156:	4628      	mov	r0, r5
 800c158:	f000 fb92 	bl	800c880 <_sbrk_r>
 800c15c:	3001      	adds	r0, #1
 800c15e:	d1f2      	bne.n	800c146 <sbrk_aligned+0x22>
 800c160:	e7ef      	b.n	800c142 <sbrk_aligned+0x1e>
 800c162:	bf00      	nop
 800c164:	24000ca0 	.word	0x24000ca0

0800c168 <_malloc_r>:
 800c168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c16c:	1ccd      	adds	r5, r1, #3
 800c16e:	f025 0503 	bic.w	r5, r5, #3
 800c172:	3508      	adds	r5, #8
 800c174:	2d0c      	cmp	r5, #12
 800c176:	bf38      	it	cc
 800c178:	250c      	movcc	r5, #12
 800c17a:	2d00      	cmp	r5, #0
 800c17c:	4606      	mov	r6, r0
 800c17e:	db01      	blt.n	800c184 <_malloc_r+0x1c>
 800c180:	42a9      	cmp	r1, r5
 800c182:	d904      	bls.n	800c18e <_malloc_r+0x26>
 800c184:	230c      	movs	r3, #12
 800c186:	6033      	str	r3, [r6, #0]
 800c188:	2000      	movs	r0, #0
 800c18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c18e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c264 <_malloc_r+0xfc>
 800c192:	f000 f869 	bl	800c268 <__malloc_lock>
 800c196:	f8d8 3000 	ldr.w	r3, [r8]
 800c19a:	461c      	mov	r4, r3
 800c19c:	bb44      	cbnz	r4, 800c1f0 <_malloc_r+0x88>
 800c19e:	4629      	mov	r1, r5
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f7ff ffbf 	bl	800c124 <sbrk_aligned>
 800c1a6:	1c43      	adds	r3, r0, #1
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	d158      	bne.n	800c25e <_malloc_r+0xf6>
 800c1ac:	f8d8 4000 	ldr.w	r4, [r8]
 800c1b0:	4627      	mov	r7, r4
 800c1b2:	2f00      	cmp	r7, #0
 800c1b4:	d143      	bne.n	800c23e <_malloc_r+0xd6>
 800c1b6:	2c00      	cmp	r4, #0
 800c1b8:	d04b      	beq.n	800c252 <_malloc_r+0xea>
 800c1ba:	6823      	ldr	r3, [r4, #0]
 800c1bc:	4639      	mov	r1, r7
 800c1be:	4630      	mov	r0, r6
 800c1c0:	eb04 0903 	add.w	r9, r4, r3
 800c1c4:	f000 fb5c 	bl	800c880 <_sbrk_r>
 800c1c8:	4581      	cmp	r9, r0
 800c1ca:	d142      	bne.n	800c252 <_malloc_r+0xea>
 800c1cc:	6821      	ldr	r1, [r4, #0]
 800c1ce:	1a6d      	subs	r5, r5, r1
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f7ff ffa6 	bl	800c124 <sbrk_aligned>
 800c1d8:	3001      	adds	r0, #1
 800c1da:	d03a      	beq.n	800c252 <_malloc_r+0xea>
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	442b      	add	r3, r5
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	bb62      	cbnz	r2, 800c244 <_malloc_r+0xdc>
 800c1ea:	f8c8 7000 	str.w	r7, [r8]
 800c1ee:	e00f      	b.n	800c210 <_malloc_r+0xa8>
 800c1f0:	6822      	ldr	r2, [r4, #0]
 800c1f2:	1b52      	subs	r2, r2, r5
 800c1f4:	d420      	bmi.n	800c238 <_malloc_r+0xd0>
 800c1f6:	2a0b      	cmp	r2, #11
 800c1f8:	d917      	bls.n	800c22a <_malloc_r+0xc2>
 800c1fa:	1961      	adds	r1, r4, r5
 800c1fc:	42a3      	cmp	r3, r4
 800c1fe:	6025      	str	r5, [r4, #0]
 800c200:	bf18      	it	ne
 800c202:	6059      	strne	r1, [r3, #4]
 800c204:	6863      	ldr	r3, [r4, #4]
 800c206:	bf08      	it	eq
 800c208:	f8c8 1000 	streq.w	r1, [r8]
 800c20c:	5162      	str	r2, [r4, r5]
 800c20e:	604b      	str	r3, [r1, #4]
 800c210:	4630      	mov	r0, r6
 800c212:	f000 f82f 	bl	800c274 <__malloc_unlock>
 800c216:	f104 000b 	add.w	r0, r4, #11
 800c21a:	1d23      	adds	r3, r4, #4
 800c21c:	f020 0007 	bic.w	r0, r0, #7
 800c220:	1ac2      	subs	r2, r0, r3
 800c222:	bf1c      	itt	ne
 800c224:	1a1b      	subne	r3, r3, r0
 800c226:	50a3      	strne	r3, [r4, r2]
 800c228:	e7af      	b.n	800c18a <_malloc_r+0x22>
 800c22a:	6862      	ldr	r2, [r4, #4]
 800c22c:	42a3      	cmp	r3, r4
 800c22e:	bf0c      	ite	eq
 800c230:	f8c8 2000 	streq.w	r2, [r8]
 800c234:	605a      	strne	r2, [r3, #4]
 800c236:	e7eb      	b.n	800c210 <_malloc_r+0xa8>
 800c238:	4623      	mov	r3, r4
 800c23a:	6864      	ldr	r4, [r4, #4]
 800c23c:	e7ae      	b.n	800c19c <_malloc_r+0x34>
 800c23e:	463c      	mov	r4, r7
 800c240:	687f      	ldr	r7, [r7, #4]
 800c242:	e7b6      	b.n	800c1b2 <_malloc_r+0x4a>
 800c244:	461a      	mov	r2, r3
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	42a3      	cmp	r3, r4
 800c24a:	d1fb      	bne.n	800c244 <_malloc_r+0xdc>
 800c24c:	2300      	movs	r3, #0
 800c24e:	6053      	str	r3, [r2, #4]
 800c250:	e7de      	b.n	800c210 <_malloc_r+0xa8>
 800c252:	230c      	movs	r3, #12
 800c254:	6033      	str	r3, [r6, #0]
 800c256:	4630      	mov	r0, r6
 800c258:	f000 f80c 	bl	800c274 <__malloc_unlock>
 800c25c:	e794      	b.n	800c188 <_malloc_r+0x20>
 800c25e:	6005      	str	r5, [r0, #0]
 800c260:	e7d6      	b.n	800c210 <_malloc_r+0xa8>
 800c262:	bf00      	nop
 800c264:	24000ca4 	.word	0x24000ca4

0800c268 <__malloc_lock>:
 800c268:	4801      	ldr	r0, [pc, #4]	@ (800c270 <__malloc_lock+0x8>)
 800c26a:	f7ff bf0f 	b.w	800c08c <__retarget_lock_acquire_recursive>
 800c26e:	bf00      	nop
 800c270:	24000c9c 	.word	0x24000c9c

0800c274 <__malloc_unlock>:
 800c274:	4801      	ldr	r0, [pc, #4]	@ (800c27c <__malloc_unlock+0x8>)
 800c276:	f7ff bf0a 	b.w	800c08e <__retarget_lock_release_recursive>
 800c27a:	bf00      	nop
 800c27c:	24000c9c 	.word	0x24000c9c

0800c280 <__ssputs_r>:
 800c280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c284:	688e      	ldr	r6, [r1, #8]
 800c286:	461f      	mov	r7, r3
 800c288:	42be      	cmp	r6, r7
 800c28a:	680b      	ldr	r3, [r1, #0]
 800c28c:	4682      	mov	sl, r0
 800c28e:	460c      	mov	r4, r1
 800c290:	4690      	mov	r8, r2
 800c292:	d82d      	bhi.n	800c2f0 <__ssputs_r+0x70>
 800c294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c298:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c29c:	d026      	beq.n	800c2ec <__ssputs_r+0x6c>
 800c29e:	6965      	ldr	r5, [r4, #20]
 800c2a0:	6909      	ldr	r1, [r1, #16]
 800c2a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2a6:	eba3 0901 	sub.w	r9, r3, r1
 800c2aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2ae:	1c7b      	adds	r3, r7, #1
 800c2b0:	444b      	add	r3, r9
 800c2b2:	106d      	asrs	r5, r5, #1
 800c2b4:	429d      	cmp	r5, r3
 800c2b6:	bf38      	it	cc
 800c2b8:	461d      	movcc	r5, r3
 800c2ba:	0553      	lsls	r3, r2, #21
 800c2bc:	d527      	bpl.n	800c30e <__ssputs_r+0x8e>
 800c2be:	4629      	mov	r1, r5
 800c2c0:	f7ff ff52 	bl	800c168 <_malloc_r>
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	b360      	cbz	r0, 800c322 <__ssputs_r+0xa2>
 800c2c8:	6921      	ldr	r1, [r4, #16]
 800c2ca:	464a      	mov	r2, r9
 800c2cc:	f000 fae8 	bl	800c8a0 <memcpy>
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c2d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2da:	81a3      	strh	r3, [r4, #12]
 800c2dc:	6126      	str	r6, [r4, #16]
 800c2de:	6165      	str	r5, [r4, #20]
 800c2e0:	444e      	add	r6, r9
 800c2e2:	eba5 0509 	sub.w	r5, r5, r9
 800c2e6:	6026      	str	r6, [r4, #0]
 800c2e8:	60a5      	str	r5, [r4, #8]
 800c2ea:	463e      	mov	r6, r7
 800c2ec:	42be      	cmp	r6, r7
 800c2ee:	d900      	bls.n	800c2f2 <__ssputs_r+0x72>
 800c2f0:	463e      	mov	r6, r7
 800c2f2:	6820      	ldr	r0, [r4, #0]
 800c2f4:	4632      	mov	r2, r6
 800c2f6:	4641      	mov	r1, r8
 800c2f8:	f000 faa8 	bl	800c84c <memmove>
 800c2fc:	68a3      	ldr	r3, [r4, #8]
 800c2fe:	1b9b      	subs	r3, r3, r6
 800c300:	60a3      	str	r3, [r4, #8]
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	4433      	add	r3, r6
 800c306:	6023      	str	r3, [r4, #0]
 800c308:	2000      	movs	r0, #0
 800c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c30e:	462a      	mov	r2, r5
 800c310:	f000 fad4 	bl	800c8bc <_realloc_r>
 800c314:	4606      	mov	r6, r0
 800c316:	2800      	cmp	r0, #0
 800c318:	d1e0      	bne.n	800c2dc <__ssputs_r+0x5c>
 800c31a:	6921      	ldr	r1, [r4, #16]
 800c31c:	4650      	mov	r0, sl
 800c31e:	f7ff feb7 	bl	800c090 <_free_r>
 800c322:	230c      	movs	r3, #12
 800c324:	f8ca 3000 	str.w	r3, [sl]
 800c328:	89a3      	ldrh	r3, [r4, #12]
 800c32a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c32e:	81a3      	strh	r3, [r4, #12]
 800c330:	f04f 30ff 	mov.w	r0, #4294967295
 800c334:	e7e9      	b.n	800c30a <__ssputs_r+0x8a>
	...

0800c338 <_svfiprintf_r>:
 800c338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33c:	4698      	mov	r8, r3
 800c33e:	898b      	ldrh	r3, [r1, #12]
 800c340:	061b      	lsls	r3, r3, #24
 800c342:	b09d      	sub	sp, #116	@ 0x74
 800c344:	4607      	mov	r7, r0
 800c346:	460d      	mov	r5, r1
 800c348:	4614      	mov	r4, r2
 800c34a:	d510      	bpl.n	800c36e <_svfiprintf_r+0x36>
 800c34c:	690b      	ldr	r3, [r1, #16]
 800c34e:	b973      	cbnz	r3, 800c36e <_svfiprintf_r+0x36>
 800c350:	2140      	movs	r1, #64	@ 0x40
 800c352:	f7ff ff09 	bl	800c168 <_malloc_r>
 800c356:	6028      	str	r0, [r5, #0]
 800c358:	6128      	str	r0, [r5, #16]
 800c35a:	b930      	cbnz	r0, 800c36a <_svfiprintf_r+0x32>
 800c35c:	230c      	movs	r3, #12
 800c35e:	603b      	str	r3, [r7, #0]
 800c360:	f04f 30ff 	mov.w	r0, #4294967295
 800c364:	b01d      	add	sp, #116	@ 0x74
 800c366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36a:	2340      	movs	r3, #64	@ 0x40
 800c36c:	616b      	str	r3, [r5, #20]
 800c36e:	2300      	movs	r3, #0
 800c370:	9309      	str	r3, [sp, #36]	@ 0x24
 800c372:	2320      	movs	r3, #32
 800c374:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c378:	f8cd 800c 	str.w	r8, [sp, #12]
 800c37c:	2330      	movs	r3, #48	@ 0x30
 800c37e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c51c <_svfiprintf_r+0x1e4>
 800c382:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c386:	f04f 0901 	mov.w	r9, #1
 800c38a:	4623      	mov	r3, r4
 800c38c:	469a      	mov	sl, r3
 800c38e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c392:	b10a      	cbz	r2, 800c398 <_svfiprintf_r+0x60>
 800c394:	2a25      	cmp	r2, #37	@ 0x25
 800c396:	d1f9      	bne.n	800c38c <_svfiprintf_r+0x54>
 800c398:	ebba 0b04 	subs.w	fp, sl, r4
 800c39c:	d00b      	beq.n	800c3b6 <_svfiprintf_r+0x7e>
 800c39e:	465b      	mov	r3, fp
 800c3a0:	4622      	mov	r2, r4
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	4638      	mov	r0, r7
 800c3a6:	f7ff ff6b 	bl	800c280 <__ssputs_r>
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	f000 80a7 	beq.w	800c4fe <_svfiprintf_r+0x1c6>
 800c3b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3b2:	445a      	add	r2, fp
 800c3b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f000 809f 	beq.w	800c4fe <_svfiprintf_r+0x1c6>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3ca:	f10a 0a01 	add.w	sl, sl, #1
 800c3ce:	9304      	str	r3, [sp, #16]
 800c3d0:	9307      	str	r3, [sp, #28]
 800c3d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3d8:	4654      	mov	r4, sl
 800c3da:	2205      	movs	r2, #5
 800c3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e0:	484e      	ldr	r0, [pc, #312]	@ (800c51c <_svfiprintf_r+0x1e4>)
 800c3e2:	f7f3 ff85 	bl	80002f0 <memchr>
 800c3e6:	9a04      	ldr	r2, [sp, #16]
 800c3e8:	b9d8      	cbnz	r0, 800c422 <_svfiprintf_r+0xea>
 800c3ea:	06d0      	lsls	r0, r2, #27
 800c3ec:	bf44      	itt	mi
 800c3ee:	2320      	movmi	r3, #32
 800c3f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3f4:	0711      	lsls	r1, r2, #28
 800c3f6:	bf44      	itt	mi
 800c3f8:	232b      	movmi	r3, #43	@ 0x2b
 800c3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c402:	2b2a      	cmp	r3, #42	@ 0x2a
 800c404:	d015      	beq.n	800c432 <_svfiprintf_r+0xfa>
 800c406:	9a07      	ldr	r2, [sp, #28]
 800c408:	4654      	mov	r4, sl
 800c40a:	2000      	movs	r0, #0
 800c40c:	f04f 0c0a 	mov.w	ip, #10
 800c410:	4621      	mov	r1, r4
 800c412:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c416:	3b30      	subs	r3, #48	@ 0x30
 800c418:	2b09      	cmp	r3, #9
 800c41a:	d94b      	bls.n	800c4b4 <_svfiprintf_r+0x17c>
 800c41c:	b1b0      	cbz	r0, 800c44c <_svfiprintf_r+0x114>
 800c41e:	9207      	str	r2, [sp, #28]
 800c420:	e014      	b.n	800c44c <_svfiprintf_r+0x114>
 800c422:	eba0 0308 	sub.w	r3, r0, r8
 800c426:	fa09 f303 	lsl.w	r3, r9, r3
 800c42a:	4313      	orrs	r3, r2
 800c42c:	9304      	str	r3, [sp, #16]
 800c42e:	46a2      	mov	sl, r4
 800c430:	e7d2      	b.n	800c3d8 <_svfiprintf_r+0xa0>
 800c432:	9b03      	ldr	r3, [sp, #12]
 800c434:	1d19      	adds	r1, r3, #4
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	9103      	str	r1, [sp, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	bfbb      	ittet	lt
 800c43e:	425b      	neglt	r3, r3
 800c440:	f042 0202 	orrlt.w	r2, r2, #2
 800c444:	9307      	strge	r3, [sp, #28]
 800c446:	9307      	strlt	r3, [sp, #28]
 800c448:	bfb8      	it	lt
 800c44a:	9204      	strlt	r2, [sp, #16]
 800c44c:	7823      	ldrb	r3, [r4, #0]
 800c44e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c450:	d10a      	bne.n	800c468 <_svfiprintf_r+0x130>
 800c452:	7863      	ldrb	r3, [r4, #1]
 800c454:	2b2a      	cmp	r3, #42	@ 0x2a
 800c456:	d132      	bne.n	800c4be <_svfiprintf_r+0x186>
 800c458:	9b03      	ldr	r3, [sp, #12]
 800c45a:	1d1a      	adds	r2, r3, #4
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	9203      	str	r2, [sp, #12]
 800c460:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c464:	3402      	adds	r4, #2
 800c466:	9305      	str	r3, [sp, #20]
 800c468:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c52c <_svfiprintf_r+0x1f4>
 800c46c:	7821      	ldrb	r1, [r4, #0]
 800c46e:	2203      	movs	r2, #3
 800c470:	4650      	mov	r0, sl
 800c472:	f7f3 ff3d 	bl	80002f0 <memchr>
 800c476:	b138      	cbz	r0, 800c488 <_svfiprintf_r+0x150>
 800c478:	9b04      	ldr	r3, [sp, #16]
 800c47a:	eba0 000a 	sub.w	r0, r0, sl
 800c47e:	2240      	movs	r2, #64	@ 0x40
 800c480:	4082      	lsls	r2, r0
 800c482:	4313      	orrs	r3, r2
 800c484:	3401      	adds	r4, #1
 800c486:	9304      	str	r3, [sp, #16]
 800c488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c48c:	4824      	ldr	r0, [pc, #144]	@ (800c520 <_svfiprintf_r+0x1e8>)
 800c48e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c492:	2206      	movs	r2, #6
 800c494:	f7f3 ff2c 	bl	80002f0 <memchr>
 800c498:	2800      	cmp	r0, #0
 800c49a:	d036      	beq.n	800c50a <_svfiprintf_r+0x1d2>
 800c49c:	4b21      	ldr	r3, [pc, #132]	@ (800c524 <_svfiprintf_r+0x1ec>)
 800c49e:	bb1b      	cbnz	r3, 800c4e8 <_svfiprintf_r+0x1b0>
 800c4a0:	9b03      	ldr	r3, [sp, #12]
 800c4a2:	3307      	adds	r3, #7
 800c4a4:	f023 0307 	bic.w	r3, r3, #7
 800c4a8:	3308      	adds	r3, #8
 800c4aa:	9303      	str	r3, [sp, #12]
 800c4ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ae:	4433      	add	r3, r6
 800c4b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4b2:	e76a      	b.n	800c38a <_svfiprintf_r+0x52>
 800c4b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	2001      	movs	r0, #1
 800c4bc:	e7a8      	b.n	800c410 <_svfiprintf_r+0xd8>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	3401      	adds	r4, #1
 800c4c2:	9305      	str	r3, [sp, #20]
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	f04f 0c0a 	mov.w	ip, #10
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4d0:	3a30      	subs	r2, #48	@ 0x30
 800c4d2:	2a09      	cmp	r2, #9
 800c4d4:	d903      	bls.n	800c4de <_svfiprintf_r+0x1a6>
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d0c6      	beq.n	800c468 <_svfiprintf_r+0x130>
 800c4da:	9105      	str	r1, [sp, #20]
 800c4dc:	e7c4      	b.n	800c468 <_svfiprintf_r+0x130>
 800c4de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e7f0      	b.n	800c4ca <_svfiprintf_r+0x192>
 800c4e8:	ab03      	add	r3, sp, #12
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	462a      	mov	r2, r5
 800c4ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c528 <_svfiprintf_r+0x1f0>)
 800c4f0:	a904      	add	r1, sp, #16
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	f3af 8000 	nop.w
 800c4f8:	1c42      	adds	r2, r0, #1
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	d1d6      	bne.n	800c4ac <_svfiprintf_r+0x174>
 800c4fe:	89ab      	ldrh	r3, [r5, #12]
 800c500:	065b      	lsls	r3, r3, #25
 800c502:	f53f af2d 	bmi.w	800c360 <_svfiprintf_r+0x28>
 800c506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c508:	e72c      	b.n	800c364 <_svfiprintf_r+0x2c>
 800c50a:	ab03      	add	r3, sp, #12
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	462a      	mov	r2, r5
 800c510:	4b05      	ldr	r3, [pc, #20]	@ (800c528 <_svfiprintf_r+0x1f0>)
 800c512:	a904      	add	r1, sp, #16
 800c514:	4638      	mov	r0, r7
 800c516:	f000 f879 	bl	800c60c <_printf_i>
 800c51a:	e7ed      	b.n	800c4f8 <_svfiprintf_r+0x1c0>
 800c51c:	0800c998 	.word	0x0800c998
 800c520:	0800c9a2 	.word	0x0800c9a2
 800c524:	00000000 	.word	0x00000000
 800c528:	0800c281 	.word	0x0800c281
 800c52c:	0800c99e 	.word	0x0800c99e

0800c530 <_printf_common>:
 800c530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c534:	4616      	mov	r6, r2
 800c536:	4698      	mov	r8, r3
 800c538:	688a      	ldr	r2, [r1, #8]
 800c53a:	690b      	ldr	r3, [r1, #16]
 800c53c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c540:	4293      	cmp	r3, r2
 800c542:	bfb8      	it	lt
 800c544:	4613      	movlt	r3, r2
 800c546:	6033      	str	r3, [r6, #0]
 800c548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c54c:	4607      	mov	r7, r0
 800c54e:	460c      	mov	r4, r1
 800c550:	b10a      	cbz	r2, 800c556 <_printf_common+0x26>
 800c552:	3301      	adds	r3, #1
 800c554:	6033      	str	r3, [r6, #0]
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	0699      	lsls	r1, r3, #26
 800c55a:	bf42      	ittt	mi
 800c55c:	6833      	ldrmi	r3, [r6, #0]
 800c55e:	3302      	addmi	r3, #2
 800c560:	6033      	strmi	r3, [r6, #0]
 800c562:	6825      	ldr	r5, [r4, #0]
 800c564:	f015 0506 	ands.w	r5, r5, #6
 800c568:	d106      	bne.n	800c578 <_printf_common+0x48>
 800c56a:	f104 0a19 	add.w	sl, r4, #25
 800c56e:	68e3      	ldr	r3, [r4, #12]
 800c570:	6832      	ldr	r2, [r6, #0]
 800c572:	1a9b      	subs	r3, r3, r2
 800c574:	42ab      	cmp	r3, r5
 800c576:	dc26      	bgt.n	800c5c6 <_printf_common+0x96>
 800c578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c57c:	6822      	ldr	r2, [r4, #0]
 800c57e:	3b00      	subs	r3, #0
 800c580:	bf18      	it	ne
 800c582:	2301      	movne	r3, #1
 800c584:	0692      	lsls	r2, r2, #26
 800c586:	d42b      	bmi.n	800c5e0 <_printf_common+0xb0>
 800c588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c58c:	4641      	mov	r1, r8
 800c58e:	4638      	mov	r0, r7
 800c590:	47c8      	blx	r9
 800c592:	3001      	adds	r0, #1
 800c594:	d01e      	beq.n	800c5d4 <_printf_common+0xa4>
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	6922      	ldr	r2, [r4, #16]
 800c59a:	f003 0306 	and.w	r3, r3, #6
 800c59e:	2b04      	cmp	r3, #4
 800c5a0:	bf02      	ittt	eq
 800c5a2:	68e5      	ldreq	r5, [r4, #12]
 800c5a4:	6833      	ldreq	r3, [r6, #0]
 800c5a6:	1aed      	subeq	r5, r5, r3
 800c5a8:	68a3      	ldr	r3, [r4, #8]
 800c5aa:	bf0c      	ite	eq
 800c5ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5b0:	2500      	movne	r5, #0
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	bfc4      	itt	gt
 800c5b6:	1a9b      	subgt	r3, r3, r2
 800c5b8:	18ed      	addgt	r5, r5, r3
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	341a      	adds	r4, #26
 800c5be:	42b5      	cmp	r5, r6
 800c5c0:	d11a      	bne.n	800c5f8 <_printf_common+0xc8>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e008      	b.n	800c5d8 <_printf_common+0xa8>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	4652      	mov	r2, sl
 800c5ca:	4641      	mov	r1, r8
 800c5cc:	4638      	mov	r0, r7
 800c5ce:	47c8      	blx	r9
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d103      	bne.n	800c5dc <_printf_common+0xac>
 800c5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5dc:	3501      	adds	r5, #1
 800c5de:	e7c6      	b.n	800c56e <_printf_common+0x3e>
 800c5e0:	18e1      	adds	r1, r4, r3
 800c5e2:	1c5a      	adds	r2, r3, #1
 800c5e4:	2030      	movs	r0, #48	@ 0x30
 800c5e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c5ea:	4422      	add	r2, r4
 800c5ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c5f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c5f4:	3302      	adds	r3, #2
 800c5f6:	e7c7      	b.n	800c588 <_printf_common+0x58>
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	4622      	mov	r2, r4
 800c5fc:	4641      	mov	r1, r8
 800c5fe:	4638      	mov	r0, r7
 800c600:	47c8      	blx	r9
 800c602:	3001      	adds	r0, #1
 800c604:	d0e6      	beq.n	800c5d4 <_printf_common+0xa4>
 800c606:	3601      	adds	r6, #1
 800c608:	e7d9      	b.n	800c5be <_printf_common+0x8e>
	...

0800c60c <_printf_i>:
 800c60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c610:	7e0f      	ldrb	r7, [r1, #24]
 800c612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c614:	2f78      	cmp	r7, #120	@ 0x78
 800c616:	4691      	mov	r9, r2
 800c618:	4680      	mov	r8, r0
 800c61a:	460c      	mov	r4, r1
 800c61c:	469a      	mov	sl, r3
 800c61e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c622:	d807      	bhi.n	800c634 <_printf_i+0x28>
 800c624:	2f62      	cmp	r7, #98	@ 0x62
 800c626:	d80a      	bhi.n	800c63e <_printf_i+0x32>
 800c628:	2f00      	cmp	r7, #0
 800c62a:	f000 80d2 	beq.w	800c7d2 <_printf_i+0x1c6>
 800c62e:	2f58      	cmp	r7, #88	@ 0x58
 800c630:	f000 80b9 	beq.w	800c7a6 <_printf_i+0x19a>
 800c634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c63c:	e03a      	b.n	800c6b4 <_printf_i+0xa8>
 800c63e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c642:	2b15      	cmp	r3, #21
 800c644:	d8f6      	bhi.n	800c634 <_printf_i+0x28>
 800c646:	a101      	add	r1, pc, #4	@ (adr r1, 800c64c <_printf_i+0x40>)
 800c648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c64c:	0800c6a5 	.word	0x0800c6a5
 800c650:	0800c6b9 	.word	0x0800c6b9
 800c654:	0800c635 	.word	0x0800c635
 800c658:	0800c635 	.word	0x0800c635
 800c65c:	0800c635 	.word	0x0800c635
 800c660:	0800c635 	.word	0x0800c635
 800c664:	0800c6b9 	.word	0x0800c6b9
 800c668:	0800c635 	.word	0x0800c635
 800c66c:	0800c635 	.word	0x0800c635
 800c670:	0800c635 	.word	0x0800c635
 800c674:	0800c635 	.word	0x0800c635
 800c678:	0800c7b9 	.word	0x0800c7b9
 800c67c:	0800c6e3 	.word	0x0800c6e3
 800c680:	0800c773 	.word	0x0800c773
 800c684:	0800c635 	.word	0x0800c635
 800c688:	0800c635 	.word	0x0800c635
 800c68c:	0800c7db 	.word	0x0800c7db
 800c690:	0800c635 	.word	0x0800c635
 800c694:	0800c6e3 	.word	0x0800c6e3
 800c698:	0800c635 	.word	0x0800c635
 800c69c:	0800c635 	.word	0x0800c635
 800c6a0:	0800c77b 	.word	0x0800c77b
 800c6a4:	6833      	ldr	r3, [r6, #0]
 800c6a6:	1d1a      	adds	r2, r3, #4
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6032      	str	r2, [r6, #0]
 800c6ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e09d      	b.n	800c7f4 <_printf_i+0x1e8>
 800c6b8:	6833      	ldr	r3, [r6, #0]
 800c6ba:	6820      	ldr	r0, [r4, #0]
 800c6bc:	1d19      	adds	r1, r3, #4
 800c6be:	6031      	str	r1, [r6, #0]
 800c6c0:	0606      	lsls	r6, r0, #24
 800c6c2:	d501      	bpl.n	800c6c8 <_printf_i+0xbc>
 800c6c4:	681d      	ldr	r5, [r3, #0]
 800c6c6:	e003      	b.n	800c6d0 <_printf_i+0xc4>
 800c6c8:	0645      	lsls	r5, r0, #25
 800c6ca:	d5fb      	bpl.n	800c6c4 <_printf_i+0xb8>
 800c6cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6d0:	2d00      	cmp	r5, #0
 800c6d2:	da03      	bge.n	800c6dc <_printf_i+0xd0>
 800c6d4:	232d      	movs	r3, #45	@ 0x2d
 800c6d6:	426d      	negs	r5, r5
 800c6d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6dc:	4859      	ldr	r0, [pc, #356]	@ (800c844 <_printf_i+0x238>)
 800c6de:	230a      	movs	r3, #10
 800c6e0:	e011      	b.n	800c706 <_printf_i+0xfa>
 800c6e2:	6821      	ldr	r1, [r4, #0]
 800c6e4:	6833      	ldr	r3, [r6, #0]
 800c6e6:	0608      	lsls	r0, r1, #24
 800c6e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6ec:	d402      	bmi.n	800c6f4 <_printf_i+0xe8>
 800c6ee:	0649      	lsls	r1, r1, #25
 800c6f0:	bf48      	it	mi
 800c6f2:	b2ad      	uxthmi	r5, r5
 800c6f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c6f6:	4853      	ldr	r0, [pc, #332]	@ (800c844 <_printf_i+0x238>)
 800c6f8:	6033      	str	r3, [r6, #0]
 800c6fa:	bf14      	ite	ne
 800c6fc:	230a      	movne	r3, #10
 800c6fe:	2308      	moveq	r3, #8
 800c700:	2100      	movs	r1, #0
 800c702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c706:	6866      	ldr	r6, [r4, #4]
 800c708:	60a6      	str	r6, [r4, #8]
 800c70a:	2e00      	cmp	r6, #0
 800c70c:	bfa2      	ittt	ge
 800c70e:	6821      	ldrge	r1, [r4, #0]
 800c710:	f021 0104 	bicge.w	r1, r1, #4
 800c714:	6021      	strge	r1, [r4, #0]
 800c716:	b90d      	cbnz	r5, 800c71c <_printf_i+0x110>
 800c718:	2e00      	cmp	r6, #0
 800c71a:	d04b      	beq.n	800c7b4 <_printf_i+0x1a8>
 800c71c:	4616      	mov	r6, r2
 800c71e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c722:	fb03 5711 	mls	r7, r3, r1, r5
 800c726:	5dc7      	ldrb	r7, [r0, r7]
 800c728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c72c:	462f      	mov	r7, r5
 800c72e:	42bb      	cmp	r3, r7
 800c730:	460d      	mov	r5, r1
 800c732:	d9f4      	bls.n	800c71e <_printf_i+0x112>
 800c734:	2b08      	cmp	r3, #8
 800c736:	d10b      	bne.n	800c750 <_printf_i+0x144>
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	07df      	lsls	r7, r3, #31
 800c73c:	d508      	bpl.n	800c750 <_printf_i+0x144>
 800c73e:	6923      	ldr	r3, [r4, #16]
 800c740:	6861      	ldr	r1, [r4, #4]
 800c742:	4299      	cmp	r1, r3
 800c744:	bfde      	ittt	le
 800c746:	2330      	movle	r3, #48	@ 0x30
 800c748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c74c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c750:	1b92      	subs	r2, r2, r6
 800c752:	6122      	str	r2, [r4, #16]
 800c754:	f8cd a000 	str.w	sl, [sp]
 800c758:	464b      	mov	r3, r9
 800c75a:	aa03      	add	r2, sp, #12
 800c75c:	4621      	mov	r1, r4
 800c75e:	4640      	mov	r0, r8
 800c760:	f7ff fee6 	bl	800c530 <_printf_common>
 800c764:	3001      	adds	r0, #1
 800c766:	d14a      	bne.n	800c7fe <_printf_i+0x1f2>
 800c768:	f04f 30ff 	mov.w	r0, #4294967295
 800c76c:	b004      	add	sp, #16
 800c76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c772:	6823      	ldr	r3, [r4, #0]
 800c774:	f043 0320 	orr.w	r3, r3, #32
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	4833      	ldr	r0, [pc, #204]	@ (800c848 <_printf_i+0x23c>)
 800c77c:	2778      	movs	r7, #120	@ 0x78
 800c77e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	6831      	ldr	r1, [r6, #0]
 800c786:	061f      	lsls	r7, r3, #24
 800c788:	f851 5b04 	ldr.w	r5, [r1], #4
 800c78c:	d402      	bmi.n	800c794 <_printf_i+0x188>
 800c78e:	065f      	lsls	r7, r3, #25
 800c790:	bf48      	it	mi
 800c792:	b2ad      	uxthmi	r5, r5
 800c794:	6031      	str	r1, [r6, #0]
 800c796:	07d9      	lsls	r1, r3, #31
 800c798:	bf44      	itt	mi
 800c79a:	f043 0320 	orrmi.w	r3, r3, #32
 800c79e:	6023      	strmi	r3, [r4, #0]
 800c7a0:	b11d      	cbz	r5, 800c7aa <_printf_i+0x19e>
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	e7ac      	b.n	800c700 <_printf_i+0xf4>
 800c7a6:	4827      	ldr	r0, [pc, #156]	@ (800c844 <_printf_i+0x238>)
 800c7a8:	e7e9      	b.n	800c77e <_printf_i+0x172>
 800c7aa:	6823      	ldr	r3, [r4, #0]
 800c7ac:	f023 0320 	bic.w	r3, r3, #32
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	e7f6      	b.n	800c7a2 <_printf_i+0x196>
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	e7bd      	b.n	800c734 <_printf_i+0x128>
 800c7b8:	6833      	ldr	r3, [r6, #0]
 800c7ba:	6825      	ldr	r5, [r4, #0]
 800c7bc:	6961      	ldr	r1, [r4, #20]
 800c7be:	1d18      	adds	r0, r3, #4
 800c7c0:	6030      	str	r0, [r6, #0]
 800c7c2:	062e      	lsls	r6, r5, #24
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	d501      	bpl.n	800c7cc <_printf_i+0x1c0>
 800c7c8:	6019      	str	r1, [r3, #0]
 800c7ca:	e002      	b.n	800c7d2 <_printf_i+0x1c6>
 800c7cc:	0668      	lsls	r0, r5, #25
 800c7ce:	d5fb      	bpl.n	800c7c8 <_printf_i+0x1bc>
 800c7d0:	8019      	strh	r1, [r3, #0]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	6123      	str	r3, [r4, #16]
 800c7d6:	4616      	mov	r6, r2
 800c7d8:	e7bc      	b.n	800c754 <_printf_i+0x148>
 800c7da:	6833      	ldr	r3, [r6, #0]
 800c7dc:	1d1a      	adds	r2, r3, #4
 800c7de:	6032      	str	r2, [r6, #0]
 800c7e0:	681e      	ldr	r6, [r3, #0]
 800c7e2:	6862      	ldr	r2, [r4, #4]
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f7f3 fd82 	bl	80002f0 <memchr>
 800c7ec:	b108      	cbz	r0, 800c7f2 <_printf_i+0x1e6>
 800c7ee:	1b80      	subs	r0, r0, r6
 800c7f0:	6060      	str	r0, [r4, #4]
 800c7f2:	6863      	ldr	r3, [r4, #4]
 800c7f4:	6123      	str	r3, [r4, #16]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7fc:	e7aa      	b.n	800c754 <_printf_i+0x148>
 800c7fe:	6923      	ldr	r3, [r4, #16]
 800c800:	4632      	mov	r2, r6
 800c802:	4649      	mov	r1, r9
 800c804:	4640      	mov	r0, r8
 800c806:	47d0      	blx	sl
 800c808:	3001      	adds	r0, #1
 800c80a:	d0ad      	beq.n	800c768 <_printf_i+0x15c>
 800c80c:	6823      	ldr	r3, [r4, #0]
 800c80e:	079b      	lsls	r3, r3, #30
 800c810:	d413      	bmi.n	800c83a <_printf_i+0x22e>
 800c812:	68e0      	ldr	r0, [r4, #12]
 800c814:	9b03      	ldr	r3, [sp, #12]
 800c816:	4298      	cmp	r0, r3
 800c818:	bfb8      	it	lt
 800c81a:	4618      	movlt	r0, r3
 800c81c:	e7a6      	b.n	800c76c <_printf_i+0x160>
 800c81e:	2301      	movs	r3, #1
 800c820:	4632      	mov	r2, r6
 800c822:	4649      	mov	r1, r9
 800c824:	4640      	mov	r0, r8
 800c826:	47d0      	blx	sl
 800c828:	3001      	adds	r0, #1
 800c82a:	d09d      	beq.n	800c768 <_printf_i+0x15c>
 800c82c:	3501      	adds	r5, #1
 800c82e:	68e3      	ldr	r3, [r4, #12]
 800c830:	9903      	ldr	r1, [sp, #12]
 800c832:	1a5b      	subs	r3, r3, r1
 800c834:	42ab      	cmp	r3, r5
 800c836:	dcf2      	bgt.n	800c81e <_printf_i+0x212>
 800c838:	e7eb      	b.n	800c812 <_printf_i+0x206>
 800c83a:	2500      	movs	r5, #0
 800c83c:	f104 0619 	add.w	r6, r4, #25
 800c840:	e7f5      	b.n	800c82e <_printf_i+0x222>
 800c842:	bf00      	nop
 800c844:	0800c9a9 	.word	0x0800c9a9
 800c848:	0800c9ba 	.word	0x0800c9ba

0800c84c <memmove>:
 800c84c:	4288      	cmp	r0, r1
 800c84e:	b510      	push	{r4, lr}
 800c850:	eb01 0402 	add.w	r4, r1, r2
 800c854:	d902      	bls.n	800c85c <memmove+0x10>
 800c856:	4284      	cmp	r4, r0
 800c858:	4623      	mov	r3, r4
 800c85a:	d807      	bhi.n	800c86c <memmove+0x20>
 800c85c:	1e43      	subs	r3, r0, #1
 800c85e:	42a1      	cmp	r1, r4
 800c860:	d008      	beq.n	800c874 <memmove+0x28>
 800c862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c86a:	e7f8      	b.n	800c85e <memmove+0x12>
 800c86c:	4402      	add	r2, r0
 800c86e:	4601      	mov	r1, r0
 800c870:	428a      	cmp	r2, r1
 800c872:	d100      	bne.n	800c876 <memmove+0x2a>
 800c874:	bd10      	pop	{r4, pc}
 800c876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c87e:	e7f7      	b.n	800c870 <memmove+0x24>

0800c880 <_sbrk_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4d06      	ldr	r5, [pc, #24]	@ (800c89c <_sbrk_r+0x1c>)
 800c884:	2300      	movs	r3, #0
 800c886:	4604      	mov	r4, r0
 800c888:	4608      	mov	r0, r1
 800c88a:	602b      	str	r3, [r5, #0]
 800c88c:	f7f4 fea4 	bl	80015d8 <_sbrk>
 800c890:	1c43      	adds	r3, r0, #1
 800c892:	d102      	bne.n	800c89a <_sbrk_r+0x1a>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	b103      	cbz	r3, 800c89a <_sbrk_r+0x1a>
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	bd38      	pop	{r3, r4, r5, pc}
 800c89c:	24000c98 	.word	0x24000c98

0800c8a0 <memcpy>:
 800c8a0:	440a      	add	r2, r1
 800c8a2:	4291      	cmp	r1, r2
 800c8a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8a8:	d100      	bne.n	800c8ac <memcpy+0xc>
 800c8aa:	4770      	bx	lr
 800c8ac:	b510      	push	{r4, lr}
 800c8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8b6:	4291      	cmp	r1, r2
 800c8b8:	d1f9      	bne.n	800c8ae <memcpy+0xe>
 800c8ba:	bd10      	pop	{r4, pc}

0800c8bc <_realloc_r>:
 800c8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c0:	4680      	mov	r8, r0
 800c8c2:	4615      	mov	r5, r2
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	b921      	cbnz	r1, 800c8d2 <_realloc_r+0x16>
 800c8c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	f7ff bc4b 	b.w	800c168 <_malloc_r>
 800c8d2:	b92a      	cbnz	r2, 800c8e0 <_realloc_r+0x24>
 800c8d4:	f7ff fbdc 	bl	800c090 <_free_r>
 800c8d8:	2400      	movs	r4, #0
 800c8da:	4620      	mov	r0, r4
 800c8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e0:	f000 f81a 	bl	800c918 <_malloc_usable_size_r>
 800c8e4:	4285      	cmp	r5, r0
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	d802      	bhi.n	800c8f0 <_realloc_r+0x34>
 800c8ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c8ee:	d8f4      	bhi.n	800c8da <_realloc_r+0x1e>
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	f7ff fc38 	bl	800c168 <_malloc_r>
 800c8f8:	4607      	mov	r7, r0
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d0ec      	beq.n	800c8d8 <_realloc_r+0x1c>
 800c8fe:	42b5      	cmp	r5, r6
 800c900:	462a      	mov	r2, r5
 800c902:	4621      	mov	r1, r4
 800c904:	bf28      	it	cs
 800c906:	4632      	movcs	r2, r6
 800c908:	f7ff ffca 	bl	800c8a0 <memcpy>
 800c90c:	4621      	mov	r1, r4
 800c90e:	4640      	mov	r0, r8
 800c910:	f7ff fbbe 	bl	800c090 <_free_r>
 800c914:	463c      	mov	r4, r7
 800c916:	e7e0      	b.n	800c8da <_realloc_r+0x1e>

0800c918 <_malloc_usable_size_r>:
 800c918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c91c:	1f18      	subs	r0, r3, #4
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfbc      	itt	lt
 800c922:	580b      	ldrlt	r3, [r1, r0]
 800c924:	18c0      	addlt	r0, r0, r3
 800c926:	4770      	bx	lr

0800c928 <_init>:
 800c928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92a:	bf00      	nop
 800c92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92e:	bc08      	pop	{r3}
 800c930:	469e      	mov	lr, r3
 800c932:	4770      	bx	lr

0800c934 <_fini>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	bf00      	nop
 800c938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c93a:	bc08      	pop	{r3}
 800c93c:	469e      	mov	lr, r3
 800c93e:	4770      	bx	lr
