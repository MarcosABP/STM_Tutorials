
Tutorial_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c680  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800c920  0800c920  0000d920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c9ac  0800c9ac  0000d9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c9b4  0800c9b4  0000d9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c9b8  0800c9b8  0000d9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800c9bc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800ca20  0000e064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800ca80  0000e0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b84  24000124  0800cae0  0000e124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ca8  0800cae0  0000eca8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cd1  00000000  00000000  0000e152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d06  00000000  00000000  00027e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0002ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc3  00000000  00000000  0002bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037f8c  00000000  00000000  0002c873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017741  00000000  00000000  000647ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00161331  00000000  00000000  0007bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dd271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af4  00000000  00000000  001dd2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001e1da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c908 	.word	0x0800c908

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800c908 	.word	0x0800c908

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <piscaLED>:
int ledCount = 0;
volatile int isSending = 0;
volatile uint8_t counter_received = 0;
volatile uint8_t tabela_received = 0;

void piscaLED(int count) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	@ 0x30
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < count; i++) {
 8000688:	2300      	movs	r3, #0
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800068c:	e012      	b.n	80006b4 <piscaLED+0x34>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // Liga/Desliga LED
 800068e:	2101      	movs	r1, #1
 8000690:	481f      	ldr	r0, [pc, #124]	@ (8000710 <piscaLED+0x90>)
 8000692:	f005 f98a 	bl	80059aa <HAL_GPIO_TogglePin>
        HAL_Delay(500);  // 1 Hz
 8000696:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800069a:	f001 f907 	bl	80018ac <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // Desliga
 800069e:	2101      	movs	r1, #1
 80006a0:	481b      	ldr	r0, [pc, #108]	@ (8000710 <piscaLED+0x90>)
 80006a2:	f005 f982 	bl	80059aa <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 80006a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006aa:	f001 f8ff 	bl	80018ac <HAL_Delay>
    for (int i = 0; i < count; i++) {
 80006ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006b0:	3301      	adds	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbe8      	blt.n	800068e <piscaLED+0xe>
    }
    char msg[30];
    sprintf(msg, "\nNumero de eventos = %d", count);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	4914      	ldr	r1, [pc, #80]	@ (8000714 <piscaLED+0x94>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f00b fc7f 	bl	800bfc8 <siprintf>
    HAL_UART_Transmit_IT(&huart3, (uint8_t *)msg, strlen(msg));
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fe06 	bl	80002e0 <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	480e      	ldr	r0, [pc, #56]	@ (8000718 <piscaLED+0x98>)
 80006e0:	f008 f9b4 	bl	8008a4c <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 80006e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e8:	f001 f8e0 	bl	80018ac <HAL_Delay>
    HAL_UART_Transmit_IT(&huart3, (uint8_t *)tabelaEquipe, sizeof(tabelaEquipe));
 80006ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80006f0:	490a      	ldr	r1, [pc, #40]	@ (800071c <piscaLED+0x9c>)
 80006f2:	4809      	ldr	r0, [pc, #36]	@ (8000718 <piscaLED+0x98>)
 80006f4:	f008 f9aa 	bl	8008a4c <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 80006f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006fc:	f001 f8d6 	bl	80018ac <HAL_Delay>
    isSending = 0;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <piscaLED+0xa0>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	3730      	adds	r7, #48	@ 0x30
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	58020400 	.word	0x58020400
 8000714:	0800c920 	.word	0x0800c920
 8000718:	240002bc 	.word	0x240002bc
 800071c:	24000a18 	.word	0x24000a18
 8000720:	24000b48 	.word	0x24000b48

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f001 f82e 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f830 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 f9f8 	bl	8000b24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000734:	f000 f9be 	bl	8000ab4 <MX_DMA_Init>
  MX_ETH_Init();
 8000738:	f000 f8a6 	bl	8000888 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800073c:	f000 f988 	bl	8000a50 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000740:	f000 f8ee 	bl	8000920 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000744:	f000 f938 	bl	80009b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &counter, sizeof(counter));
 8000748:	2201      	movs	r2, #1
 800074a:	490d      	ldr	r1, [pc, #52]	@ (8000780 <main+0x5c>)
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <main+0x60>)
 800074e:	f008 fa11 	bl	8008b74 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Receive_IT(&huart2, &counter, sizeof(counter));
 8000752:	2201      	movs	r2, #1
 8000754:	490a      	ldr	r1, [pc, #40]	@ (8000780 <main+0x5c>)
 8000756:	480b      	ldr	r0, [pc, #44]	@ (8000784 <main+0x60>)
 8000758:	f008 fa0c 	bl	8008b74 <HAL_UART_Receive_IT>

	if (ledCount > 0) {
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <main+0x64>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	ddf6      	ble.n	8000752 <main+0x2e>
	   isSending = 1;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <main+0x68>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
	   init_receive_DMA();
 800076a:	f000 fb25 	bl	8000db8 <init_receive_DMA>
	   piscaLED(ledCount);
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <main+0x64>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff84 	bl	8000680 <piscaLED>
	   ledCount = 0;
 8000778:	4b03      	ldr	r3, [pc, #12]	@ (8000788 <main+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &counter, sizeof(counter));
 800077e:	e7e8      	b.n	8000752 <main+0x2e>
 8000780:	24000a14 	.word	0x24000a14
 8000784:	24000228 	.word	0x24000228
 8000788:	24000b44 	.word	0x24000b44
 800078c:	24000b48 	.word	0x24000b48

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b09c      	sub	sp, #112	@ 0x70
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079a:	224c      	movs	r2, #76	@ 0x4c
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f00b fc32 	bl	800c008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2220      	movs	r2, #32
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00b fc2c 	bl	800c008 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f005 fa5f 	bl	8005c74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <SystemClock_Config+0xf0>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	4a30      	ldr	r2, [pc, #192]	@ (8000880 <SystemClock_Config+0xf0>)
 80007c0:	f023 0301 	bic.w	r3, r3, #1
 80007c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <SystemClock_Config+0xf0>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000884 <SystemClock_Config+0xf4>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000884 <SystemClock_Config+0xf4>)
 80007da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <SystemClock_Config+0xf4>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ec:	bf00      	nop
 80007ee:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <SystemClock_Config+0xf4>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007fa:	d1f8      	bne.n	80007ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fc:	2301      	movs	r3, #1
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000800:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080a:	2302      	movs	r3, #2
 800080c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800080e:	2301      	movs	r3, #1
 8000810:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000812:	232a      	movs	r3, #42	@ 0x2a
 8000814:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800081a:	2306      	movs	r3, #6
 800081c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000822:	230c      	movs	r3, #12
 8000824:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000826:	2300      	movs	r3, #0
 8000828:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000832:	4618      	mov	r0, r3
 8000834:	f005 fa68 	bl	8005d08 <HAL_RCC_OscConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800083e:	f000 fafd 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000842:	233f      	movs	r3, #63	@ 0x3f
 8000844:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	2303      	movs	r3, #3
 8000848:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000852:	2340      	movs	r3, #64	@ 0x40
 8000854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000856:	2350      	movs	r3, #80	@ 0x50
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800085a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800085e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000860:	2340      	movs	r3, #64	@ 0x40
 8000862:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2103      	movs	r1, #3
 8000868:	4618      	mov	r0, r3
 800086a:	f005 fea7 	bl	80065bc <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000874:	f000 fae2 	bl	8000e3c <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3770      	adds	r7, #112	@ 0x70
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	58000400 	.word	0x58000400
 8000884:	58024800 	.word	0x58024800

08000888 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800088c:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_ETH_Init+0x80>)
 800088e:	4a1f      	ldr	r2, [pc, #124]	@ (800090c <MX_ETH_Init+0x84>)
 8000890:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <MX_ETH_Init+0x88>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000898:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_ETH_Init+0x88>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800089e:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <MX_ETH_Init+0x88>)
 80008a0:	22e1      	movs	r2, #225	@ 0xe1
 80008a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_ETH_Init+0x88>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <MX_ETH_Init+0x88>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_ETH_Init+0x88>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_ETH_Init+0x80>)
 80008b8:	4a15      	ldr	r2, [pc, #84]	@ (8000910 <MX_ETH_Init+0x88>)
 80008ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_ETH_Init+0x80>)
 80008be:	2201      	movs	r2, #1
 80008c0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_ETH_Init+0x80>)
 80008c4:	4a13      	ldr	r2, [pc, #76]	@ (8000914 <MX_ETH_Init+0x8c>)
 80008c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_ETH_Init+0x80>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <MX_ETH_Init+0x90>)
 80008cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_ETH_Init+0x80>)
 80008d0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008d6:	480c      	ldr	r0, [pc, #48]	@ (8000908 <MX_ETH_Init+0x80>)
 80008d8:	f004 f960 	bl	8004b9c <HAL_ETH_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008e2:	f000 faab 	bl	8000e3c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008e6:	2238      	movs	r2, #56	@ 0x38
 80008e8:	2100      	movs	r1, #0
 80008ea:	480c      	ldr	r0, [pc, #48]	@ (800091c <MX_ETH_Init+0x94>)
 80008ec:	f00b fb8c 	bl	800c008 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <MX_ETH_Init+0x94>)
 80008f2:	2221      	movs	r2, #33	@ 0x21
 80008f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_ETH_Init+0x94>)
 80008f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008fe:	4b07      	ldr	r3, [pc, #28]	@ (800091c <MX_ETH_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	24000178 	.word	0x24000178
 800090c:	40028000 	.word	0x40028000
 8000910:	24000b50 	.word	0x24000b50
 8000914:	240000c4 	.word	0x240000c4
 8000918:	24000064 	.word	0x24000064
 800091c:	24000140 	.word	0x24000140

08000920 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 8000926:	4a23      	ldr	r2, [pc, #140]	@ (80009b4 <MX_USART2_UART_Init+0x94>)
 8000928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092a:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000968:	4811      	ldr	r0, [pc, #68]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 800096a:	f007 ffdf 	bl	800892c <HAL_UART_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 fa62 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 800097c:	f00a ff51 	bl	800b822 <HAL_UARTEx_SetTxFifoThreshold>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 fa59 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4808      	ldr	r0, [pc, #32]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 800098e:	f00a ff86 	bl	800b89e <HAL_UARTEx_SetRxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 fa50 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <MX_USART2_UART_Init+0x90>)
 800099e:	f00a ff07 	bl	800b7b0 <HAL_UARTEx_DisableFifoMode>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 fa48 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24000228 	.word	0x24000228
 80009b4:	40004400 	.word	0x40004400

080009b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	@ (8000a4c <MX_USART3_UART_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c2:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a02:	f007 ff93 	bl	800892c <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 fa16 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a14:	f00a ff05 	bl	800b822 <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 fa0d 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a26:	f00a ff3a 	bl	800b89e <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 fa04 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a36:	f00a febb 	bl	800b7b0 <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f9fc 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	240002bc 	.word	0x240002bc
 8000a4c:	40004800 	.word	0x40004800

08000a50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a56:	4a16      	ldr	r2, [pc, #88]	@ (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5c:	2209      	movs	r2, #9
 8000a5e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a98:	f004 ffbb 	bl	8005a12 <HAL_PCD_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000aa2:	f000 f9cb 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	24000530 	.word	0x24000530
 8000ab0:	40080000 	.word	0x40080000

08000ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <MX_DMA_Init+0x6c>)
 8000abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ac0:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <MX_DMA_Init+0x6c>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <MX_DMA_Init+0x6c>)
 8000acc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	200b      	movs	r0, #11
 8000ade:	f001 f828 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ae2:	200b      	movs	r0, #11
 8000ae4:	f001 f83f 	bl	8001b66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	200c      	movs	r0, #12
 8000aee:	f001 f820 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000af2:	200c      	movs	r0, #12
 8000af4:	f001 f837 	bl	8001b66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	200d      	movs	r0, #13
 8000afe:	f001 f818 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b02:	200d      	movs	r0, #13
 8000b04:	f001 f82f 	bl	8001b66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	200e      	movs	r0, #14
 8000b0e:	f001 f810 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b12:	200e      	movs	r0, #14
 8000b14:	f001 f827 	bl	8001b66 <HAL_NVIC_EnableIRQ>

}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	58024400 	.word	0x58024400

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	@ 0x30
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b40:	4a6b      	ldr	r2, [pc, #428]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4a:	4b69      	ldr	r3, [pc, #420]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b58:	4b65      	ldr	r3, [pc, #404]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5e:	4a64      	ldr	r2, [pc, #400]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b68:	4b61      	ldr	r3, [pc, #388]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b5e      	ldr	r3, [pc, #376]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a5c      	ldr	r2, [pc, #368]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b86:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b94:	4b56      	ldr	r3, [pc, #344]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	4a55      	ldr	r2, [pc, #340]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba4:	4b52      	ldr	r3, [pc, #328]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb8:	4a4d      	ldr	r2, [pc, #308]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd0:	4b47      	ldr	r3, [pc, #284]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	4a46      	ldr	r2, [pc, #280]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be0:	4b43      	ldr	r3, [pc, #268]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	4b40      	ldr	r3, [pc, #256]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf4:	4a3e      	ldr	r2, [pc, #248]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c12:	4838      	ldr	r0, [pc, #224]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000c14:	f004 feb0 	bl	8005978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c1e:	4836      	ldr	r0, [pc, #216]	@ (8000cf8 <MX_GPIO_Init+0x1d4>)
 8000c20:	f004 feaa 	bl	8005978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2102      	movs	r1, #2
 8000c28:	4834      	ldr	r0, [pc, #208]	@ (8000cfc <MX_GPIO_Init+0x1d8>)
 8000c2a:	f004 fea5 	bl	8005978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c34:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	482e      	ldr	r0, [pc, #184]	@ (8000d00 <MX_GPIO_Init+0x1dc>)
 8000c46:	f004 fbdd 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4824      	ldr	r0, [pc, #144]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000c62:	f004 fbcf 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481d      	ldr	r0, [pc, #116]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000c80:	f004 fbc0 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4816      	ldr	r0, [pc, #88]	@ (8000cf8 <MX_GPIO_Init+0x1d4>)
 8000c9e:	f004 fbb1 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4813      	ldr	r0, [pc, #76]	@ (8000d04 <MX_GPIO_Init+0x1e0>)
 8000cb8:	f004 fba4 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480a      	ldr	r0, [pc, #40]	@ (8000cfc <MX_GPIO_Init+0x1d8>)
 8000cd4:	f004 fb96 	bl	8005404 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2028      	movs	r0, #40	@ 0x28
 8000cde:	f000 ff28 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ce2:	2028      	movs	r0, #40	@ 0x28
 8000ce4:	f000 ff3f 	bl	8001b66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce8:	bf00      	nop
 8000cea:	3730      	adds	r7, #48	@ 0x30
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58020400 	.word	0x58020400
 8000cf8:	58020c00 	.word	0x58020c00
 8000cfc:	58021000 	.word	0x58021000
 8000d00:	58020800 	.word	0x58020800
 8000d04:	58021800 	.word	0x58021800

08000d08 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13 && !isSending) {
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d18:	d108      	bne.n	8000d2c <HAL_GPIO_EXTI_Callback+0x24>
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d104      	bne.n	8000d2c <HAL_GPIO_EXTI_Callback+0x24>
    	HAL_UART_Transmit_IT(&huart2, &txData, sizeof(txData));
 8000d22:	2201      	movs	r2, #1
 8000d24:	4904      	ldr	r1, [pc, #16]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0x30>)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0x34>)
 8000d28:	f007 fe90 	bl	8008a4c <HAL_UART_Transmit_IT>
    }
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	24000b48 	.word	0x24000b48
 8000d38:	24000000 	.word	0x24000000
 8000d3c:	24000228 	.word	0x24000228

08000d40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a16      	ldr	r2, [pc, #88]	@ (8000da4 <HAL_UART_RxCpltCallback+0x64>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d124      	bne.n	8000d9a <HAL_UART_RxCpltCallback+0x5a>
        if (!counter_received) {
 8000d50:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_UART_RxCpltCallback+0x68>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10c      	bne.n	8000d74 <HAL_UART_RxCpltCallback+0x34>
        	if (counter > 0){
 8000d5a:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <HAL_UART_RxCpltCallback+0x6c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d01b      	beq.n	8000d9a <HAL_UART_RxCpltCallback+0x5a>
            ledCount = counter;
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_UART_RxCpltCallback+0x6c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <HAL_UART_RxCpltCallback+0x70>)
 8000d6a:	601a      	str	r2, [r3, #0]
            counter_received = 1;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_UART_RxCpltCallback+0x68>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
            counter_received = 0;
            tabela_received = 0;
            HAL_UART_Receive_IT(&huart2, &counter, sizeof(counter));
        }
    }
}
 8000d72:	e012      	b.n	8000d9a <HAL_UART_RxCpltCallback+0x5a>
        } else if (!tabela_received) {
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <HAL_UART_RxCpltCallback+0x74>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10d      	bne.n	8000d9a <HAL_UART_RxCpltCallback+0x5a>
            tabela_received = 1;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <HAL_UART_RxCpltCallback+0x74>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
            counter_received = 0;
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <HAL_UART_RxCpltCallback+0x68>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
            tabela_received = 0;
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <HAL_UART_RxCpltCallback+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart2, &counter, sizeof(counter));
 8000d90:	2201      	movs	r2, #1
 8000d92:	4906      	ldr	r1, [pc, #24]	@ (8000dac <HAL_UART_RxCpltCallback+0x6c>)
 8000d94:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <HAL_UART_RxCpltCallback+0x64>)
 8000d96:	f007 feed 	bl	8008b74 <HAL_UART_Receive_IT>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	24000228 	.word	0x24000228
 8000da8:	24000b4c 	.word	0x24000b4c
 8000dac:	24000a14 	.word	0x24000a14
 8000db0:	24000b44 	.word	0x24000b44
 8000db4:	24000b4d 	.word	0x24000b4d

08000db8 <init_receive_DMA>:


void init_receive_DMA(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
	if (counter_received) {
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <init_receive_DMA+0x3c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d010      	beq.n	8000dea <init_receive_DMA+0x32>
	restart_uart(&huart2);
 8000dc8:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <init_receive_DMA+0x40>)
 8000dca:	f000 f819 	bl	8000e00 <restart_uart>
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)tabelaEquipe, sizeof(tabelaEquipe));
 8000dce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000dd2:	490a      	ldr	r1, [pc, #40]	@ (8000dfc <init_receive_DMA+0x44>)
 8000dd4:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <init_receive_DMA+0x40>)
 8000dd6:	f007 ff19 	bl	8008c0c <HAL_UART_Receive_DMA>
	uint8_t readyToReceive = 0x5A;
 8000dda:	235a      	movs	r3, #90	@ 0x5a
 8000ddc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit_IT(&huart2, &readyToReceive, sizeof(readyToReceive));
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <init_receive_DMA+0x40>)
 8000de6:	f007 fe31 	bl	8008a4c <HAL_UART_Transmit_IT>

	}
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	24000b4c 	.word	0x24000b4c
 8000df8:	24000228 	.word	0x24000228
 8000dfc:	24000a18 	.word	0x24000a18

08000e00 <restart_uart>:


void restart_uart(UART_HandleTypeDef *huart) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
                __HAL_UART_DISABLE(huart);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0201 	bic.w	r2, r2, #1
 8000e16:	601a      	str	r2, [r3, #0]

                HAL_UART_DeInit(huart);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f007 fdd7 	bl	80089cc <HAL_UART_DeInit>
                HAL_UART_Init(huart);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f007 fd84 	bl	800892c <HAL_UART_Init>

                __HAL_UART_ENABLE(huart);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0201 	orr.w	r2, r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <Error_Handler+0x8>

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_MspInit+0x30>)
 8000e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e54:	4a08      	ldr	r2, [pc, #32]	@ (8000e78 <HAL_MspInit+0x30>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_MspInit+0x30>)
 8000e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	58024400 	.word	0x58024400

08000e7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	@ 0x38
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a59      	ldr	r2, [pc, #356]	@ (8001000 <HAL_ETH_MspInit+0x184>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	f040 80ab 	bne.w	8000ff6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ea0:	4b58      	ldr	r3, [pc, #352]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea6:	4a57      	ldr	r2, [pc, #348]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eb0:	4b54      	ldr	r3, [pc, #336]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ebe:	4b51      	ldr	r3, [pc, #324]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000ec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec4:	4a4f      	ldr	r2, [pc, #316]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ece:	4b4d      	ldr	r3, [pc, #308]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000ed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000edc:	4b49      	ldr	r3, [pc, #292]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee2:	4a48      	ldr	r2, [pc, #288]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eec:	4b45      	ldr	r3, [pc, #276]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b42      	ldr	r3, [pc, #264]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f00:	4a40      	ldr	r2, [pc, #256]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b3a      	ldr	r3, [pc, #232]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	4a39      	ldr	r2, [pc, #228]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f28:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b33      	ldr	r3, [pc, #204]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	4a31      	ldr	r2, [pc, #196]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f46:	4b2f      	ldr	r3, [pc, #188]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f54:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f72:	2332      	movs	r3, #50	@ 0x32
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f82:	230b      	movs	r3, #11
 8000f84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481e      	ldr	r0, [pc, #120]	@ (8001008 <HAL_ETH_MspInit+0x18c>)
 8000f8e:	f004 fa39 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f92:	2386      	movs	r3, #134	@ 0x86
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa2:	230b      	movs	r3, #11
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	4817      	ldr	r0, [pc, #92]	@ (800100c <HAL_ETH_MspInit+0x190>)
 8000fae:	f004 fa29 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc4:	230b      	movs	r3, #11
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4810      	ldr	r0, [pc, #64]	@ (8001010 <HAL_ETH_MspInit+0x194>)
 8000fd0:	f004 fa18 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fd4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4808      	ldr	r0, [pc, #32]	@ (8001014 <HAL_ETH_MspInit+0x198>)
 8000ff2:	f004 fa07 	bl	8005404 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3738      	adds	r7, #56	@ 0x38
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40028000 	.word	0x40028000
 8001004:	58024400 	.word	0x58024400
 8001008:	58020800 	.word	0x58020800
 800100c:	58020000 	.word	0x58020000
 8001010:	58020400 	.word	0x58020400
 8001014:	58021800 	.word	0x58021800

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0bc      	sub	sp, #240	@ 0xf0
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	22c0      	movs	r2, #192	@ 0xc0
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00a ffe5 	bl	800c008 <memset>
  if(huart->Instance==USART2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4ab1      	ldr	r2, [pc, #708]	@ (8001308 <HAL_UART_MspInit+0x2f0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	f040 80aa 	bne.w	800119e <HAL_UART_MspInit+0x186>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800104a:	f04f 0202 	mov.w	r2, #2
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	4618      	mov	r0, r3
 8001062:	f005 fe37 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800106c:	f7ff fee6 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001070:	4ba6      	ldr	r3, [pc, #664]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 8001072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001076:	4aa5      	ldr	r2, [pc, #660]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800107c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001080:	4ba2      	ldr	r3, [pc, #648]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 8001082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	4b9f      	ldr	r3, [pc, #636]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	4a9d      	ldr	r2, [pc, #628]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109e:	4b9b      	ldr	r3, [pc, #620]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010ac:	2360      	movs	r3, #96	@ 0x60
 80010ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c4:	2307      	movs	r3, #7
 80010c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010ce:	4619      	mov	r1, r3
 80010d0:	488f      	ldr	r0, [pc, #572]	@ (8001310 <HAL_UART_MspInit+0x2f8>)
 80010d2:	f004 f997 	bl	8005404 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream0;
 80010d6:	4b8f      	ldr	r3, [pc, #572]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 80010d8:	4a8f      	ldr	r2, [pc, #572]	@ (8001318 <HAL_UART_MspInit+0x300>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010dc:	4b8d      	ldr	r3, [pc, #564]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 80010de:	222c      	movs	r2, #44	@ 0x2c
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 80010e4:	2240      	movs	r2, #64	@ 0x40
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e8:	4b8a      	ldr	r3, [pc, #552]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ee:	4b89      	ldr	r3, [pc, #548]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f6:	4b87      	ldr	r3, [pc, #540]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fc:	4b85      	ldr	r3, [pc, #532]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001102:	4b84      	ldr	r3, [pc, #528]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001108:	4b82      	ldr	r3, [pc, #520]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110e:	4b81      	ldr	r3, [pc, #516]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001114:	487f      	ldr	r0, [pc, #508]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 8001116:	f000 fd4f 	bl	8001bb8 <HAL_DMA_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001120:	f7ff fe8c 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a7b      	ldr	r2, [pc, #492]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 8001128:	67da      	str	r2, [r3, #124]	@ 0x7c
 800112a:	4a7a      	ldr	r2, [pc, #488]	@ (8001314 <HAL_UART_MspInit+0x2fc>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8001130:	4b7a      	ldr	r3, [pc, #488]	@ (800131c <HAL_UART_MspInit+0x304>)
 8001132:	4a7b      	ldr	r2, [pc, #492]	@ (8001320 <HAL_UART_MspInit+0x308>)
 8001134:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001136:	4b79      	ldr	r3, [pc, #484]	@ (800131c <HAL_UART_MspInit+0x304>)
 8001138:	222b      	movs	r2, #43	@ 0x2b
 800113a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113c:	4b77      	ldr	r3, [pc, #476]	@ (800131c <HAL_UART_MspInit+0x304>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001142:	4b76      	ldr	r3, [pc, #472]	@ (800131c <HAL_UART_MspInit+0x304>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001148:	4b74      	ldr	r3, [pc, #464]	@ (800131c <HAL_UART_MspInit+0x304>)
 800114a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001150:	4b72      	ldr	r3, [pc, #456]	@ (800131c <HAL_UART_MspInit+0x304>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001156:	4b71      	ldr	r3, [pc, #452]	@ (800131c <HAL_UART_MspInit+0x304>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800115c:	4b6f      	ldr	r3, [pc, #444]	@ (800131c <HAL_UART_MspInit+0x304>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001162:	4b6e      	ldr	r3, [pc, #440]	@ (800131c <HAL_UART_MspInit+0x304>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001168:	4b6c      	ldr	r3, [pc, #432]	@ (800131c <HAL_UART_MspInit+0x304>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800116e:	486b      	ldr	r0, [pc, #428]	@ (800131c <HAL_UART_MspInit+0x304>)
 8001170:	f000 fd22 	bl	8001bb8 <HAL_DMA_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800117a:	f7ff fe5f 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a66      	ldr	r2, [pc, #408]	@ (800131c <HAL_UART_MspInit+0x304>)
 8001182:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001186:	4a65      	ldr	r2, [pc, #404]	@ (800131c <HAL_UART_MspInit+0x304>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2026      	movs	r0, #38	@ 0x26
 8001192:	f000 fcce 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001196:	2026      	movs	r0, #38	@ 0x26
 8001198:	f000 fce5 	bl	8001b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800119c:	e0af      	b.n	80012fe <HAL_UART_MspInit+0x2e6>
  else if(huart->Instance==USART3)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a60      	ldr	r2, [pc, #384]	@ (8001324 <HAL_UART_MspInit+0x30c>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f040 80aa 	bne.w	80012fe <HAL_UART_MspInit+0x2e6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011aa:	f04f 0202 	mov.w	r2, #2
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	4618      	mov	r0, r3
 80011c2:	f005 fd87 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80011cc:	f7ff fe36 	bl	8000e3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011d0:	4b4e      	ldr	r3, [pc, #312]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 80011d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011d6:	4a4d      	ldr	r2, [pc, #308]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011e0:	4b4a      	ldr	r3, [pc, #296]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 80011e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	4b47      	ldr	r3, [pc, #284]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f4:	4a45      	ldr	r2, [pc, #276]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fe:	4b43      	ldr	r3, [pc, #268]	@ (800130c <HAL_UART_MspInit+0x2f4>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800120c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001210:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001220:	2302      	movs	r3, #2
 8001222:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001226:	2307      	movs	r3, #7
 8001228:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800122c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001230:	4619      	mov	r1, r3
 8001232:	4837      	ldr	r0, [pc, #220]	@ (8001310 <HAL_UART_MspInit+0x2f8>)
 8001234:	f004 f8e6 	bl	8005404 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8001238:	4b3b      	ldr	r3, [pc, #236]	@ (8001328 <HAL_UART_MspInit+0x310>)
 800123a:	4a3c      	ldr	r2, [pc, #240]	@ (800132c <HAL_UART_MspInit+0x314>)
 800123c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800123e:	4b3a      	ldr	r3, [pc, #232]	@ (8001328 <HAL_UART_MspInit+0x310>)
 8001240:	222d      	movs	r2, #45	@ 0x2d
 8001242:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001244:	4b38      	ldr	r3, [pc, #224]	@ (8001328 <HAL_UART_MspInit+0x310>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124a:	4b37      	ldr	r3, [pc, #220]	@ (8001328 <HAL_UART_MspInit+0x310>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001250:	4b35      	ldr	r3, [pc, #212]	@ (8001328 <HAL_UART_MspInit+0x310>)
 8001252:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001256:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001258:	4b33      	ldr	r3, [pc, #204]	@ (8001328 <HAL_UART_MspInit+0x310>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800125e:	4b32      	ldr	r3, [pc, #200]	@ (8001328 <HAL_UART_MspInit+0x310>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001264:	4b30      	ldr	r3, [pc, #192]	@ (8001328 <HAL_UART_MspInit+0x310>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800126a:	4b2f      	ldr	r3, [pc, #188]	@ (8001328 <HAL_UART_MspInit+0x310>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001270:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <HAL_UART_MspInit+0x310>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001276:	482c      	ldr	r0, [pc, #176]	@ (8001328 <HAL_UART_MspInit+0x310>)
 8001278:	f000 fc9e 	bl	8001bb8 <HAL_DMA_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8001282:	f7ff fddb 	bl	8000e3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a27      	ldr	r2, [pc, #156]	@ (8001328 <HAL_UART_MspInit+0x310>)
 800128a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800128e:	4a26      	ldr	r2, [pc, #152]	@ (8001328 <HAL_UART_MspInit+0x310>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001294:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <HAL_UART_MspInit+0x318>)
 8001296:	4a27      	ldr	r2, [pc, #156]	@ (8001334 <HAL_UART_MspInit+0x31c>)
 8001298:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800129a:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <HAL_UART_MspInit+0x318>)
 800129c:	222e      	movs	r2, #46	@ 0x2e
 800129e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a0:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012a2:	2240      	movs	r2, #64	@ 0x40
 80012a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a6:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ac:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012d2:	4817      	ldr	r0, [pc, #92]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012d4:	f000 fc70 	bl	8001bb8 <HAL_DMA_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 80012de:	f7ff fdad 	bl	8000e3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012e6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80012e8:	4a11      	ldr	r2, [pc, #68]	@ (8001330 <HAL_UART_MspInit+0x318>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2027      	movs	r0, #39	@ 0x27
 80012f4:	f000 fc1d 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012f8:	2027      	movs	r0, #39	@ 0x27
 80012fa:	f000 fc34 	bl	8001b66 <HAL_NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	37f0      	adds	r7, #240	@ 0xf0
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40004400 	.word	0x40004400
 800130c:	58024400 	.word	0x58024400
 8001310:	58020c00 	.word	0x58020c00
 8001314:	24000350 	.word	0x24000350
 8001318:	40020010 	.word	0x40020010
 800131c:	240003c8 	.word	0x240003c8
 8001320:	40020028 	.word	0x40020028
 8001324:	40004800 	.word	0x40004800
 8001328:	24000440 	.word	0x24000440
 800132c:	40020040 	.word	0x40020040
 8001330:	240004b8 	.word	0x240004b8
 8001334:	40020058 	.word	0x40020058

08001338 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a20      	ldr	r2, [pc, #128]	@ (80013c8 <HAL_UART_MspDeInit+0x90>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d11a      	bne.n	8001380 <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800134a:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <HAL_UART_MspDeInit+0x94>)
 800134c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001350:	4a1e      	ldr	r2, [pc, #120]	@ (80013cc <HAL_UART_MspDeInit+0x94>)
 8001352:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001356:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 800135a:	2160      	movs	r1, #96	@ 0x60
 800135c:	481c      	ldr	r0, [pc, #112]	@ (80013d0 <HAL_UART_MspDeInit+0x98>)
 800135e:	f004 fa01 	bl	8005764 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001366:	4618      	mov	r0, r3
 8001368:	f000 ff82 	bl	8002270 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001372:	4618      	mov	r0, r3
 8001374:	f000 ff7c 	bl	8002270 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001378:	2026      	movs	r0, #38	@ 0x26
 800137a:	f000 fc02 	bl	8001b82 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800137e:	e01f      	b.n	80013c0 <HAL_UART_MspDeInit+0x88>
  else if(huart->Instance==USART3)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a13      	ldr	r2, [pc, #76]	@ (80013d4 <HAL_UART_MspDeInit+0x9c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d11a      	bne.n	80013c0 <HAL_UART_MspDeInit+0x88>
    __HAL_RCC_USART3_CLK_DISABLE();
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <HAL_UART_MspDeInit+0x94>)
 800138c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001390:	4a0e      	ldr	r2, [pc, #56]	@ (80013cc <HAL_UART_MspDeInit+0x94>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001396:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    HAL_GPIO_DeInit(GPIOD, STLINK_RX_Pin|STLINK_TX_Pin);
 800139a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800139e:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <HAL_UART_MspDeInit+0x98>)
 80013a0:	f004 f9e0 	bl	8005764 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 ff60 	bl	8002270 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 ff5b 	bl	8002270 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80013ba:	2027      	movs	r0, #39	@ 0x27
 80013bc:	f000 fbe1 	bl	8001b82 <HAL_NVIC_DisableIRQ>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40004400 	.word	0x40004400
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58020c00 	.word	0x58020c00
 80013d4:	40004800 	.word	0x40004800

080013d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0ba      	sub	sp, #232	@ 0xe8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	22c0      	movs	r2, #192	@ 0xc0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00a fe05 	bl	800c008 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a30      	ldr	r2, [pc, #192]	@ (80014c4 <HAL_PCD_MspInit+0xec>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d159      	bne.n	80014bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001408:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001414:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4618      	mov	r0, r3
 8001422:	f005 fc57 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800142c:	f7ff fd06 	bl	8000e3c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001430:	f004 fc5a 	bl	8005ce8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <HAL_PCD_MspInit+0xf0>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143a:	4a23      	ldr	r2, [pc, #140]	@ (80014c8 <HAL_PCD_MspInit+0xf0>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001444:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <HAL_PCD_MspInit+0xf0>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001452:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800146c:	230a      	movs	r3, #10
 800146e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001476:	4619      	mov	r1, r3
 8001478:	4814      	ldr	r0, [pc, #80]	@ (80014cc <HAL_PCD_MspInit+0xf4>)
 800147a:	f003 ffc3 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800147e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001482:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <HAL_PCD_MspInit+0xf4>)
 800149a:	f003 ffb3 	bl	8005404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800149e:	4b0a      	ldr	r3, [pc, #40]	@ (80014c8 <HAL_PCD_MspInit+0xf0>)
 80014a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014a4:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <HAL_PCD_MspInit+0xf0>)
 80014a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_PCD_MspInit+0xf0>)
 80014b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80014bc:	bf00      	nop
 80014be:	37e8      	adds	r7, #232	@ 0xe8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40080000 	.word	0x40080000
 80014c8:	58024400 	.word	0x58024400
 80014cc:	58020000 	.word	0x58020000

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <NMI_Handler+0x4>

080014d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <MemManage_Handler+0x4>

080014e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001526:	f000 f9a1 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DMA1_Stream0_IRQHandler+0x10>)
 8001536:	f002 f81f 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	24000350 	.word	0x24000350

08001544 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <DMA1_Stream1_IRQHandler+0x10>)
 800154a:	f002 f815 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	240003c8 	.word	0x240003c8

08001558 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <DMA1_Stream2_IRQHandler+0x10>)
 800155e:	f002 f80b 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	24000440 	.word	0x24000440

0800156c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <DMA1_Stream3_IRQHandler+0x10>)
 8001572:	f002 f801 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	240004b8 	.word	0x240004b8

08001580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001584:	4802      	ldr	r0, [pc, #8]	@ (8001590 <USART2_IRQHandler+0x10>)
 8001586:	f007 fb8d 	bl	8008ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24000228 	.word	0x24000228

08001594 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001598:	4802      	ldr	r0, [pc, #8]	@ (80015a4 <USART3_IRQHandler+0x10>)
 800159a:	f007 fb83 	bl	8008ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	240002bc 	.word	0x240002bc

080015a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015b0:	f004 fa15 	bl	80059de <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	@ (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f00a fd16 	bl	800c018 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	@ (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	@ (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	24080000 	.word	0x24080000
 8001618:	00000400 	.word	0x00000400
 800161c:	24000b58 	.word	0x24000b58
 8001620:	24000ca8 	.word	0x24000ca8

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001628:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <SystemInit+0xe4>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	4a36      	ldr	r2, [pc, #216]	@ (8001708 <SystemInit+0xe4>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001638:	4b34      	ldr	r3, [pc, #208]	@ (800170c <SystemInit+0xe8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	2b06      	cmp	r3, #6
 8001642:	d807      	bhi.n	8001654 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001644:	4b31      	ldr	r3, [pc, #196]	@ (800170c <SystemInit+0xe8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 030f 	bic.w	r3, r3, #15
 800164c:	4a2f      	ldr	r2, [pc, #188]	@ (800170c <SystemInit+0xe8>)
 800164e:	f043 0307 	orr.w	r3, r3, #7
 8001652:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001654:	4b2e      	ldr	r3, [pc, #184]	@ (8001710 <SystemInit+0xec>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a2d      	ldr	r2, [pc, #180]	@ (8001710 <SystemInit+0xec>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001660:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <SystemInit+0xec>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <SystemInit+0xec>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4929      	ldr	r1, [pc, #164]	@ (8001710 <SystemInit+0xec>)
 800166c:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <SystemInit+0xf0>)
 800166e:	4013      	ands	r3, r2
 8001670:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001672:	4b26      	ldr	r3, [pc, #152]	@ (800170c <SystemInit+0xe8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800167e:	4b23      	ldr	r3, [pc, #140]	@ (800170c <SystemInit+0xe8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 030f 	bic.w	r3, r3, #15
 8001686:	4a21      	ldr	r2, [pc, #132]	@ (800170c <SystemInit+0xe8>)
 8001688:	f043 0307 	orr.w	r3, r3, #7
 800168c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <SystemInit+0xec>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001694:	4b1e      	ldr	r3, [pc, #120]	@ (8001710 <SystemInit+0xec>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800169a:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <SystemInit+0xec>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <SystemInit+0xec>)
 80016a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001718 <SystemInit+0xf4>)
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <SystemInit+0xec>)
 80016a8:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <SystemInit+0xf8>)
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <SystemInit+0xec>)
 80016ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001720 <SystemInit+0xfc>)
 80016b0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016b2:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <SystemInit+0xec>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <SystemInit+0xec>)
 80016ba:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <SystemInit+0xfc>)
 80016bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <SystemInit+0xec>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <SystemInit+0xec>)
 80016c6:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <SystemInit+0xfc>)
 80016c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <SystemInit+0xec>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <SystemInit+0xec>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <SystemInit+0xec>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <SystemInit+0xec>)
 80016de:	2200      	movs	r2, #0
 80016e0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <SystemInit+0x100>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <SystemInit+0x104>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016ee:	d202      	bcs.n	80016f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <SystemInit+0x108>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <SystemInit+0x10c>)
 80016f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	52002000 	.word	0x52002000
 8001710:	58024400 	.word	0x58024400
 8001714:	eaf6ed7f 	.word	0xeaf6ed7f
 8001718:	02020200 	.word	0x02020200
 800171c:	01ff0000 	.word	0x01ff0000
 8001720:	01010280 	.word	0x01010280
 8001724:	5c001000 	.word	0x5c001000
 8001728:	ffff0000 	.word	0xffff0000
 800172c:	51008108 	.word	0x51008108
 8001730:	52004000 	.word	0x52004000

08001734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800176c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001738:	f7ff ff74 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	@ (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	@ (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	@ (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001762:	f00a fc5f 	bl	800c024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001766:	f7fe ffdd 	bl	8000724 <main>
  bx  lr
 800176a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800176c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001770:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001774:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001778:	0800c9bc 	.word	0x0800c9bc
  ldr r2, =_sbss
 800177c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001780:	24000ca8 	.word	0x24000ca8

08001784 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC3_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178e:	2003      	movs	r0, #3
 8001790:	f000 f9c4 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001794:	f005 f8c8 	bl	8006928 <HAL_RCC_GetSysClockFreq>
 8001798:	4602      	mov	r2, r0
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_Init+0x68>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	4913      	ldr	r1, [pc, #76]	@ (80017f4 <HAL_Init+0x6c>)
 80017a6:	5ccb      	ldrb	r3, [r1, r3]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
 80017b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_Init+0x68>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	4a0e      	ldr	r2, [pc, #56]	@ (80017f4 <HAL_Init+0x6c>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
 80017c8:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <HAL_Init+0x70>)
 80017ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017cc:	4a0b      	ldr	r2, [pc, #44]	@ (80017fc <HAL_Init+0x74>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f814 	bl	8001800 <HAL_InitTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e002      	b.n	80017e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017e2:	f7ff fb31 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	58024400 	.word	0x58024400
 80017f4:	0800c938 	.word	0x0800c938
 80017f8:	24000008 	.word	0x24000008
 80017fc:	24000004 	.word	0x24000004

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_InitTick+0x60>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e021      	b.n	8001858 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001814:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <HAL_InitTick+0x64>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_InitTick+0x60>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f9b7 	bl	8001b9e <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f973 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_InitTick+0x68>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000010 	.word	0x24000010
 8001864:	24000004 	.word	0x24000004
 8001868:	2400000c 	.word	0x2400000c

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	24000010 	.word	0x24000010
 8001890:	24000b5c 	.word	0x24000b5c

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	24000b5c 	.word	0x24000b5c

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	24000010 	.word	0x24000010

080018f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <HAL_GetREVID+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0c1b      	lsrs	r3, r3, #16
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	5c001000 	.word	0x5c001000

0800190c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800191c:	4904      	ldr	r1, [pc, #16]	@ (8001930 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	58000400 	.word	0x58000400

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <__NVIC_SetPriorityGrouping+0x40>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	4313      	orrs	r3, r2
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <__NVIC_SetPriorityGrouping+0x40>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00
 8001978:	05fa0000 	.word	0x05fa0000

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db0b      	blt.n	80019c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	4907      	ldr	r1, [pc, #28]	@ (80019d0 <__NVIC_EnableIRQ+0x38>)
 80019b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2001      	movs	r0, #1
 80019ba:	fa00 f202 	lsl.w	r2, r0, r2
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db12      	blt.n	8001a0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	490a      	ldr	r1, [pc, #40]	@ (8001a18 <__NVIC_DisableIRQ+0x44>)
 80019ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	3320      	adds	r3, #32
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a00:	f3bf 8f4f 	dsb	sy
}
 8001a04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a06:	f3bf 8f6f 	isb	sy
}
 8001a0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	@ (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	@ (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	@ 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	@ 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff8e 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff05 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b40:	f7ff ff1c 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f7ff ff90 	bl	8001a70 <NVIC_EncodePriority>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff5f 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff0f 	bl	8001998 <__NVIC_EnableIRQ>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff1f 	bl	80019d4 <__NVIC_DisableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff96 	bl	8001ad8 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff fe68 	bl	8001894 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e316      	b.n	80021fe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a66      	ldr	r2, [pc, #408]	@ (8001d70 <HAL_DMA_Init+0x1b8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d04a      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a65      	ldr	r2, [pc, #404]	@ (8001d74 <HAL_DMA_Init+0x1bc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d045      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a63      	ldr	r2, [pc, #396]	@ (8001d78 <HAL_DMA_Init+0x1c0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d040      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a62      	ldr	r2, [pc, #392]	@ (8001d7c <HAL_DMA_Init+0x1c4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d03b      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a60      	ldr	r2, [pc, #384]	@ (8001d80 <HAL_DMA_Init+0x1c8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d036      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a5f      	ldr	r2, [pc, #380]	@ (8001d84 <HAL_DMA_Init+0x1cc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d031      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5d      	ldr	r2, [pc, #372]	@ (8001d88 <HAL_DMA_Init+0x1d0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d02c      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a5c      	ldr	r2, [pc, #368]	@ (8001d8c <HAL_DMA_Init+0x1d4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d027      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a5a      	ldr	r2, [pc, #360]	@ (8001d90 <HAL_DMA_Init+0x1d8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d022      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a59      	ldr	r2, [pc, #356]	@ (8001d94 <HAL_DMA_Init+0x1dc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d01d      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a57      	ldr	r2, [pc, #348]	@ (8001d98 <HAL_DMA_Init+0x1e0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d018      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a56      	ldr	r2, [pc, #344]	@ (8001d9c <HAL_DMA_Init+0x1e4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d013      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a54      	ldr	r2, [pc, #336]	@ (8001da0 <HAL_DMA_Init+0x1e8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00e      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a53      	ldr	r2, [pc, #332]	@ (8001da4 <HAL_DMA_Init+0x1ec>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d009      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a51      	ldr	r2, [pc, #324]	@ (8001da8 <HAL_DMA_Init+0x1f0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d004      	beq.n	8001c70 <HAL_DMA_Init+0xb8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a50      	ldr	r2, [pc, #320]	@ (8001dac <HAL_DMA_Init+0x1f4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_DMA_Init+0xbc>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_DMA_Init+0xbe>
 8001c74:	2300      	movs	r3, #0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 813b 	beq.w	8001ef2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a37      	ldr	r2, [pc, #220]	@ (8001d70 <HAL_DMA_Init+0x1b8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d04a      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a36      	ldr	r2, [pc, #216]	@ (8001d74 <HAL_DMA_Init+0x1bc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d045      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a34      	ldr	r2, [pc, #208]	@ (8001d78 <HAL_DMA_Init+0x1c0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d040      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a33      	ldr	r2, [pc, #204]	@ (8001d7c <HAL_DMA_Init+0x1c4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d03b      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a31      	ldr	r2, [pc, #196]	@ (8001d80 <HAL_DMA_Init+0x1c8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d036      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a30      	ldr	r2, [pc, #192]	@ (8001d84 <HAL_DMA_Init+0x1cc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d031      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8001d88 <HAL_DMA_Init+0x1d0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d02c      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d8c <HAL_DMA_Init+0x1d4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d027      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <HAL_DMA_Init+0x1d8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d022      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2a      	ldr	r2, [pc, #168]	@ (8001d94 <HAL_DMA_Init+0x1dc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d01d      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a28      	ldr	r2, [pc, #160]	@ (8001d98 <HAL_DMA_Init+0x1e0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d018      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a27      	ldr	r2, [pc, #156]	@ (8001d9c <HAL_DMA_Init+0x1e4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d013      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a25      	ldr	r2, [pc, #148]	@ (8001da0 <HAL_DMA_Init+0x1e8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00e      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a24      	ldr	r2, [pc, #144]	@ (8001da4 <HAL_DMA_Init+0x1ec>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d009      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a22      	ldr	r2, [pc, #136]	@ (8001da8 <HAL_DMA_Init+0x1f0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_DMA_Init+0x174>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a21      	ldr	r2, [pc, #132]	@ (8001dac <HAL_DMA_Init+0x1f4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d108      	bne.n	8001d3e <HAL_DMA_Init+0x186>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e007      	b.n	8001d4e <HAL_DMA_Init+0x196>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d4e:	e02f      	b.n	8001db0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d50:	f7ff fda0 	bl	8001894 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d928      	bls.n	8001db0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2203      	movs	r2, #3
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e246      	b.n	80021fe <HAL_DMA_Init+0x646>
 8001d70:	40020010 	.word	0x40020010
 8001d74:	40020028 	.word	0x40020028
 8001d78:	40020040 	.word	0x40020040
 8001d7c:	40020058 	.word	0x40020058
 8001d80:	40020070 	.word	0x40020070
 8001d84:	40020088 	.word	0x40020088
 8001d88:	400200a0 	.word	0x400200a0
 8001d8c:	400200b8 	.word	0x400200b8
 8001d90:	40020410 	.word	0x40020410
 8001d94:	40020428 	.word	0x40020428
 8001d98:	40020440 	.word	0x40020440
 8001d9c:	40020458 	.word	0x40020458
 8001da0:	40020470 	.word	0x40020470
 8001da4:	40020488 	.word	0x40020488
 8001da8:	400204a0 	.word	0x400204a0
 8001dac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1c8      	bne.n	8001d50 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4b83      	ldr	r3, [pc, #524]	@ (8001fd8 <HAL_DMA_Init+0x420>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001dd6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d107      	bne.n	8001e14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001e14:	4b71      	ldr	r3, [pc, #452]	@ (8001fdc <HAL_DMA_Init+0x424>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b71      	ldr	r3, [pc, #452]	@ (8001fe0 <HAL_DMA_Init+0x428>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e20:	d328      	bcc.n	8001e74 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b28      	cmp	r3, #40	@ 0x28
 8001e28:	d903      	bls.n	8001e32 <HAL_DMA_Init+0x27a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e30:	d917      	bls.n	8001e62 <HAL_DMA_Init+0x2aa>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e38:	d903      	bls.n	8001e42 <HAL_DMA_Init+0x28a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b42      	cmp	r3, #66	@ 0x42
 8001e40:	d90f      	bls.n	8001e62 <HAL_DMA_Init+0x2aa>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b46      	cmp	r3, #70	@ 0x46
 8001e48:	d903      	bls.n	8001e52 <HAL_DMA_Init+0x29a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b48      	cmp	r3, #72	@ 0x48
 8001e50:	d907      	bls.n	8001e62 <HAL_DMA_Init+0x2aa>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b4e      	cmp	r3, #78	@ 0x4e
 8001e58:	d905      	bls.n	8001e66 <HAL_DMA_Init+0x2ae>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b52      	cmp	r3, #82	@ 0x52
 8001e60:	d801      	bhi.n	8001e66 <HAL_DMA_Init+0x2ae>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_DMA_Init+0x2b0>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e72:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f023 0307 	bic.w	r3, r3, #7
 8001e8a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d117      	bne.n	8001ece <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00e      	beq.n	8001ece <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f002 fce9 	bl	8004888 <DMA_CheckFifoParam>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2240      	movs	r2, #64	@ 0x40
 8001ec0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e197      	b.n	80021fe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f002 fc24 	bl	8004724 <DMA_CalcBaseAndBitshift>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	223f      	movs	r2, #63	@ 0x3f
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	e0cd      	b.n	800208e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8001fe4 <HAL_DMA_Init+0x42c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d022      	beq.n	8001f42 <HAL_DMA_Init+0x38a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a39      	ldr	r2, [pc, #228]	@ (8001fe8 <HAL_DMA_Init+0x430>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01d      	beq.n	8001f42 <HAL_DMA_Init+0x38a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a38      	ldr	r2, [pc, #224]	@ (8001fec <HAL_DMA_Init+0x434>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d018      	beq.n	8001f42 <HAL_DMA_Init+0x38a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a36      	ldr	r2, [pc, #216]	@ (8001ff0 <HAL_DMA_Init+0x438>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_DMA_Init+0x38a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a35      	ldr	r2, [pc, #212]	@ (8001ff4 <HAL_DMA_Init+0x43c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00e      	beq.n	8001f42 <HAL_DMA_Init+0x38a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a33      	ldr	r2, [pc, #204]	@ (8001ff8 <HAL_DMA_Init+0x440>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_DMA_Init+0x38a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a32      	ldr	r2, [pc, #200]	@ (8001ffc <HAL_DMA_Init+0x444>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d004      	beq.n	8001f42 <HAL_DMA_Init+0x38a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a30      	ldr	r2, [pc, #192]	@ (8002000 <HAL_DMA_Init+0x448>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_DMA_Init+0x38e>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_DMA_Init+0x390>
 8001f46:	2300      	movs	r3, #0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8097 	beq.w	800207c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a24      	ldr	r2, [pc, #144]	@ (8001fe4 <HAL_DMA_Init+0x42c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d021      	beq.n	8001f9c <HAL_DMA_Init+0x3e4>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a22      	ldr	r2, [pc, #136]	@ (8001fe8 <HAL_DMA_Init+0x430>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01c      	beq.n	8001f9c <HAL_DMA_Init+0x3e4>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <HAL_DMA_Init+0x434>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d017      	beq.n	8001f9c <HAL_DMA_Init+0x3e4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_DMA_Init+0x438>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d012      	beq.n	8001f9c <HAL_DMA_Init+0x3e4>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff4 <HAL_DMA_Init+0x43c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00d      	beq.n	8001f9c <HAL_DMA_Init+0x3e4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <HAL_DMA_Init+0x440>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d008      	beq.n	8001f9c <HAL_DMA_Init+0x3e4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ffc <HAL_DMA_Init+0x444>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <HAL_DMA_Init+0x3e4>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_DMA_Init+0x448>)
 8001f9a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <HAL_DMA_Init+0x44c>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b40      	cmp	r3, #64	@ 0x40
 8001fc2:	d021      	beq.n	8002008 <HAL_DMA_Init+0x450>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b80      	cmp	r3, #128	@ 0x80
 8001fca:	d102      	bne.n	8001fd2 <HAL_DMA_Init+0x41a>
 8001fcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fd0:	e01b      	b.n	800200a <HAL_DMA_Init+0x452>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e019      	b.n	800200a <HAL_DMA_Init+0x452>
 8001fd6:	bf00      	nop
 8001fd8:	fe10803f 	.word	0xfe10803f
 8001fdc:	5c001000 	.word	0x5c001000
 8001fe0:	ffff0000 	.word	0xffff0000
 8001fe4:	58025408 	.word	0x58025408
 8001fe8:	5802541c 	.word	0x5802541c
 8001fec:	58025430 	.word	0x58025430
 8001ff0:	58025444 	.word	0x58025444
 8001ff4:	58025458 	.word	0x58025458
 8001ff8:	5802546c 	.word	0x5802546c
 8001ffc:	58025480 	.word	0x58025480
 8002000:	58025494 	.word	0x58025494
 8002004:	fffe000f 	.word	0xfffe000f
 8002008:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68d2      	ldr	r2, [r2, #12]
 800200e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002018:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002020:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002028:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002030:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002038:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b6e      	ldr	r3, [pc, #440]	@ (8002208 <HAL_DMA_Init+0x650>)
 8002050:	4413      	add	r3, r2
 8002052:	4a6e      	ldr	r2, [pc, #440]	@ (800220c <HAL_DMA_Init+0x654>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	009a      	lsls	r2, r3, #2
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f002 fb5f 	bl	8004724 <DMA_CalcBaseAndBitshift>
 8002066:	4603      	mov	r3, r0
 8002068:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	2201      	movs	r2, #1
 8002074:	409a      	lsls	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	e008      	b.n	800208e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2240      	movs	r2, #64	@ 0x40
 8002080:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2203      	movs	r2, #3
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0b7      	b.n	80021fe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a5f      	ldr	r2, [pc, #380]	@ (8002210 <HAL_DMA_Init+0x658>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d072      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a5d      	ldr	r2, [pc, #372]	@ (8002214 <HAL_DMA_Init+0x65c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d06d      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002218 <HAL_DMA_Init+0x660>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d068      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a5a      	ldr	r2, [pc, #360]	@ (800221c <HAL_DMA_Init+0x664>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d063      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a59      	ldr	r2, [pc, #356]	@ (8002220 <HAL_DMA_Init+0x668>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d05e      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a57      	ldr	r2, [pc, #348]	@ (8002224 <HAL_DMA_Init+0x66c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d059      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a56      	ldr	r2, [pc, #344]	@ (8002228 <HAL_DMA_Init+0x670>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d054      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a54      	ldr	r2, [pc, #336]	@ (800222c <HAL_DMA_Init+0x674>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d04f      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a53      	ldr	r2, [pc, #332]	@ (8002230 <HAL_DMA_Init+0x678>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04a      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a51      	ldr	r2, [pc, #324]	@ (8002234 <HAL_DMA_Init+0x67c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d045      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a50      	ldr	r2, [pc, #320]	@ (8002238 <HAL_DMA_Init+0x680>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d040      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a4e      	ldr	r2, [pc, #312]	@ (800223c <HAL_DMA_Init+0x684>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d03b      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a4d      	ldr	r2, [pc, #308]	@ (8002240 <HAL_DMA_Init+0x688>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d036      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a4b      	ldr	r2, [pc, #300]	@ (8002244 <HAL_DMA_Init+0x68c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d031      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a4a      	ldr	r2, [pc, #296]	@ (8002248 <HAL_DMA_Init+0x690>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d02c      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a48      	ldr	r2, [pc, #288]	@ (800224c <HAL_DMA_Init+0x694>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d027      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a47      	ldr	r2, [pc, #284]	@ (8002250 <HAL_DMA_Init+0x698>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d022      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a45      	ldr	r2, [pc, #276]	@ (8002254 <HAL_DMA_Init+0x69c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01d      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a44      	ldr	r2, [pc, #272]	@ (8002258 <HAL_DMA_Init+0x6a0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d018      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a42      	ldr	r2, [pc, #264]	@ (800225c <HAL_DMA_Init+0x6a4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a41      	ldr	r2, [pc, #260]	@ (8002260 <HAL_DMA_Init+0x6a8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00e      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a3f      	ldr	r2, [pc, #252]	@ (8002264 <HAL_DMA_Init+0x6ac>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a3e      	ldr	r2, [pc, #248]	@ (8002268 <HAL_DMA_Init+0x6b0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_DMA_Init+0x5c6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a3c      	ldr	r2, [pc, #240]	@ (800226c <HAL_DMA_Init+0x6b4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_DMA_Init+0x5ca>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_DMA_Init+0x5cc>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d032      	beq.n	80021ee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f002 fbf9 	bl	8004980 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b80      	cmp	r3, #128	@ 0x80
 8002194:	d102      	bne.n	800219c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d010      	beq.n	80021dc <HAL_DMA_Init+0x624>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d80c      	bhi.n	80021dc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f002 fc76 	bl	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	e008      	b.n	80021ee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	a7fdabf8 	.word	0xa7fdabf8
 800220c:	cccccccd 	.word	0xcccccccd
 8002210:	40020010 	.word	0x40020010
 8002214:	40020028 	.word	0x40020028
 8002218:	40020040 	.word	0x40020040
 800221c:	40020058 	.word	0x40020058
 8002220:	40020070 	.word	0x40020070
 8002224:	40020088 	.word	0x40020088
 8002228:	400200a0 	.word	0x400200a0
 800222c:	400200b8 	.word	0x400200b8
 8002230:	40020410 	.word	0x40020410
 8002234:	40020428 	.word	0x40020428
 8002238:	40020440 	.word	0x40020440
 800223c:	40020458 	.word	0x40020458
 8002240:	40020470 	.word	0x40020470
 8002244:	40020488 	.word	0x40020488
 8002248:	400204a0 	.word	0x400204a0
 800224c:	400204b8 	.word	0x400204b8
 8002250:	58025408 	.word	0x58025408
 8002254:	5802541c 	.word	0x5802541c
 8002258:	58025430 	.word	0x58025430
 800225c:	58025444 	.word	0x58025444
 8002260:	58025458 	.word	0x58025458
 8002264:	5802546c 	.word	0x5802546c
 8002268:	58025480 	.word	0x58025480
 800226c:	58025494 	.word	0x58025494

08002270 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1a8      	b.n	80025d4 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a82      	ldr	r2, [pc, #520]	@ (8002490 <HAL_DMA_DeInit+0x220>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d04a      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a80      	ldr	r2, [pc, #512]	@ (8002494 <HAL_DMA_DeInit+0x224>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d045      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a7f      	ldr	r2, [pc, #508]	@ (8002498 <HAL_DMA_DeInit+0x228>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d040      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a7d      	ldr	r2, [pc, #500]	@ (800249c <HAL_DMA_DeInit+0x22c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d03b      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7c      	ldr	r2, [pc, #496]	@ (80024a0 <HAL_DMA_DeInit+0x230>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d036      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a7a      	ldr	r2, [pc, #488]	@ (80024a4 <HAL_DMA_DeInit+0x234>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d031      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a79      	ldr	r2, [pc, #484]	@ (80024a8 <HAL_DMA_DeInit+0x238>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d02c      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a77      	ldr	r2, [pc, #476]	@ (80024ac <HAL_DMA_DeInit+0x23c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d027      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a76      	ldr	r2, [pc, #472]	@ (80024b0 <HAL_DMA_DeInit+0x240>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d022      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a74      	ldr	r2, [pc, #464]	@ (80024b4 <HAL_DMA_DeInit+0x244>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01d      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a73      	ldr	r2, [pc, #460]	@ (80024b8 <HAL_DMA_DeInit+0x248>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d018      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a71      	ldr	r2, [pc, #452]	@ (80024bc <HAL_DMA_DeInit+0x24c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a70      	ldr	r2, [pc, #448]	@ (80024c0 <HAL_DMA_DeInit+0x250>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00e      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6e      	ldr	r2, [pc, #440]	@ (80024c4 <HAL_DMA_DeInit+0x254>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d009      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6d      	ldr	r2, [pc, #436]	@ (80024c8 <HAL_DMA_DeInit+0x258>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d004      	beq.n	8002322 <HAL_DMA_DeInit+0xb2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6b      	ldr	r2, [pc, #428]	@ (80024cc <HAL_DMA_DeInit+0x25c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d108      	bne.n	8002334 <HAL_DMA_DeInit+0xc4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e007      	b.n	8002344 <HAL_DMA_DeInit+0xd4>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a51      	ldr	r2, [pc, #324]	@ (8002490 <HAL_DMA_DeInit+0x220>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d04a      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a50      	ldr	r2, [pc, #320]	@ (8002494 <HAL_DMA_DeInit+0x224>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d045      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a4e      	ldr	r2, [pc, #312]	@ (8002498 <HAL_DMA_DeInit+0x228>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d040      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a4d      	ldr	r2, [pc, #308]	@ (800249c <HAL_DMA_DeInit+0x22c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d03b      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a4b      	ldr	r2, [pc, #300]	@ (80024a0 <HAL_DMA_DeInit+0x230>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d036      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a4a      	ldr	r2, [pc, #296]	@ (80024a4 <HAL_DMA_DeInit+0x234>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d031      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a48      	ldr	r2, [pc, #288]	@ (80024a8 <HAL_DMA_DeInit+0x238>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d02c      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a47      	ldr	r2, [pc, #284]	@ (80024ac <HAL_DMA_DeInit+0x23c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d027      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a45      	ldr	r2, [pc, #276]	@ (80024b0 <HAL_DMA_DeInit+0x240>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d022      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a44      	ldr	r2, [pc, #272]	@ (80024b4 <HAL_DMA_DeInit+0x244>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d01d      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a42      	ldr	r2, [pc, #264]	@ (80024b8 <HAL_DMA_DeInit+0x248>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d018      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a41      	ldr	r2, [pc, #260]	@ (80024bc <HAL_DMA_DeInit+0x24c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3f      	ldr	r2, [pc, #252]	@ (80024c0 <HAL_DMA_DeInit+0x250>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00e      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a3e      	ldr	r2, [pc, #248]	@ (80024c4 <HAL_DMA_DeInit+0x254>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a3c      	ldr	r2, [pc, #240]	@ (80024c8 <HAL_DMA_DeInit+0x258>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_DMA_DeInit+0x174>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a3b      	ldr	r2, [pc, #236]	@ (80024cc <HAL_DMA_DeInit+0x25c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_DMA_DeInit+0x178>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_DMA_DeInit+0x17a>
 80023e8:	2300      	movs	r3, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d025      	beq.n	800243a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2221      	movs	r2, #33	@ 0x21
 800241c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f002 f980 	bl	8004724 <DMA_CalcBaseAndBitshift>
 8002424:	4603      	mov	r3, r0
 8002426:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	223f      	movs	r2, #63	@ 0x3f
 8002432:	409a      	lsls	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	e081      	b.n	800253e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a24      	ldr	r2, [pc, #144]	@ (80024d0 <HAL_DMA_DeInit+0x260>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d022      	beq.n	800248a <HAL_DMA_DeInit+0x21a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a22      	ldr	r2, [pc, #136]	@ (80024d4 <HAL_DMA_DeInit+0x264>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01d      	beq.n	800248a <HAL_DMA_DeInit+0x21a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <HAL_DMA_DeInit+0x268>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d018      	beq.n	800248a <HAL_DMA_DeInit+0x21a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1f      	ldr	r2, [pc, #124]	@ (80024dc <HAL_DMA_DeInit+0x26c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_DMA_DeInit+0x21a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1e      	ldr	r2, [pc, #120]	@ (80024e0 <HAL_DMA_DeInit+0x270>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00e      	beq.n	800248a <HAL_DMA_DeInit+0x21a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <HAL_DMA_DeInit+0x274>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_DMA_DeInit+0x21a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1b      	ldr	r2, [pc, #108]	@ (80024e8 <HAL_DMA_DeInit+0x278>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_DMA_DeInit+0x21a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_DMA_DeInit+0x27c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d132      	bne.n	80024f0 <HAL_DMA_DeInit+0x280>
 800248a:	2301      	movs	r3, #1
 800248c:	e031      	b.n	80024f2 <HAL_DMA_DeInit+0x282>
 800248e:	bf00      	nop
 8002490:	40020010 	.word	0x40020010
 8002494:	40020028 	.word	0x40020028
 8002498:	40020040 	.word	0x40020040
 800249c:	40020058 	.word	0x40020058
 80024a0:	40020070 	.word	0x40020070
 80024a4:	40020088 	.word	0x40020088
 80024a8:	400200a0 	.word	0x400200a0
 80024ac:	400200b8 	.word	0x400200b8
 80024b0:	40020410 	.word	0x40020410
 80024b4:	40020428 	.word	0x40020428
 80024b8:	40020440 	.word	0x40020440
 80024bc:	40020458 	.word	0x40020458
 80024c0:	40020470 	.word	0x40020470
 80024c4:	40020488 	.word	0x40020488
 80024c8:	400204a0 	.word	0x400204a0
 80024cc:	400204b8 	.word	0x400204b8
 80024d0:	58025408 	.word	0x58025408
 80024d4:	5802541c 	.word	0x5802541c
 80024d8:	58025430 	.word	0x58025430
 80024dc:	58025444 	.word	0x58025444
 80024e0:	58025458 	.word	0x58025458
 80024e4:	5802546c 	.word	0x5802546c
 80024e8:	58025480 	.word	0x58025480
 80024ec:	58025494 	.word	0x58025494
 80024f0:	2300      	movs	r3, #0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d021      	beq.n	800253a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f002 f900 	bl	8004724 <DMA_CalcBaseAndBitshift>
 8002524:	4603      	mov	r3, r0
 8002526:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2201      	movs	r2, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	e001      	b.n	800253e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e04a      	b.n	80025d4 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f002 fa1e 	bl	8004980 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800255c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00f      	beq.n	8002586 <HAL_DMA_DeInit+0x316>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b08      	cmp	r3, #8
 800256c:	d80b      	bhi.n	8002586 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f002 faa0 	bl	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002584:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e226      	b.n	8002a46 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_DMA_Start_IT+0x2a>
 8002602:	2302      	movs	r3, #2
 8002604:	e21f      	b.n	8002a46 <HAL_DMA_Start_IT+0x46a>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	f040 820a 	bne.w	8002a30 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a68      	ldr	r2, [pc, #416]	@ (80027d0 <HAL_DMA_Start_IT+0x1f4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d04a      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a66      	ldr	r2, [pc, #408]	@ (80027d4 <HAL_DMA_Start_IT+0x1f8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d045      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a65      	ldr	r2, [pc, #404]	@ (80027d8 <HAL_DMA_Start_IT+0x1fc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d040      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a63      	ldr	r2, [pc, #396]	@ (80027dc <HAL_DMA_Start_IT+0x200>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d03b      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a62      	ldr	r2, [pc, #392]	@ (80027e0 <HAL_DMA_Start_IT+0x204>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d036      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a60      	ldr	r2, [pc, #384]	@ (80027e4 <HAL_DMA_Start_IT+0x208>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d031      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a5f      	ldr	r2, [pc, #380]	@ (80027e8 <HAL_DMA_Start_IT+0x20c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d02c      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a5d      	ldr	r2, [pc, #372]	@ (80027ec <HAL_DMA_Start_IT+0x210>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d027      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5c      	ldr	r2, [pc, #368]	@ (80027f0 <HAL_DMA_Start_IT+0x214>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5a      	ldr	r2, [pc, #360]	@ (80027f4 <HAL_DMA_Start_IT+0x218>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01d      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a59      	ldr	r2, [pc, #356]	@ (80027f8 <HAL_DMA_Start_IT+0x21c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d018      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a57      	ldr	r2, [pc, #348]	@ (80027fc <HAL_DMA_Start_IT+0x220>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a56      	ldr	r2, [pc, #344]	@ (8002800 <HAL_DMA_Start_IT+0x224>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00e      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a54      	ldr	r2, [pc, #336]	@ (8002804 <HAL_DMA_Start_IT+0x228>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a53      	ldr	r2, [pc, #332]	@ (8002808 <HAL_DMA_Start_IT+0x22c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_DMA_Start_IT+0xee>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a51      	ldr	r2, [pc, #324]	@ (800280c <HAL_DMA_Start_IT+0x230>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d108      	bne.n	80026dc <HAL_DMA_Start_IT+0x100>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e007      	b.n	80026ec <HAL_DMA_Start_IT+0x110>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f001 fe6a 	bl	80043cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a34      	ldr	r2, [pc, #208]	@ (80027d0 <HAL_DMA_Start_IT+0x1f4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d04a      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a33      	ldr	r2, [pc, #204]	@ (80027d4 <HAL_DMA_Start_IT+0x1f8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d045      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a31      	ldr	r2, [pc, #196]	@ (80027d8 <HAL_DMA_Start_IT+0x1fc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d040      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a30      	ldr	r2, [pc, #192]	@ (80027dc <HAL_DMA_Start_IT+0x200>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d03b      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2e      	ldr	r2, [pc, #184]	@ (80027e0 <HAL_DMA_Start_IT+0x204>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d036      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2d      	ldr	r2, [pc, #180]	@ (80027e4 <HAL_DMA_Start_IT+0x208>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d031      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2b      	ldr	r2, [pc, #172]	@ (80027e8 <HAL_DMA_Start_IT+0x20c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02c      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2a      	ldr	r2, [pc, #168]	@ (80027ec <HAL_DMA_Start_IT+0x210>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d027      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a28      	ldr	r2, [pc, #160]	@ (80027f0 <HAL_DMA_Start_IT+0x214>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d022      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a27      	ldr	r2, [pc, #156]	@ (80027f4 <HAL_DMA_Start_IT+0x218>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01d      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a25      	ldr	r2, [pc, #148]	@ (80027f8 <HAL_DMA_Start_IT+0x21c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d018      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <HAL_DMA_Start_IT+0x220>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a22      	ldr	r2, [pc, #136]	@ (8002800 <HAL_DMA_Start_IT+0x224>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00e      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a21      	ldr	r2, [pc, #132]	@ (8002804 <HAL_DMA_Start_IT+0x228>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1f      	ldr	r2, [pc, #124]	@ (8002808 <HAL_DMA_Start_IT+0x22c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_DMA_Start_IT+0x1bc>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1e      	ldr	r2, [pc, #120]	@ (800280c <HAL_DMA_Start_IT+0x230>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_DMA_Start_IT+0x1c0>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_DMA_Start_IT+0x1c2>
 800279c:	2300      	movs	r3, #0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d036      	beq.n	8002810 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 021e 	bic.w	r2, r3, #30
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0216 	orr.w	r2, r2, #22
 80027b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d03e      	beq.n	800283c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0208 	orr.w	r2, r2, #8
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	e035      	b.n	800283c <HAL_DMA_Start_IT+0x260>
 80027d0:	40020010 	.word	0x40020010
 80027d4:	40020028 	.word	0x40020028
 80027d8:	40020040 	.word	0x40020040
 80027dc:	40020058 	.word	0x40020058
 80027e0:	40020070 	.word	0x40020070
 80027e4:	40020088 	.word	0x40020088
 80027e8:	400200a0 	.word	0x400200a0
 80027ec:	400200b8 	.word	0x400200b8
 80027f0:	40020410 	.word	0x40020410
 80027f4:	40020428 	.word	0x40020428
 80027f8:	40020440 	.word	0x40020440
 80027fc:	40020458 	.word	0x40020458
 8002800:	40020470 	.word	0x40020470
 8002804:	40020488 	.word	0x40020488
 8002808:	400204a0 	.word	0x400204a0
 800280c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 020e 	bic.w	r2, r3, #14
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 020a 	orr.w	r2, r2, #10
 8002822:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0204 	orr.w	r2, r2, #4
 800283a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a83      	ldr	r2, [pc, #524]	@ (8002a50 <HAL_DMA_Start_IT+0x474>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d072      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a82      	ldr	r2, [pc, #520]	@ (8002a54 <HAL_DMA_Start_IT+0x478>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d06d      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a80      	ldr	r2, [pc, #512]	@ (8002a58 <HAL_DMA_Start_IT+0x47c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d068      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7f      	ldr	r2, [pc, #508]	@ (8002a5c <HAL_DMA_Start_IT+0x480>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d063      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a7d      	ldr	r2, [pc, #500]	@ (8002a60 <HAL_DMA_Start_IT+0x484>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d05e      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7c      	ldr	r2, [pc, #496]	@ (8002a64 <HAL_DMA_Start_IT+0x488>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d059      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a7a      	ldr	r2, [pc, #488]	@ (8002a68 <HAL_DMA_Start_IT+0x48c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d054      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a79      	ldr	r2, [pc, #484]	@ (8002a6c <HAL_DMA_Start_IT+0x490>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d04f      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a77      	ldr	r2, [pc, #476]	@ (8002a70 <HAL_DMA_Start_IT+0x494>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d04a      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a76      	ldr	r2, [pc, #472]	@ (8002a74 <HAL_DMA_Start_IT+0x498>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d045      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a74      	ldr	r2, [pc, #464]	@ (8002a78 <HAL_DMA_Start_IT+0x49c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d040      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a73      	ldr	r2, [pc, #460]	@ (8002a7c <HAL_DMA_Start_IT+0x4a0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d03b      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a71      	ldr	r2, [pc, #452]	@ (8002a80 <HAL_DMA_Start_IT+0x4a4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d036      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a70      	ldr	r2, [pc, #448]	@ (8002a84 <HAL_DMA_Start_IT+0x4a8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d031      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002a88 <HAL_DMA_Start_IT+0x4ac>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d02c      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6d      	ldr	r2, [pc, #436]	@ (8002a8c <HAL_DMA_Start_IT+0x4b0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d027      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002a90 <HAL_DMA_Start_IT+0x4b4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d022      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6a      	ldr	r2, [pc, #424]	@ (8002a94 <HAL_DMA_Start_IT+0x4b8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d01d      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a68      	ldr	r2, [pc, #416]	@ (8002a98 <HAL_DMA_Start_IT+0x4bc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d018      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a67      	ldr	r2, [pc, #412]	@ (8002a9c <HAL_DMA_Start_IT+0x4c0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d013      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a65      	ldr	r2, [pc, #404]	@ (8002aa0 <HAL_DMA_Start_IT+0x4c4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00e      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a64      	ldr	r2, [pc, #400]	@ (8002aa4 <HAL_DMA_Start_IT+0x4c8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a62      	ldr	r2, [pc, #392]	@ (8002aa8 <HAL_DMA_Start_IT+0x4cc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d004      	beq.n	800292c <HAL_DMA_Start_IT+0x350>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a61      	ldr	r2, [pc, #388]	@ (8002aac <HAL_DMA_Start_IT+0x4d0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_DMA_Start_IT+0x354>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_DMA_Start_IT+0x356>
 8002930:	2300      	movs	r3, #0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d01a      	beq.n	800296c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002952:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002966:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800296a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a37      	ldr	r2, [pc, #220]	@ (8002a50 <HAL_DMA_Start_IT+0x474>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d04a      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a36      	ldr	r2, [pc, #216]	@ (8002a54 <HAL_DMA_Start_IT+0x478>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d045      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a34      	ldr	r2, [pc, #208]	@ (8002a58 <HAL_DMA_Start_IT+0x47c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d040      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a33      	ldr	r2, [pc, #204]	@ (8002a5c <HAL_DMA_Start_IT+0x480>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d03b      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a31      	ldr	r2, [pc, #196]	@ (8002a60 <HAL_DMA_Start_IT+0x484>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d036      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a30      	ldr	r2, [pc, #192]	@ (8002a64 <HAL_DMA_Start_IT+0x488>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d031      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002a68 <HAL_DMA_Start_IT+0x48c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02c      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2d      	ldr	r2, [pc, #180]	@ (8002a6c <HAL_DMA_Start_IT+0x490>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d027      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002a70 <HAL_DMA_Start_IT+0x494>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d022      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002a74 <HAL_DMA_Start_IT+0x498>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d01d      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a28      	ldr	r2, [pc, #160]	@ (8002a78 <HAL_DMA_Start_IT+0x49c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d018      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a27      	ldr	r2, [pc, #156]	@ (8002a7c <HAL_DMA_Start_IT+0x4a0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a25      	ldr	r2, [pc, #148]	@ (8002a80 <HAL_DMA_Start_IT+0x4a4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00e      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a24      	ldr	r2, [pc, #144]	@ (8002a84 <HAL_DMA_Start_IT+0x4a8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d009      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a22      	ldr	r2, [pc, #136]	@ (8002a88 <HAL_DMA_Start_IT+0x4ac>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_DMA_Start_IT+0x430>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a21      	ldr	r2, [pc, #132]	@ (8002a8c <HAL_DMA_Start_IT+0x4b0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d108      	bne.n	8002a1e <HAL_DMA_Start_IT+0x442>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e012      	b.n	8002a44 <HAL_DMA_Start_IT+0x468>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e009      	b.n	8002a44 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40020010 	.word	0x40020010
 8002a54:	40020028 	.word	0x40020028
 8002a58:	40020040 	.word	0x40020040
 8002a5c:	40020058 	.word	0x40020058
 8002a60:	40020070 	.word	0x40020070
 8002a64:	40020088 	.word	0x40020088
 8002a68:	400200a0 	.word	0x400200a0
 8002a6c:	400200b8 	.word	0x400200b8
 8002a70:	40020410 	.word	0x40020410
 8002a74:	40020428 	.word	0x40020428
 8002a78:	40020440 	.word	0x40020440
 8002a7c:	40020458 	.word	0x40020458
 8002a80:	40020470 	.word	0x40020470
 8002a84:	40020488 	.word	0x40020488
 8002a88:	400204a0 	.word	0x400204a0
 8002a8c:	400204b8 	.word	0x400204b8
 8002a90:	58025408 	.word	0x58025408
 8002a94:	5802541c 	.word	0x5802541c
 8002a98:	58025430 	.word	0x58025430
 8002a9c:	58025444 	.word	0x58025444
 8002aa0:	58025458 	.word	0x58025458
 8002aa4:	5802546c 	.word	0x5802546c
 8002aa8:	58025480 	.word	0x58025480
 8002aac:	58025494 	.word	0x58025494

08002ab0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7fe feec 	bl	8001894 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e2dc      	b.n	8003082 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d008      	beq.n	8002ae6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2280      	movs	r2, #128	@ 0x80
 8002ad8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e2cd      	b.n	8003082 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a76      	ldr	r2, [pc, #472]	@ (8002cc4 <HAL_DMA_Abort+0x214>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d04a      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a74      	ldr	r2, [pc, #464]	@ (8002cc8 <HAL_DMA_Abort+0x218>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d045      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a73      	ldr	r2, [pc, #460]	@ (8002ccc <HAL_DMA_Abort+0x21c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d040      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a71      	ldr	r2, [pc, #452]	@ (8002cd0 <HAL_DMA_Abort+0x220>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d03b      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a70      	ldr	r2, [pc, #448]	@ (8002cd4 <HAL_DMA_Abort+0x224>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d036      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd8 <HAL_DMA_Abort+0x228>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d031      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a6d      	ldr	r2, [pc, #436]	@ (8002cdc <HAL_DMA_Abort+0x22c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d02c      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6b      	ldr	r2, [pc, #428]	@ (8002ce0 <HAL_DMA_Abort+0x230>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d027      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce4 <HAL_DMA_Abort+0x234>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d022      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a68      	ldr	r2, [pc, #416]	@ (8002ce8 <HAL_DMA_Abort+0x238>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01d      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a67      	ldr	r2, [pc, #412]	@ (8002cec <HAL_DMA_Abort+0x23c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a65      	ldr	r2, [pc, #404]	@ (8002cf0 <HAL_DMA_Abort+0x240>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a64      	ldr	r2, [pc, #400]	@ (8002cf4 <HAL_DMA_Abort+0x244>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a62      	ldr	r2, [pc, #392]	@ (8002cf8 <HAL_DMA_Abort+0x248>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a61      	ldr	r2, [pc, #388]	@ (8002cfc <HAL_DMA_Abort+0x24c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_DMA_Abort+0xd6>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5f      	ldr	r2, [pc, #380]	@ (8002d00 <HAL_DMA_Abort+0x250>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_DMA_Abort+0xda>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_DMA_Abort+0xdc>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 021e 	bic.w	r2, r2, #30
 8002b9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	e00a      	b.n	8002bce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 020e 	bic.w	r2, r2, #14
 8002bc6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc4 <HAL_DMA_Abort+0x214>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d072      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc8 <HAL_DMA_Abort+0x218>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d06d      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a39      	ldr	r2, [pc, #228]	@ (8002ccc <HAL_DMA_Abort+0x21c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d068      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a37      	ldr	r2, [pc, #220]	@ (8002cd0 <HAL_DMA_Abort+0x220>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d063      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a36      	ldr	r2, [pc, #216]	@ (8002cd4 <HAL_DMA_Abort+0x224>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d05e      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a34      	ldr	r2, [pc, #208]	@ (8002cd8 <HAL_DMA_Abort+0x228>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d059      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a33      	ldr	r2, [pc, #204]	@ (8002cdc <HAL_DMA_Abort+0x22c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d054      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a31      	ldr	r2, [pc, #196]	@ (8002ce0 <HAL_DMA_Abort+0x230>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d04f      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a30      	ldr	r2, [pc, #192]	@ (8002ce4 <HAL_DMA_Abort+0x234>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d04a      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ce8 <HAL_DMA_Abort+0x238>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d045      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2d      	ldr	r2, [pc, #180]	@ (8002cec <HAL_DMA_Abort+0x23c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d040      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2b      	ldr	r2, [pc, #172]	@ (8002cf0 <HAL_DMA_Abort+0x240>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d03b      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf4 <HAL_DMA_Abort+0x244>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d036      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a28      	ldr	r2, [pc, #160]	@ (8002cf8 <HAL_DMA_Abort+0x248>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a27      	ldr	r2, [pc, #156]	@ (8002cfc <HAL_DMA_Abort+0x24c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d02c      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a25      	ldr	r2, [pc, #148]	@ (8002d00 <HAL_DMA_Abort+0x250>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d027      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a24      	ldr	r2, [pc, #144]	@ (8002d04 <HAL_DMA_Abort+0x254>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	@ (8002d08 <HAL_DMA_Abort+0x258>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a21      	ldr	r2, [pc, #132]	@ (8002d0c <HAL_DMA_Abort+0x25c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d018      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1f      	ldr	r2, [pc, #124]	@ (8002d10 <HAL_DMA_Abort+0x260>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002d14 <HAL_DMA_Abort+0x264>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <HAL_DMA_Abort+0x268>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1b      	ldr	r2, [pc, #108]	@ (8002d1c <HAL_DMA_Abort+0x26c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_DMA_Abort+0x20e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	@ (8002d20 <HAL_DMA_Abort+0x270>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d132      	bne.n	8002d24 <HAL_DMA_Abort+0x274>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e031      	b.n	8002d26 <HAL_DMA_Abort+0x276>
 8002cc2:	bf00      	nop
 8002cc4:	40020010 	.word	0x40020010
 8002cc8:	40020028 	.word	0x40020028
 8002ccc:	40020040 	.word	0x40020040
 8002cd0:	40020058 	.word	0x40020058
 8002cd4:	40020070 	.word	0x40020070
 8002cd8:	40020088 	.word	0x40020088
 8002cdc:	400200a0 	.word	0x400200a0
 8002ce0:	400200b8 	.word	0x400200b8
 8002ce4:	40020410 	.word	0x40020410
 8002ce8:	40020428 	.word	0x40020428
 8002cec:	40020440 	.word	0x40020440
 8002cf0:	40020458 	.word	0x40020458
 8002cf4:	40020470 	.word	0x40020470
 8002cf8:	40020488 	.word	0x40020488
 8002cfc:	400204a0 	.word	0x400204a0
 8002d00:	400204b8 	.word	0x400204b8
 8002d04:	58025408 	.word	0x58025408
 8002d08:	5802541c 	.word	0x5802541c
 8002d0c:	58025430 	.word	0x58025430
 8002d10:	58025444 	.word	0x58025444
 8002d14:	58025458 	.word	0x58025458
 8002d18:	5802546c 	.word	0x5802546c
 8002d1c:	58025480 	.word	0x58025480
 8002d20:	58025494 	.word	0x58025494
 8002d24:	2300      	movs	r3, #0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6d      	ldr	r2, [pc, #436]	@ (8002ef4 <HAL_DMA_Abort+0x444>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d04a      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef8 <HAL_DMA_Abort+0x448>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d045      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6a      	ldr	r2, [pc, #424]	@ (8002efc <HAL_DMA_Abort+0x44c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d040      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a68      	ldr	r2, [pc, #416]	@ (8002f00 <HAL_DMA_Abort+0x450>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d03b      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a67      	ldr	r2, [pc, #412]	@ (8002f04 <HAL_DMA_Abort+0x454>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d036      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a65      	ldr	r2, [pc, #404]	@ (8002f08 <HAL_DMA_Abort+0x458>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a64      	ldr	r2, [pc, #400]	@ (8002f0c <HAL_DMA_Abort+0x45c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d02c      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a62      	ldr	r2, [pc, #392]	@ (8002f10 <HAL_DMA_Abort+0x460>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d027      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a61      	ldr	r2, [pc, #388]	@ (8002f14 <HAL_DMA_Abort+0x464>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a5f      	ldr	r2, [pc, #380]	@ (8002f18 <HAL_DMA_Abort+0x468>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01d      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5e      	ldr	r2, [pc, #376]	@ (8002f1c <HAL_DMA_Abort+0x46c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d018      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a5c      	ldr	r2, [pc, #368]	@ (8002f20 <HAL_DMA_Abort+0x470>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f24 <HAL_DMA_Abort+0x474>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00e      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <HAL_DMA_Abort+0x478>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a58      	ldr	r2, [pc, #352]	@ (8002f2c <HAL_DMA_Abort+0x47c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_DMA_Abort+0x32a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a56      	ldr	r2, [pc, #344]	@ (8002f30 <HAL_DMA_Abort+0x480>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <HAL_DMA_Abort+0x33c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e007      	b.n	8002dfc <HAL_DMA_Abort+0x34c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002dfc:	e013      	b.n	8002e26 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dfe:	f7fe fd49 	bl	8001894 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d90c      	bls.n	8002e26 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2203      	movs	r2, #3
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e12d      	b.n	8003082 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e5      	bne.n	8002dfe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef4 <HAL_DMA_Abort+0x444>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d04a      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef8 <HAL_DMA_Abort+0x448>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d045      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8002efc <HAL_DMA_Abort+0x44c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d040      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	@ (8002f00 <HAL_DMA_Abort+0x450>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d03b      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a29      	ldr	r2, [pc, #164]	@ (8002f04 <HAL_DMA_Abort+0x454>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d036      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a27      	ldr	r2, [pc, #156]	@ (8002f08 <HAL_DMA_Abort+0x458>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d031      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a26      	ldr	r2, [pc, #152]	@ (8002f0c <HAL_DMA_Abort+0x45c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d02c      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a24      	ldr	r2, [pc, #144]	@ (8002f10 <HAL_DMA_Abort+0x460>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d027      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a23      	ldr	r2, [pc, #140]	@ (8002f14 <HAL_DMA_Abort+0x464>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a21      	ldr	r2, [pc, #132]	@ (8002f18 <HAL_DMA_Abort+0x468>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01d      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a20      	ldr	r2, [pc, #128]	@ (8002f1c <HAL_DMA_Abort+0x46c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f20 <HAL_DMA_Abort+0x470>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1d      	ldr	r2, [pc, #116]	@ (8002f24 <HAL_DMA_Abort+0x474>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f28 <HAL_DMA_Abort+0x478>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f2c <HAL_DMA_Abort+0x47c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_DMA_Abort+0x422>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a18      	ldr	r2, [pc, #96]	@ (8002f30 <HAL_DMA_Abort+0x480>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_DMA_Abort+0x426>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <HAL_DMA_Abort+0x428>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d02b      	beq.n	8002f34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	223f      	movs	r2, #63	@ 0x3f
 8002eec:	409a      	lsls	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	609a      	str	r2, [r3, #8]
 8002ef2:	e02a      	b.n	8002f4a <HAL_DMA_Abort+0x49a>
 8002ef4:	40020010 	.word	0x40020010
 8002ef8:	40020028 	.word	0x40020028
 8002efc:	40020040 	.word	0x40020040
 8002f00:	40020058 	.word	0x40020058
 8002f04:	40020070 	.word	0x40020070
 8002f08:	40020088 	.word	0x40020088
 8002f0c:	400200a0 	.word	0x400200a0
 8002f10:	400200b8 	.word	0x400200b8
 8002f14:	40020410 	.word	0x40020410
 8002f18:	40020428 	.word	0x40020428
 8002f1c:	40020440 	.word	0x40020440
 8002f20:	40020458 	.word	0x40020458
 8002f24:	40020470 	.word	0x40020470
 8002f28:	40020488 	.word	0x40020488
 8002f2c:	400204a0 	.word	0x400204a0
 8002f30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2201      	movs	r2, #1
 8002f44:	409a      	lsls	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a4f      	ldr	r2, [pc, #316]	@ (800308c <HAL_DMA_Abort+0x5dc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d072      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a4d      	ldr	r2, [pc, #308]	@ (8003090 <HAL_DMA_Abort+0x5e0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d06d      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a4c      	ldr	r2, [pc, #304]	@ (8003094 <HAL_DMA_Abort+0x5e4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d068      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8003098 <HAL_DMA_Abort+0x5e8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d063      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a49      	ldr	r2, [pc, #292]	@ (800309c <HAL_DMA_Abort+0x5ec>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d05e      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a47      	ldr	r2, [pc, #284]	@ (80030a0 <HAL_DMA_Abort+0x5f0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d059      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a46      	ldr	r2, [pc, #280]	@ (80030a4 <HAL_DMA_Abort+0x5f4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d054      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a44      	ldr	r2, [pc, #272]	@ (80030a8 <HAL_DMA_Abort+0x5f8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d04f      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a43      	ldr	r2, [pc, #268]	@ (80030ac <HAL_DMA_Abort+0x5fc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d04a      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a41      	ldr	r2, [pc, #260]	@ (80030b0 <HAL_DMA_Abort+0x600>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d045      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a40      	ldr	r2, [pc, #256]	@ (80030b4 <HAL_DMA_Abort+0x604>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d040      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80030b8 <HAL_DMA_Abort+0x608>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d03b      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80030bc <HAL_DMA_Abort+0x60c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d036      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a3b      	ldr	r2, [pc, #236]	@ (80030c0 <HAL_DMA_Abort+0x610>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d031      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a3a      	ldr	r2, [pc, #232]	@ (80030c4 <HAL_DMA_Abort+0x614>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d02c      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a38      	ldr	r2, [pc, #224]	@ (80030c8 <HAL_DMA_Abort+0x618>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d027      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a37      	ldr	r2, [pc, #220]	@ (80030cc <HAL_DMA_Abort+0x61c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a35      	ldr	r2, [pc, #212]	@ (80030d0 <HAL_DMA_Abort+0x620>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01d      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a34      	ldr	r2, [pc, #208]	@ (80030d4 <HAL_DMA_Abort+0x624>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d018      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a32      	ldr	r2, [pc, #200]	@ (80030d8 <HAL_DMA_Abort+0x628>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a31      	ldr	r2, [pc, #196]	@ (80030dc <HAL_DMA_Abort+0x62c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00e      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2f      	ldr	r2, [pc, #188]	@ (80030e0 <HAL_DMA_Abort+0x630>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a2e      	ldr	r2, [pc, #184]	@ (80030e4 <HAL_DMA_Abort+0x634>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d004      	beq.n	800303a <HAL_DMA_Abort+0x58a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2c      	ldr	r2, [pc, #176]	@ (80030e8 <HAL_DMA_Abort+0x638>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d101      	bne.n	800303e <HAL_DMA_Abort+0x58e>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_DMA_Abort+0x590>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d015      	beq.n	8003070 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800304c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00c      	beq.n	8003070 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003060:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003064:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800306e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40020010 	.word	0x40020010
 8003090:	40020028 	.word	0x40020028
 8003094:	40020040 	.word	0x40020040
 8003098:	40020058 	.word	0x40020058
 800309c:	40020070 	.word	0x40020070
 80030a0:	40020088 	.word	0x40020088
 80030a4:	400200a0 	.word	0x400200a0
 80030a8:	400200b8 	.word	0x400200b8
 80030ac:	40020410 	.word	0x40020410
 80030b0:	40020428 	.word	0x40020428
 80030b4:	40020440 	.word	0x40020440
 80030b8:	40020458 	.word	0x40020458
 80030bc:	40020470 	.word	0x40020470
 80030c0:	40020488 	.word	0x40020488
 80030c4:	400204a0 	.word	0x400204a0
 80030c8:	400204b8 	.word	0x400204b8
 80030cc:	58025408 	.word	0x58025408
 80030d0:	5802541c 	.word	0x5802541c
 80030d4:	58025430 	.word	0x58025430
 80030d8:	58025444 	.word	0x58025444
 80030dc:	58025458 	.word	0x58025458
 80030e0:	5802546c 	.word	0x5802546c
 80030e4:	58025480 	.word	0x58025480
 80030e8:	58025494 	.word	0x58025494

080030ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e237      	b.n	800356e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d004      	beq.n	8003114 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2280      	movs	r2, #128	@ 0x80
 800310e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e22c      	b.n	800356e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a5c      	ldr	r2, [pc, #368]	@ (800328c <HAL_DMA_Abort_IT+0x1a0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d04a      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5b      	ldr	r2, [pc, #364]	@ (8003290 <HAL_DMA_Abort_IT+0x1a4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d045      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a59      	ldr	r2, [pc, #356]	@ (8003294 <HAL_DMA_Abort_IT+0x1a8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d040      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a58      	ldr	r2, [pc, #352]	@ (8003298 <HAL_DMA_Abort_IT+0x1ac>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d03b      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a56      	ldr	r2, [pc, #344]	@ (800329c <HAL_DMA_Abort_IT+0x1b0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d036      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a55      	ldr	r2, [pc, #340]	@ (80032a0 <HAL_DMA_Abort_IT+0x1b4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d031      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a53      	ldr	r2, [pc, #332]	@ (80032a4 <HAL_DMA_Abort_IT+0x1b8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d02c      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a52      	ldr	r2, [pc, #328]	@ (80032a8 <HAL_DMA_Abort_IT+0x1bc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d027      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a50      	ldr	r2, [pc, #320]	@ (80032ac <HAL_DMA_Abort_IT+0x1c0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d022      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a4f      	ldr	r2, [pc, #316]	@ (80032b0 <HAL_DMA_Abort_IT+0x1c4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d01d      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a4d      	ldr	r2, [pc, #308]	@ (80032b4 <HAL_DMA_Abort_IT+0x1c8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d018      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a4c      	ldr	r2, [pc, #304]	@ (80032b8 <HAL_DMA_Abort_IT+0x1cc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a4a      	ldr	r2, [pc, #296]	@ (80032bc <HAL_DMA_Abort_IT+0x1d0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00e      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a49      	ldr	r2, [pc, #292]	@ (80032c0 <HAL_DMA_Abort_IT+0x1d4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d009      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a47      	ldr	r2, [pc, #284]	@ (80032c4 <HAL_DMA_Abort_IT+0x1d8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a46      	ldr	r2, [pc, #280]	@ (80032c8 <HAL_DMA_Abort_IT+0x1dc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d101      	bne.n	80031b8 <HAL_DMA_Abort_IT+0xcc>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_DMA_Abort_IT+0xce>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8086 	beq.w	80032cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2204      	movs	r2, #4
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2f      	ldr	r2, [pc, #188]	@ (800328c <HAL_DMA_Abort_IT+0x1a0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d04a      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003290 <HAL_DMA_Abort_IT+0x1a4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d045      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003294 <HAL_DMA_Abort_IT+0x1a8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d040      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003298 <HAL_DMA_Abort_IT+0x1ac>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d03b      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a29      	ldr	r2, [pc, #164]	@ (800329c <HAL_DMA_Abort_IT+0x1b0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d036      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a28      	ldr	r2, [pc, #160]	@ (80032a0 <HAL_DMA_Abort_IT+0x1b4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d031      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a26      	ldr	r2, [pc, #152]	@ (80032a4 <HAL_DMA_Abort_IT+0x1b8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d02c      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a25      	ldr	r2, [pc, #148]	@ (80032a8 <HAL_DMA_Abort_IT+0x1bc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d027      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a23      	ldr	r2, [pc, #140]	@ (80032ac <HAL_DMA_Abort_IT+0x1c0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d022      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a22      	ldr	r2, [pc, #136]	@ (80032b0 <HAL_DMA_Abort_IT+0x1c4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01d      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a20      	ldr	r2, [pc, #128]	@ (80032b4 <HAL_DMA_Abort_IT+0x1c8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d018      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1f      	ldr	r2, [pc, #124]	@ (80032b8 <HAL_DMA_Abort_IT+0x1cc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1d      	ldr	r2, [pc, #116]	@ (80032bc <HAL_DMA_Abort_IT+0x1d0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00e      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1c      	ldr	r2, [pc, #112]	@ (80032c0 <HAL_DMA_Abort_IT+0x1d4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d009      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1a      	ldr	r2, [pc, #104]	@ (80032c4 <HAL_DMA_Abort_IT+0x1d8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a19      	ldr	r2, [pc, #100]	@ (80032c8 <HAL_DMA_Abort_IT+0x1dc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <HAL_DMA_Abort_IT+0x18e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e178      	b.n	800356c <HAL_DMA_Abort_IT+0x480>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e16f      	b.n	800356c <HAL_DMA_Abort_IT+0x480>
 800328c:	40020010 	.word	0x40020010
 8003290:	40020028 	.word	0x40020028
 8003294:	40020040 	.word	0x40020040
 8003298:	40020058 	.word	0x40020058
 800329c:	40020070 	.word	0x40020070
 80032a0:	40020088 	.word	0x40020088
 80032a4:	400200a0 	.word	0x400200a0
 80032a8:	400200b8 	.word	0x400200b8
 80032ac:	40020410 	.word	0x40020410
 80032b0:	40020428 	.word	0x40020428
 80032b4:	40020440 	.word	0x40020440
 80032b8:	40020458 	.word	0x40020458
 80032bc:	40020470 	.word	0x40020470
 80032c0:	40020488 	.word	0x40020488
 80032c4:	400204a0 	.word	0x400204a0
 80032c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 020e 	bic.w	r2, r2, #14
 80032da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6c      	ldr	r2, [pc, #432]	@ (8003494 <HAL_DMA_Abort_IT+0x3a8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d04a      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003498 <HAL_DMA_Abort_IT+0x3ac>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d045      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a69      	ldr	r2, [pc, #420]	@ (800349c <HAL_DMA_Abort_IT+0x3b0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d040      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a68      	ldr	r2, [pc, #416]	@ (80034a0 <HAL_DMA_Abort_IT+0x3b4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d03b      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a66      	ldr	r2, [pc, #408]	@ (80034a4 <HAL_DMA_Abort_IT+0x3b8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d036      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a65      	ldr	r2, [pc, #404]	@ (80034a8 <HAL_DMA_Abort_IT+0x3bc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d031      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a63      	ldr	r2, [pc, #396]	@ (80034ac <HAL_DMA_Abort_IT+0x3c0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02c      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a62      	ldr	r2, [pc, #392]	@ (80034b0 <HAL_DMA_Abort_IT+0x3c4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d027      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a60      	ldr	r2, [pc, #384]	@ (80034b4 <HAL_DMA_Abort_IT+0x3c8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d022      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5f      	ldr	r2, [pc, #380]	@ (80034b8 <HAL_DMA_Abort_IT+0x3cc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d01d      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5d      	ldr	r2, [pc, #372]	@ (80034bc <HAL_DMA_Abort_IT+0x3d0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5c      	ldr	r2, [pc, #368]	@ (80034c0 <HAL_DMA_Abort_IT+0x3d4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5a      	ldr	r2, [pc, #360]	@ (80034c4 <HAL_DMA_Abort_IT+0x3d8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a59      	ldr	r2, [pc, #356]	@ (80034c8 <HAL_DMA_Abort_IT+0x3dc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a57      	ldr	r2, [pc, #348]	@ (80034cc <HAL_DMA_Abort_IT+0x3e0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a56      	ldr	r2, [pc, #344]	@ (80034d0 <HAL_DMA_Abort_IT+0x3e4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d108      	bne.n	800338e <HAL_DMA_Abort_IT+0x2a2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e007      	b.n	800339e <HAL_DMA_Abort_IT+0x2b2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003494 <HAL_DMA_Abort_IT+0x3a8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d072      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003498 <HAL_DMA_Abort_IT+0x3ac>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d06d      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a39      	ldr	r2, [pc, #228]	@ (800349c <HAL_DMA_Abort_IT+0x3b0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d068      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a37      	ldr	r2, [pc, #220]	@ (80034a0 <HAL_DMA_Abort_IT+0x3b4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d063      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a36      	ldr	r2, [pc, #216]	@ (80034a4 <HAL_DMA_Abort_IT+0x3b8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d05e      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a34      	ldr	r2, [pc, #208]	@ (80034a8 <HAL_DMA_Abort_IT+0x3bc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d059      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a33      	ldr	r2, [pc, #204]	@ (80034ac <HAL_DMA_Abort_IT+0x3c0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d054      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a31      	ldr	r2, [pc, #196]	@ (80034b0 <HAL_DMA_Abort_IT+0x3c4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d04f      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a30      	ldr	r2, [pc, #192]	@ (80034b4 <HAL_DMA_Abort_IT+0x3c8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d04a      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2e      	ldr	r2, [pc, #184]	@ (80034b8 <HAL_DMA_Abort_IT+0x3cc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d045      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2d      	ldr	r2, [pc, #180]	@ (80034bc <HAL_DMA_Abort_IT+0x3d0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d040      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2b      	ldr	r2, [pc, #172]	@ (80034c0 <HAL_DMA_Abort_IT+0x3d4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d03b      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2a      	ldr	r2, [pc, #168]	@ (80034c4 <HAL_DMA_Abort_IT+0x3d8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d036      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a28      	ldr	r2, [pc, #160]	@ (80034c8 <HAL_DMA_Abort_IT+0x3dc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d031      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a27      	ldr	r2, [pc, #156]	@ (80034cc <HAL_DMA_Abort_IT+0x3e0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d02c      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a25      	ldr	r2, [pc, #148]	@ (80034d0 <HAL_DMA_Abort_IT+0x3e4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d027      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a24      	ldr	r2, [pc, #144]	@ (80034d4 <HAL_DMA_Abort_IT+0x3e8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d022      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a22      	ldr	r2, [pc, #136]	@ (80034d8 <HAL_DMA_Abort_IT+0x3ec>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01d      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a21      	ldr	r2, [pc, #132]	@ (80034dc <HAL_DMA_Abort_IT+0x3f0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d018      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1f      	ldr	r2, [pc, #124]	@ (80034e0 <HAL_DMA_Abort_IT+0x3f4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1e      	ldr	r2, [pc, #120]	@ (80034e4 <HAL_DMA_Abort_IT+0x3f8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00e      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1c      	ldr	r2, [pc, #112]	@ (80034e8 <HAL_DMA_Abort_IT+0x3fc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1b      	ldr	r2, [pc, #108]	@ (80034ec <HAL_DMA_Abort_IT+0x400>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d004      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <HAL_DMA_Abort_IT+0x404>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d132      	bne.n	80034f4 <HAL_DMA_Abort_IT+0x408>
 800348e:	2301      	movs	r3, #1
 8003490:	e031      	b.n	80034f6 <HAL_DMA_Abort_IT+0x40a>
 8003492:	bf00      	nop
 8003494:	40020010 	.word	0x40020010
 8003498:	40020028 	.word	0x40020028
 800349c:	40020040 	.word	0x40020040
 80034a0:	40020058 	.word	0x40020058
 80034a4:	40020070 	.word	0x40020070
 80034a8:	40020088 	.word	0x40020088
 80034ac:	400200a0 	.word	0x400200a0
 80034b0:	400200b8 	.word	0x400200b8
 80034b4:	40020410 	.word	0x40020410
 80034b8:	40020428 	.word	0x40020428
 80034bc:	40020440 	.word	0x40020440
 80034c0:	40020458 	.word	0x40020458
 80034c4:	40020470 	.word	0x40020470
 80034c8:	40020488 	.word	0x40020488
 80034cc:	400204a0 	.word	0x400204a0
 80034d0:	400204b8 	.word	0x400204b8
 80034d4:	58025408 	.word	0x58025408
 80034d8:	5802541c 	.word	0x5802541c
 80034dc:	58025430 	.word	0x58025430
 80034e0:	58025444 	.word	0x58025444
 80034e4:	58025458 	.word	0x58025458
 80034e8:	5802546c 	.word	0x5802546c
 80034ec:	58025480 	.word	0x58025480
 80034f0:	58025494 	.word	0x58025494
 80034f4:	2300      	movs	r3, #0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d028      	beq.n	800354c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003508:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2201      	movs	r2, #1
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003528:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00c      	beq.n	800354c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800353c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003540:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800354a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop

08003578 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003584:	4b67      	ldr	r3, [pc, #412]	@ (8003724 <HAL_DMA_IRQHandler+0x1ac>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a67      	ldr	r2, [pc, #412]	@ (8003728 <HAL_DMA_IRQHandler+0x1b0>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	0a9b      	lsrs	r3, r3, #10
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a5f      	ldr	r2, [pc, #380]	@ (800372c <HAL_DMA_IRQHandler+0x1b4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d04a      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003730 <HAL_DMA_IRQHandler+0x1b8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d045      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5c      	ldr	r2, [pc, #368]	@ (8003734 <HAL_DMA_IRQHandler+0x1bc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d040      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003738 <HAL_DMA_IRQHandler+0x1c0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d03b      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a59      	ldr	r2, [pc, #356]	@ (800373c <HAL_DMA_IRQHandler+0x1c4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d036      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a57      	ldr	r2, [pc, #348]	@ (8003740 <HAL_DMA_IRQHandler+0x1c8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d031      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a56      	ldr	r2, [pc, #344]	@ (8003744 <HAL_DMA_IRQHandler+0x1cc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d02c      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a54      	ldr	r2, [pc, #336]	@ (8003748 <HAL_DMA_IRQHandler+0x1d0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d027      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a53      	ldr	r2, [pc, #332]	@ (800374c <HAL_DMA_IRQHandler+0x1d4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d022      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a51      	ldr	r2, [pc, #324]	@ (8003750 <HAL_DMA_IRQHandler+0x1d8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01d      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a50      	ldr	r2, [pc, #320]	@ (8003754 <HAL_DMA_IRQHandler+0x1dc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d018      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a4e      	ldr	r2, [pc, #312]	@ (8003758 <HAL_DMA_IRQHandler+0x1e0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a4d      	ldr	r2, [pc, #308]	@ (800375c <HAL_DMA_IRQHandler+0x1e4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00e      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a4b      	ldr	r2, [pc, #300]	@ (8003760 <HAL_DMA_IRQHandler+0x1e8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d009      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a4a      	ldr	r2, [pc, #296]	@ (8003764 <HAL_DMA_IRQHandler+0x1ec>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a48      	ldr	r2, [pc, #288]	@ (8003768 <HAL_DMA_IRQHandler+0x1f0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_DMA_IRQHandler+0xd6>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_DMA_IRQHandler+0xd8>
 800364e:	2300      	movs	r3, #0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 842b 	beq.w	8003eac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2208      	movs	r2, #8
 8003660:	409a      	lsls	r2, r3
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80a2 	beq.w	80037b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2e      	ldr	r2, [pc, #184]	@ (800372c <HAL_DMA_IRQHandler+0x1b4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d04a      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2d      	ldr	r2, [pc, #180]	@ (8003730 <HAL_DMA_IRQHandler+0x1b8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d045      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2b      	ldr	r2, [pc, #172]	@ (8003734 <HAL_DMA_IRQHandler+0x1bc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d040      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2a      	ldr	r2, [pc, #168]	@ (8003738 <HAL_DMA_IRQHandler+0x1c0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d03b      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a28      	ldr	r2, [pc, #160]	@ (800373c <HAL_DMA_IRQHandler+0x1c4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d036      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a27      	ldr	r2, [pc, #156]	@ (8003740 <HAL_DMA_IRQHandler+0x1c8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d031      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a25      	ldr	r2, [pc, #148]	@ (8003744 <HAL_DMA_IRQHandler+0x1cc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d02c      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a24      	ldr	r2, [pc, #144]	@ (8003748 <HAL_DMA_IRQHandler+0x1d0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d027      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a22      	ldr	r2, [pc, #136]	@ (800374c <HAL_DMA_IRQHandler+0x1d4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d022      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a21      	ldr	r2, [pc, #132]	@ (8003750 <HAL_DMA_IRQHandler+0x1d8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d01d      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <HAL_DMA_IRQHandler+0x1dc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1e      	ldr	r2, [pc, #120]	@ (8003758 <HAL_DMA_IRQHandler+0x1e0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1c      	ldr	r2, [pc, #112]	@ (800375c <HAL_DMA_IRQHandler+0x1e4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003760 <HAL_DMA_IRQHandler+0x1e8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a19      	ldr	r2, [pc, #100]	@ (8003764 <HAL_DMA_IRQHandler+0x1ec>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <HAL_DMA_IRQHandler+0x1f0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d12f      	bne.n	800376c <HAL_DMA_IRQHandler+0x1f4>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf14      	ite	ne
 800371a:	2301      	movne	r3, #1
 800371c:	2300      	moveq	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	e02e      	b.n	8003780 <HAL_DMA_IRQHandler+0x208>
 8003722:	bf00      	nop
 8003724:	24000004 	.word	0x24000004
 8003728:	1b4e81b5 	.word	0x1b4e81b5
 800372c:	40020010 	.word	0x40020010
 8003730:	40020028 	.word	0x40020028
 8003734:	40020040 	.word	0x40020040
 8003738:	40020058 	.word	0x40020058
 800373c:	40020070 	.word	0x40020070
 8003740:	40020088 	.word	0x40020088
 8003744:	400200a0 	.word	0x400200a0
 8003748:	400200b8 	.word	0x400200b8
 800374c:	40020410 	.word	0x40020410
 8003750:	40020428 	.word	0x40020428
 8003754:	40020440 	.word	0x40020440
 8003758:	40020458 	.word	0x40020458
 800375c:	40020470 	.word	0x40020470
 8003760:	40020488 	.word	0x40020488
 8003764:	400204a0 	.word	0x400204a0
 8003768:	400204b8 	.word	0x400204b8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	bf14      	ite	ne
 800377a:	2301      	movne	r3, #1
 800377c:	2300      	moveq	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d015      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0204 	bic.w	r2, r2, #4
 8003792:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	2208      	movs	r2, #8
 800379e:	409a      	lsls	r2, r3
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a8:	f043 0201 	orr.w	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	fa22 f303 	lsr.w	r3, r2, r3
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d06e      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a69      	ldr	r2, [pc, #420]	@ (8003970 <HAL_DMA_IRQHandler+0x3f8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d04a      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a67      	ldr	r2, [pc, #412]	@ (8003974 <HAL_DMA_IRQHandler+0x3fc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d045      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a66      	ldr	r2, [pc, #408]	@ (8003978 <HAL_DMA_IRQHandler+0x400>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d040      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a64      	ldr	r2, [pc, #400]	@ (800397c <HAL_DMA_IRQHandler+0x404>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d03b      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a63      	ldr	r2, [pc, #396]	@ (8003980 <HAL_DMA_IRQHandler+0x408>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d036      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a61      	ldr	r2, [pc, #388]	@ (8003984 <HAL_DMA_IRQHandler+0x40c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d031      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a60      	ldr	r2, [pc, #384]	@ (8003988 <HAL_DMA_IRQHandler+0x410>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d02c      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5e      	ldr	r2, [pc, #376]	@ (800398c <HAL_DMA_IRQHandler+0x414>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d027      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a5d      	ldr	r2, [pc, #372]	@ (8003990 <HAL_DMA_IRQHandler+0x418>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d022      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a5b      	ldr	r2, [pc, #364]	@ (8003994 <HAL_DMA_IRQHandler+0x41c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01d      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a5a      	ldr	r2, [pc, #360]	@ (8003998 <HAL_DMA_IRQHandler+0x420>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d018      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a58      	ldr	r2, [pc, #352]	@ (800399c <HAL_DMA_IRQHandler+0x424>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a57      	ldr	r2, [pc, #348]	@ (80039a0 <HAL_DMA_IRQHandler+0x428>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a55      	ldr	r2, [pc, #340]	@ (80039a4 <HAL_DMA_IRQHandler+0x42c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a54      	ldr	r2, [pc, #336]	@ (80039a8 <HAL_DMA_IRQHandler+0x430>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a52      	ldr	r2, [pc, #328]	@ (80039ac <HAL_DMA_IRQHandler+0x434>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10a      	bne.n	800387c <HAL_DMA_IRQHandler+0x304>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e003      	b.n	8003884 <HAL_DMA_IRQHandler+0x30c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2300      	movs	r3, #0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	2201      	movs	r2, #1
 8003892:	409a      	lsls	r2, r3
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	f043 0202 	orr.w	r2, r3, #2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2204      	movs	r2, #4
 80038ae:	409a      	lsls	r2, r3
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 808f 	beq.w	80039d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2c      	ldr	r2, [pc, #176]	@ (8003970 <HAL_DMA_IRQHandler+0x3f8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d04a      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003974 <HAL_DMA_IRQHandler+0x3fc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d045      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a29      	ldr	r2, [pc, #164]	@ (8003978 <HAL_DMA_IRQHandler+0x400>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d040      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a27      	ldr	r2, [pc, #156]	@ (800397c <HAL_DMA_IRQHandler+0x404>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d03b      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a26      	ldr	r2, [pc, #152]	@ (8003980 <HAL_DMA_IRQHandler+0x408>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d036      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a24      	ldr	r2, [pc, #144]	@ (8003984 <HAL_DMA_IRQHandler+0x40c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d031      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_DMA_IRQHandler+0x410>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d02c      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a21      	ldr	r2, [pc, #132]	@ (800398c <HAL_DMA_IRQHandler+0x414>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d027      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a20      	ldr	r2, [pc, #128]	@ (8003990 <HAL_DMA_IRQHandler+0x418>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d022      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1e      	ldr	r2, [pc, #120]	@ (8003994 <HAL_DMA_IRQHandler+0x41c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01d      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1d      	ldr	r2, [pc, #116]	@ (8003998 <HAL_DMA_IRQHandler+0x420>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d018      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <HAL_DMA_IRQHandler+0x424>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1a      	ldr	r2, [pc, #104]	@ (80039a0 <HAL_DMA_IRQHandler+0x428>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a18      	ldr	r2, [pc, #96]	@ (80039a4 <HAL_DMA_IRQHandler+0x42c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a17      	ldr	r2, [pc, #92]	@ (80039a8 <HAL_DMA_IRQHandler+0x430>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d004      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a15      	ldr	r2, [pc, #84]	@ (80039ac <HAL_DMA_IRQHandler+0x434>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d12a      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x438>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e023      	b.n	80039b8 <HAL_DMA_IRQHandler+0x440>
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2204      	movs	r2, #4
 80039c6:	409a      	lsls	r2, r3
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	f043 0204 	orr.w	r2, r3, #4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2210      	movs	r2, #16
 80039e2:	409a      	lsls	r2, r3
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80a6 	beq.w	8003b3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a85      	ldr	r2, [pc, #532]	@ (8003c08 <HAL_DMA_IRQHandler+0x690>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d04a      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a83      	ldr	r2, [pc, #524]	@ (8003c0c <HAL_DMA_IRQHandler+0x694>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d045      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a82      	ldr	r2, [pc, #520]	@ (8003c10 <HAL_DMA_IRQHandler+0x698>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d040      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a80      	ldr	r2, [pc, #512]	@ (8003c14 <HAL_DMA_IRQHandler+0x69c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d03b      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a7f      	ldr	r2, [pc, #508]	@ (8003c18 <HAL_DMA_IRQHandler+0x6a0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d036      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a7d      	ldr	r2, [pc, #500]	@ (8003c1c <HAL_DMA_IRQHandler+0x6a4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c20 <HAL_DMA_IRQHandler+0x6a8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02c      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7a      	ldr	r2, [pc, #488]	@ (8003c24 <HAL_DMA_IRQHandler+0x6ac>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d027      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a79      	ldr	r2, [pc, #484]	@ (8003c28 <HAL_DMA_IRQHandler+0x6b0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a77      	ldr	r2, [pc, #476]	@ (8003c2c <HAL_DMA_IRQHandler+0x6b4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a76      	ldr	r2, [pc, #472]	@ (8003c30 <HAL_DMA_IRQHandler+0x6b8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a74      	ldr	r2, [pc, #464]	@ (8003c34 <HAL_DMA_IRQHandler+0x6bc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a73      	ldr	r2, [pc, #460]	@ (8003c38 <HAL_DMA_IRQHandler+0x6c0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a71      	ldr	r2, [pc, #452]	@ (8003c3c <HAL_DMA_IRQHandler+0x6c4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a70      	ldr	r2, [pc, #448]	@ (8003c40 <HAL_DMA_IRQHandler+0x6c8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a6e      	ldr	r2, [pc, #440]	@ (8003c44 <HAL_DMA_IRQHandler+0x6cc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x52c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e009      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x540>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf14      	ite	ne
 8003ab2:	2301      	movne	r3, #1
 8003ab4:	2300      	moveq	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d03e      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d018      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d108      	bne.n	8003afa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d024      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
 8003af8:	e01f      	b.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01b      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
 8003b0a:	e016      	b.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d107      	bne.n	8003b2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0208 	bic.w	r2, r2, #8
 8003b28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2220      	movs	r2, #32
 8003b44:	409a      	lsls	r2, r3
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8110 	beq.w	8003d70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2c      	ldr	r2, [pc, #176]	@ (8003c08 <HAL_DMA_IRQHandler+0x690>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d04a      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c0c <HAL_DMA_IRQHandler+0x694>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d045      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a29      	ldr	r2, [pc, #164]	@ (8003c10 <HAL_DMA_IRQHandler+0x698>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d040      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a28      	ldr	r2, [pc, #160]	@ (8003c14 <HAL_DMA_IRQHandler+0x69c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d03b      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a26      	ldr	r2, [pc, #152]	@ (8003c18 <HAL_DMA_IRQHandler+0x6a0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d036      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a25      	ldr	r2, [pc, #148]	@ (8003c1c <HAL_DMA_IRQHandler+0x6a4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d031      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a23      	ldr	r2, [pc, #140]	@ (8003c20 <HAL_DMA_IRQHandler+0x6a8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d02c      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a22      	ldr	r2, [pc, #136]	@ (8003c24 <HAL_DMA_IRQHandler+0x6ac>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d027      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a20      	ldr	r2, [pc, #128]	@ (8003c28 <HAL_DMA_IRQHandler+0x6b0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1f      	ldr	r2, [pc, #124]	@ (8003c2c <HAL_DMA_IRQHandler+0x6b4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c30 <HAL_DMA_IRQHandler+0x6b8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c34 <HAL_DMA_IRQHandler+0x6bc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8003c38 <HAL_DMA_IRQHandler+0x6c0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a19      	ldr	r2, [pc, #100]	@ (8003c3c <HAL_DMA_IRQHandler+0x6c4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a17      	ldr	r2, [pc, #92]	@ (8003c40 <HAL_DMA_IRQHandler+0x6c8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a16      	ldr	r2, [pc, #88]	@ (8003c44 <HAL_DMA_IRQHandler+0x6cc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d12b      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x6d0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e02a      	b.n	8003c5c <HAL_DMA_IRQHandler+0x6e4>
 8003c06:	bf00      	nop
 8003c08:	40020010 	.word	0x40020010
 8003c0c:	40020028 	.word	0x40020028
 8003c10:	40020040 	.word	0x40020040
 8003c14:	40020058 	.word	0x40020058
 8003c18:	40020070 	.word	0x40020070
 8003c1c:	40020088 	.word	0x40020088
 8003c20:	400200a0 	.word	0x400200a0
 8003c24:	400200b8 	.word	0x400200b8
 8003c28:	40020410 	.word	0x40020410
 8003c2c:	40020428 	.word	0x40020428
 8003c30:	40020440 	.word	0x40020440
 8003c34:	40020458 	.word	0x40020458
 8003c38:	40020470 	.word	0x40020470
 8003c3c:	40020488 	.word	0x40020488
 8003c40:	400204a0 	.word	0x400204a0
 8003c44:	400204b8 	.word	0x400204b8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf14      	ite	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	2300      	moveq	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8087 	beq.w	8003d70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d139      	bne.n	8003cf2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0216 	bic.w	r2, r2, #22
 8003c8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_DMA_IRQHandler+0x736>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0208 	bic.w	r2, r2, #8
 8003cbc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	223f      	movs	r2, #63	@ 0x3f
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 834a 	beq.w	800437c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
          }
          return;
 8003cf0:	e344      	b.n	800437c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d018      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d02c      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
 8003d1e:	e027      	b.n	8003d70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d023      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
 8003d30:	e01e      	b.n	8003d70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10f      	bne.n	8003d60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0210 	bic.w	r2, r2, #16
 8003d4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8306 	beq.w	8004386 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8088 	beq.w	8003e98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a7a      	ldr	r2, [pc, #488]	@ (8003f80 <HAL_DMA_IRQHandler+0xa08>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d04a      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a79      	ldr	r2, [pc, #484]	@ (8003f84 <HAL_DMA_IRQHandler+0xa0c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d045      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a77      	ldr	r2, [pc, #476]	@ (8003f88 <HAL_DMA_IRQHandler+0xa10>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d040      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a76      	ldr	r2, [pc, #472]	@ (8003f8c <HAL_DMA_IRQHandler+0xa14>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d03b      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a74      	ldr	r2, [pc, #464]	@ (8003f90 <HAL_DMA_IRQHandler+0xa18>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d036      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a73      	ldr	r2, [pc, #460]	@ (8003f94 <HAL_DMA_IRQHandler+0xa1c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d031      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a71      	ldr	r2, [pc, #452]	@ (8003f98 <HAL_DMA_IRQHandler+0xa20>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d02c      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a70      	ldr	r2, [pc, #448]	@ (8003f9c <HAL_DMA_IRQHandler+0xa24>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d027      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa0 <HAL_DMA_IRQHandler+0xa28>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d022      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a6d      	ldr	r2, [pc, #436]	@ (8003fa4 <HAL_DMA_IRQHandler+0xa2c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d01d      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6b      	ldr	r2, [pc, #428]	@ (8003fa8 <HAL_DMA_IRQHandler+0xa30>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d018      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a6a      	ldr	r2, [pc, #424]	@ (8003fac <HAL_DMA_IRQHandler+0xa34>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a68      	ldr	r2, [pc, #416]	@ (8003fb0 <HAL_DMA_IRQHandler+0xa38>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a67      	ldr	r2, [pc, #412]	@ (8003fb4 <HAL_DMA_IRQHandler+0xa3c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d009      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a65      	ldr	r2, [pc, #404]	@ (8003fb8 <HAL_DMA_IRQHandler+0xa40>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a64      	ldr	r2, [pc, #400]	@ (8003fbc <HAL_DMA_IRQHandler+0xa44>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d108      	bne.n	8003e42 <HAL_DMA_IRQHandler+0x8ca>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e007      	b.n	8003e52 <HAL_DMA_IRQHandler+0x8da>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3301      	adds	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d307      	bcc.n	8003e6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f2      	bne.n	8003e52 <HAL_DMA_IRQHandler+0x8da>
 8003e6c:	e000      	b.n	8003e70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2203      	movs	r2, #3
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003e86:	e003      	b.n	8003e90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8272 	beq.w	8004386 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
 8003eaa:	e26c      	b.n	8004386 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a43      	ldr	r2, [pc, #268]	@ (8003fc0 <HAL_DMA_IRQHandler+0xa48>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d022      	beq.n	8003efc <HAL_DMA_IRQHandler+0x984>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a42      	ldr	r2, [pc, #264]	@ (8003fc4 <HAL_DMA_IRQHandler+0xa4c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d01d      	beq.n	8003efc <HAL_DMA_IRQHandler+0x984>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a40      	ldr	r2, [pc, #256]	@ (8003fc8 <HAL_DMA_IRQHandler+0xa50>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d018      	beq.n	8003efc <HAL_DMA_IRQHandler+0x984>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a3f      	ldr	r2, [pc, #252]	@ (8003fcc <HAL_DMA_IRQHandler+0xa54>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_DMA_IRQHandler+0x984>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8003fd0 <HAL_DMA_IRQHandler+0xa58>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_DMA_IRQHandler+0x984>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd4 <HAL_DMA_IRQHandler+0xa5c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_DMA_IRQHandler+0x984>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a3a      	ldr	r2, [pc, #232]	@ (8003fd8 <HAL_DMA_IRQHandler+0xa60>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_DMA_IRQHandler+0x984>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a39      	ldr	r2, [pc, #228]	@ (8003fdc <HAL_DMA_IRQHandler+0xa64>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x988>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_DMA_IRQHandler+0x98a>
 8003f00:	2300      	movs	r3, #0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 823f 	beq.w	8004386 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2204      	movs	r2, #4
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80cd 	beq.w	80040c0 <HAL_DMA_IRQHandler+0xb48>
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80c7 	beq.w	80040c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d049      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8210 	beq.w	8004380 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f68:	e20a      	b.n	8004380 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8206 	beq.w	8004380 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f7c:	e200      	b.n	8004380 <HAL_DMA_IRQHandler+0xe08>
 8003f7e:	bf00      	nop
 8003f80:	40020010 	.word	0x40020010
 8003f84:	40020028 	.word	0x40020028
 8003f88:	40020040 	.word	0x40020040
 8003f8c:	40020058 	.word	0x40020058
 8003f90:	40020070 	.word	0x40020070
 8003f94:	40020088 	.word	0x40020088
 8003f98:	400200a0 	.word	0x400200a0
 8003f9c:	400200b8 	.word	0x400200b8
 8003fa0:	40020410 	.word	0x40020410
 8003fa4:	40020428 	.word	0x40020428
 8003fa8:	40020440 	.word	0x40020440
 8003fac:	40020458 	.word	0x40020458
 8003fb0:	40020470 	.word	0x40020470
 8003fb4:	40020488 	.word	0x40020488
 8003fb8:	400204a0 	.word	0x400204a0
 8003fbc:	400204b8 	.word	0x400204b8
 8003fc0:	58025408 	.word	0x58025408
 8003fc4:	5802541c 	.word	0x5802541c
 8003fc8:	58025430 	.word	0x58025430
 8003fcc:	58025444 	.word	0x58025444
 8003fd0:	58025458 	.word	0x58025458
 8003fd4:	5802546c 	.word	0x5802546c
 8003fd8:	58025480 	.word	0x58025480
 8003fdc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d160      	bne.n	80040ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a7f      	ldr	r2, [pc, #508]	@ (80041ec <HAL_DMA_IRQHandler+0xc74>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d04a      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7d      	ldr	r2, [pc, #500]	@ (80041f0 <HAL_DMA_IRQHandler+0xc78>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d045      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7c      	ldr	r2, [pc, #496]	@ (80041f4 <HAL_DMA_IRQHandler+0xc7c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d040      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7a      	ldr	r2, [pc, #488]	@ (80041f8 <HAL_DMA_IRQHandler+0xc80>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d03b      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a79      	ldr	r2, [pc, #484]	@ (80041fc <HAL_DMA_IRQHandler+0xc84>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d036      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a77      	ldr	r2, [pc, #476]	@ (8004200 <HAL_DMA_IRQHandler+0xc88>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d031      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a76      	ldr	r2, [pc, #472]	@ (8004204 <HAL_DMA_IRQHandler+0xc8c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d02c      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a74      	ldr	r2, [pc, #464]	@ (8004208 <HAL_DMA_IRQHandler+0xc90>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d027      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a73      	ldr	r2, [pc, #460]	@ (800420c <HAL_DMA_IRQHandler+0xc94>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d022      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a71      	ldr	r2, [pc, #452]	@ (8004210 <HAL_DMA_IRQHandler+0xc98>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01d      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a70      	ldr	r2, [pc, #448]	@ (8004214 <HAL_DMA_IRQHandler+0xc9c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d018      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6e      	ldr	r2, [pc, #440]	@ (8004218 <HAL_DMA_IRQHandler+0xca0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a6d      	ldr	r2, [pc, #436]	@ (800421c <HAL_DMA_IRQHandler+0xca4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6b      	ldr	r2, [pc, #428]	@ (8004220 <HAL_DMA_IRQHandler+0xca8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d009      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6a      	ldr	r2, [pc, #424]	@ (8004224 <HAL_DMA_IRQHandler+0xcac>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_DMA_IRQHandler+0xb12>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a68      	ldr	r2, [pc, #416]	@ (8004228 <HAL_DMA_IRQHandler+0xcb0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <HAL_DMA_IRQHandler+0xb24>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0208 	bic.w	r2, r2, #8
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e007      	b.n	80040ac <HAL_DMA_IRQHandler+0xb34>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0204 	bic.w	r2, r2, #4
 80040aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8165 	beq.w	8004380 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040be:	e15f      	b.n	8004380 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2202      	movs	r2, #2
 80040ca:	409a      	lsls	r2, r3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80c5 	beq.w	8004260 <HAL_DMA_IRQHandler+0xce8>
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80bf 	beq.w	8004260 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	2202      	movs	r2, #2
 80040ec:	409a      	lsls	r2, r3
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d018      	beq.n	800412e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 813a 	beq.w	8004384 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004118:	e134      	b.n	8004384 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8130 	beq.w	8004384 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800412c:	e12a      	b.n	8004384 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 8089 	bne.w	800424c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2b      	ldr	r2, [pc, #172]	@ (80041ec <HAL_DMA_IRQHandler+0xc74>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d04a      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a29      	ldr	r2, [pc, #164]	@ (80041f0 <HAL_DMA_IRQHandler+0xc78>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d045      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a28      	ldr	r2, [pc, #160]	@ (80041f4 <HAL_DMA_IRQHandler+0xc7c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d040      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a26      	ldr	r2, [pc, #152]	@ (80041f8 <HAL_DMA_IRQHandler+0xc80>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d03b      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a25      	ldr	r2, [pc, #148]	@ (80041fc <HAL_DMA_IRQHandler+0xc84>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d036      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a23      	ldr	r2, [pc, #140]	@ (8004200 <HAL_DMA_IRQHandler+0xc88>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d031      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a22      	ldr	r2, [pc, #136]	@ (8004204 <HAL_DMA_IRQHandler+0xc8c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d02c      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <HAL_DMA_IRQHandler+0xc90>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d027      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1f      	ldr	r2, [pc, #124]	@ (800420c <HAL_DMA_IRQHandler+0xc94>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d022      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <HAL_DMA_IRQHandler+0xc98>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01d      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <HAL_DMA_IRQHandler+0xc9c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d018      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_DMA_IRQHandler+0xca0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a19      	ldr	r2, [pc, #100]	@ (800421c <HAL_DMA_IRQHandler+0xca4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a17      	ldr	r2, [pc, #92]	@ (8004220 <HAL_DMA_IRQHandler+0xca8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d009      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a16      	ldr	r2, [pc, #88]	@ (8004224 <HAL_DMA_IRQHandler+0xcac>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <HAL_DMA_IRQHandler+0xc62>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a14      	ldr	r2, [pc, #80]	@ (8004228 <HAL_DMA_IRQHandler+0xcb0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d128      	bne.n	800422c <HAL_DMA_IRQHandler+0xcb4>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0214 	bic.w	r2, r2, #20
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e027      	b.n	800423c <HAL_DMA_IRQHandler+0xcc4>
 80041ec:	40020010 	.word	0x40020010
 80041f0:	40020028 	.word	0x40020028
 80041f4:	40020040 	.word	0x40020040
 80041f8:	40020058 	.word	0x40020058
 80041fc:	40020070 	.word	0x40020070
 8004200:	40020088 	.word	0x40020088
 8004204:	400200a0 	.word	0x400200a0
 8004208:	400200b8 	.word	0x400200b8
 800420c:	40020410 	.word	0x40020410
 8004210:	40020428 	.word	0x40020428
 8004214:	40020440 	.word	0x40020440
 8004218:	40020458 	.word	0x40020458
 800421c:	40020470 	.word	0x40020470
 8004220:	40020488 	.word	0x40020488
 8004224:	400204a0 	.word	0x400204a0
 8004228:	400204b8 	.word	0x400204b8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 020a 	bic.w	r2, r2, #10
 800423a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8097 	beq.w	8004384 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800425e:	e091      	b.n	8004384 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2208      	movs	r2, #8
 800426a:	409a      	lsls	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8088 	beq.w	8004386 <HAL_DMA_IRQHandler+0xe0e>
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8082 	beq.w	8004386 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a41      	ldr	r2, [pc, #260]	@ (800438c <HAL_DMA_IRQHandler+0xe14>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d04a      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a3f      	ldr	r2, [pc, #252]	@ (8004390 <HAL_DMA_IRQHandler+0xe18>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d045      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a3e      	ldr	r2, [pc, #248]	@ (8004394 <HAL_DMA_IRQHandler+0xe1c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d040      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004398 <HAL_DMA_IRQHandler+0xe20>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d03b      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a3b      	ldr	r2, [pc, #236]	@ (800439c <HAL_DMA_IRQHandler+0xe24>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d036      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a39      	ldr	r2, [pc, #228]	@ (80043a0 <HAL_DMA_IRQHandler+0xe28>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d031      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a38      	ldr	r2, [pc, #224]	@ (80043a4 <HAL_DMA_IRQHandler+0xe2c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d02c      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a36      	ldr	r2, [pc, #216]	@ (80043a8 <HAL_DMA_IRQHandler+0xe30>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d027      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a35      	ldr	r2, [pc, #212]	@ (80043ac <HAL_DMA_IRQHandler+0xe34>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d022      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a33      	ldr	r2, [pc, #204]	@ (80043b0 <HAL_DMA_IRQHandler+0xe38>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01d      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a32      	ldr	r2, [pc, #200]	@ (80043b4 <HAL_DMA_IRQHandler+0xe3c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d018      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a30      	ldr	r2, [pc, #192]	@ (80043b8 <HAL_DMA_IRQHandler+0xe40>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2f      	ldr	r2, [pc, #188]	@ (80043bc <HAL_DMA_IRQHandler+0xe44>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00e      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2d      	ldr	r2, [pc, #180]	@ (80043c0 <HAL_DMA_IRQHandler+0xe48>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2c      	ldr	r2, [pc, #176]	@ (80043c4 <HAL_DMA_IRQHandler+0xe4c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_DMA_IRQHandler+0xdaa>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2a      	ldr	r2, [pc, #168]	@ (80043c8 <HAL_DMA_IRQHandler+0xe50>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d108      	bne.n	8004334 <HAL_DMA_IRQHandler+0xdbc>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 021c 	bic.w	r2, r2, #28
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e007      	b.n	8004344 <HAL_DMA_IRQHandler+0xdcc>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020e 	bic.w	r2, r2, #14
 8004342:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2201      	movs	r2, #1
 800434e:	409a      	lsls	r2, r3
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
 800437a:	e004      	b.n	8004386 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800437c:	bf00      	nop
 800437e:	e002      	b.n	8004386 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004380:	bf00      	nop
 8004382:	e000      	b.n	8004386 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004384:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004386:	3728      	adds	r7, #40	@ 0x28
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40020010 	.word	0x40020010
 8004390:	40020028 	.word	0x40020028
 8004394:	40020040 	.word	0x40020040
 8004398:	40020058 	.word	0x40020058
 800439c:	40020070 	.word	0x40020070
 80043a0:	40020088 	.word	0x40020088
 80043a4:	400200a0 	.word	0x400200a0
 80043a8:	400200b8 	.word	0x400200b8
 80043ac:	40020410 	.word	0x40020410
 80043b0:	40020428 	.word	0x40020428
 80043b4:	40020440 	.word	0x40020440
 80043b8:	40020458 	.word	0x40020458
 80043bc:	40020470 	.word	0x40020470
 80043c0:	40020488 	.word	0x40020488
 80043c4:	400204a0 	.word	0x400204a0
 80043c8:	400204b8 	.word	0x400204b8

080043cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a7f      	ldr	r2, [pc, #508]	@ (80045e8 <DMA_SetConfig+0x21c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d072      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a7d      	ldr	r2, [pc, #500]	@ (80045ec <DMA_SetConfig+0x220>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d06d      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a7c      	ldr	r2, [pc, #496]	@ (80045f0 <DMA_SetConfig+0x224>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d068      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a7a      	ldr	r2, [pc, #488]	@ (80045f4 <DMA_SetConfig+0x228>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d063      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a79      	ldr	r2, [pc, #484]	@ (80045f8 <DMA_SetConfig+0x22c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d05e      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a77      	ldr	r2, [pc, #476]	@ (80045fc <DMA_SetConfig+0x230>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d059      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a76      	ldr	r2, [pc, #472]	@ (8004600 <DMA_SetConfig+0x234>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d054      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a74      	ldr	r2, [pc, #464]	@ (8004604 <DMA_SetConfig+0x238>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d04f      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a73      	ldr	r2, [pc, #460]	@ (8004608 <DMA_SetConfig+0x23c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d04a      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a71      	ldr	r2, [pc, #452]	@ (800460c <DMA_SetConfig+0x240>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d045      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a70      	ldr	r2, [pc, #448]	@ (8004610 <DMA_SetConfig+0x244>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d040      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a6e      	ldr	r2, [pc, #440]	@ (8004614 <DMA_SetConfig+0x248>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d03b      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a6d      	ldr	r2, [pc, #436]	@ (8004618 <DMA_SetConfig+0x24c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d036      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a6b      	ldr	r2, [pc, #428]	@ (800461c <DMA_SetConfig+0x250>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d031      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6a      	ldr	r2, [pc, #424]	@ (8004620 <DMA_SetConfig+0x254>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d02c      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a68      	ldr	r2, [pc, #416]	@ (8004624 <DMA_SetConfig+0x258>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d027      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a67      	ldr	r2, [pc, #412]	@ (8004628 <DMA_SetConfig+0x25c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a65      	ldr	r2, [pc, #404]	@ (800462c <DMA_SetConfig+0x260>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01d      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a64      	ldr	r2, [pc, #400]	@ (8004630 <DMA_SetConfig+0x264>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d018      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a62      	ldr	r2, [pc, #392]	@ (8004634 <DMA_SetConfig+0x268>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a61      	ldr	r2, [pc, #388]	@ (8004638 <DMA_SetConfig+0x26c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a5f      	ldr	r2, [pc, #380]	@ (800463c <DMA_SetConfig+0x270>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004640 <DMA_SetConfig+0x274>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <DMA_SetConfig+0x10a>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a5c      	ldr	r2, [pc, #368]	@ (8004644 <DMA_SetConfig+0x278>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <DMA_SetConfig+0x10e>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <DMA_SetConfig+0x110>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00d      	beq.n	80044fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80044e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a39      	ldr	r2, [pc, #228]	@ (80045e8 <DMA_SetConfig+0x21c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d04a      	beq.n	800459c <DMA_SetConfig+0x1d0>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a38      	ldr	r2, [pc, #224]	@ (80045ec <DMA_SetConfig+0x220>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d045      	beq.n	800459c <DMA_SetConfig+0x1d0>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a36      	ldr	r2, [pc, #216]	@ (80045f0 <DMA_SetConfig+0x224>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d040      	beq.n	800459c <DMA_SetConfig+0x1d0>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a35      	ldr	r2, [pc, #212]	@ (80045f4 <DMA_SetConfig+0x228>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d03b      	beq.n	800459c <DMA_SetConfig+0x1d0>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a33      	ldr	r2, [pc, #204]	@ (80045f8 <DMA_SetConfig+0x22c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d036      	beq.n	800459c <DMA_SetConfig+0x1d0>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a32      	ldr	r2, [pc, #200]	@ (80045fc <DMA_SetConfig+0x230>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d031      	beq.n	800459c <DMA_SetConfig+0x1d0>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a30      	ldr	r2, [pc, #192]	@ (8004600 <DMA_SetConfig+0x234>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d02c      	beq.n	800459c <DMA_SetConfig+0x1d0>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a2f      	ldr	r2, [pc, #188]	@ (8004604 <DMA_SetConfig+0x238>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d027      	beq.n	800459c <DMA_SetConfig+0x1d0>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a2d      	ldr	r2, [pc, #180]	@ (8004608 <DMA_SetConfig+0x23c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d022      	beq.n	800459c <DMA_SetConfig+0x1d0>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a2c      	ldr	r2, [pc, #176]	@ (800460c <DMA_SetConfig+0x240>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d01d      	beq.n	800459c <DMA_SetConfig+0x1d0>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a2a      	ldr	r2, [pc, #168]	@ (8004610 <DMA_SetConfig+0x244>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d018      	beq.n	800459c <DMA_SetConfig+0x1d0>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a29      	ldr	r2, [pc, #164]	@ (8004614 <DMA_SetConfig+0x248>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <DMA_SetConfig+0x1d0>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a27      	ldr	r2, [pc, #156]	@ (8004618 <DMA_SetConfig+0x24c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <DMA_SetConfig+0x1d0>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a26      	ldr	r2, [pc, #152]	@ (800461c <DMA_SetConfig+0x250>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <DMA_SetConfig+0x1d0>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a24      	ldr	r2, [pc, #144]	@ (8004620 <DMA_SetConfig+0x254>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <DMA_SetConfig+0x1d0>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a23      	ldr	r2, [pc, #140]	@ (8004624 <DMA_SetConfig+0x258>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d101      	bne.n	80045a0 <DMA_SetConfig+0x1d4>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <DMA_SetConfig+0x1d6>
 80045a0:	2300      	movs	r3, #0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d059      	beq.n	800465a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	223f      	movs	r2, #63	@ 0x3f
 80045b0:	409a      	lsls	r2, r3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80045c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b40      	cmp	r3, #64	@ 0x40
 80045d4:	d138      	bne.n	8004648 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045e6:	e086      	b.n	80046f6 <DMA_SetConfig+0x32a>
 80045e8:	40020010 	.word	0x40020010
 80045ec:	40020028 	.word	0x40020028
 80045f0:	40020040 	.word	0x40020040
 80045f4:	40020058 	.word	0x40020058
 80045f8:	40020070 	.word	0x40020070
 80045fc:	40020088 	.word	0x40020088
 8004600:	400200a0 	.word	0x400200a0
 8004604:	400200b8 	.word	0x400200b8
 8004608:	40020410 	.word	0x40020410
 800460c:	40020428 	.word	0x40020428
 8004610:	40020440 	.word	0x40020440
 8004614:	40020458 	.word	0x40020458
 8004618:	40020470 	.word	0x40020470
 800461c:	40020488 	.word	0x40020488
 8004620:	400204a0 	.word	0x400204a0
 8004624:	400204b8 	.word	0x400204b8
 8004628:	58025408 	.word	0x58025408
 800462c:	5802541c 	.word	0x5802541c
 8004630:	58025430 	.word	0x58025430
 8004634:	58025444 	.word	0x58025444
 8004638:	58025458 	.word	0x58025458
 800463c:	5802546c 	.word	0x5802546c
 8004640:	58025480 	.word	0x58025480
 8004644:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]
}
 8004658:	e04d      	b.n	80046f6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a29      	ldr	r2, [pc, #164]	@ (8004704 <DMA_SetConfig+0x338>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d022      	beq.n	80046aa <DMA_SetConfig+0x2de>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a27      	ldr	r2, [pc, #156]	@ (8004708 <DMA_SetConfig+0x33c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01d      	beq.n	80046aa <DMA_SetConfig+0x2de>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a26      	ldr	r2, [pc, #152]	@ (800470c <DMA_SetConfig+0x340>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d018      	beq.n	80046aa <DMA_SetConfig+0x2de>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a24      	ldr	r2, [pc, #144]	@ (8004710 <DMA_SetConfig+0x344>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <DMA_SetConfig+0x2de>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a23      	ldr	r2, [pc, #140]	@ (8004714 <DMA_SetConfig+0x348>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <DMA_SetConfig+0x2de>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a21      	ldr	r2, [pc, #132]	@ (8004718 <DMA_SetConfig+0x34c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <DMA_SetConfig+0x2de>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a20      	ldr	r2, [pc, #128]	@ (800471c <DMA_SetConfig+0x350>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <DMA_SetConfig+0x2de>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004720 <DMA_SetConfig+0x354>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <DMA_SetConfig+0x2e2>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <DMA_SetConfig+0x2e4>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	2201      	movs	r2, #1
 80046be:	409a      	lsls	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b40      	cmp	r3, #64	@ 0x40
 80046d2:	d108      	bne.n	80046e6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	60da      	str	r2, [r3, #12]
}
 80046e4:	e007      	b.n	80046f6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	60da      	str	r2, [r3, #12]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	58025408 	.word	0x58025408
 8004708:	5802541c 	.word	0x5802541c
 800470c:	58025430 	.word	0x58025430
 8004710:	58025444 	.word	0x58025444
 8004714:	58025458 	.word	0x58025458
 8004718:	5802546c 	.word	0x5802546c
 800471c:	58025480 	.word	0x58025480
 8004720:	58025494 	.word	0x58025494

08004724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a42      	ldr	r2, [pc, #264]	@ (800483c <DMA_CalcBaseAndBitshift+0x118>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d04a      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a41      	ldr	r2, [pc, #260]	@ (8004840 <DMA_CalcBaseAndBitshift+0x11c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d045      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3f      	ldr	r2, [pc, #252]	@ (8004844 <DMA_CalcBaseAndBitshift+0x120>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d040      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a3e      	ldr	r2, [pc, #248]	@ (8004848 <DMA_CalcBaseAndBitshift+0x124>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d03b      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3c      	ldr	r2, [pc, #240]	@ (800484c <DMA_CalcBaseAndBitshift+0x128>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d036      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3b      	ldr	r2, [pc, #236]	@ (8004850 <DMA_CalcBaseAndBitshift+0x12c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d031      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a39      	ldr	r2, [pc, #228]	@ (8004854 <DMA_CalcBaseAndBitshift+0x130>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d02c      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a38      	ldr	r2, [pc, #224]	@ (8004858 <DMA_CalcBaseAndBitshift+0x134>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d027      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a36      	ldr	r2, [pc, #216]	@ (800485c <DMA_CalcBaseAndBitshift+0x138>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d022      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a35      	ldr	r2, [pc, #212]	@ (8004860 <DMA_CalcBaseAndBitshift+0x13c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d01d      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a33      	ldr	r2, [pc, #204]	@ (8004864 <DMA_CalcBaseAndBitshift+0x140>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a32      	ldr	r2, [pc, #200]	@ (8004868 <DMA_CalcBaseAndBitshift+0x144>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a30      	ldr	r2, [pc, #192]	@ (800486c <DMA_CalcBaseAndBitshift+0x148>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004870 <DMA_CalcBaseAndBitshift+0x14c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004874 <DMA_CalcBaseAndBitshift+0x150>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004878 <DMA_CalcBaseAndBitshift+0x154>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <DMA_CalcBaseAndBitshift+0xac>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <DMA_CalcBaseAndBitshift+0xae>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d024      	beq.n	8004820 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3b10      	subs	r3, #16
 80047de:	4a27      	ldr	r2, [pc, #156]	@ (800487c <DMA_CalcBaseAndBitshift+0x158>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	4a24      	ldr	r2, [pc, #144]	@ (8004880 <DMA_CalcBaseAndBitshift+0x15c>)
 80047f0:	5cd3      	ldrb	r3, [r2, r3]
 80047f2:	461a      	mov	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d908      	bls.n	8004810 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	4b1f      	ldr	r3, [pc, #124]	@ (8004884 <DMA_CalcBaseAndBitshift+0x160>)
 8004806:	4013      	ands	r3, r2
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	659a      	str	r2, [r3, #88]	@ 0x58
 800480e:	e00d      	b.n	800482c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	4b1b      	ldr	r3, [pc, #108]	@ (8004884 <DMA_CalcBaseAndBitshift+0x160>)
 8004818:	4013      	ands	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6593      	str	r3, [r2, #88]	@ 0x58
 800481e:	e005      	b.n	800482c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	40020010 	.word	0x40020010
 8004840:	40020028 	.word	0x40020028
 8004844:	40020040 	.word	0x40020040
 8004848:	40020058 	.word	0x40020058
 800484c:	40020070 	.word	0x40020070
 8004850:	40020088 	.word	0x40020088
 8004854:	400200a0 	.word	0x400200a0
 8004858:	400200b8 	.word	0x400200b8
 800485c:	40020410 	.word	0x40020410
 8004860:	40020428 	.word	0x40020428
 8004864:	40020440 	.word	0x40020440
 8004868:	40020458 	.word	0x40020458
 800486c:	40020470 	.word	0x40020470
 8004870:	40020488 	.word	0x40020488
 8004874:	400204a0 	.word	0x400204a0
 8004878:	400204b8 	.word	0x400204b8
 800487c:	aaaaaaab 	.word	0xaaaaaaab
 8004880:	0800c948 	.word	0x0800c948
 8004884:	fffffc00 	.word	0xfffffc00

08004888 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d120      	bne.n	80048de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d858      	bhi.n	8004956 <DMA_CheckFifoParam+0xce>
 80048a4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <DMA_CheckFifoParam+0x24>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	080048cf 	.word	0x080048cf
 80048b4:	080048bd 	.word	0x080048bd
 80048b8:	08004957 	.word	0x08004957
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d048      	beq.n	800495a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048cc:	e045      	b.n	800495a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048d6:	d142      	bne.n	800495e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048dc:	e03f      	b.n	800495e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e6:	d123      	bne.n	8004930 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d838      	bhi.n	8004962 <DMA_CheckFifoParam+0xda>
 80048f0:	a201      	add	r2, pc, #4	@ (adr r2, 80048f8 <DMA_CheckFifoParam+0x70>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	08004909 	.word	0x08004909
 80048fc:	0800490f 	.word	0x0800490f
 8004900:	08004909 	.word	0x08004909
 8004904:	08004921 	.word	0x08004921
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
        break;
 800490c:	e030      	b.n	8004970 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004912:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d025      	beq.n	8004966 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800491e:	e022      	b.n	8004966 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004928:	d11f      	bne.n	800496a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800492e:	e01c      	b.n	800496a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	2b02      	cmp	r3, #2
 8004936:	d902      	bls.n	800493e <DMA_CheckFifoParam+0xb6>
 8004938:	2b03      	cmp	r3, #3
 800493a:	d003      	beq.n	8004944 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800493c:	e018      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
        break;
 8004942:	e015      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00e      	beq.n	800496e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
    break;
 8004954:	e00b      	b.n	800496e <DMA_CheckFifoParam+0xe6>
        break;
 8004956:	bf00      	nop
 8004958:	e00a      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        break;
 800495a:	bf00      	nop
 800495c:	e008      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        break;
 800495e:	bf00      	nop
 8004960:	e006      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        break;
 8004962:	bf00      	nop
 8004964:	e004      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        break;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
    break;
 800496e:	bf00      	nop
    }
  }

  return status;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop

08004980 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a38      	ldr	r2, [pc, #224]	@ (8004a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a36      	ldr	r2, [pc, #216]	@ (8004a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01d      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a35      	ldr	r2, [pc, #212]	@ (8004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a33      	ldr	r2, [pc, #204]	@ (8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a32      	ldr	r2, [pc, #200]	@ (8004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a30      	ldr	r2, [pc, #192]	@ (8004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2f      	ldr	r2, [pc, #188]	@ (8004a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d101      	bne.n	80049e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01a      	beq.n	8004a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	3b08      	subs	r3, #8
 80049f0:	4a28      	ldr	r2, [pc, #160]	@ (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4b26      	ldr	r3, [pc, #152]	@ (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	461a      	mov	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a24      	ldr	r2, [pc, #144]	@ (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a0c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2201      	movs	r2, #1
 8004a16:	409a      	lsls	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a1c:	e024      	b.n	8004a68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	3b10      	subs	r3, #16
 8004a26:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d806      	bhi.n	8004a46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d902      	bls.n	8004a46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3308      	adds	r3, #8
 8004a44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4b18      	ldr	r3, [pc, #96]	@ (8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a16      	ldr	r2, [pc, #88]	@ (8004ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a58:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	2201      	movs	r2, #1
 8004a62:	409a      	lsls	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	58025408 	.word	0x58025408
 8004a78:	5802541c 	.word	0x5802541c
 8004a7c:	58025430 	.word	0x58025430
 8004a80:	58025444 	.word	0x58025444
 8004a84:	58025458 	.word	0x58025458
 8004a88:	5802546c 	.word	0x5802546c
 8004a8c:	58025480 	.word	0x58025480
 8004a90:	58025494 	.word	0x58025494
 8004a94:	cccccccd 	.word	0xcccccccd
 8004a98:	16009600 	.word	0x16009600
 8004a9c:	58025880 	.word	0x58025880
 8004aa0:	aaaaaaab 	.word	0xaaaaaaab
 8004aa4:	400204b8 	.word	0x400204b8
 8004aa8:	4002040f 	.word	0x4002040f
 8004aac:	10008200 	.word	0x10008200
 8004ab0:	40020880 	.word	0x40020880

08004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d04a      	beq.n	8004b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d847      	bhi.n	8004b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a25      	ldr	r2, [pc, #148]	@ (8004b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d022      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a24      	ldr	r2, [pc, #144]	@ (8004b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d01d      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a22      	ldr	r2, [pc, #136]	@ (8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d018      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a21      	ldr	r2, [pc, #132]	@ (8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d013      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00e      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	@ (8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	@ (8004b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d101      	bne.n	8004b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b24:	2300      	movs	r3, #0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4b17      	ldr	r3, [pc, #92]	@ (8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	461a      	mov	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a15      	ldr	r2, [pc, #84]	@ (8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b3c:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b3e:	e009      	b.n	8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4b14      	ldr	r3, [pc, #80]	@ (8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a11      	ldr	r2, [pc, #68]	@ (8004b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b52:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	2201      	movs	r2, #1
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	58025408 	.word	0x58025408
 8004b70:	5802541c 	.word	0x5802541c
 8004b74:	58025430 	.word	0x58025430
 8004b78:	58025444 	.word	0x58025444
 8004b7c:	58025458 	.word	0x58025458
 8004b80:	5802546c 	.word	0x5802546c
 8004b84:	58025480 	.word	0x58025480
 8004b88:	58025494 	.word	0x58025494
 8004b8c:	1600963f 	.word	0x1600963f
 8004b90:	58025940 	.word	0x58025940
 8004b94:	1000823f 	.word	0x1000823f
 8004b98:	40020940 	.word	0x40020940

08004b9c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e0e3      	b.n	8004d76 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2223      	movs	r2, #35	@ 0x23
 8004bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fc f95b 	bl	8000e7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc6:	4b6e      	ldr	r3, [pc, #440]	@ (8004d80 <HAL_ETH_Init+0x1e4>)
 8004bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bcc:	4a6c      	ldr	r2, [pc, #432]	@ (8004d80 <HAL_ETH_Init+0x1e4>)
 8004bce:	f043 0302 	orr.w	r3, r3, #2
 8004bd2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d80 <HAL_ETH_Init+0x1e4>)
 8004bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	7a1b      	ldrb	r3, [r3, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004bec:	2000      	movs	r0, #0
 8004bee:	f7fc fe8d 	bl	800190c <HAL_SYSCFG_ETHInterfaceSelect>
 8004bf2:	e003      	b.n	8004bfc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004bf4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004bf8:	f7fc fe88 	bl	800190c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004bfc:	4b61      	ldr	r3, [pc, #388]	@ (8004d84 <HAL_ETH_Init+0x1e8>)
 8004bfe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c18:	f7fc fe3c 	bl	8001894 <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c1e:	e011      	b.n	8004c44 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004c20:	f7fc fe38 	bl	8001894 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004c2e:	d909      	bls.n	8004c44 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2204      	movs	r2, #4
 8004c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	22e0      	movs	r2, #224	@ 0xe0
 8004c3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e098      	b.n	8004d76 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e4      	bne.n	8004c20 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f89e 	bl	8004d98 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004c5c:	f001 ffde 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8004c60:	4603      	mov	r3, r0
 8004c62:	4a49      	ldr	r2, [pc, #292]	@ (8004d88 <HAL_ETH_Init+0x1ec>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	0c9a      	lsrs	r2, r3, #18
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3a01      	subs	r2, #1
 8004c70:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa81 	bl	800517c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c82:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004c86:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c96:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	22e0      	movs	r2, #224	@ 0xe0
 8004cb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e05d      	b.n	8004d76 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cc2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004cc6:	4b31      	ldr	r3, [pc, #196]	@ (8004d8c <HAL_ETH_Init+0x1f0>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6952      	ldr	r2, [r2, #20]
 8004cce:	0051      	lsls	r1, r2, #1
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004cda:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fae9 	bl	80052b6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fb2f 	bl	8005348 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	3305      	adds	r3, #5
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	3303      	adds	r3, #3
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	061a      	lsls	r2, r3, #24
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	3302      	adds	r3, #2
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	041b      	lsls	r3, r3, #16
 8004d1c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	3301      	adds	r3, #1
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d28:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d36:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d38:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	4b11      	ldr	r3, [pc, #68]	@ (8004d90 <HAL_ETH_Init+0x1f4>)
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d94 <HAL_ETH_Init+0x1f8>)
 8004d5e:	430b      	orrs	r3, r1
 8004d60:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2210      	movs	r2, #16
 8004d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	58024400 	.word	0x58024400
 8004d84:	58000400 	.word	0x58000400
 8004d88:	431bde83 	.word	0x431bde83
 8004d8c:	ffff8001 	.word	0xffff8001
 8004d90:	0c020060 	.word	0x0c020060
 8004d94:	0c20c000 	.word	0x0c20c000

08004d98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004db2:	f001 ff33 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8004db6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4a1a      	ldr	r2, [pc, #104]	@ (8004e24 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d804      	bhi.n	8004dca <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e022      	b.n	8004e10 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4a16      	ldr	r2, [pc, #88]	@ (8004e28 <HAL_ETH_SetMDIOClockRange+0x90>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d204      	bcs.n	8004ddc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e019      	b.n	8004e10 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4a13      	ldr	r2, [pc, #76]	@ (8004e2c <HAL_ETH_SetMDIOClockRange+0x94>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d915      	bls.n	8004e10 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4a12      	ldr	r2, [pc, #72]	@ (8004e30 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d804      	bhi.n	8004df6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e00c      	b.n	8004e10 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d804      	bhi.n	8004e08 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	e003      	b.n	8004e10 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8004e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	02160ebf 	.word	0x02160ebf
 8004e28:	03938700 	.word	0x03938700
 8004e2c:	05f5e0ff 	.word	0x05f5e0ff
 8004e30:	08f0d17f 	.word	0x08f0d17f
 8004e34:	0ee6b27f 	.word	0x0ee6b27f

08004e38 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004e4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	791b      	ldrb	r3, [r3, #4]
 8004e50:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004e52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	7b1b      	ldrb	r3, [r3, #12]
 8004e58:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004e5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	7b5b      	ldrb	r3, [r3, #13]
 8004e60:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	7b9b      	ldrb	r3, [r3, #14]
 8004e68:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	7bdb      	ldrb	r3, [r3, #15]
 8004e70:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e72:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	7c12      	ldrb	r2, [r2, #16]
 8004e78:	2a00      	cmp	r2, #0
 8004e7a:	d102      	bne.n	8004e82 <ETH_SetMACConfig+0x4a>
 8004e7c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e80:	e000      	b.n	8004e84 <ETH_SetMACConfig+0x4c>
 8004e82:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e84:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	7c52      	ldrb	r2, [r2, #17]
 8004e8a:	2a00      	cmp	r2, #0
 8004e8c:	d102      	bne.n	8004e94 <ETH_SetMACConfig+0x5c>
 8004e8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e92:	e000      	b.n	8004e96 <ETH_SetMACConfig+0x5e>
 8004e94:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	7c9b      	ldrb	r3, [r3, #18]
 8004e9c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e9e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004ea4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004eaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	7f1b      	ldrb	r3, [r3, #28]
 8004eb0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004eb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	7f5b      	ldrb	r3, [r3, #29]
 8004eb8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004eba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	7f92      	ldrb	r2, [r2, #30]
 8004ec0:	2a00      	cmp	r2, #0
 8004ec2:	d102      	bne.n	8004eca <ETH_SetMACConfig+0x92>
 8004ec4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ec8:	e000      	b.n	8004ecc <ETH_SetMACConfig+0x94>
 8004eca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004ecc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	7fdb      	ldrb	r3, [r3, #31]
 8004ed2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004ed4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d102      	bne.n	8004ee6 <ETH_SetMACConfig+0xae>
 8004ee0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ee4:	e000      	b.n	8004ee8 <ETH_SetMACConfig+0xb0>
 8004ee6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ee8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004eee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ef6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004ef8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b56      	ldr	r3, [pc, #344]	@ (8005064 <ETH_SetMACConfig+0x22c>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	430b      	orrs	r3, r1
 8004f14:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f22:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004f24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f2c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004f2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004f36:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004f38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004f40:	2a00      	cmp	r2, #0
 8004f42:	d102      	bne.n	8004f4a <ETH_SetMACConfig+0x112>
 8004f44:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004f48:	e000      	b.n	8004f4c <ETH_SetMACConfig+0x114>
 8004f4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004f4c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	4b42      	ldr	r3, [pc, #264]	@ (8005068 <ETH_SetMACConfig+0x230>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	68f9      	ldr	r1, [r7, #12]
 8004f66:	430b      	orrs	r3, r1
 8004f68:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f70:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	4b3a      	ldr	r3, [pc, #232]	@ (800506c <ETH_SetMACConfig+0x234>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	68f9      	ldr	r1, [r7, #12]
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004f94:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f9a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	d101      	bne.n	8004faa <ETH_SetMACConfig+0x172>
 8004fa6:	2280      	movs	r2, #128	@ 0x80
 8004fa8:	e000      	b.n	8004fac <ETH_SetMACConfig+0x174>
 8004faa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004fac:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fbe:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	68f9      	ldr	r1, [r7, #12]
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004fd4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004fdc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fea:	f023 0103 	bic.w	r1, r3, #3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005002:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800501e:	2a00      	cmp	r2, #0
 8005020:	d101      	bne.n	8005026 <ETH_SetMACConfig+0x1ee>
 8005022:	2240      	movs	r2, #64	@ 0x40
 8005024:	e000      	b.n	8005028 <ETH_SetMACConfig+0x1f0>
 8005026:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005028:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005030:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005032:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800503a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005048:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	430a      	orrs	r2, r1
 8005054:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005058:	bf00      	nop
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	00048083 	.word	0x00048083
 8005068:	c0f88000 	.word	0xc0f88000
 800506c:	fffffef0 	.word	0xfffffef0

08005070 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b38      	ldr	r3, [pc, #224]	@ (8005168 <ETH_SetDMAConfig+0xf8>)
 8005086:	4013      	ands	r3, r2
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	6811      	ldr	r1, [r2, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	430b      	orrs	r3, r1
 8005092:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005096:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	791b      	ldrb	r3, [r3, #4]
 800509c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	7b1b      	ldrb	r3, [r3, #12]
 80050a8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	4b2c      	ldr	r3, [pc, #176]	@ (800516c <ETH_SetDMAConfig+0xfc>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	68f9      	ldr	r1, [r7, #12]
 80050c2:	430b      	orrs	r3, r1
 80050c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050c8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	7b5b      	ldrb	r3, [r3, #13]
 80050ce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80050e4:	4b22      	ldr	r3, [pc, #136]	@ (8005170 <ETH_SetDMAConfig+0x100>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	68f9      	ldr	r1, [r7, #12]
 80050ee:	430b      	orrs	r3, r1
 80050f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050f4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	7d1b      	ldrb	r3, [r3, #20]
 8005100:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005102:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	7f5b      	ldrb	r3, [r3, #29]
 8005108:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005116:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800511a:	4b16      	ldr	r3, [pc, #88]	@ (8005174 <ETH_SetDMAConfig+0x104>)
 800511c:	4013      	ands	r3, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	68f9      	ldr	r1, [r7, #12]
 8005124:	430b      	orrs	r3, r1
 8005126:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800512a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	7f1b      	ldrb	r3, [r3, #28]
 8005132:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005144:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005148:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <ETH_SetDMAConfig+0x108>)
 800514a:	4013      	ands	r3, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	430b      	orrs	r3, r1
 8005154:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005158:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	ffff87fd 	.word	0xffff87fd
 800516c:	ffff2ffe 	.word	0xffff2ffe
 8005170:	fffec000 	.word	0xfffec000
 8005174:	ffc0efef 	.word	0xffc0efef
 8005178:	7fc0ffff 	.word	0x7fc0ffff

0800517c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0a4      	sub	sp, #144	@ 0x90
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800518a:	2300      	movs	r3, #0
 800518c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800518e:	2300      	movs	r3, #0
 8005190:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005194:	2300      	movs	r3, #0
 8005196:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80051b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051bc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80051d4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80051d8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80051e0:	2300      	movs	r3, #0
 80051e2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80051f6:	2300      	movs	r3, #0
 80051f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80051fe:	2300      	movs	r3, #0
 8005200:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005202:	2300      	movs	r3, #0
 8005204:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005214:	2320      	movs	r3, #32
 8005216:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005220:	2300      	movs	r3, #0
 8005222:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005226:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800522a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800522c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005230:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005232:	2300      	movs	r3, #0
 8005234:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005238:	2302      	movs	r3, #2
 800523a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800523e:	2300      	movs	r3, #0
 8005240:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005244:	2300      	movs	r3, #0
 8005246:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800524a:	2300      	movs	r3, #0
 800524c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005256:	2300      	movs	r3, #0
 8005258:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800525a:	2301      	movs	r3, #1
 800525c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005260:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fde6 	bl	8004e38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800526c:	2301      	movs	r3, #1
 800526e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005270:	2301      	movs	r3, #1
 8005272:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005274:	2300      	movs	r3, #0
 8005276:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005278:	2300      	movs	r3, #0
 800527a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800527e:	2300      	movs	r3, #0
 8005280:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005282:	2300      	movs	r3, #0
 8005284:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005286:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800528a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800528c:	2300      	movs	r3, #0
 800528e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005290:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005294:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005296:	2300      	movs	r3, #0
 8005298:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800529c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	4619      	mov	r1, r3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff fee1 	bl	8005070 <ETH_SetDMAConfig>
}
 80052ae:	bf00      	nop
 80052b0:	3790      	adds	r7, #144	@ 0x90
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e01d      	b.n	8005300 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68d9      	ldr	r1, [r3, #12]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4613      	mov	r3, r2
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	4413      	add	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	440b      	add	r3, r1
 80052d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2200      	movs	r2, #0
 80052e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2200      	movs	r2, #0
 80052ec:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	3206      	adds	r2, #6
 80052f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b03      	cmp	r3, #3
 8005304:	d9de      	bls.n	80052c4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005314:	461a      	mov	r2, r3
 8005316:	2303      	movs	r3, #3
 8005318:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005328:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005338:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e023      	b.n	800539e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6919      	ldr	r1, [r3, #16]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2200      	movs	r2, #0
 8005372:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2200      	movs	r2, #0
 8005378:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	3212      	adds	r2, #18
 8005394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3301      	adds	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d9d8      	bls.n	8005356 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ca:	461a      	mov	r2, r3
 80053cc:	2303      	movs	r3, #3
 80053ce:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053de:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053f2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005404:	b480      	push	{r7}
 8005406:	b089      	sub	sp, #36	@ 0x24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800540e:	2300      	movs	r3, #0
 8005410:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005412:	4b89      	ldr	r3, [pc, #548]	@ (8005638 <HAL_GPIO_Init+0x234>)
 8005414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005416:	e194      	b.n	8005742 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	2101      	movs	r1, #1
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	4013      	ands	r3, r2
 8005426:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8186 	beq.w	800573c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f003 0303 	and.w	r3, r3, #3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d005      	beq.n	8005448 <HAL_GPIO_Init+0x44>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d130      	bne.n	80054aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	2203      	movs	r2, #3
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	43db      	mvns	r3, r3
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	4013      	ands	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	4313      	orrs	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800547e:	2201      	movs	r2, #1
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4013      	ands	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	091b      	lsrs	r3, r3, #4
 8005494:	f003 0201 	and.w	r2, r3, #1
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d017      	beq.n	80054e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	2203      	movs	r2, #3
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43db      	mvns	r3, r3
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	4013      	ands	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	4313      	orrs	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d123      	bne.n	800553a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	08da      	lsrs	r2, r3, #3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3208      	adds	r2, #8
 80054fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	220f      	movs	r2, #15
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4013      	ands	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4313      	orrs	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	08da      	lsrs	r2, r3, #3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3208      	adds	r2, #8
 8005534:	69b9      	ldr	r1, [r7, #24]
 8005536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	2203      	movs	r2, #3
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	4013      	ands	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 0203 	and.w	r2, r3, #3
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80e0 	beq.w	800573c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800557c:	4b2f      	ldr	r3, [pc, #188]	@ (800563c <HAL_GPIO_Init+0x238>)
 800557e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005582:	4a2e      	ldr	r2, [pc, #184]	@ (800563c <HAL_GPIO_Init+0x238>)
 8005584:	f043 0302 	orr.w	r3, r3, #2
 8005588:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800558c:	4b2b      	ldr	r3, [pc, #172]	@ (800563c <HAL_GPIO_Init+0x238>)
 800558e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800559a:	4a29      	ldr	r2, [pc, #164]	@ (8005640 <HAL_GPIO_Init+0x23c>)
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	089b      	lsrs	r3, r3, #2
 80055a0:	3302      	adds	r3, #2
 80055a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	220f      	movs	r2, #15
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43db      	mvns	r3, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4013      	ands	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a20      	ldr	r2, [pc, #128]	@ (8005644 <HAL_GPIO_Init+0x240>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d052      	beq.n	800566c <HAL_GPIO_Init+0x268>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005648 <HAL_GPIO_Init+0x244>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d031      	beq.n	8005632 <HAL_GPIO_Init+0x22e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1e      	ldr	r2, [pc, #120]	@ (800564c <HAL_GPIO_Init+0x248>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02b      	beq.n	800562e <HAL_GPIO_Init+0x22a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005650 <HAL_GPIO_Init+0x24c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d025      	beq.n	800562a <HAL_GPIO_Init+0x226>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <HAL_GPIO_Init+0x250>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01f      	beq.n	8005626 <HAL_GPIO_Init+0x222>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005658 <HAL_GPIO_Init+0x254>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d019      	beq.n	8005622 <HAL_GPIO_Init+0x21e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1a      	ldr	r2, [pc, #104]	@ (800565c <HAL_GPIO_Init+0x258>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d013      	beq.n	800561e <HAL_GPIO_Init+0x21a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a19      	ldr	r2, [pc, #100]	@ (8005660 <HAL_GPIO_Init+0x25c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00d      	beq.n	800561a <HAL_GPIO_Init+0x216>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a18      	ldr	r2, [pc, #96]	@ (8005664 <HAL_GPIO_Init+0x260>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <HAL_GPIO_Init+0x212>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a17      	ldr	r2, [pc, #92]	@ (8005668 <HAL_GPIO_Init+0x264>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d101      	bne.n	8005612 <HAL_GPIO_Init+0x20e>
 800560e:	2309      	movs	r3, #9
 8005610:	e02d      	b.n	800566e <HAL_GPIO_Init+0x26a>
 8005612:	230a      	movs	r3, #10
 8005614:	e02b      	b.n	800566e <HAL_GPIO_Init+0x26a>
 8005616:	2308      	movs	r3, #8
 8005618:	e029      	b.n	800566e <HAL_GPIO_Init+0x26a>
 800561a:	2307      	movs	r3, #7
 800561c:	e027      	b.n	800566e <HAL_GPIO_Init+0x26a>
 800561e:	2306      	movs	r3, #6
 8005620:	e025      	b.n	800566e <HAL_GPIO_Init+0x26a>
 8005622:	2305      	movs	r3, #5
 8005624:	e023      	b.n	800566e <HAL_GPIO_Init+0x26a>
 8005626:	2304      	movs	r3, #4
 8005628:	e021      	b.n	800566e <HAL_GPIO_Init+0x26a>
 800562a:	2303      	movs	r3, #3
 800562c:	e01f      	b.n	800566e <HAL_GPIO_Init+0x26a>
 800562e:	2302      	movs	r3, #2
 8005630:	e01d      	b.n	800566e <HAL_GPIO_Init+0x26a>
 8005632:	2301      	movs	r3, #1
 8005634:	e01b      	b.n	800566e <HAL_GPIO_Init+0x26a>
 8005636:	bf00      	nop
 8005638:	58000080 	.word	0x58000080
 800563c:	58024400 	.word	0x58024400
 8005640:	58000400 	.word	0x58000400
 8005644:	58020000 	.word	0x58020000
 8005648:	58020400 	.word	0x58020400
 800564c:	58020800 	.word	0x58020800
 8005650:	58020c00 	.word	0x58020c00
 8005654:	58021000 	.word	0x58021000
 8005658:	58021400 	.word	0x58021400
 800565c:	58021800 	.word	0x58021800
 8005660:	58021c00 	.word	0x58021c00
 8005664:	58022000 	.word	0x58022000
 8005668:	58022400 	.word	0x58022400
 800566c:	2300      	movs	r3, #0
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	f002 0203 	and.w	r2, r2, #3
 8005674:	0092      	lsls	r2, r2, #2
 8005676:	4093      	lsls	r3, r2
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4313      	orrs	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800567e:	4938      	ldr	r1, [pc, #224]	@ (8005760 <HAL_GPIO_Init+0x35c>)
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	089b      	lsrs	r3, r3, #2
 8005684:	3302      	adds	r3, #2
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80056b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80056e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	f47f ae63 	bne.w	8005418 <HAL_GPIO_Init+0x14>
  }
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	3724      	adds	r7, #36	@ 0x24
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	58000400 	.word	0x58000400

08005764 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005772:	4b75      	ldr	r3, [pc, #468]	@ (8005948 <HAL_GPIO_DeInit+0x1e4>)
 8005774:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005776:	e0d9      	b.n	800592c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005778:	2201      	movs	r2, #1
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	4013      	ands	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80cc 	beq.w	8005926 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800578e:	4a6f      	ldr	r2, [pc, #444]	@ (800594c <HAL_GPIO_DeInit+0x1e8>)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	3302      	adds	r3, #2
 8005796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800579a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	220f      	movs	r2, #15
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a67      	ldr	r2, [pc, #412]	@ (8005950 <HAL_GPIO_DeInit+0x1ec>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d037      	beq.n	8005828 <HAL_GPIO_DeInit+0xc4>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a66      	ldr	r2, [pc, #408]	@ (8005954 <HAL_GPIO_DeInit+0x1f0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d031      	beq.n	8005824 <HAL_GPIO_DeInit+0xc0>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a65      	ldr	r2, [pc, #404]	@ (8005958 <HAL_GPIO_DeInit+0x1f4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d02b      	beq.n	8005820 <HAL_GPIO_DeInit+0xbc>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a64      	ldr	r2, [pc, #400]	@ (800595c <HAL_GPIO_DeInit+0x1f8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d025      	beq.n	800581c <HAL_GPIO_DeInit+0xb8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a63      	ldr	r2, [pc, #396]	@ (8005960 <HAL_GPIO_DeInit+0x1fc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d01f      	beq.n	8005818 <HAL_GPIO_DeInit+0xb4>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a62      	ldr	r2, [pc, #392]	@ (8005964 <HAL_GPIO_DeInit+0x200>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d019      	beq.n	8005814 <HAL_GPIO_DeInit+0xb0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a61      	ldr	r2, [pc, #388]	@ (8005968 <HAL_GPIO_DeInit+0x204>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <HAL_GPIO_DeInit+0xac>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a60      	ldr	r2, [pc, #384]	@ (800596c <HAL_GPIO_DeInit+0x208>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00d      	beq.n	800580c <HAL_GPIO_DeInit+0xa8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a5f      	ldr	r2, [pc, #380]	@ (8005970 <HAL_GPIO_DeInit+0x20c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <HAL_GPIO_DeInit+0xa4>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a5e      	ldr	r2, [pc, #376]	@ (8005974 <HAL_GPIO_DeInit+0x210>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_GPIO_DeInit+0xa0>
 8005800:	2309      	movs	r3, #9
 8005802:	e012      	b.n	800582a <HAL_GPIO_DeInit+0xc6>
 8005804:	230a      	movs	r3, #10
 8005806:	e010      	b.n	800582a <HAL_GPIO_DeInit+0xc6>
 8005808:	2308      	movs	r3, #8
 800580a:	e00e      	b.n	800582a <HAL_GPIO_DeInit+0xc6>
 800580c:	2307      	movs	r3, #7
 800580e:	e00c      	b.n	800582a <HAL_GPIO_DeInit+0xc6>
 8005810:	2306      	movs	r3, #6
 8005812:	e00a      	b.n	800582a <HAL_GPIO_DeInit+0xc6>
 8005814:	2305      	movs	r3, #5
 8005816:	e008      	b.n	800582a <HAL_GPIO_DeInit+0xc6>
 8005818:	2304      	movs	r3, #4
 800581a:	e006      	b.n	800582a <HAL_GPIO_DeInit+0xc6>
 800581c:	2303      	movs	r3, #3
 800581e:	e004      	b.n	800582a <HAL_GPIO_DeInit+0xc6>
 8005820:	2302      	movs	r3, #2
 8005822:	e002      	b.n	800582a <HAL_GPIO_DeInit+0xc6>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <HAL_GPIO_DeInit+0xc6>
 8005828:	2300      	movs	r3, #0
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	f002 0203 	and.w	r2, r2, #3
 8005830:	0092      	lsls	r2, r2, #2
 8005832:	4093      	lsls	r3, r2
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	d136      	bne.n	80058a8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	43db      	mvns	r3, r3
 8005842:	401a      	ands	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	43db      	mvns	r3, r3
 8005850:	401a      	ands	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	43db      	mvns	r3, r3
 8005860:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005864:	4013      	ands	r3, r2
 8005866:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	43db      	mvns	r3, r3
 8005872:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005876:	4013      	ands	r3, r2
 8005878:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	220f      	movs	r2, #15
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800588a:	4a30      	ldr	r2, [pc, #192]	@ (800594c <HAL_GPIO_DeInit+0x1e8>)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	3302      	adds	r3, #2
 8005892:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	43da      	mvns	r2, r3
 800589a:	482c      	ldr	r0, [pc, #176]	@ (800594c <HAL_GPIO_DeInit+0x1e8>)
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	089b      	lsrs	r3, r3, #2
 80058a0:	400a      	ands	r2, r1
 80058a2:	3302      	adds	r3, #2
 80058a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	2103      	movs	r1, #3
 80058b2:	fa01 f303 	lsl.w	r3, r1, r3
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	08da      	lsrs	r2, r3, #3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3208      	adds	r2, #8
 80058c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	220f      	movs	r2, #15
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	43db      	mvns	r3, r3
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	08d2      	lsrs	r2, r2, #3
 80058dc:	4019      	ands	r1, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3208      	adds	r2, #8
 80058e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	2103      	movs	r1, #3
 80058f0:	fa01 f303 	lsl.w	r3, r1, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	401a      	ands	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	2101      	movs	r1, #1
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	43db      	mvns	r3, r3
 800590a:	401a      	ands	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	2103      	movs	r1, #3
 800591a:	fa01 f303 	lsl.w	r3, r1, r3
 800591e:	43db      	mvns	r3, r3
 8005920:	401a      	ands	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	3301      	adds	r3, #1
 800592a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	f47f af1f 	bne.w	8005778 <HAL_GPIO_DeInit+0x14>
  }
}
 800593a:	bf00      	nop
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	58000080 	.word	0x58000080
 800594c:	58000400 	.word	0x58000400
 8005950:	58020000 	.word	0x58020000
 8005954:	58020400 	.word	0x58020400
 8005958:	58020800 	.word	0x58020800
 800595c:	58020c00 	.word	0x58020c00
 8005960:	58021000 	.word	0x58021000
 8005964:	58021400 	.word	0x58021400
 8005968:	58021800 	.word	0x58021800
 800596c:	58021c00 	.word	0x58021c00
 8005970:	58022000 	.word	0x58022000
 8005974:	58022400 	.word	0x58022400

08005978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	807b      	strh	r3, [r7, #2]
 8005984:	4613      	mov	r3, r2
 8005986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005988:	787b      	ldrb	r3, [r7, #1]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800598e:	887a      	ldrh	r2, [r7, #2]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005994:	e003      	b.n	800599e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005996:	887b      	ldrh	r3, [r7, #2]
 8005998:	041a      	lsls	r2, r3, #16
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	619a      	str	r2, [r3, #24]
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	460b      	mov	r3, r1
 80059b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059bc:	887a      	ldrh	r2, [r7, #2]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4013      	ands	r3, r2
 80059c2:	041a      	lsls	r2, r3, #16
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	43d9      	mvns	r1, r3
 80059c8:	887b      	ldrh	r3, [r7, #2]
 80059ca:	400b      	ands	r3, r1
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	619a      	str	r2, [r3, #24]
}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	4603      	mov	r3, r0
 80059e6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80059e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d008      	beq.n	8005a0a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fb f97f 	bl	8000d08 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af02      	add	r7, sp, #8
 8005a18:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0fe      	b.n	8005c22 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fb fccd 	bl	80013d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2203      	movs	r2, #3
 8005a42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f006 f826 	bl	800ba9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	7c1a      	ldrb	r2, [r3, #16]
 8005a58:	f88d 2000 	strb.w	r2, [sp]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a60:	f005 ffaa 	bl	800b9b8 <USB_CoreInit>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e0d5      	b.n	8005c22 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f006 f81e 	bl	800babe <USB_SetCurrentMode>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0c6      	b.n	8005c22 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]
 8005a98:	e04a      	b.n	8005b30 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a9a:	7bfa      	ldrb	r2, [r7, #15]
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3315      	adds	r3, #21
 8005aaa:	2201      	movs	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005aae:	7bfa      	ldrb	r2, [r7, #15]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	3314      	adds	r3, #20
 8005abe:	7bfa      	ldrb	r2, [r7, #15]
 8005ac0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ac2:	7bfa      	ldrb	r2, [r7, #15]
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	b298      	uxth	r0, r3
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	332e      	adds	r3, #46	@ 0x2e
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ada:	7bfa      	ldrb	r2, [r7, #15]
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	3318      	adds	r3, #24
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005aee:	7bfa      	ldrb	r2, [r7, #15]
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	331c      	adds	r3, #28
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b02:	7bfa      	ldrb	r2, [r7, #15]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	3320      	adds	r3, #32
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b16:	7bfa      	ldrb	r2, [r7, #15]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	3324      	adds	r3, #36	@ 0x24
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	791b      	ldrb	r3, [r3, #4]
 8005b34:	7bfa      	ldrb	r2, [r7, #15]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3af      	bcc.n	8005a9a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	73fb      	strb	r3, [r7, #15]
 8005b3e:	e044      	b.n	8005bca <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b40:	7bfa      	ldrb	r2, [r7, #15]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b56:	7bfa      	ldrb	r2, [r7, #15]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005b68:	7bfa      	ldrb	r2, [r7, #15]
 8005b6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b6c:	7bfa      	ldrb	r2, [r7, #15]
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b82:	7bfa      	ldrb	r2, [r7, #15]
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b98:	7bfa      	ldrb	r2, [r7, #15]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bae:	7bfa      	ldrb	r2, [r7, #15]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	73fb      	strb	r3, [r7, #15]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	791b      	ldrb	r3, [r3, #4]
 8005bce:	7bfa      	ldrb	r2, [r7, #15]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d3b5      	bcc.n	8005b40 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	7c1a      	ldrb	r2, [r3, #16]
 8005bdc:	f88d 2000 	strb.w	r2, [sp]
 8005be0:	3304      	adds	r3, #4
 8005be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005be4:	f005 ffb8 	bl	800bb58 <USB_DevInit>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e013      	b.n	8005c22 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	7b1b      	ldrb	r3, [r3, #12]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d102      	bne.n	8005c16 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f80b 	bl	8005c2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f006 f973 	bl	800bf06 <USB_DevDisconnect>

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c5a:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <HAL_PCDEx_ActivateLPM+0x44>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	10000003 	.word	0x10000003

08005c74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c7c:	4b19      	ldr	r3, [pc, #100]	@ (8005ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d00a      	beq.n	8005c9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c88:	4b16      	ldr	r3, [pc, #88]	@ (8005ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d001      	beq.n	8005c9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e01f      	b.n	8005cda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e01d      	b.n	8005cda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f023 0207 	bic.w	r2, r3, #7
 8005ca6:	490f      	ldr	r1, [pc, #60]	@ (8005ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cae:	f7fb fdf1 	bl	8001894 <HAL_GetTick>
 8005cb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cb4:	e009      	b.n	8005cca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cb6:	f7fb fded 	bl	8001894 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cc4:	d901      	bls.n	8005cca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e007      	b.n	8005cda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cca:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cd6:	d1ee      	bne.n	8005cb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	58024800 	.word	0x58024800

08005ce8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005cec:	4b05      	ldr	r3, [pc, #20]	@ (8005d04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	4a04      	ldr	r2, [pc, #16]	@ (8005d04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cf6:	60d3      	str	r3, [r2, #12]
}
 8005cf8:	bf00      	nop
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	58024800 	.word	0x58024800

08005d08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08c      	sub	sp, #48	@ 0x30
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f000 bc48 	b.w	80065ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8088 	beq.w	8005e3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d2a:	4b99      	ldr	r3, [pc, #612]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d34:	4b96      	ldr	r3, [pc, #600]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d007      	beq.n	8005d50 <HAL_RCC_OscConfig+0x48>
 8005d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d42:	2b18      	cmp	r3, #24
 8005d44:	d111      	bne.n	8005d6a <HAL_RCC_OscConfig+0x62>
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d10c      	bne.n	8005d6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d50:	4b8f      	ldr	r3, [pc, #572]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d06d      	beq.n	8005e38 <HAL_RCC_OscConfig+0x130>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d169      	bne.n	8005e38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	f000 bc21 	b.w	80065ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d72:	d106      	bne.n	8005d82 <HAL_RCC_OscConfig+0x7a>
 8005d74:	4b86      	ldr	r3, [pc, #536]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a85      	ldr	r2, [pc, #532]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e02e      	b.n	8005de0 <HAL_RCC_OscConfig+0xd8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0x9c>
 8005d8a:	4b81      	ldr	r3, [pc, #516]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a80      	ldr	r2, [pc, #512]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4b7e      	ldr	r3, [pc, #504]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7d      	ldr	r2, [pc, #500]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005d9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e01d      	b.n	8005de0 <HAL_RCC_OscConfig+0xd8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dac:	d10c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0xc0>
 8005dae:	4b78      	ldr	r3, [pc, #480]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a77      	ldr	r2, [pc, #476]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	4b75      	ldr	r3, [pc, #468]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a74      	ldr	r2, [pc, #464]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e00b      	b.n	8005de0 <HAL_RCC_OscConfig+0xd8>
 8005dc8:	4b71      	ldr	r3, [pc, #452]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a70      	ldr	r2, [pc, #448]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	4b6e      	ldr	r3, [pc, #440]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a6d      	ldr	r2, [pc, #436]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d013      	beq.n	8005e10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fb fd54 	bl	8001894 <HAL_GetTick>
 8005dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fb fd50 	bl	8001894 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	@ 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e3d4      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e02:	4b63      	ldr	r3, [pc, #396]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f0      	beq.n	8005df0 <HAL_RCC_OscConfig+0xe8>
 8005e0e:	e014      	b.n	8005e3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e10:	f7fb fd40 	bl	8001894 <HAL_GetTick>
 8005e14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e18:	f7fb fd3c 	bl	8001894 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b64      	cmp	r3, #100	@ 0x64
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e3c0      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e2a:	4b59      	ldr	r3, [pc, #356]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0x110>
 8005e36:	e000      	b.n	8005e3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80ca 	beq.w	8005fdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e48:	4b51      	ldr	r3, [pc, #324]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e52:	4b4f      	ldr	r3, [pc, #316]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <HAL_RCC_OscConfig+0x166>
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	2b18      	cmp	r3, #24
 8005e62:	d156      	bne.n	8005f12 <HAL_RCC_OscConfig+0x20a>
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d151      	bne.n	8005f12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e6e:	4b48      	ldr	r3, [pc, #288]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_RCC_OscConfig+0x17e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e392      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e86:	4b42      	ldr	r3, [pc, #264]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f023 0219 	bic.w	r2, r3, #25
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	493f      	ldr	r1, [pc, #252]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fb fcfc 	bl	8001894 <HAL_GetTick>
 8005e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea0:	f7fb fcf8 	bl	8001894 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e37c      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eb2:	4b37      	ldr	r3, [pc, #220]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebe:	f7fb fd19 	bl	80018f4 <HAL_GetREVID>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d817      	bhi.n	8005efc <HAL_RCC_OscConfig+0x1f4>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b40      	cmp	r3, #64	@ 0x40
 8005ed2:	d108      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
 8005ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005edc:	4a2c      	ldr	r2, [pc, #176]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ee2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ee4:	e07a      	b.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	031b      	lsls	r3, r3, #12
 8005ef4:	4926      	ldr	r1, [pc, #152]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005efa:	e06f      	b.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efc:	4b24      	ldr	r3, [pc, #144]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	061b      	lsls	r3, r3, #24
 8005f0a:	4921      	ldr	r1, [pc, #132]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f10:	e064      	b.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d047      	beq.n	8005faa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f023 0219 	bic.w	r2, r3, #25
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	491a      	ldr	r1, [pc, #104]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fb fcb2 	bl	8001894 <HAL_GetTick>
 8005f30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f34:	f7fb fcae 	bl	8001894 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e332      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f46:	4b12      	ldr	r3, [pc, #72]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f0      	beq.n	8005f34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f52:	f7fb fccf 	bl	80018f4 <HAL_GetREVID>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d819      	bhi.n	8005f94 <HAL_RCC_OscConfig+0x28c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d108      	bne.n	8005f7a <HAL_RCC_OscConfig+0x272>
 8005f68:	4b09      	ldr	r3, [pc, #36]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f70:	4a07      	ldr	r2, [pc, #28]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f76:	6053      	str	r3, [r2, #4]
 8005f78:	e030      	b.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
 8005f7a:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	031b      	lsls	r3, r3, #12
 8005f88:	4901      	ldr	r1, [pc, #4]	@ (8005f90 <HAL_RCC_OscConfig+0x288>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	604b      	str	r3, [r1, #4]
 8005f8e:	e025      	b.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
 8005f90:	58024400 	.word	0x58024400
 8005f94:	4b9a      	ldr	r3, [pc, #616]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	4997      	ldr	r1, [pc, #604]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	604b      	str	r3, [r1, #4]
 8005fa8:	e018      	b.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005faa:	4b95      	ldr	r3, [pc, #596]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a94      	ldr	r2, [pc, #592]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb6:	f7fb fc6d 	bl	8001894 <HAL_GetTick>
 8005fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fbe:	f7fb fc69 	bl	8001894 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e2ed      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fd0:	4b8b      	ldr	r3, [pc, #556]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f0      	bne.n	8005fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80a9 	beq.w	800613c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fea:	4b85      	ldr	r3, [pc, #532]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ff2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ff4:	4b82      	ldr	r3, [pc, #520]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d007      	beq.n	8006010 <HAL_RCC_OscConfig+0x308>
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b18      	cmp	r3, #24
 8006004:	d13a      	bne.n	800607c <HAL_RCC_OscConfig+0x374>
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	2b01      	cmp	r3, #1
 800600e:	d135      	bne.n	800607c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006010:	4b7b      	ldr	r3, [pc, #492]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCC_OscConfig+0x320>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	2b80      	cmp	r3, #128	@ 0x80
 8006022:	d001      	beq.n	8006028 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e2c1      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006028:	f7fb fc64 	bl	80018f4 <HAL_GetREVID>
 800602c:	4603      	mov	r3, r0
 800602e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006032:	4293      	cmp	r3, r2
 8006034:	d817      	bhi.n	8006066 <HAL_RCC_OscConfig+0x35e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	2b20      	cmp	r3, #32
 800603c:	d108      	bne.n	8006050 <HAL_RCC_OscConfig+0x348>
 800603e:	4b70      	ldr	r3, [pc, #448]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006046:	4a6e      	ldr	r2, [pc, #440]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006048:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800604c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800604e:	e075      	b.n	800613c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006050:	4b6b      	ldr	r3, [pc, #428]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	069b      	lsls	r3, r3, #26
 800605e:	4968      	ldr	r1, [pc, #416]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006060:	4313      	orrs	r3, r2
 8006062:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006064:	e06a      	b.n	800613c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006066:	4b66      	ldr	r3, [pc, #408]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	061b      	lsls	r3, r3, #24
 8006074:	4962      	ldr	r1, [pc, #392]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006076:	4313      	orrs	r3, r2
 8006078:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800607a:	e05f      	b.n	800613c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d042      	beq.n	800610a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006084:	4b5e      	ldr	r3, [pc, #376]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a5d      	ldr	r2, [pc, #372]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 800608a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006090:	f7fb fc00 	bl	8001894 <HAL_GetTick>
 8006094:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006098:	f7fb fbfc 	bl	8001894 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e280      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060aa:	4b55      	ldr	r3, [pc, #340]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0f0      	beq.n	8006098 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060b6:	f7fb fc1d 	bl	80018f4 <HAL_GetREVID>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d817      	bhi.n	80060f4 <HAL_RCC_OscConfig+0x3ec>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d108      	bne.n	80060de <HAL_RCC_OscConfig+0x3d6>
 80060cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80060d4:	4a4a      	ldr	r2, [pc, #296]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 80060d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060da:	6053      	str	r3, [r2, #4]
 80060dc:	e02e      	b.n	800613c <HAL_RCC_OscConfig+0x434>
 80060de:	4b48      	ldr	r3, [pc, #288]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	069b      	lsls	r3, r3, #26
 80060ec:	4944      	ldr	r1, [pc, #272]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	604b      	str	r3, [r1, #4]
 80060f2:	e023      	b.n	800613c <HAL_RCC_OscConfig+0x434>
 80060f4:	4b42      	ldr	r3, [pc, #264]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	061b      	lsls	r3, r3, #24
 8006102:	493f      	ldr	r1, [pc, #252]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006104:	4313      	orrs	r3, r2
 8006106:	60cb      	str	r3, [r1, #12]
 8006108:	e018      	b.n	800613c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800610a:	4b3d      	ldr	r3, [pc, #244]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a3c      	ldr	r2, [pc, #240]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006116:	f7fb fbbd 	bl	8001894 <HAL_GetTick>
 800611a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800611e:	f7fb fbb9 	bl	8001894 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e23d      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006130:	4b33      	ldr	r3, [pc, #204]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f0      	bne.n	800611e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d036      	beq.n	80061b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d019      	beq.n	8006184 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006150:	4b2b      	ldr	r3, [pc, #172]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006154:	4a2a      	ldr	r2, [pc, #168]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615c:	f7fb fb9a 	bl	8001894 <HAL_GetTick>
 8006160:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006164:	f7fb fb96 	bl	8001894 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e21a      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006176:	4b22      	ldr	r3, [pc, #136]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0f0      	beq.n	8006164 <HAL_RCC_OscConfig+0x45c>
 8006182:	e018      	b.n	80061b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006184:	4b1e      	ldr	r3, [pc, #120]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 8006186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006188:	4a1d      	ldr	r2, [pc, #116]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006190:	f7fb fb80 	bl	8001894 <HAL_GetTick>
 8006194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006198:	f7fb fb7c 	bl	8001894 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e200      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061aa:	4b15      	ldr	r3, [pc, #84]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 80061ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d039      	beq.n	8006236 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01c      	beq.n	8006204 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 80061d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80061d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061d6:	f7fb fb5d 	bl	8001894 <HAL_GetTick>
 80061da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061de:	f7fb fb59 	bl	8001894 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e1dd      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061f0:	4b03      	ldr	r3, [pc, #12]	@ (8006200 <HAL_RCC_OscConfig+0x4f8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0f0      	beq.n	80061de <HAL_RCC_OscConfig+0x4d6>
 80061fc:	e01b      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
 80061fe:	bf00      	nop
 8006200:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006204:	4b9b      	ldr	r3, [pc, #620]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a9a      	ldr	r2, [pc, #616]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800620a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800620e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006210:	f7fb fb40 	bl	8001894 <HAL_GetTick>
 8006214:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006218:	f7fb fb3c 	bl	8001894 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e1c0      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800622a:	4b92      	ldr	r3, [pc, #584]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f0      	bne.n	8006218 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8081 	beq.w	8006346 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006244:	4b8c      	ldr	r3, [pc, #560]	@ (8006478 <HAL_RCC_OscConfig+0x770>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a8b      	ldr	r2, [pc, #556]	@ (8006478 <HAL_RCC_OscConfig+0x770>)
 800624a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800624e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006250:	f7fb fb20 	bl	8001894 <HAL_GetTick>
 8006254:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006258:	f7fb fb1c 	bl	8001894 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b64      	cmp	r3, #100	@ 0x64
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e1a0      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800626a:	4b83      	ldr	r3, [pc, #524]	@ (8006478 <HAL_RCC_OscConfig+0x770>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0f0      	beq.n	8006258 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d106      	bne.n	800628c <HAL_RCC_OscConfig+0x584>
 800627e:	4b7d      	ldr	r3, [pc, #500]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006282:	4a7c      	ldr	r2, [pc, #496]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	6713      	str	r3, [r2, #112]	@ 0x70
 800628a:	e02d      	b.n	80062e8 <HAL_RCC_OscConfig+0x5e0>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10c      	bne.n	80062ae <HAL_RCC_OscConfig+0x5a6>
 8006294:	4b77      	ldr	r3, [pc, #476]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006298:	4a76      	ldr	r2, [pc, #472]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	6713      	str	r3, [r2, #112]	@ 0x70
 80062a0:	4b74      	ldr	r3, [pc, #464]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80062a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a4:	4a73      	ldr	r2, [pc, #460]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80062a6:	f023 0304 	bic.w	r3, r3, #4
 80062aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ac:	e01c      	b.n	80062e8 <HAL_RCC_OscConfig+0x5e0>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b05      	cmp	r3, #5
 80062b4:	d10c      	bne.n	80062d0 <HAL_RCC_OscConfig+0x5c8>
 80062b6:	4b6f      	ldr	r3, [pc, #444]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ba:	4a6e      	ldr	r2, [pc, #440]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80062bc:	f043 0304 	orr.w	r3, r3, #4
 80062c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062c2:	4b6c      	ldr	r3, [pc, #432]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80062c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c6:	4a6b      	ldr	r2, [pc, #428]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80062c8:	f043 0301 	orr.w	r3, r3, #1
 80062cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ce:	e00b      	b.n	80062e8 <HAL_RCC_OscConfig+0x5e0>
 80062d0:	4b68      	ldr	r3, [pc, #416]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80062d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d4:	4a67      	ldr	r2, [pc, #412]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	6713      	str	r3, [r2, #112]	@ 0x70
 80062dc:	4b65      	ldr	r3, [pc, #404]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e0:	4a64      	ldr	r2, [pc, #400]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80062e2:	f023 0304 	bic.w	r3, r3, #4
 80062e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d015      	beq.n	800631c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f0:	f7fb fad0 	bl	8001894 <HAL_GetTick>
 80062f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062f6:	e00a      	b.n	800630e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f8:	f7fb facc 	bl	8001894 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e14e      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800630e:	4b59      	ldr	r3, [pc, #356]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0ee      	beq.n	80062f8 <HAL_RCC_OscConfig+0x5f0>
 800631a:	e014      	b.n	8006346 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631c:	f7fb faba 	bl	8001894 <HAL_GetTick>
 8006320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006322:	e00a      	b.n	800633a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006324:	f7fb fab6 	bl	8001894 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e138      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800633a:	4b4e      	ldr	r3, [pc, #312]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1ee      	bne.n	8006324 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 812d 	beq.w	80065aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006350:	4b48      	ldr	r3, [pc, #288]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006358:	2b18      	cmp	r3, #24
 800635a:	f000 80bd 	beq.w	80064d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006362:	2b02      	cmp	r3, #2
 8006364:	f040 809e 	bne.w	80064a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006368:	4b42      	ldr	r3, [pc, #264]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a41      	ldr	r2, [pc, #260]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800636e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006374:	f7fb fa8e 	bl	8001894 <HAL_GetTick>
 8006378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800637c:	f7fb fa8a 	bl	8001894 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e10e      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800638e:	4b39      	ldr	r3, [pc, #228]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800639a:	4b36      	ldr	r3, [pc, #216]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800639c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800639e:	4b37      	ldr	r3, [pc, #220]	@ (800647c <HAL_RCC_OscConfig+0x774>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063aa:	0112      	lsls	r2, r2, #4
 80063ac:	430a      	orrs	r2, r1
 80063ae:	4931      	ldr	r1, [pc, #196]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b8:	3b01      	subs	r3, #1
 80063ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c2:	3b01      	subs	r3, #1
 80063c4:	025b      	lsls	r3, r3, #9
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ce:	3b01      	subs	r3, #1
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063dc:	3b01      	subs	r3, #1
 80063de:	061b      	lsls	r3, r3, #24
 80063e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063e4:	4923      	ldr	r1, [pc, #140]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80063ea:	4b22      	ldr	r3, [pc, #136]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ee:	4a21      	ldr	r2, [pc, #132]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 80063f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063fa:	4b21      	ldr	r3, [pc, #132]	@ (8006480 <HAL_RCC_OscConfig+0x778>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006402:	00d2      	lsls	r2, r2, #3
 8006404:	491b      	ldr	r1, [pc, #108]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006406:	4313      	orrs	r3, r2
 8006408:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800640a:	4b1a      	ldr	r3, [pc, #104]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	f023 020c 	bic.w	r2, r3, #12
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006416:	4917      	ldr	r1, [pc, #92]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006418:	4313      	orrs	r3, r2
 800641a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800641c:	4b15      	ldr	r3, [pc, #84]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800641e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006420:	f023 0202 	bic.w	r2, r3, #2
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006428:	4912      	ldr	r1, [pc, #72]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800642e:	4b11      	ldr	r3, [pc, #68]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006432:	4a10      	ldr	r2, [pc, #64]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006438:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800643a:	4b0e      	ldr	r3, [pc, #56]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800643c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643e:	4a0d      	ldr	r2, [pc, #52]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006446:	4b0b      	ldr	r3, [pc, #44]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644a:	4a0a      	ldr	r2, [pc, #40]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 800644c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006450:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006452:	4b08      	ldr	r3, [pc, #32]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006456:	4a07      	ldr	r2, [pc, #28]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800645e:	4b05      	ldr	r3, [pc, #20]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a04      	ldr	r2, [pc, #16]	@ (8006474 <HAL_RCC_OscConfig+0x76c>)
 8006464:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fb fa13 	bl	8001894 <HAL_GetTick>
 800646e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006470:	e011      	b.n	8006496 <HAL_RCC_OscConfig+0x78e>
 8006472:	bf00      	nop
 8006474:	58024400 	.word	0x58024400
 8006478:	58024800 	.word	0x58024800
 800647c:	fffffc0c 	.word	0xfffffc0c
 8006480:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006484:	f7fb fa06 	bl	8001894 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e08a      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006496:	4b47      	ldr	r3, [pc, #284]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0f0      	beq.n	8006484 <HAL_RCC_OscConfig+0x77c>
 80064a2:	e082      	b.n	80065aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a4:	4b43      	ldr	r3, [pc, #268]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a42      	ldr	r2, [pc, #264]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 80064aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b0:	f7fb f9f0 	bl	8001894 <HAL_GetTick>
 80064b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b8:	f7fb f9ec 	bl	8001894 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e070      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064ca:	4b3a      	ldr	r3, [pc, #232]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f0      	bne.n	80064b8 <HAL_RCC_OscConfig+0x7b0>
 80064d6:	e068      	b.n	80065aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064d8:	4b36      	ldr	r3, [pc, #216]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064de:	4b35      	ldr	r3, [pc, #212]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 80064e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d031      	beq.n	8006550 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f003 0203 	and.w	r2, r3, #3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d12a      	bne.n	8006550 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006506:	429a      	cmp	r2, r3
 8006508:	d122      	bne.n	8006550 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006514:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006516:	429a      	cmp	r2, r3
 8006518:	d11a      	bne.n	8006550 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	0a5b      	lsrs	r3, r3, #9
 800651e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006526:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006528:	429a      	cmp	r2, r3
 800652a:	d111      	bne.n	8006550 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	0c1b      	lsrs	r3, r3, #16
 8006530:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006538:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d108      	bne.n	8006550 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	0e1b      	lsrs	r3, r3, #24
 8006542:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800654a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800654c:	429a      	cmp	r2, r3
 800654e:	d001      	beq.n	8006554 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e02b      	b.n	80065ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006554:	4b17      	ldr	r3, [pc, #92]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 8006556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006558:	08db      	lsrs	r3, r3, #3
 800655a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800655e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	429a      	cmp	r2, r3
 8006568:	d01f      	beq.n	80065aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800656a:	4b12      	ldr	r3, [pc, #72]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 800656c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656e:	4a11      	ldr	r2, [pc, #68]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006576:	f7fb f98d 	bl	8001894 <HAL_GetTick>
 800657a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800657c:	bf00      	nop
 800657e:	f7fb f989 	bl	8001894 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	4293      	cmp	r3, r2
 8006588:	d0f9      	beq.n	800657e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800658a:	4b0a      	ldr	r3, [pc, #40]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 800658c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800658e:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <HAL_RCC_OscConfig+0x8b0>)
 8006590:	4013      	ands	r3, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006596:	00d2      	lsls	r2, r2, #3
 8006598:	4906      	ldr	r1, [pc, #24]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 800659a:	4313      	orrs	r3, r2
 800659c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800659e:	4b05      	ldr	r3, [pc, #20]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	4a04      	ldr	r2, [pc, #16]	@ (80065b4 <HAL_RCC_OscConfig+0x8ac>)
 80065a4:	f043 0301 	orr.w	r3, r3, #1
 80065a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3730      	adds	r7, #48	@ 0x30
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	58024400 	.word	0x58024400
 80065b8:	ffff0007 	.word	0xffff0007

080065bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e19c      	b.n	800690a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065d0:	4b8a      	ldr	r3, [pc, #552]	@ (80067fc <HAL_RCC_ClockConfig+0x240>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d910      	bls.n	8006600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065de:	4b87      	ldr	r3, [pc, #540]	@ (80067fc <HAL_RCC_ClockConfig+0x240>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f023 020f 	bic.w	r2, r3, #15
 80065e6:	4985      	ldr	r1, [pc, #532]	@ (80067fc <HAL_RCC_ClockConfig+0x240>)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ee:	4b83      	ldr	r3, [pc, #524]	@ (80067fc <HAL_RCC_ClockConfig+0x240>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d001      	beq.n	8006600 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e184      	b.n	800690a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d010      	beq.n	800662e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	4b7b      	ldr	r3, [pc, #492]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006618:	429a      	cmp	r2, r3
 800661a:	d908      	bls.n	800662e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800661c:	4b78      	ldr	r3, [pc, #480]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	4975      	ldr	r1, [pc, #468]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800662a:	4313      	orrs	r3, r2
 800662c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d010      	beq.n	800665c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695a      	ldr	r2, [r3, #20]
 800663e:	4b70      	ldr	r3, [pc, #448]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006646:	429a      	cmp	r2, r3
 8006648:	d908      	bls.n	800665c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800664a:	4b6d      	ldr	r3, [pc, #436]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	496a      	ldr	r1, [pc, #424]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 8006658:	4313      	orrs	r3, r2
 800665a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	d010      	beq.n	800668a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	4b64      	ldr	r3, [pc, #400]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006674:	429a      	cmp	r2, r3
 8006676:	d908      	bls.n	800668a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006678:	4b61      	ldr	r3, [pc, #388]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	495e      	ldr	r1, [pc, #376]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 8006686:	4313      	orrs	r3, r2
 8006688:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69da      	ldr	r2, [r3, #28]
 800669a:	4b59      	ldr	r3, [pc, #356]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d908      	bls.n	80066b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066a6:	4b56      	ldr	r3, [pc, #344]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	4953      	ldr	r1, [pc, #332]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d010      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d908      	bls.n	80066e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f023 020f 	bic.w	r2, r3, #15
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	4947      	ldr	r1, [pc, #284]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d055      	beq.n	800679e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80066f2:	4b43      	ldr	r3, [pc, #268]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	4940      	ldr	r1, [pc, #256]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 8006700:	4313      	orrs	r3, r2
 8006702:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d107      	bne.n	800671c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800670c:	4b3c      	ldr	r3, [pc, #240]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d121      	bne.n	800675c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0f6      	b.n	800690a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b03      	cmp	r3, #3
 8006722:	d107      	bne.n	8006734 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006724:	4b36      	ldr	r3, [pc, #216]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d115      	bne.n	800675c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0ea      	b.n	800690a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d107      	bne.n	800674c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800673c:	4b30      	ldr	r3, [pc, #192]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e0de      	b.n	800690a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800674c:	4b2c      	ldr	r3, [pc, #176]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0d6      	b.n	800690a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800675c:	4b28      	ldr	r3, [pc, #160]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f023 0207 	bic.w	r2, r3, #7
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4925      	ldr	r1, [pc, #148]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800676a:	4313      	orrs	r3, r2
 800676c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676e:	f7fb f891 	bl	8001894 <HAL_GetTick>
 8006772:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006774:	e00a      	b.n	800678c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006776:	f7fb f88d 	bl	8001894 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e0be      	b.n	800690a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678c:	4b1c      	ldr	r3, [pc, #112]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	429a      	cmp	r2, r3
 800679c:	d1eb      	bne.n	8006776 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d010      	beq.n	80067cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	4b14      	ldr	r3, [pc, #80]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d208      	bcs.n	80067cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ba:	4b11      	ldr	r3, [pc, #68]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	f023 020f 	bic.w	r2, r3, #15
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	490e      	ldr	r1, [pc, #56]	@ (8006800 <HAL_RCC_ClockConfig+0x244>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067cc:	4b0b      	ldr	r3, [pc, #44]	@ (80067fc <HAL_RCC_ClockConfig+0x240>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d214      	bcs.n	8006804 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067da:	4b08      	ldr	r3, [pc, #32]	@ (80067fc <HAL_RCC_ClockConfig+0x240>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f023 020f 	bic.w	r2, r3, #15
 80067e2:	4906      	ldr	r1, [pc, #24]	@ (80067fc <HAL_RCC_ClockConfig+0x240>)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ea:	4b04      	ldr	r3, [pc, #16]	@ (80067fc <HAL_RCC_ClockConfig+0x240>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d005      	beq.n	8006804 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e086      	b.n	800690a <HAL_RCC_ClockConfig+0x34e>
 80067fc:	52002000 	.word	0x52002000
 8006800:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d010      	beq.n	8006832 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	4b3f      	ldr	r3, [pc, #252]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800681c:	429a      	cmp	r2, r3
 800681e:	d208      	bcs.n	8006832 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006820:	4b3c      	ldr	r3, [pc, #240]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	4939      	ldr	r1, [pc, #228]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 800682e:	4313      	orrs	r3, r2
 8006830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d010      	beq.n	8006860 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695a      	ldr	r2, [r3, #20]
 8006842:	4b34      	ldr	r3, [pc, #208]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800684a:	429a      	cmp	r2, r3
 800684c:	d208      	bcs.n	8006860 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800684e:	4b31      	ldr	r3, [pc, #196]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	492e      	ldr	r1, [pc, #184]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 800685c:	4313      	orrs	r3, r2
 800685e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b00      	cmp	r3, #0
 800686a:	d010      	beq.n	800688e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699a      	ldr	r2, [r3, #24]
 8006870:	4b28      	ldr	r3, [pc, #160]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006878:	429a      	cmp	r2, r3
 800687a:	d208      	bcs.n	800688e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800687c:	4b25      	ldr	r3, [pc, #148]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	4922      	ldr	r1, [pc, #136]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 800688a:	4313      	orrs	r3, r2
 800688c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d010      	beq.n	80068bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69da      	ldr	r2, [r3, #28]
 800689e:	4b1d      	ldr	r3, [pc, #116]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d208      	bcs.n	80068bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	4917      	ldr	r1, [pc, #92]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068bc:	f000 f834 	bl	8006928 <HAL_RCC_GetSysClockFreq>
 80068c0:	4602      	mov	r2, r0
 80068c2:	4b14      	ldr	r3, [pc, #80]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	4912      	ldr	r1, [pc, #72]	@ (8006918 <HAL_RCC_ClockConfig+0x35c>)
 80068ce:	5ccb      	ldrb	r3, [r1, r3]
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	fa22 f303 	lsr.w	r3, r2, r3
 80068d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068da:	4b0e      	ldr	r3, [pc, #56]	@ (8006914 <HAL_RCC_ClockConfig+0x358>)
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006918 <HAL_RCC_ClockConfig+0x35c>)
 80068e4:	5cd3      	ldrb	r3, [r2, r3]
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
 80068f0:	4a0a      	ldr	r2, [pc, #40]	@ (800691c <HAL_RCC_ClockConfig+0x360>)
 80068f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006920 <HAL_RCC_ClockConfig+0x364>)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80068fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006924 <HAL_RCC_ClockConfig+0x368>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fa ff7e 	bl	8001800 <HAL_InitTick>
 8006904:	4603      	mov	r3, r0
 8006906:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	58024400 	.word	0x58024400
 8006918:	0800c938 	.word	0x0800c938
 800691c:	24000008 	.word	0x24000008
 8006920:	24000004 	.word	0x24000004
 8006924:	2400000c 	.word	0x2400000c

08006928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006928:	b480      	push	{r7}
 800692a:	b089      	sub	sp, #36	@ 0x24
 800692c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800692e:	4bb3      	ldr	r3, [pc, #716]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006936:	2b18      	cmp	r3, #24
 8006938:	f200 8155 	bhi.w	8006be6 <HAL_RCC_GetSysClockFreq+0x2be>
 800693c:	a201      	add	r2, pc, #4	@ (adr r2, 8006944 <HAL_RCC_GetSysClockFreq+0x1c>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	080069a9 	.word	0x080069a9
 8006948:	08006be7 	.word	0x08006be7
 800694c:	08006be7 	.word	0x08006be7
 8006950:	08006be7 	.word	0x08006be7
 8006954:	08006be7 	.word	0x08006be7
 8006958:	08006be7 	.word	0x08006be7
 800695c:	08006be7 	.word	0x08006be7
 8006960:	08006be7 	.word	0x08006be7
 8006964:	080069cf 	.word	0x080069cf
 8006968:	08006be7 	.word	0x08006be7
 800696c:	08006be7 	.word	0x08006be7
 8006970:	08006be7 	.word	0x08006be7
 8006974:	08006be7 	.word	0x08006be7
 8006978:	08006be7 	.word	0x08006be7
 800697c:	08006be7 	.word	0x08006be7
 8006980:	08006be7 	.word	0x08006be7
 8006984:	080069d5 	.word	0x080069d5
 8006988:	08006be7 	.word	0x08006be7
 800698c:	08006be7 	.word	0x08006be7
 8006990:	08006be7 	.word	0x08006be7
 8006994:	08006be7 	.word	0x08006be7
 8006998:	08006be7 	.word	0x08006be7
 800699c:	08006be7 	.word	0x08006be7
 80069a0:	08006be7 	.word	0x08006be7
 80069a4:	080069db 	.word	0x080069db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a8:	4b94      	ldr	r3, [pc, #592]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069b4:	4b91      	ldr	r3, [pc, #580]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	08db      	lsrs	r3, r3, #3
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	4a90      	ldr	r2, [pc, #576]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069c0:	fa22 f303 	lsr.w	r3, r2, r3
 80069c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80069c6:	e111      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069c8:	4b8d      	ldr	r3, [pc, #564]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069ca:	61bb      	str	r3, [r7, #24]
      break;
 80069cc:	e10e      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069d0:	61bb      	str	r3, [r7, #24]
      break;
 80069d2:	e10b      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80069d4:	4b8c      	ldr	r3, [pc, #560]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069d6:	61bb      	str	r3, [r7, #24]
      break;
 80069d8:	e108      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069da:	4b88      	ldr	r3, [pc, #544]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80069e4:	4b85      	ldr	r3, [pc, #532]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	091b      	lsrs	r3, r3, #4
 80069ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069f0:	4b82      	ldr	r3, [pc, #520]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80069fa:	4b80      	ldr	r3, [pc, #512]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069fe:	08db      	lsrs	r3, r3, #3
 8006a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	fb02 f303 	mul.w	r3, r2, r3
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80e1 	beq.w	8006be0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	f000 8083 	beq.w	8006b2c <HAL_RCC_GetSysClockFreq+0x204>
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	f200 80a1 	bhi.w	8006b70 <HAL_RCC_GetSysClockFreq+0x248>
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_RCC_GetSysClockFreq+0x114>
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d056      	beq.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a3a:	e099      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a3c:	4b6f      	ldr	r3, [pc, #444]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d02d      	beq.n	8006aa4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a48:	4b6c      	ldr	r3, [pc, #432]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	08db      	lsrs	r3, r3, #3
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	4a6b      	ldr	r2, [pc, #428]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
 8006a58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	ee07 3a90 	vmov	s15, r3
 8006a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a72:	4b62      	ldr	r3, [pc, #392]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a86:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006aa2:	e087      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab6:	4b51      	ldr	r3, [pc, #324]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ae6:	e065      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afa:	4b40      	ldr	r3, [pc, #256]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b0e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b2a:	e043      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b52:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b6e:	e021      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b82:	4b1e      	ldr	r3, [pc, #120]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b96:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006bb4:	4b11      	ldr	r3, [pc, #68]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb8:	0a5b      	lsrs	r3, r3, #9
 8006bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	ee07 3a90 	vmov	s15, r3
 8006bc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bd8:	ee17 3a90 	vmov	r3, s15
 8006bdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006bde:	e005      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61bb      	str	r3, [r7, #24]
      break;
 8006be4:	e002      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006be6:	4b07      	ldr	r3, [pc, #28]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006be8:	61bb      	str	r3, [r7, #24]
      break;
 8006bea:	bf00      	nop
  }

  return sysclockfreq;
 8006bec:	69bb      	ldr	r3, [r7, #24]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3724      	adds	r7, #36	@ 0x24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	03d09000 	.word	0x03d09000
 8006c04:	003d0900 	.word	0x003d0900
 8006c08:	007a1200 	.word	0x007a1200
 8006c0c:	46000000 	.word	0x46000000
 8006c10:	4c742400 	.word	0x4c742400
 8006c14:	4a742400 	.word	0x4a742400
 8006c18:	4af42400 	.word	0x4af42400

08006c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c22:	f7ff fe81 	bl	8006928 <HAL_RCC_GetSysClockFreq>
 8006c26:	4602      	mov	r2, r0
 8006c28:	4b10      	ldr	r3, [pc, #64]	@ (8006c6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	0a1b      	lsrs	r3, r3, #8
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	490f      	ldr	r1, [pc, #60]	@ (8006c70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c34:	5ccb      	ldrb	r3, [r1, r3]
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c40:	4b0a      	ldr	r3, [pc, #40]	@ (8006c6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	4a09      	ldr	r2, [pc, #36]	@ (8006c70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c4a:	5cd3      	ldrb	r3, [r2, r3]
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	fa22 f303 	lsr.w	r3, r2, r3
 8006c56:	4a07      	ldr	r2, [pc, #28]	@ (8006c74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c5a:	4a07      	ldr	r2, [pc, #28]	@ (8006c78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c60:	4b04      	ldr	r3, [pc, #16]	@ (8006c74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	0800c938 	.word	0x0800c938
 8006c74:	24000008 	.word	0x24000008
 8006c78:	24000004 	.word	0x24000004

08006c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c80:	f7ff ffcc 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8006c84:	4602      	mov	r2, r0
 8006c86:	4b06      	ldr	r3, [pc, #24]	@ (8006ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	091b      	lsrs	r3, r3, #4
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	4904      	ldr	r1, [pc, #16]	@ (8006ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c92:	5ccb      	ldrb	r3, [r1, r3]
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	58024400 	.word	0x58024400
 8006ca4:	0800c938 	.word	0x0800c938

08006ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006cac:	f7ff ffb6 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	4b06      	ldr	r3, [pc, #24]	@ (8006ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	4904      	ldr	r1, [pc, #16]	@ (8006cd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cbe:	5ccb      	ldrb	r3, [r1, r3]
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	58024400 	.word	0x58024400
 8006cd0:	0800c938 	.word	0x0800c938

08006cd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd8:	b0ca      	sub	sp, #296	@ 0x128
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006cf8:	2500      	movs	r5, #0
 8006cfa:	ea54 0305 	orrs.w	r3, r4, r5
 8006cfe:	d049      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d0a:	d02f      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d10:	d828      	bhi.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d16:	d01a      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d1c:	d822      	bhi.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d26:	d007      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d28:	e01c      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d2a:	4bb8      	ldr	r3, [pc, #736]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	4ab7      	ldr	r2, [pc, #732]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d36:	e01a      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	2102      	movs	r1, #2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 fc8f 	bl	8008664 <RCCEx_PLL2_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d4c:	e00f      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d52:	3328      	adds	r3, #40	@ 0x28
 8006d54:	2102      	movs	r1, #2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fd36 	bl	80087c8 <RCCEx_PLL3_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d62:	e004      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d6a:	e000      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d76:	4ba5      	ldr	r3, [pc, #660]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d84:	4aa1      	ldr	r2, [pc, #644]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d86:	430b      	orrs	r3, r1
 8006d88:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d8a:	e003      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006da0:	f04f 0900 	mov.w	r9, #0
 8006da4:	ea58 0309 	orrs.w	r3, r8, r9
 8006da8:	d047      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d82a      	bhi.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006db4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006dd1 	.word	0x08006dd1
 8006dc0:	08006ddf 	.word	0x08006ddf
 8006dc4:	08006df5 	.word	0x08006df5
 8006dc8:	08006e13 	.word	0x08006e13
 8006dcc:	08006e13 	.word	0x08006e13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd0:	4b8e      	ldr	r3, [pc, #568]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd4:	4a8d      	ldr	r2, [pc, #564]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ddc:	e01a      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de2:	3308      	adds	r3, #8
 8006de4:	2100      	movs	r1, #0
 8006de6:	4618      	mov	r0, r3
 8006de8:	f001 fc3c 	bl	8008664 <RCCEx_PLL2_Config>
 8006dec:	4603      	mov	r3, r0
 8006dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006df2:	e00f      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df8:	3328      	adds	r3, #40	@ 0x28
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 fce3 	bl	80087c8 <RCCEx_PLL3_Config>
 8006e02:	4603      	mov	r3, r0
 8006e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e08:	e004      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e10:	e000      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e1c:	4b7b      	ldr	r3, [pc, #492]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e20:	f023 0107 	bic.w	r1, r3, #7
 8006e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e2a:	4a78      	ldr	r2, [pc, #480]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e30:	e003      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006e46:	f04f 0b00 	mov.w	fp, #0
 8006e4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e4e:	d04c      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e5a:	d030      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e60:	d829      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e64:	d02d      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e68:	d825      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e6a:	2b80      	cmp	r3, #128	@ 0x80
 8006e6c:	d018      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e6e:	2b80      	cmp	r3, #128	@ 0x80
 8006e70:	d821      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e76:	2b40      	cmp	r3, #64	@ 0x40
 8006e78:	d007      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006e7a:	e01c      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7c:	4b63      	ldr	r3, [pc, #396]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	4a62      	ldr	r2, [pc, #392]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e88:	e01c      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8e:	3308      	adds	r3, #8
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 fbe6 	bl	8008664 <RCCEx_PLL2_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e9e:	e011      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea4:	3328      	adds	r3, #40	@ 0x28
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f001 fc8d 	bl	80087c8 <RCCEx_PLL3_Config>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006eb4:	e006      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ebc:	e002      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006ebe:	bf00      	nop
 8006ec0:	e000      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ecc:	4b4f      	ldr	r3, [pc, #316]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eda:	4a4c      	ldr	r2, [pc, #304]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006edc:	430b      	orrs	r3, r1
 8006ede:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ee0:	e003      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006ef6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006efa:	2300      	movs	r3, #0
 8006efc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006f00:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006f04:	460b      	mov	r3, r1
 8006f06:	4313      	orrs	r3, r2
 8006f08:	d053      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f16:	d035      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f1c:	d82e      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f22:	d031      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f28:	d828      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f2e:	d01a      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f34:	d822      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f3e:	d007      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f40:	e01c      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f42:	4b32      	ldr	r3, [pc, #200]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f46:	4a31      	ldr	r2, [pc, #196]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f4e:	e01c      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f54:	3308      	adds	r3, #8
 8006f56:	2100      	movs	r1, #0
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 fb83 	bl	8008664 <RCCEx_PLL2_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f64:	e011      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6a:	3328      	adds	r3, #40	@ 0x28
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 fc2a 	bl	80087c8 <RCCEx_PLL3_Config>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f7a:	e006      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f82:	e002      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f84:	bf00      	nop
 8006f86:	e000      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10b      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f92:	4b1e      	ldr	r3, [pc, #120]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f96:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fa8:	e003      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006fbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006fc8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	d056      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fde:	d038      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fe4:	d831      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fe6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fea:	d034      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006fec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ff0:	d82b      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ff2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ff6:	d01d      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006ff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ffc:	d825      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d006      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007002:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007006:	d00a      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007008:	e01f      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800700a:	bf00      	nop
 800700c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007010:	4ba2      	ldr	r3, [pc, #648]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007014:	4aa1      	ldr	r2, [pc, #644]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800701a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800701c:	e01c      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007022:	3308      	adds	r3, #8
 8007024:	2100      	movs	r1, #0
 8007026:	4618      	mov	r0, r3
 8007028:	f001 fb1c 	bl	8008664 <RCCEx_PLL2_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007032:	e011      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007038:	3328      	adds	r3, #40	@ 0x28
 800703a:	2100      	movs	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f001 fbc3 	bl	80087c8 <RCCEx_PLL3_Config>
 8007042:	4603      	mov	r3, r0
 8007044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007048:	e006      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007050:	e002      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10b      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007060:	4b8e      	ldr	r3, [pc, #568]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007064:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007070:	4a8a      	ldr	r2, [pc, #552]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007072:	430b      	orrs	r3, r1
 8007074:	6593      	str	r3, [r2, #88]	@ 0x58
 8007076:	e003      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800708c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007090:	2300      	movs	r3, #0
 8007092:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007096:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800709a:	460b      	mov	r3, r1
 800709c:	4313      	orrs	r3, r2
 800709e:	d03a      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80070a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070a6:	2b30      	cmp	r3, #48	@ 0x30
 80070a8:	d01f      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80070aa:	2b30      	cmp	r3, #48	@ 0x30
 80070ac:	d819      	bhi.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d00c      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d815      	bhi.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d019      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80070ba:	2b10      	cmp	r3, #16
 80070bc:	d111      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070be:	4b77      	ldr	r3, [pc, #476]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c2:	4a76      	ldr	r2, [pc, #472]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070ca:	e011      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d0:	3308      	adds	r3, #8
 80070d2:	2102      	movs	r1, #2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 fac5 	bl	8008664 <RCCEx_PLL2_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070e0:	e006      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070e8:	e002      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070ea:	bf00      	nop
 80070ec:	e000      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070f8:	4b68      	ldr	r3, [pc, #416]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007106:	4a65      	ldr	r2, [pc, #404]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007108:	430b      	orrs	r3, r1
 800710a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800710c:	e003      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007122:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007126:	2300      	movs	r3, #0
 8007128:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800712c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007130:	460b      	mov	r3, r1
 8007132:	4313      	orrs	r3, r2
 8007134:	d051      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800713c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007140:	d035      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007142:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007146:	d82e      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007148:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800714c:	d031      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800714e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007152:	d828      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007158:	d01a      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800715a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800715e:	d822      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007168:	d007      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800716a:	e01c      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800716c:	4b4b      	ldr	r3, [pc, #300]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	4a4a      	ldr	r2, [pc, #296]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007178:	e01c      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717e:	3308      	adds	r3, #8
 8007180:	2100      	movs	r1, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f001 fa6e 	bl	8008664 <RCCEx_PLL2_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800718e:	e011      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007194:	3328      	adds	r3, #40	@ 0x28
 8007196:	2100      	movs	r1, #0
 8007198:	4618      	mov	r0, r3
 800719a:	f001 fb15 	bl	80087c8 <RCCEx_PLL3_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071a4:	e006      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071ac:	e002      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071ae:	bf00      	nop
 80071b0:	e000      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071bc:	4b37      	ldr	r3, [pc, #220]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ca:	4a34      	ldr	r2, [pc, #208]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071cc:	430b      	orrs	r3, r1
 80071ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80071d0:	e003      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80071e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071ea:	2300      	movs	r3, #0
 80071ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80071f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80071f4:	460b      	mov	r3, r1
 80071f6:	4313      	orrs	r3, r2
 80071f8:	d056      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80071fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007204:	d033      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007206:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800720a:	d82c      	bhi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800720c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007210:	d02f      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007212:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007216:	d826      	bhi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007218:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800721c:	d02b      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800721e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007222:	d820      	bhi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007228:	d012      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800722a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800722e:	d81a      	bhi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d022      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007238:	d115      	bne.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723e:	3308      	adds	r3, #8
 8007240:	2101      	movs	r1, #1
 8007242:	4618      	mov	r0, r3
 8007244:	f001 fa0e 	bl	8008664 <RCCEx_PLL2_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800724e:	e015      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007254:	3328      	adds	r3, #40	@ 0x28
 8007256:	2101      	movs	r1, #1
 8007258:	4618      	mov	r0, r3
 800725a:	f001 fab5 	bl	80087c8 <RCCEx_PLL3_Config>
 800725e:	4603      	mov	r3, r0
 8007260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007264:	e00a      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800726c:	e006      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800726e:	bf00      	nop
 8007270:	e004      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007272:	bf00      	nop
 8007274:	e002      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007276:	bf00      	nop
 8007278:	e000      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800727a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800727c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10d      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007284:	4b05      	ldr	r3, [pc, #20]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007288:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800728c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007292:	4a02      	ldr	r2, [pc, #8]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007294:	430b      	orrs	r3, r1
 8007296:	6513      	str	r3, [r2, #80]	@ 0x50
 8007298:	e006      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800729a:	bf00      	nop
 800729c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80072b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072b8:	2300      	movs	r3, #0
 80072ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4313      	orrs	r3, r2
 80072c6:	d055      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072d4:	d033      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80072d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072da:	d82c      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072e0:	d02f      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80072e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072e6:	d826      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072ec:	d02b      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80072ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072f2:	d820      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072f8:	d012      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80072fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072fe:	d81a      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007300:	2b00      	cmp	r3, #0
 8007302:	d022      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007308:	d115      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730e:	3308      	adds	r3, #8
 8007310:	2101      	movs	r1, #1
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f9a6 	bl	8008664 <RCCEx_PLL2_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800731e:	e015      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007324:	3328      	adds	r3, #40	@ 0x28
 8007326:	2101      	movs	r1, #1
 8007328:	4618      	mov	r0, r3
 800732a:	f001 fa4d 	bl	80087c8 <RCCEx_PLL3_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007334:	e00a      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800733c:	e006      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800733e:	bf00      	nop
 8007340:	e004      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007342:	bf00      	nop
 8007344:	e002      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007346:	bf00      	nop
 8007348:	e000      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800734a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800734c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10b      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007354:	4ba3      	ldr	r3, [pc, #652]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007358:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007364:	4a9f      	ldr	r2, [pc, #636]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007366:	430b      	orrs	r3, r1
 8007368:	6593      	str	r3, [r2, #88]	@ 0x58
 800736a:	e003      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007380:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007384:	2300      	movs	r3, #0
 8007386:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800738a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800738e:	460b      	mov	r3, r1
 8007390:	4313      	orrs	r3, r2
 8007392:	d037      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800739e:	d00e      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80073a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073a4:	d816      	bhi.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d018      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80073aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ae:	d111      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073b0:	4b8c      	ldr	r3, [pc, #560]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b4:	4a8b      	ldr	r2, [pc, #556]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073bc:	e00f      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c2:	3308      	adds	r3, #8
 80073c4:	2101      	movs	r1, #1
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 f94c 	bl	8008664 <RCCEx_PLL2_Config>
 80073cc:	4603      	mov	r3, r0
 80073ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073d2:	e004      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073da:	e000      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80073dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073e6:	4b7f      	ldr	r3, [pc, #508]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f4:	4a7b      	ldr	r2, [pc, #492]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073f6:	430b      	orrs	r3, r1
 80073f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80073fa:	e003      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007414:	2300      	movs	r3, #0
 8007416:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800741a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800741e:	460b      	mov	r3, r1
 8007420:	4313      	orrs	r3, r2
 8007422:	d039      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800742a:	2b03      	cmp	r3, #3
 800742c:	d81c      	bhi.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800742e:	a201      	add	r2, pc, #4	@ (adr r2, 8007434 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	08007471 	.word	0x08007471
 8007438:	08007445 	.word	0x08007445
 800743c:	08007453 	.word	0x08007453
 8007440:	08007471 	.word	0x08007471
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007444:	4b67      	ldr	r3, [pc, #412]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007448:	4a66      	ldr	r2, [pc, #408]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800744a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800744e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007450:	e00f      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007456:	3308      	adds	r3, #8
 8007458:	2102      	movs	r1, #2
 800745a:	4618      	mov	r0, r3
 800745c:	f001 f902 	bl	8008664 <RCCEx_PLL2_Config>
 8007460:	4603      	mov	r3, r0
 8007462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007466:	e004      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800746e:	e000      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10a      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800747a:	4b5a      	ldr	r3, [pc, #360]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800747c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800747e:	f023 0103 	bic.w	r1, r3, #3
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007488:	4a56      	ldr	r2, [pc, #344]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800748a:	430b      	orrs	r3, r1
 800748c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800748e:	e003      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80074a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074a8:	2300      	movs	r3, #0
 80074aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80074b2:	460b      	mov	r3, r1
 80074b4:	4313      	orrs	r3, r2
 80074b6:	f000 809f 	beq.w	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074ba:	4b4b      	ldr	r3, [pc, #300]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a4a      	ldr	r2, [pc, #296]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074c6:	f7fa f9e5 	bl	8001894 <HAL_GetTick>
 80074ca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ce:	e00b      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074d0:	f7fa f9e0 	bl	8001894 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b64      	cmp	r3, #100	@ 0x64
 80074de:	d903      	bls.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074e6:	e005      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074e8:	4b3f      	ldr	r3, [pc, #252]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0ed      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80074f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d179      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074fc:	4b39      	ldr	r3, [pc, #228]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007508:	4053      	eors	r3, r2
 800750a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800750e:	2b00      	cmp	r3, #0
 8007510:	d015      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007512:	4b34      	ldr	r3, [pc, #208]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800751a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800751e:	4b31      	ldr	r3, [pc, #196]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007522:	4a30      	ldr	r2, [pc, #192]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007528:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800752a:	4b2e      	ldr	r3, [pc, #184]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800752c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752e:	4a2d      	ldr	r2, [pc, #180]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007534:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007536:	4a2b      	ldr	r2, [pc, #172]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800753c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007542:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800754a:	d118      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800754c:	f7fa f9a2 	bl	8001894 <HAL_GetTick>
 8007550:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007554:	e00d      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007556:	f7fa f99d 	bl	8001894 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007560:	1ad2      	subs	r2, r2, r3
 8007562:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007566:	429a      	cmp	r2, r3
 8007568:	d903      	bls.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007570:	e005      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007572:	4b1c      	ldr	r3, [pc, #112]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0eb      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800757e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007582:	2b00      	cmp	r3, #0
 8007584:	d129      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800758e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007596:	d10e      	bne.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007598:	4b12      	ldr	r3, [pc, #72]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075a8:	091a      	lsrs	r2, r3, #4
 80075aa:	4b10      	ldr	r3, [pc, #64]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	4a0d      	ldr	r2, [pc, #52]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075b0:	430b      	orrs	r3, r1
 80075b2:	6113      	str	r3, [r2, #16]
 80075b4:	e005      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80075b6:	4b0b      	ldr	r3, [pc, #44]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	4a0a      	ldr	r2, [pc, #40]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075c0:	6113      	str	r3, [r2, #16]
 80075c2:	4b08      	ldr	r3, [pc, #32]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075c4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80075c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d2:	4a04      	ldr	r2, [pc, #16]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075d4:	430b      	orrs	r3, r1
 80075d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075d8:	e00e      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80075e2:	e009      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80075e4:	58024400 	.word	0x58024400
 80075e8:	58024800 	.word	0x58024800
 80075ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f002 0301 	and.w	r3, r2, #1
 8007604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007608:	2300      	movs	r3, #0
 800760a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800760e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007612:	460b      	mov	r3, r1
 8007614:	4313      	orrs	r3, r2
 8007616:	f000 8089 	beq.w	800772c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007620:	2b28      	cmp	r3, #40	@ 0x28
 8007622:	d86b      	bhi.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007624:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	08007705 	.word	0x08007705
 8007630:	080076fd 	.word	0x080076fd
 8007634:	080076fd 	.word	0x080076fd
 8007638:	080076fd 	.word	0x080076fd
 800763c:	080076fd 	.word	0x080076fd
 8007640:	080076fd 	.word	0x080076fd
 8007644:	080076fd 	.word	0x080076fd
 8007648:	080076fd 	.word	0x080076fd
 800764c:	080076d1 	.word	0x080076d1
 8007650:	080076fd 	.word	0x080076fd
 8007654:	080076fd 	.word	0x080076fd
 8007658:	080076fd 	.word	0x080076fd
 800765c:	080076fd 	.word	0x080076fd
 8007660:	080076fd 	.word	0x080076fd
 8007664:	080076fd 	.word	0x080076fd
 8007668:	080076fd 	.word	0x080076fd
 800766c:	080076e7 	.word	0x080076e7
 8007670:	080076fd 	.word	0x080076fd
 8007674:	080076fd 	.word	0x080076fd
 8007678:	080076fd 	.word	0x080076fd
 800767c:	080076fd 	.word	0x080076fd
 8007680:	080076fd 	.word	0x080076fd
 8007684:	080076fd 	.word	0x080076fd
 8007688:	080076fd 	.word	0x080076fd
 800768c:	08007705 	.word	0x08007705
 8007690:	080076fd 	.word	0x080076fd
 8007694:	080076fd 	.word	0x080076fd
 8007698:	080076fd 	.word	0x080076fd
 800769c:	080076fd 	.word	0x080076fd
 80076a0:	080076fd 	.word	0x080076fd
 80076a4:	080076fd 	.word	0x080076fd
 80076a8:	080076fd 	.word	0x080076fd
 80076ac:	08007705 	.word	0x08007705
 80076b0:	080076fd 	.word	0x080076fd
 80076b4:	080076fd 	.word	0x080076fd
 80076b8:	080076fd 	.word	0x080076fd
 80076bc:	080076fd 	.word	0x080076fd
 80076c0:	080076fd 	.word	0x080076fd
 80076c4:	080076fd 	.word	0x080076fd
 80076c8:	080076fd 	.word	0x080076fd
 80076cc:	08007705 	.word	0x08007705
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d4:	3308      	adds	r3, #8
 80076d6:	2101      	movs	r1, #1
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 ffc3 	bl	8008664 <RCCEx_PLL2_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076e4:	e00f      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ea:	3328      	adds	r3, #40	@ 0x28
 80076ec:	2101      	movs	r1, #1
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 f86a 	bl	80087c8 <RCCEx_PLL3_Config>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076fa:	e004      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007702:	e000      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800770e:	4bbf      	ldr	r3, [pc, #764]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007712:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800771c:	4abb      	ldr	r2, [pc, #748]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800771e:	430b      	orrs	r3, r1
 8007720:	6553      	str	r3, [r2, #84]	@ 0x54
 8007722:	e003      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800772c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	f002 0302 	and.w	r3, r2, #2
 8007738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800773c:	2300      	movs	r3, #0
 800773e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007742:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007746:	460b      	mov	r3, r1
 8007748:	4313      	orrs	r3, r2
 800774a:	d041      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007752:	2b05      	cmp	r3, #5
 8007754:	d824      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007756:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	080077a9 	.word	0x080077a9
 8007760:	08007775 	.word	0x08007775
 8007764:	0800778b 	.word	0x0800778b
 8007768:	080077a9 	.word	0x080077a9
 800776c:	080077a9 	.word	0x080077a9
 8007770:	080077a9 	.word	0x080077a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007778:	3308      	adds	r3, #8
 800777a:	2101      	movs	r1, #1
 800777c:	4618      	mov	r0, r3
 800777e:	f000 ff71 	bl	8008664 <RCCEx_PLL2_Config>
 8007782:	4603      	mov	r3, r0
 8007784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007788:	e00f      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778e:	3328      	adds	r3, #40	@ 0x28
 8007790:	2101      	movs	r1, #1
 8007792:	4618      	mov	r0, r3
 8007794:	f001 f818 	bl	80087c8 <RCCEx_PLL3_Config>
 8007798:	4603      	mov	r3, r0
 800779a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800779e:	e004      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077a6:	e000      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80077a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077b2:	4b96      	ldr	r3, [pc, #600]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b6:	f023 0107 	bic.w	r1, r3, #7
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077c0:	4a92      	ldr	r2, [pc, #584]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077c2:	430b      	orrs	r3, r1
 80077c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80077c6:	e003      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d8:	f002 0304 	and.w	r3, r2, #4
 80077dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077e0:	2300      	movs	r3, #0
 80077e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4313      	orrs	r3, r2
 80077ee:	d044      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80077f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077f8:	2b05      	cmp	r3, #5
 80077fa:	d825      	bhi.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80077fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007804 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007851 	.word	0x08007851
 8007808:	0800781d 	.word	0x0800781d
 800780c:	08007833 	.word	0x08007833
 8007810:	08007851 	.word	0x08007851
 8007814:	08007851 	.word	0x08007851
 8007818:	08007851 	.word	0x08007851
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007820:	3308      	adds	r3, #8
 8007822:	2101      	movs	r1, #1
 8007824:	4618      	mov	r0, r3
 8007826:	f000 ff1d 	bl	8008664 <RCCEx_PLL2_Config>
 800782a:	4603      	mov	r3, r0
 800782c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007830:	e00f      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007836:	3328      	adds	r3, #40	@ 0x28
 8007838:	2101      	movs	r1, #1
 800783a:	4618      	mov	r0, r3
 800783c:	f000 ffc4 	bl	80087c8 <RCCEx_PLL3_Config>
 8007840:	4603      	mov	r3, r0
 8007842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007846:	e004      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800784e:	e000      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10b      	bne.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800785a:	4b6c      	ldr	r3, [pc, #432]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800785c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800785e:	f023 0107 	bic.w	r1, r3, #7
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800786a:	4a68      	ldr	r2, [pc, #416]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800786c:	430b      	orrs	r3, r1
 800786e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007870:	e003      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800787a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f002 0320 	and.w	r3, r2, #32
 8007886:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800788a:	2300      	movs	r3, #0
 800788c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007890:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007894:	460b      	mov	r3, r1
 8007896:	4313      	orrs	r3, r2
 8007898:	d055      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078a6:	d033      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80078a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078ac:	d82c      	bhi.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078b2:	d02f      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80078b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078b8:	d826      	bhi.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078be:	d02b      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80078c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078c4:	d820      	bhi.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078ca:	d012      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80078cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078d0:	d81a      	bhi.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d022      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80078d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078da:	d115      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e0:	3308      	adds	r3, #8
 80078e2:	2100      	movs	r1, #0
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 febd 	bl	8008664 <RCCEx_PLL2_Config>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078f0:	e015      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f6:	3328      	adds	r3, #40	@ 0x28
 80078f8:	2102      	movs	r1, #2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 ff64 	bl	80087c8 <RCCEx_PLL3_Config>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007906:	e00a      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800790e:	e006      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007910:	bf00      	nop
 8007912:	e004      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007914:	bf00      	nop
 8007916:	e002      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007918:	bf00      	nop
 800791a:	e000      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800791c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800791e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10b      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007926:	4b39      	ldr	r3, [pc, #228]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007936:	4a35      	ldr	r2, [pc, #212]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007938:	430b      	orrs	r3, r1
 800793a:	6553      	str	r3, [r2, #84]	@ 0x54
 800793c:	e003      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007956:	2300      	movs	r3, #0
 8007958:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800795c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007960:	460b      	mov	r3, r1
 8007962:	4313      	orrs	r3, r2
 8007964:	d058      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800796e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007972:	d033      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007974:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007978:	d82c      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800797a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800797e:	d02f      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007984:	d826      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007986:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800798a:	d02b      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800798c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007990:	d820      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007992:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007996:	d012      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800799c:	d81a      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d022      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80079a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a6:	d115      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ac:	3308      	adds	r3, #8
 80079ae:	2100      	movs	r1, #0
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fe57 	bl	8008664 <RCCEx_PLL2_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079bc:	e015      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	3328      	adds	r3, #40	@ 0x28
 80079c4:	2102      	movs	r1, #2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fefe 	bl	80087c8 <RCCEx_PLL3_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079d2:	e00a      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079da:	e006      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079dc:	bf00      	nop
 80079de:	e004      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079e0:	bf00      	nop
 80079e2:	e002      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079e4:	bf00      	nop
 80079e6:	e000      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10e      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079f2:	4b06      	ldr	r3, [pc, #24]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80079fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a02:	4a02      	ldr	r2, [pc, #8]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a08:	e006      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a0a:	bf00      	nop
 8007a0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a32:	460b      	mov	r3, r1
 8007a34:	4313      	orrs	r3, r2
 8007a36:	d055      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a40:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a44:	d033      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a46:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a4a:	d82c      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a50:	d02f      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a56:	d826      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a58:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a5c:	d02b      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a62:	d820      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a68:	d012      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a6e:	d81a      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d022      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a78:	d115      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	3308      	adds	r3, #8
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fdee 	bl	8008664 <RCCEx_PLL2_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a8e:	e015      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a94:	3328      	adds	r3, #40	@ 0x28
 8007a96:	2102      	movs	r1, #2
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 fe95 	bl	80087c8 <RCCEx_PLL3_Config>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007aa4:	e00a      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aac:	e006      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007aae:	bf00      	nop
 8007ab0:	e004      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ab2:	bf00      	nop
 8007ab4:	e002      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ab6:	bf00      	nop
 8007ab8:	e000      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10b      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ac4:	4ba1      	ldr	r3, [pc, #644]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ad4:	4a9d      	ldr	r2, [pc, #628]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ad6:	430b      	orrs	r3, r1
 8007ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ada:	e003      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f002 0308 	and.w	r3, r2, #8
 8007af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007af4:	2300      	movs	r3, #0
 8007af6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007afa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007afe:	460b      	mov	r3, r1
 8007b00:	4313      	orrs	r3, r2
 8007b02:	d01e      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b10:	d10c      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b16:	3328      	adds	r3, #40	@ 0x28
 8007b18:	2102      	movs	r1, #2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fe54 	bl	80087c8 <RCCEx_PLL3_Config>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b2c:	4b87      	ldr	r3, [pc, #540]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b30:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b3c:	4a83      	ldr	r2, [pc, #524]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b3e:	430b      	orrs	r3, r1
 8007b40:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f002 0310 	and.w	r3, r2, #16
 8007b4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b52:	2300      	movs	r3, #0
 8007b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	d01e      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b6e:	d10c      	bne.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b74:	3328      	adds	r3, #40	@ 0x28
 8007b76:	2102      	movs	r1, #2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fe25 	bl	80087c8 <RCCEx_PLL3_Config>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b8a:	4b70      	ldr	r3, [pc, #448]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b9a:	4a6c      	ldr	r2, [pc, #432]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007bac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bb6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	d03e      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bcc:	d022      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007bce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bd2:	d81b      	bhi.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bdc:	d00b      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007bde:	e015      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be4:	3308      	adds	r3, #8
 8007be6:	2100      	movs	r1, #0
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fd3b 	bl	8008664 <RCCEx_PLL2_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bf4:	e00f      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfa:	3328      	adds	r3, #40	@ 0x28
 8007bfc:	2102      	movs	r1, #2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fde2 	bl	80087c8 <RCCEx_PLL3_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c0a:	e004      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c12:	e000      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10b      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c22:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c2e:	4a47      	ldr	r2, [pc, #284]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c34:	e003      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007c54:	460b      	mov	r3, r1
 8007c56:	4313      	orrs	r3, r2
 8007c58:	d03b      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c66:	d01f      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c6c:	d818      	bhi.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c72:	d003      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007c74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c78:	d007      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007c7a:	e011      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c7c:	4b33      	ldr	r3, [pc, #204]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c80:	4a32      	ldr	r2, [pc, #200]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c88:	e00f      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8e:	3328      	adds	r3, #40	@ 0x28
 8007c90:	2101      	movs	r1, #1
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fd98 	bl	80087c8 <RCCEx_PLL3_Config>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c9e:	e004      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ca6:	e000      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10b      	bne.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cb2:	4b26      	ldr	r3, [pc, #152]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc2:	4a22      	ldr	r2, [pc, #136]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cc8:	e003      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007cde:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ce4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4313      	orrs	r3, r2
 8007cec:	d034      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cfc:	d007      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007cfe:	e011      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d00:	4b12      	ldr	r3, [pc, #72]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	4a11      	ldr	r2, [pc, #68]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d0c:	e00e      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d12:	3308      	adds	r3, #8
 8007d14:	2102      	movs	r1, #2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fca4 	bl	8008664 <RCCEx_PLL2_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d22:	e003      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10d      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d34:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d42:	4a02      	ldr	r2, [pc, #8]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d44:	430b      	orrs	r3, r1
 8007d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d48:	e006      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d4a:	bf00      	nop
 8007d4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d66:	2300      	movs	r3, #0
 8007d68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d6a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4313      	orrs	r3, r2
 8007d72:	d00c      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d78:	3328      	adds	r3, #40	@ 0x28
 8007d7a:	2102      	movs	r1, #2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fd23 	bl	80087c8 <RCCEx_PLL3_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007d9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007da0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007da4:	460b      	mov	r3, r1
 8007da6:	4313      	orrs	r3, r2
 8007da8:	d038      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007db2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007db6:	d018      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007db8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dbc:	d811      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dc2:	d014      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dc8:	d80b      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d011      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dd2:	d106      	bne.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd4:	4bc3      	ldr	r3, [pc, #780]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd8:	4ac2      	ldr	r2, [pc, #776]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007de0:	e008      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007de8:	e004      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dea:	bf00      	nop
 8007dec:	e002      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dee:	bf00      	nop
 8007df0:	e000      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10b      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dfc:	4bb9      	ldr	r3, [pc, #740]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e0c:	4ab5      	ldr	r2, [pc, #724]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e12:	e003      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e32:	460b      	mov	r3, r1
 8007e34:	4313      	orrs	r3, r2
 8007e36:	d009      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e38:	4baa      	ldr	r3, [pc, #680]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e46:	4aa7      	ldr	r2, [pc, #668]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e58:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007e62:	460b      	mov	r3, r1
 8007e64:	4313      	orrs	r3, r2
 8007e66:	d00a      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e68:	4b9e      	ldr	r3, [pc, #632]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e78:	4a9a      	ldr	r2, [pc, #616]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e7a:	430b      	orrs	r3, r1
 8007e7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e94:	460b      	mov	r3, r1
 8007e96:	4313      	orrs	r3, r2
 8007e98:	d009      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e9a:	4b92      	ldr	r3, [pc, #584]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e9e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ea8:	4a8e      	ldr	r2, [pc, #568]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007eba:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ec0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	d00e      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007eca:	4b86      	ldr	r3, [pc, #536]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	4a85      	ldr	r2, [pc, #532]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ed0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ed4:	6113      	str	r3, [r2, #16]
 8007ed6:	4b83      	ldr	r3, [pc, #524]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ed8:	6919      	ldr	r1, [r3, #16]
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ede:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ee2:	4a80      	ldr	r2, [pc, #512]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007efa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007efe:	460b      	mov	r3, r1
 8007f00:	4313      	orrs	r3, r2
 8007f02:	d009      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f04:	4b77      	ldr	r3, [pc, #476]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f08:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f12:	4a74      	ldr	r2, [pc, #464]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f14:	430b      	orrs	r3, r1
 8007f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f26:	2300      	movs	r3, #0
 8007f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4313      	orrs	r3, r2
 8007f32:	d00a      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f34:	4b6b      	ldr	r3, [pc, #428]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f38:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f44:	4a67      	ldr	r2, [pc, #412]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f46:	430b      	orrs	r3, r1
 8007f48:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	2100      	movs	r1, #0
 8007f54:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007f60:	460b      	mov	r3, r1
 8007f62:	4313      	orrs	r3, r2
 8007f64:	d011      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fb78 	bl	8008664 <RCCEx_PLL2_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	2100      	movs	r1, #0
 8007f94:	6239      	str	r1, [r7, #32]
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	d011      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007faa:	3308      	adds	r3, #8
 8007fac:	2101      	movs	r1, #1
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fb58 	bl	8008664 <RCCEx_PLL2_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	61b9      	str	r1, [r7, #24]
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	61fb      	str	r3, [r7, #28]
 8007fdc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	d011      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fea:	3308      	adds	r3, #8
 8007fec:	2102      	movs	r1, #2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fb38 	bl	8008664 <RCCEx_PLL2_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800800a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	2100      	movs	r1, #0
 8008014:	6139      	str	r1, [r7, #16]
 8008016:	f003 0308 	and.w	r3, r3, #8
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008020:	460b      	mov	r3, r1
 8008022:	4313      	orrs	r3, r2
 8008024:	d011      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802a:	3328      	adds	r3, #40	@ 0x28
 800802c:	2100      	movs	r1, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f000 fbca 	bl	80087c8 <RCCEx_PLL3_Config>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800803a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	2100      	movs	r1, #0
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	f003 0310 	and.w	r3, r3, #16
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008060:	460b      	mov	r3, r1
 8008062:	4313      	orrs	r3, r2
 8008064:	d011      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806a:	3328      	adds	r3, #40	@ 0x28
 800806c:	2101      	movs	r1, #1
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fbaa 	bl	80087c8 <RCCEx_PLL3_Config>
 8008074:	4603      	mov	r3, r0
 8008076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800807a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	2100      	movs	r1, #0
 8008094:	6039      	str	r1, [r7, #0]
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	607b      	str	r3, [r7, #4]
 800809c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80080a0:	460b      	mov	r3, r1
 80080a2:	4313      	orrs	r3, r2
 80080a4:	d011      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080aa:	3328      	adds	r3, #40	@ 0x28
 80080ac:	2102      	movs	r1, #2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fb8a 	bl	80087c8 <RCCEx_PLL3_Config>
 80080b4:	4603      	mov	r3, r0
 80080b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80080ca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	e000      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
}
 80080d8:	4618      	mov	r0, r3
 80080da:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80080de:	46bd      	mov	sp, r7
 80080e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080e4:	58024400 	.word	0x58024400

080080e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080ec:	f7fe fd96 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 80080f0:	4602      	mov	r2, r0
 80080f2:	4b06      	ldr	r3, [pc, #24]	@ (800810c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	091b      	lsrs	r3, r3, #4
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	4904      	ldr	r1, [pc, #16]	@ (8008110 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80080fe:	5ccb      	ldrb	r3, [r1, r3]
 8008100:	f003 031f 	and.w	r3, r3, #31
 8008104:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008108:	4618      	mov	r0, r3
 800810a:	bd80      	pop	{r7, pc}
 800810c:	58024400 	.word	0x58024400
 8008110:	0800c938 	.word	0x0800c938

08008114 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008114:	b480      	push	{r7}
 8008116:	b089      	sub	sp, #36	@ 0x24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800811c:	4ba1      	ldr	r3, [pc, #644]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800811e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008126:	4b9f      	ldr	r3, [pc, #636]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812a:	0b1b      	lsrs	r3, r3, #12
 800812c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008130:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008132:	4b9c      	ldr	r3, [pc, #624]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	091b      	lsrs	r3, r3, #4
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800813e:	4b99      	ldr	r3, [pc, #612]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008142:	08db      	lsrs	r3, r3, #3
 8008144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	fb02 f303 	mul.w	r3, r2, r3
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008156:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8111 	beq.w	8008384 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b02      	cmp	r3, #2
 8008166:	f000 8083 	beq.w	8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	2b02      	cmp	r3, #2
 800816e:	f200 80a1 	bhi.w	80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d056      	beq.n	800822c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800817e:	e099      	b.n	80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008180:	4b88      	ldr	r3, [pc, #544]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	d02d      	beq.n	80081e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800818c:	4b85      	ldr	r3, [pc, #532]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	08db      	lsrs	r3, r3, #3
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	4a84      	ldr	r2, [pc, #528]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008198:	fa22 f303 	lsr.w	r3, r2, r3
 800819c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	ee07 3a90 	vmov	s15, r3
 80081a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	ee07 3a90 	vmov	s15, r3
 80081ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b6:	4b7b      	ldr	r3, [pc, #492]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081e6:	e087      	b.n	80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80081f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fa:	4b6a      	ldr	r3, [pc, #424]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820a:	ed97 6a03 	vldr	s12, [r7, #12]
 800820e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800821e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800822a:	e065      	b.n	80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008236:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800823a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823e:	4b59      	ldr	r3, [pc, #356]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008252:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800826e:	e043      	b.n	80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800827e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008282:	4b48      	ldr	r3, [pc, #288]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008292:	ed97 6a03 	vldr	s12, [r7, #12]
 8008296:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800829a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082b2:	e021      	b.n	80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c6:	4b37      	ldr	r3, [pc, #220]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80082f8:	4b2a      	ldr	r3, [pc, #168]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fc:	0a5b      	lsrs	r3, r3, #9
 80082fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800830e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008312:	edd7 6a07 	vldr	s13, [r7, #28]
 8008316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800831a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800831e:	ee17 2a90 	vmov	r2, s15
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008326:	4b1f      	ldr	r3, [pc, #124]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832a:	0c1b      	lsrs	r3, r3, #16
 800832c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008330:	ee07 3a90 	vmov	s15, r3
 8008334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008338:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800833c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008340:	edd7 6a07 	vldr	s13, [r7, #28]
 8008344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800834c:	ee17 2a90 	vmov	r2, s15
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008354:	4b13      	ldr	r3, [pc, #76]	@ (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008358:	0e1b      	lsrs	r3, r3, #24
 800835a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008366:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800836a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800836e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800837a:	ee17 2a90 	vmov	r2, s15
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008382:	e008      	b.n	8008396 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	609a      	str	r2, [r3, #8]
}
 8008396:	bf00      	nop
 8008398:	3724      	adds	r7, #36	@ 0x24
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	58024400 	.word	0x58024400
 80083a8:	03d09000 	.word	0x03d09000
 80083ac:	46000000 	.word	0x46000000
 80083b0:	4c742400 	.word	0x4c742400
 80083b4:	4a742400 	.word	0x4a742400
 80083b8:	4af42400 	.word	0x4af42400

080083bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80083bc:	b480      	push	{r7}
 80083be:	b089      	sub	sp, #36	@ 0x24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083c4:	4ba1      	ldr	r3, [pc, #644]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80083ce:	4b9f      	ldr	r3, [pc, #636]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d2:	0d1b      	lsrs	r3, r3, #20
 80083d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083da:	4b9c      	ldr	r3, [pc, #624]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80083e6:	4b99      	ldr	r3, [pc, #612]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ea:	08db      	lsrs	r3, r3, #3
 80083ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	fb02 f303 	mul.w	r3, r2, r3
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 8111 	beq.w	800862c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b02      	cmp	r3, #2
 800840e:	f000 8083 	beq.w	8008518 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	2b02      	cmp	r3, #2
 8008416:	f200 80a1 	bhi.w	800855c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d056      	beq.n	80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008426:	e099      	b.n	800855c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008428:	4b88      	ldr	r3, [pc, #544]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0320 	and.w	r3, r3, #32
 8008430:	2b00      	cmp	r3, #0
 8008432:	d02d      	beq.n	8008490 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008434:	4b85      	ldr	r3, [pc, #532]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	08db      	lsrs	r3, r3, #3
 800843a:	f003 0303 	and.w	r3, r3, #3
 800843e:	4a84      	ldr	r2, [pc, #528]	@ (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008440:	fa22 f303 	lsr.w	r3, r2, r3
 8008444:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	ee07 3a90 	vmov	s15, r3
 800844c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800845e:	4b7b      	ldr	r3, [pc, #492]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800846e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008472:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800847a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800847e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800848a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800848e:	e087      	b.n	80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800849e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a2:	4b6a      	ldr	r3, [pc, #424]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084d2:	e065      	b.n	80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800865c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e6:	4b59      	ldr	r3, [pc, #356]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800850a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008516:	e043      	b.n	80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008522:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800852a:	4b48      	ldr	r3, [pc, #288]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800852c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800853a:	ed97 6a03 	vldr	s12, [r7, #12]
 800853e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800854a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800854e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800855a:	e021      	b.n	80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008566:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800865c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800856a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800856e:	4b37      	ldr	r3, [pc, #220]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008582:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800858a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800858e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800859e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80085a0:	4b2a      	ldr	r3, [pc, #168]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a4:	0a5b      	lsrs	r3, r3, #9
 80085a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085aa:	ee07 3a90 	vmov	s15, r3
 80085ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80085be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085c6:	ee17 2a90 	vmov	r2, s15
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80085ce:	4b1f      	ldr	r3, [pc, #124]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d2:	0c1b      	lsrs	r3, r3, #16
 80085d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085f4:	ee17 2a90 	vmov	r2, s15
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80085fc:	4b13      	ldr	r3, [pc, #76]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008600:	0e1b      	lsrs	r3, r3, #24
 8008602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008616:	edd7 6a07 	vldr	s13, [r7, #28]
 800861a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800861e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008622:	ee17 2a90 	vmov	r2, s15
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800862a:	e008      	b.n	800863e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	609a      	str	r2, [r3, #8]
}
 800863e:	bf00      	nop
 8008640:	3724      	adds	r7, #36	@ 0x24
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	58024400 	.word	0x58024400
 8008650:	03d09000 	.word	0x03d09000
 8008654:	46000000 	.word	0x46000000
 8008658:	4c742400 	.word	0x4c742400
 800865c:	4a742400 	.word	0x4a742400
 8008660:	4af42400 	.word	0x4af42400

08008664 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008672:	4b53      	ldr	r3, [pc, #332]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	2b03      	cmp	r3, #3
 800867c:	d101      	bne.n	8008682 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e099      	b.n	80087b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008682:	4b4f      	ldr	r3, [pc, #316]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a4e      	ldr	r2, [pc, #312]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008688:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800868c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800868e:	f7f9 f901 	bl	8001894 <HAL_GetTick>
 8008692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008694:	e008      	b.n	80086a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008696:	f7f9 f8fd 	bl	8001894 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e086      	b.n	80087b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086a8:	4b45      	ldr	r3, [pc, #276]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f0      	bne.n	8008696 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80086b4:	4b42      	ldr	r3, [pc, #264]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 80086b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	031b      	lsls	r3, r3, #12
 80086c2:	493f      	ldr	r1, [pc, #252]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	025b      	lsls	r3, r3, #9
 80086da:	b29b      	uxth	r3, r3
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	041b      	lsls	r3, r3, #16
 80086e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	061b      	lsls	r3, r3, #24
 80086f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80086f8:	4931      	ldr	r1, [pc, #196]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80086fe:	4b30      	ldr	r3, [pc, #192]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008702:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	492d      	ldr	r1, [pc, #180]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 800870c:	4313      	orrs	r3, r2
 800870e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008710:	4b2b      	ldr	r3, [pc, #172]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008714:	f023 0220 	bic.w	r2, r3, #32
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	4928      	ldr	r1, [pc, #160]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 800871e:	4313      	orrs	r3, r2
 8008720:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008722:	4b27      	ldr	r3, [pc, #156]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008726:	4a26      	ldr	r2, [pc, #152]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008728:	f023 0310 	bic.w	r3, r3, #16
 800872c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800872e:	4b24      	ldr	r3, [pc, #144]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008732:	4b24      	ldr	r3, [pc, #144]	@ (80087c4 <RCCEx_PLL2_Config+0x160>)
 8008734:	4013      	ands	r3, r2
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	69d2      	ldr	r2, [r2, #28]
 800873a:	00d2      	lsls	r2, r2, #3
 800873c:	4920      	ldr	r1, [pc, #128]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 800873e:	4313      	orrs	r3, r2
 8008740:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008742:	4b1f      	ldr	r3, [pc, #124]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008746:	4a1e      	ldr	r2, [pc, #120]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008748:	f043 0310 	orr.w	r3, r3, #16
 800874c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d106      	bne.n	8008762 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008754:	4b1a      	ldr	r3, [pc, #104]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008758:	4a19      	ldr	r2, [pc, #100]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 800875a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800875e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008760:	e00f      	b.n	8008782 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d106      	bne.n	8008776 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008768:	4b15      	ldr	r3, [pc, #84]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 800876a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876c:	4a14      	ldr	r2, [pc, #80]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 800876e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008772:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008774:	e005      	b.n	8008782 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008776:	4b12      	ldr	r3, [pc, #72]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877a:	4a11      	ldr	r2, [pc, #68]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 800877c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008780:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008782:	4b0f      	ldr	r3, [pc, #60]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a0e      	ldr	r2, [pc, #56]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 8008788:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800878c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800878e:	f7f9 f881 	bl	8001894 <HAL_GetTick>
 8008792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008794:	e008      	b.n	80087a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008796:	f7f9 f87d 	bl	8001894 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e006      	b.n	80087b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087a8:	4b05      	ldr	r3, [pc, #20]	@ (80087c0 <RCCEx_PLL2_Config+0x15c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0f0      	beq.n	8008796 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	58024400 	.word	0x58024400
 80087c4:	ffff0007 	.word	0xffff0007

080087c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087d6:	4b53      	ldr	r3, [pc, #332]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80087d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d101      	bne.n	80087e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e099      	b.n	800891a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80087e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a4e      	ldr	r2, [pc, #312]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80087ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087f2:	f7f9 f84f 	bl	8001894 <HAL_GetTick>
 80087f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087f8:	e008      	b.n	800880c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80087fa:	f7f9 f84b 	bl	8001894 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	2b02      	cmp	r3, #2
 8008806:	d901      	bls.n	800880c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e086      	b.n	800891a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800880c:	4b45      	ldr	r3, [pc, #276]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1f0      	bne.n	80087fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008818:	4b42      	ldr	r3, [pc, #264]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 800881a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	051b      	lsls	r3, r3, #20
 8008826:	493f      	ldr	r1, [pc, #252]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 8008828:	4313      	orrs	r3, r2
 800882a:	628b      	str	r3, [r1, #40]	@ 0x28
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	3b01      	subs	r3, #1
 8008832:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	3b01      	subs	r3, #1
 800883c:	025b      	lsls	r3, r3, #9
 800883e:	b29b      	uxth	r3, r3
 8008840:	431a      	orrs	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	3b01      	subs	r3, #1
 8008848:	041b      	lsls	r3, r3, #16
 800884a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	3b01      	subs	r3, #1
 8008856:	061b      	lsls	r3, r3, #24
 8008858:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800885c:	4931      	ldr	r1, [pc, #196]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 800885e:	4313      	orrs	r3, r2
 8008860:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008862:	4b30      	ldr	r3, [pc, #192]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 8008864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008866:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	492d      	ldr	r1, [pc, #180]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 8008870:	4313      	orrs	r3, r2
 8008872:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008874:	4b2b      	ldr	r3, [pc, #172]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 8008876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008878:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	4928      	ldr	r1, [pc, #160]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 8008882:	4313      	orrs	r3, r2
 8008884:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008886:	4b27      	ldr	r3, [pc, #156]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 8008888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888a:	4a26      	ldr	r2, [pc, #152]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 800888c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008890:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008892:	4b24      	ldr	r3, [pc, #144]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 8008894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008896:	4b24      	ldr	r3, [pc, #144]	@ (8008928 <RCCEx_PLL3_Config+0x160>)
 8008898:	4013      	ands	r3, r2
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	69d2      	ldr	r2, [r2, #28]
 800889e:	00d2      	lsls	r2, r2, #3
 80088a0:	4920      	ldr	r1, [pc, #128]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80088a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d106      	bne.n	80088c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80088b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088bc:	4a19      	ldr	r2, [pc, #100]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80088c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088c4:	e00f      	b.n	80088e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d106      	bne.n	80088da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80088cc:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d0:	4a14      	ldr	r2, [pc, #80]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088d8:	e005      	b.n	80088e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80088da:	4b12      	ldr	r3, [pc, #72]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088de:	4a11      	ldr	r2, [pc, #68]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80088e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 80088ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088f2:	f7f8 ffcf 	bl	8001894 <HAL_GetTick>
 80088f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80088f8:	e008      	b.n	800890c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088fa:	f7f8 ffcb 	bl	8001894 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b02      	cmp	r3, #2
 8008906:	d901      	bls.n	800890c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e006      	b.n	800891a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800890c:	4b05      	ldr	r3, [pc, #20]	@ (8008924 <RCCEx_PLL3_Config+0x15c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0f0      	beq.n	80088fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008918:	7bfb      	ldrb	r3, [r7, #15]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	58024400 	.word	0x58024400
 8008928:	ffff0007 	.word	0xffff0007

0800892c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e042      	b.n	80089c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008944:	2b00      	cmp	r3, #0
 8008946:	d106      	bne.n	8008956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7f8 fb61 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2224      	movs	r2, #36	@ 0x24
 800895a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0201 	bic.w	r2, r2, #1
 800896c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 fae0 	bl	8009f3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fd75 	bl	800946c <UART_SetConfig>
 8008982:	4603      	mov	r3, r0
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e01b      	b.n	80089c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800899a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0201 	orr.w	r2, r2, #1
 80089ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 fb5f 	bl	800a080 <UART_CheckIdleState>
 80089c2:	4603      	mov	r3, r0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e031      	b.n	8008a42 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2224      	movs	r2, #36	@ 0x24
 80089e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0201 	bic.w	r2, r2, #1
 80089f4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2200      	movs	r2, #0
 8008a04:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7f8 fc92 	bl	8001338 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b091      	sub	sp, #68	@ 0x44
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a60:	2b20      	cmp	r3, #32
 8008a62:	d178      	bne.n	8008b56 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <HAL_UART_Transmit_IT+0x24>
 8008a6a:	88fb      	ldrh	r3, [r7, #6]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e071      	b.n	8008b58 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	88fa      	ldrh	r2, [r7, #6]
 8008a7e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	88fa      	ldrh	r2, [r7, #6]
 8008a86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2221      	movs	r2, #33	@ 0x21
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aa8:	d12a      	bne.n	8008b00 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab2:	d107      	bne.n	8008ac4 <HAL_UART_Transmit_IT+0x78>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d103      	bne.n	8008ac4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4a29      	ldr	r2, [pc, #164]	@ (8008b64 <HAL_UART_Transmit_IT+0x118>)
 8008ac0:	679a      	str	r2, [r3, #120]	@ 0x78
 8008ac2:	e002      	b.n	8008aca <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4a28      	ldr	r2, [pc, #160]	@ (8008b68 <HAL_UART_Transmit_IT+0x11c>)
 8008ac8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008adc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008aea:	637a      	str	r2, [r7, #52]	@ 0x34
 8008aec:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e5      	bne.n	8008aca <HAL_UART_Transmit_IT+0x7e>
 8008afe:	e028      	b.n	8008b52 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b08:	d107      	bne.n	8008b1a <HAL_UART_Transmit_IT+0xce>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d103      	bne.n	8008b1a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4a15      	ldr	r2, [pc, #84]	@ (8008b6c <HAL_UART_Transmit_IT+0x120>)
 8008b16:	679a      	str	r2, [r3, #120]	@ 0x78
 8008b18:	e002      	b.n	8008b20 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4a14      	ldr	r2, [pc, #80]	@ (8008b70 <HAL_UART_Transmit_IT+0x124>)
 8008b1e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b3e:	623b      	str	r3, [r7, #32]
 8008b40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	69f9      	ldr	r1, [r7, #28]
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e6      	bne.n	8008b20 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	e000      	b.n	8008b58 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008b56:	2302      	movs	r3, #2
  }
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3744      	adds	r7, #68	@ 0x44
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	0800abfd 	.word	0x0800abfd
 8008b68:	0800ab1d 	.word	0x0800ab1d
 8008b6c:	0800aa5b 	.word	0x0800aa5b
 8008b70:	0800a9a3 	.word	0x0800a9a3

08008b74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08a      	sub	sp, #40	@ 0x28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b88:	2b20      	cmp	r3, #32
 8008b8a:	d137      	bne.n	8008bfc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <HAL_UART_Receive_IT+0x24>
 8008b92:	88fb      	ldrh	r3, [r7, #6]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e030      	b.n	8008bfe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a18      	ldr	r2, [pc, #96]	@ (8008c08 <HAL_UART_Receive_IT+0x94>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d01f      	beq.n	8008bec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d018      	beq.n	8008bec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd8:	623b      	str	r3, [r7, #32]
 8008bda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bdc:	69f9      	ldr	r1, [r7, #28]
 8008bde:	6a3a      	ldr	r2, [r7, #32]
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e6      	bne.n	8008bba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008bec:	88fb      	ldrh	r3, [r7, #6]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	68b9      	ldr	r1, [r7, #8]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f001 fb5c 	bl	800a2b0 <UART_Start_Receive_IT>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	e000      	b.n	8008bfe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008bfc:	2302      	movs	r3, #2
  }
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3728      	adds	r7, #40	@ 0x28
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	58000c00 	.word	0x58000c00

08008c0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08a      	sub	sp, #40	@ 0x28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	4613      	mov	r3, r2
 8008c18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	d137      	bne.n	8008c94 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <HAL_UART_Receive_DMA+0x24>
 8008c2a:	88fb      	ldrh	r3, [r7, #6]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e030      	b.n	8008c96 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a18      	ldr	r2, [pc, #96]	@ (8008ca0 <HAL_UART_Receive_DMA+0x94>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d01f      	beq.n	8008c84 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d018      	beq.n	8008c84 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c70:	623b      	str	r3, [r7, #32]
 8008c72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	69f9      	ldr	r1, [r7, #28]
 8008c76:	6a3a      	ldr	r2, [r7, #32]
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e6      	bne.n	8008c52 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008c84:	88fb      	ldrh	r3, [r7, #6]
 8008c86:	461a      	mov	r2, r3
 8008c88:	68b9      	ldr	r1, [r7, #8]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f001 fc32 	bl	800a4f4 <UART_Start_Receive_DMA>
 8008c90:	4603      	mov	r3, r0
 8008c92:	e000      	b.n	8008c96 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c94:	2302      	movs	r3, #2
  }
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3728      	adds	r7, #40	@ 0x28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	58000c00 	.word	0x58000c00

08008ca4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b0ba      	sub	sp, #232	@ 0xe8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008cca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008cce:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d11b      	bne.n	8008d18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ce4:	f003 0320 	and.w	r3, r3, #32
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d015      	beq.n	8008d18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cf0:	f003 0320 	and.w	r3, r3, #32
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d105      	bne.n	8008d04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 8377 	beq.w	80093fc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	4798      	blx	r3
      }
      return;
 8008d16:	e371      	b.n	80093fc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 8123 	beq.w	8008f68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d26:	4b8d      	ldr	r3, [pc, #564]	@ (8008f5c <HAL_UART_IRQHandler+0x2b8>)
 8008d28:	4013      	ands	r3, r2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008d32:	4b8b      	ldr	r3, [pc, #556]	@ (8008f60 <HAL_UART_IRQHandler+0x2bc>)
 8008d34:	4013      	ands	r3, r2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 8116 	beq.w	8008f68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d011      	beq.n	8008d6c <HAL_UART_IRQHandler+0xc8>
 8008d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d62:	f043 0201 	orr.w	r2, r3, #1
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d011      	beq.n	8008d9c <HAL_UART_IRQHandler+0xf8>
 8008d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00b      	beq.n	8008d9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d92:	f043 0204 	orr.w	r2, r3, #4
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d011      	beq.n	8008dcc <HAL_UART_IRQHandler+0x128>
 8008da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00b      	beq.n	8008dcc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2204      	movs	r2, #4
 8008dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc2:	f043 0202 	orr.w	r2, r3, #2
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dd0:	f003 0308 	and.w	r3, r3, #8
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d017      	beq.n	8008e08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d105      	bne.n	8008df0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008de4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008de8:	4b5c      	ldr	r3, [pc, #368]	@ (8008f5c <HAL_UART_IRQHandler+0x2b8>)
 8008dea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2208      	movs	r2, #8
 8008df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dfe:	f043 0208 	orr.w	r2, r3, #8
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d012      	beq.n	8008e3a <HAL_UART_IRQHandler+0x196>
 8008e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00c      	beq.n	8008e3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e30:	f043 0220 	orr.w	r2, r3, #32
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 82dd 	beq.w	8009400 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d013      	beq.n	8008e7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d105      	bne.n	8008e6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d007      	beq.n	8008e7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e8e:	2b40      	cmp	r3, #64	@ 0x40
 8008e90:	d005      	beq.n	8008e9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d054      	beq.n	8008f48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 fc10 	bl	800a6c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eae:	2b40      	cmp	r3, #64	@ 0x40
 8008eb0:	d146      	bne.n	8008f40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3308      	adds	r3, #8
 8008eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008ede:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008eea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1d9      	bne.n	8008eb2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d017      	beq.n	8008f38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f0e:	4a15      	ldr	r2, [pc, #84]	@ (8008f64 <HAL_UART_IRQHandler+0x2c0>)
 8008f10:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fa f8e7 	bl	80030ec <HAL_DMA_Abort_IT>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d019      	beq.n	8008f58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008f32:	4610      	mov	r0, r2
 8008f34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f36:	e00f      	b.n	8008f58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fa81 	bl	8009440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f3e:	e00b      	b.n	8008f58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fa7d 	bl	8009440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f46:	e007      	b.n	8008f58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fa79 	bl	8009440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f56:	e253      	b.n	8009400 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f58:	bf00      	nop
    return;
 8008f5a:	e251      	b.n	8009400 <HAL_UART_IRQHandler+0x75c>
 8008f5c:	10000001 	.word	0x10000001
 8008f60:	04000120 	.word	0x04000120
 8008f64:	0800a977 	.word	0x0800a977

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	f040 81e7 	bne.w	8009340 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f76:	f003 0310 	and.w	r3, r3, #16
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 81e0 	beq.w	8009340 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 81d9 	beq.w	8009340 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2210      	movs	r2, #16
 8008f94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa0:	2b40      	cmp	r3, #64	@ 0x40
 8008fa2:	f040 8151 	bne.w	8009248 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a96      	ldr	r2, [pc, #600]	@ (8009208 <HAL_UART_IRQHandler+0x564>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d068      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a93      	ldr	r2, [pc, #588]	@ (800920c <HAL_UART_IRQHandler+0x568>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d061      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a91      	ldr	r2, [pc, #580]	@ (8009210 <HAL_UART_IRQHandler+0x56c>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d05a      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a8e      	ldr	r2, [pc, #568]	@ (8009214 <HAL_UART_IRQHandler+0x570>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d053      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a8c      	ldr	r2, [pc, #560]	@ (8009218 <HAL_UART_IRQHandler+0x574>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d04c      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a89      	ldr	r2, [pc, #548]	@ (800921c <HAL_UART_IRQHandler+0x578>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d045      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a87      	ldr	r2, [pc, #540]	@ (8009220 <HAL_UART_IRQHandler+0x57c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d03e      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a84      	ldr	r2, [pc, #528]	@ (8009224 <HAL_UART_IRQHandler+0x580>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d037      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a82      	ldr	r2, [pc, #520]	@ (8009228 <HAL_UART_IRQHandler+0x584>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d030      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a7f      	ldr	r2, [pc, #508]	@ (800922c <HAL_UART_IRQHandler+0x588>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d029      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a7d      	ldr	r2, [pc, #500]	@ (8009230 <HAL_UART_IRQHandler+0x58c>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d022      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a7a      	ldr	r2, [pc, #488]	@ (8009234 <HAL_UART_IRQHandler+0x590>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d01b      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a78      	ldr	r2, [pc, #480]	@ (8009238 <HAL_UART_IRQHandler+0x594>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d014      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a75      	ldr	r2, [pc, #468]	@ (800923c <HAL_UART_IRQHandler+0x598>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00d      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a73      	ldr	r2, [pc, #460]	@ (8009240 <HAL_UART_IRQHandler+0x59c>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d006      	beq.n	8009086 <HAL_UART_IRQHandler+0x3e2>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a70      	ldr	r2, [pc, #448]	@ (8009244 <HAL_UART_IRQHandler+0x5a0>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d106      	bne.n	8009094 <HAL_UART_IRQHandler+0x3f0>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	b29b      	uxth	r3, r3
 8009092:	e005      	b.n	80090a0 <HAL_UART_IRQHandler+0x3fc>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 81ab 	beq.w	8009404 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090b8:	429a      	cmp	r2, r3
 80090ba:	f080 81a3 	bcs.w	8009404 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090d4:	f000 8087 	beq.w	80091e6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009102:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009106:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800910e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009112:	e841 2300 	strex	r3, r2, [r1]
 8009116:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800911a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1da      	bne.n	80090d8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009134:	f023 0301 	bic.w	r3, r3, #1
 8009138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3308      	adds	r3, #8
 8009142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009146:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800914a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800914e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e1      	bne.n	8009122 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3308      	adds	r3, #8
 8009164:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800916e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009182:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009184:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009188:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1e3      	bne.n	800915e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091b4:	f023 0310 	bic.w	r3, r3, #16
 80091b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e4      	bne.n	80091a4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7f9 fc65 	bl	8002ab0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2202      	movs	r2, #2
 80091ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f927 	bl	8009454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009206:	e0fd      	b.n	8009404 <HAL_UART_IRQHandler+0x760>
 8009208:	40020010 	.word	0x40020010
 800920c:	40020028 	.word	0x40020028
 8009210:	40020040 	.word	0x40020040
 8009214:	40020058 	.word	0x40020058
 8009218:	40020070 	.word	0x40020070
 800921c:	40020088 	.word	0x40020088
 8009220:	400200a0 	.word	0x400200a0
 8009224:	400200b8 	.word	0x400200b8
 8009228:	40020410 	.word	0x40020410
 800922c:	40020428 	.word	0x40020428
 8009230:	40020440 	.word	0x40020440
 8009234:	40020458 	.word	0x40020458
 8009238:	40020470 	.word	0x40020470
 800923c:	40020488 	.word	0x40020488
 8009240:	400204a0 	.word	0x400204a0
 8009244:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009254:	b29b      	uxth	r3, r3
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009262:	b29b      	uxth	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 80cf 	beq.w	8009408 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800926a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 80ca 	beq.w	8009408 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009288:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009296:	647b      	str	r3, [r7, #68]	@ 0x44
 8009298:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800929c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800929e:	e841 2300 	strex	r3, r2, [r1]
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1e4      	bne.n	8009274 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3308      	adds	r3, #8
 80092b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	e853 3f00 	ldrex	r3, [r3]
 80092b8:	623b      	str	r3, [r7, #32]
   return(result);
 80092ba:	6a3a      	ldr	r2, [r7, #32]
 80092bc:	4b55      	ldr	r3, [pc, #340]	@ (8009414 <HAL_UART_IRQHandler+0x770>)
 80092be:	4013      	ands	r3, r2
 80092c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3308      	adds	r3, #8
 80092ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80092d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e3      	bne.n	80092aa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	60fb      	str	r3, [r7, #12]
   return(result);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 0310 	bic.w	r3, r3, #16
 800930a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009318:	61fb      	str	r3, [r7, #28]
 800931a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	69b9      	ldr	r1, [r7, #24]
 800931e:	69fa      	ldr	r2, [r7, #28]
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	617b      	str	r3, [r7, #20]
   return(result);
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e4      	bne.n	80092f6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009332:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f88b 	bl	8009454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800933e:	e063      	b.n	8009408 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00e      	beq.n	800936a <HAL_UART_IRQHandler+0x6c6>
 800934c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009350:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d008      	beq.n	800936a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f002 fa06 	bl	800b774 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009368:	e051      	b.n	800940e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800936a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800936e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009372:	2b00      	cmp	r3, #0
 8009374:	d014      	beq.n	80093a0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800937a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800937e:	2b00      	cmp	r3, #0
 8009380:	d105      	bne.n	800938e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009386:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d008      	beq.n	80093a0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009392:	2b00      	cmp	r3, #0
 8009394:	d03a      	beq.n	800940c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	4798      	blx	r3
    }
    return;
 800939e:	e035      	b.n	800940c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d009      	beq.n	80093c0 <HAL_UART_IRQHandler+0x71c>
 80093ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d003      	beq.n	80093c0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 fc94 	bl	800ace6 <UART_EndTransmit_IT>
    return;
 80093be:	e026      	b.n	800940e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d009      	beq.n	80093e0 <HAL_UART_IRQHandler+0x73c>
 80093cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f002 f9df 	bl	800b79c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093de:	e016      	b.n	800940e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80093e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d010      	beq.n	800940e <HAL_UART_IRQHandler+0x76a>
 80093ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	da0c      	bge.n	800940e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f002 f9c7 	bl	800b788 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093fa:	e008      	b.n	800940e <HAL_UART_IRQHandler+0x76a>
      return;
 80093fc:	bf00      	nop
 80093fe:	e006      	b.n	800940e <HAL_UART_IRQHandler+0x76a>
    return;
 8009400:	bf00      	nop
 8009402:	e004      	b.n	800940e <HAL_UART_IRQHandler+0x76a>
      return;
 8009404:	bf00      	nop
 8009406:	e002      	b.n	800940e <HAL_UART_IRQHandler+0x76a>
      return;
 8009408:	bf00      	nop
 800940a:	e000      	b.n	800940e <HAL_UART_IRQHandler+0x76a>
    return;
 800940c:	bf00      	nop
  }
}
 800940e:	37e8      	adds	r7, #232	@ 0xe8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	effffffe 	.word	0xeffffffe

08009418 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800946c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009470:	b092      	sub	sp, #72	@ 0x48
 8009472:	af00      	add	r7, sp, #0
 8009474:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	431a      	orrs	r2, r3
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	431a      	orrs	r2, r3
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	4313      	orrs	r3, r2
 8009492:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	4bbe      	ldr	r3, [pc, #760]	@ (8009794 <UART_SetConfig+0x328>)
 800949c:	4013      	ands	r3, r2
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	6812      	ldr	r2, [r2, #0]
 80094a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80094a4:	430b      	orrs	r3, r1
 80094a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	68da      	ldr	r2, [r3, #12]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4ab3      	ldr	r2, [pc, #716]	@ (8009798 <UART_SetConfig+0x32c>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d004      	beq.n	80094d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094d4:	4313      	orrs	r3, r2
 80094d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	4baf      	ldr	r3, [pc, #700]	@ (800979c <UART_SetConfig+0x330>)
 80094e0:	4013      	ands	r3, r2
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	6812      	ldr	r2, [r2, #0]
 80094e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80094e8:	430b      	orrs	r3, r1
 80094ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f2:	f023 010f 	bic.w	r1, r3, #15
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4aa6      	ldr	r2, [pc, #664]	@ (80097a0 <UART_SetConfig+0x334>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d177      	bne.n	80095fc <UART_SetConfig+0x190>
 800950c:	4ba5      	ldr	r3, [pc, #660]	@ (80097a4 <UART_SetConfig+0x338>)
 800950e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009510:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009514:	2b28      	cmp	r3, #40	@ 0x28
 8009516:	d86d      	bhi.n	80095f4 <UART_SetConfig+0x188>
 8009518:	a201      	add	r2, pc, #4	@ (adr r2, 8009520 <UART_SetConfig+0xb4>)
 800951a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951e:	bf00      	nop
 8009520:	080095c5 	.word	0x080095c5
 8009524:	080095f5 	.word	0x080095f5
 8009528:	080095f5 	.word	0x080095f5
 800952c:	080095f5 	.word	0x080095f5
 8009530:	080095f5 	.word	0x080095f5
 8009534:	080095f5 	.word	0x080095f5
 8009538:	080095f5 	.word	0x080095f5
 800953c:	080095f5 	.word	0x080095f5
 8009540:	080095cd 	.word	0x080095cd
 8009544:	080095f5 	.word	0x080095f5
 8009548:	080095f5 	.word	0x080095f5
 800954c:	080095f5 	.word	0x080095f5
 8009550:	080095f5 	.word	0x080095f5
 8009554:	080095f5 	.word	0x080095f5
 8009558:	080095f5 	.word	0x080095f5
 800955c:	080095f5 	.word	0x080095f5
 8009560:	080095d5 	.word	0x080095d5
 8009564:	080095f5 	.word	0x080095f5
 8009568:	080095f5 	.word	0x080095f5
 800956c:	080095f5 	.word	0x080095f5
 8009570:	080095f5 	.word	0x080095f5
 8009574:	080095f5 	.word	0x080095f5
 8009578:	080095f5 	.word	0x080095f5
 800957c:	080095f5 	.word	0x080095f5
 8009580:	080095dd 	.word	0x080095dd
 8009584:	080095f5 	.word	0x080095f5
 8009588:	080095f5 	.word	0x080095f5
 800958c:	080095f5 	.word	0x080095f5
 8009590:	080095f5 	.word	0x080095f5
 8009594:	080095f5 	.word	0x080095f5
 8009598:	080095f5 	.word	0x080095f5
 800959c:	080095f5 	.word	0x080095f5
 80095a0:	080095e5 	.word	0x080095e5
 80095a4:	080095f5 	.word	0x080095f5
 80095a8:	080095f5 	.word	0x080095f5
 80095ac:	080095f5 	.word	0x080095f5
 80095b0:	080095f5 	.word	0x080095f5
 80095b4:	080095f5 	.word	0x080095f5
 80095b8:	080095f5 	.word	0x080095f5
 80095bc:	080095f5 	.word	0x080095f5
 80095c0:	080095ed 	.word	0x080095ed
 80095c4:	2301      	movs	r3, #1
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e222      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80095cc:	2304      	movs	r3, #4
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d2:	e21e      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80095d4:	2308      	movs	r3, #8
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e21a      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80095dc:	2310      	movs	r3, #16
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e216      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80095e4:	2320      	movs	r3, #32
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e212      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80095ec:	2340      	movs	r3, #64	@ 0x40
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e20e      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80095f4:	2380      	movs	r3, #128	@ 0x80
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e20a      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a69      	ldr	r2, [pc, #420]	@ (80097a8 <UART_SetConfig+0x33c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d130      	bne.n	8009668 <UART_SetConfig+0x1fc>
 8009606:	4b67      	ldr	r3, [pc, #412]	@ (80097a4 <UART_SetConfig+0x338>)
 8009608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800960a:	f003 0307 	and.w	r3, r3, #7
 800960e:	2b05      	cmp	r3, #5
 8009610:	d826      	bhi.n	8009660 <UART_SetConfig+0x1f4>
 8009612:	a201      	add	r2, pc, #4	@ (adr r2, 8009618 <UART_SetConfig+0x1ac>)
 8009614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009618:	08009631 	.word	0x08009631
 800961c:	08009639 	.word	0x08009639
 8009620:	08009641 	.word	0x08009641
 8009624:	08009649 	.word	0x08009649
 8009628:	08009651 	.word	0x08009651
 800962c:	08009659 	.word	0x08009659
 8009630:	2300      	movs	r3, #0
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e1ec      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009638:	2304      	movs	r3, #4
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963e:	e1e8      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009640:	2308      	movs	r3, #8
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009646:	e1e4      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009648:	2310      	movs	r3, #16
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964e:	e1e0      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009650:	2320      	movs	r3, #32
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e1dc      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009658:	2340      	movs	r3, #64	@ 0x40
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e1d8      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009660:	2380      	movs	r3, #128	@ 0x80
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e1d4      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a4f      	ldr	r2, [pc, #316]	@ (80097ac <UART_SetConfig+0x340>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d130      	bne.n	80096d4 <UART_SetConfig+0x268>
 8009672:	4b4c      	ldr	r3, [pc, #304]	@ (80097a4 <UART_SetConfig+0x338>)
 8009674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	2b05      	cmp	r3, #5
 800967c:	d826      	bhi.n	80096cc <UART_SetConfig+0x260>
 800967e:	a201      	add	r2, pc, #4	@ (adr r2, 8009684 <UART_SetConfig+0x218>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	0800969d 	.word	0x0800969d
 8009688:	080096a5 	.word	0x080096a5
 800968c:	080096ad 	.word	0x080096ad
 8009690:	080096b5 	.word	0x080096b5
 8009694:	080096bd 	.word	0x080096bd
 8009698:	080096c5 	.word	0x080096c5
 800969c:	2300      	movs	r3, #0
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e1b6      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80096a4:	2304      	movs	r3, #4
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e1b2      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80096ac:	2308      	movs	r3, #8
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e1ae      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80096b4:	2310      	movs	r3, #16
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e1aa      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80096bc:	2320      	movs	r3, #32
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e1a6      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80096c4:	2340      	movs	r3, #64	@ 0x40
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e1a2      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80096cc:	2380      	movs	r3, #128	@ 0x80
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e19e      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a35      	ldr	r2, [pc, #212]	@ (80097b0 <UART_SetConfig+0x344>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d130      	bne.n	8009740 <UART_SetConfig+0x2d4>
 80096de:	4b31      	ldr	r3, [pc, #196]	@ (80097a4 <UART_SetConfig+0x338>)
 80096e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	2b05      	cmp	r3, #5
 80096e8:	d826      	bhi.n	8009738 <UART_SetConfig+0x2cc>
 80096ea:	a201      	add	r2, pc, #4	@ (adr r2, 80096f0 <UART_SetConfig+0x284>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009709 	.word	0x08009709
 80096f4:	08009711 	.word	0x08009711
 80096f8:	08009719 	.word	0x08009719
 80096fc:	08009721 	.word	0x08009721
 8009700:	08009729 	.word	0x08009729
 8009704:	08009731 	.word	0x08009731
 8009708:	2300      	movs	r3, #0
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970e:	e180      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009710:	2304      	movs	r3, #4
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009716:	e17c      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009718:	2308      	movs	r3, #8
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e178      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009720:	2310      	movs	r3, #16
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e174      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009728:	2320      	movs	r3, #32
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e170      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009730:	2340      	movs	r3, #64	@ 0x40
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e16c      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009738:	2380      	movs	r3, #128	@ 0x80
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e168      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a1b      	ldr	r2, [pc, #108]	@ (80097b4 <UART_SetConfig+0x348>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d142      	bne.n	80097d0 <UART_SetConfig+0x364>
 800974a:	4b16      	ldr	r3, [pc, #88]	@ (80097a4 <UART_SetConfig+0x338>)
 800974c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	2b05      	cmp	r3, #5
 8009754:	d838      	bhi.n	80097c8 <UART_SetConfig+0x35c>
 8009756:	a201      	add	r2, pc, #4	@ (adr r2, 800975c <UART_SetConfig+0x2f0>)
 8009758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975c:	08009775 	.word	0x08009775
 8009760:	0800977d 	.word	0x0800977d
 8009764:	08009785 	.word	0x08009785
 8009768:	0800978d 	.word	0x0800978d
 800976c:	080097b9 	.word	0x080097b9
 8009770:	080097c1 	.word	0x080097c1
 8009774:	2300      	movs	r3, #0
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e14a      	b.n	8009a12 <UART_SetConfig+0x5a6>
 800977c:	2304      	movs	r3, #4
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e146      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009784:	2308      	movs	r3, #8
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e142      	b.n	8009a12 <UART_SetConfig+0x5a6>
 800978c:	2310      	movs	r3, #16
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e13e      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009794:	cfff69f3 	.word	0xcfff69f3
 8009798:	58000c00 	.word	0x58000c00
 800979c:	11fff4ff 	.word	0x11fff4ff
 80097a0:	40011000 	.word	0x40011000
 80097a4:	58024400 	.word	0x58024400
 80097a8:	40004400 	.word	0x40004400
 80097ac:	40004800 	.word	0x40004800
 80097b0:	40004c00 	.word	0x40004c00
 80097b4:	40005000 	.word	0x40005000
 80097b8:	2320      	movs	r3, #32
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097be:	e128      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80097c0:	2340      	movs	r3, #64	@ 0x40
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c6:	e124      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80097c8:	2380      	movs	r3, #128	@ 0x80
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ce:	e120      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4acb      	ldr	r2, [pc, #812]	@ (8009b04 <UART_SetConfig+0x698>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d176      	bne.n	80098c8 <UART_SetConfig+0x45c>
 80097da:	4bcb      	ldr	r3, [pc, #812]	@ (8009b08 <UART_SetConfig+0x69c>)
 80097dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097e2:	2b28      	cmp	r3, #40	@ 0x28
 80097e4:	d86c      	bhi.n	80098c0 <UART_SetConfig+0x454>
 80097e6:	a201      	add	r2, pc, #4	@ (adr r2, 80097ec <UART_SetConfig+0x380>)
 80097e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ec:	08009891 	.word	0x08009891
 80097f0:	080098c1 	.word	0x080098c1
 80097f4:	080098c1 	.word	0x080098c1
 80097f8:	080098c1 	.word	0x080098c1
 80097fc:	080098c1 	.word	0x080098c1
 8009800:	080098c1 	.word	0x080098c1
 8009804:	080098c1 	.word	0x080098c1
 8009808:	080098c1 	.word	0x080098c1
 800980c:	08009899 	.word	0x08009899
 8009810:	080098c1 	.word	0x080098c1
 8009814:	080098c1 	.word	0x080098c1
 8009818:	080098c1 	.word	0x080098c1
 800981c:	080098c1 	.word	0x080098c1
 8009820:	080098c1 	.word	0x080098c1
 8009824:	080098c1 	.word	0x080098c1
 8009828:	080098c1 	.word	0x080098c1
 800982c:	080098a1 	.word	0x080098a1
 8009830:	080098c1 	.word	0x080098c1
 8009834:	080098c1 	.word	0x080098c1
 8009838:	080098c1 	.word	0x080098c1
 800983c:	080098c1 	.word	0x080098c1
 8009840:	080098c1 	.word	0x080098c1
 8009844:	080098c1 	.word	0x080098c1
 8009848:	080098c1 	.word	0x080098c1
 800984c:	080098a9 	.word	0x080098a9
 8009850:	080098c1 	.word	0x080098c1
 8009854:	080098c1 	.word	0x080098c1
 8009858:	080098c1 	.word	0x080098c1
 800985c:	080098c1 	.word	0x080098c1
 8009860:	080098c1 	.word	0x080098c1
 8009864:	080098c1 	.word	0x080098c1
 8009868:	080098c1 	.word	0x080098c1
 800986c:	080098b1 	.word	0x080098b1
 8009870:	080098c1 	.word	0x080098c1
 8009874:	080098c1 	.word	0x080098c1
 8009878:	080098c1 	.word	0x080098c1
 800987c:	080098c1 	.word	0x080098c1
 8009880:	080098c1 	.word	0x080098c1
 8009884:	080098c1 	.word	0x080098c1
 8009888:	080098c1 	.word	0x080098c1
 800988c:	080098b9 	.word	0x080098b9
 8009890:	2301      	movs	r3, #1
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009896:	e0bc      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009898:	2304      	movs	r3, #4
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989e:	e0b8      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80098a0:	2308      	movs	r3, #8
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a6:	e0b4      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80098a8:	2310      	movs	r3, #16
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ae:	e0b0      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80098b0:	2320      	movs	r3, #32
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b6:	e0ac      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80098b8:	2340      	movs	r3, #64	@ 0x40
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098be:	e0a8      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80098c0:	2380      	movs	r3, #128	@ 0x80
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c6:	e0a4      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a8f      	ldr	r2, [pc, #572]	@ (8009b0c <UART_SetConfig+0x6a0>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d130      	bne.n	8009934 <UART_SetConfig+0x4c8>
 80098d2:	4b8d      	ldr	r3, [pc, #564]	@ (8009b08 <UART_SetConfig+0x69c>)
 80098d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	2b05      	cmp	r3, #5
 80098dc:	d826      	bhi.n	800992c <UART_SetConfig+0x4c0>
 80098de:	a201      	add	r2, pc, #4	@ (adr r2, 80098e4 <UART_SetConfig+0x478>)
 80098e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e4:	080098fd 	.word	0x080098fd
 80098e8:	08009905 	.word	0x08009905
 80098ec:	0800990d 	.word	0x0800990d
 80098f0:	08009915 	.word	0x08009915
 80098f4:	0800991d 	.word	0x0800991d
 80098f8:	08009925 	.word	0x08009925
 80098fc:	2300      	movs	r3, #0
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009902:	e086      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009904:	2304      	movs	r3, #4
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990a:	e082      	b.n	8009a12 <UART_SetConfig+0x5a6>
 800990c:	2308      	movs	r3, #8
 800990e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009912:	e07e      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009914:	2310      	movs	r3, #16
 8009916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991a:	e07a      	b.n	8009a12 <UART_SetConfig+0x5a6>
 800991c:	2320      	movs	r3, #32
 800991e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009922:	e076      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009924:	2340      	movs	r3, #64	@ 0x40
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992a:	e072      	b.n	8009a12 <UART_SetConfig+0x5a6>
 800992c:	2380      	movs	r3, #128	@ 0x80
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009932:	e06e      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a75      	ldr	r2, [pc, #468]	@ (8009b10 <UART_SetConfig+0x6a4>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d130      	bne.n	80099a0 <UART_SetConfig+0x534>
 800993e:	4b72      	ldr	r3, [pc, #456]	@ (8009b08 <UART_SetConfig+0x69c>)
 8009940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009942:	f003 0307 	and.w	r3, r3, #7
 8009946:	2b05      	cmp	r3, #5
 8009948:	d826      	bhi.n	8009998 <UART_SetConfig+0x52c>
 800994a:	a201      	add	r2, pc, #4	@ (adr r2, 8009950 <UART_SetConfig+0x4e4>)
 800994c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009950:	08009969 	.word	0x08009969
 8009954:	08009971 	.word	0x08009971
 8009958:	08009979 	.word	0x08009979
 800995c:	08009981 	.word	0x08009981
 8009960:	08009989 	.word	0x08009989
 8009964:	08009991 	.word	0x08009991
 8009968:	2300      	movs	r3, #0
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996e:	e050      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009970:	2304      	movs	r3, #4
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009976:	e04c      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009978:	2308      	movs	r3, #8
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997e:	e048      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009980:	2310      	movs	r3, #16
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009986:	e044      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009988:	2320      	movs	r3, #32
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998e:	e040      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009990:	2340      	movs	r3, #64	@ 0x40
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009996:	e03c      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009998:	2380      	movs	r3, #128	@ 0x80
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999e:	e038      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a5b      	ldr	r2, [pc, #364]	@ (8009b14 <UART_SetConfig+0x6a8>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d130      	bne.n	8009a0c <UART_SetConfig+0x5a0>
 80099aa:	4b57      	ldr	r3, [pc, #348]	@ (8009b08 <UART_SetConfig+0x69c>)
 80099ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ae:	f003 0307 	and.w	r3, r3, #7
 80099b2:	2b05      	cmp	r3, #5
 80099b4:	d826      	bhi.n	8009a04 <UART_SetConfig+0x598>
 80099b6:	a201      	add	r2, pc, #4	@ (adr r2, 80099bc <UART_SetConfig+0x550>)
 80099b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099bc:	080099d5 	.word	0x080099d5
 80099c0:	080099dd 	.word	0x080099dd
 80099c4:	080099e5 	.word	0x080099e5
 80099c8:	080099ed 	.word	0x080099ed
 80099cc:	080099f5 	.word	0x080099f5
 80099d0:	080099fd 	.word	0x080099fd
 80099d4:	2302      	movs	r3, #2
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099da:	e01a      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80099dc:	2304      	movs	r3, #4
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e2:	e016      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80099e4:	2308      	movs	r3, #8
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ea:	e012      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80099ec:	2310      	movs	r3, #16
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f2:	e00e      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80099f4:	2320      	movs	r3, #32
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fa:	e00a      	b.n	8009a12 <UART_SetConfig+0x5a6>
 80099fc:	2340      	movs	r3, #64	@ 0x40
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a02:	e006      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009a04:	2380      	movs	r3, #128	@ 0x80
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a0a:	e002      	b.n	8009a12 <UART_SetConfig+0x5a6>
 8009a0c:	2380      	movs	r3, #128	@ 0x80
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a3f      	ldr	r2, [pc, #252]	@ (8009b14 <UART_SetConfig+0x6a8>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	f040 80f8 	bne.w	8009c0e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a22:	2b20      	cmp	r3, #32
 8009a24:	dc46      	bgt.n	8009ab4 <UART_SetConfig+0x648>
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	f2c0 8082 	blt.w	8009b30 <UART_SetConfig+0x6c4>
 8009a2c:	3b02      	subs	r3, #2
 8009a2e:	2b1e      	cmp	r3, #30
 8009a30:	d87e      	bhi.n	8009b30 <UART_SetConfig+0x6c4>
 8009a32:	a201      	add	r2, pc, #4	@ (adr r2, 8009a38 <UART_SetConfig+0x5cc>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009abb 	.word	0x08009abb
 8009a3c:	08009b31 	.word	0x08009b31
 8009a40:	08009ac3 	.word	0x08009ac3
 8009a44:	08009b31 	.word	0x08009b31
 8009a48:	08009b31 	.word	0x08009b31
 8009a4c:	08009b31 	.word	0x08009b31
 8009a50:	08009ad3 	.word	0x08009ad3
 8009a54:	08009b31 	.word	0x08009b31
 8009a58:	08009b31 	.word	0x08009b31
 8009a5c:	08009b31 	.word	0x08009b31
 8009a60:	08009b31 	.word	0x08009b31
 8009a64:	08009b31 	.word	0x08009b31
 8009a68:	08009b31 	.word	0x08009b31
 8009a6c:	08009b31 	.word	0x08009b31
 8009a70:	08009ae3 	.word	0x08009ae3
 8009a74:	08009b31 	.word	0x08009b31
 8009a78:	08009b31 	.word	0x08009b31
 8009a7c:	08009b31 	.word	0x08009b31
 8009a80:	08009b31 	.word	0x08009b31
 8009a84:	08009b31 	.word	0x08009b31
 8009a88:	08009b31 	.word	0x08009b31
 8009a8c:	08009b31 	.word	0x08009b31
 8009a90:	08009b31 	.word	0x08009b31
 8009a94:	08009b31 	.word	0x08009b31
 8009a98:	08009b31 	.word	0x08009b31
 8009a9c:	08009b31 	.word	0x08009b31
 8009aa0:	08009b31 	.word	0x08009b31
 8009aa4:	08009b31 	.word	0x08009b31
 8009aa8:	08009b31 	.word	0x08009b31
 8009aac:	08009b31 	.word	0x08009b31
 8009ab0:	08009b23 	.word	0x08009b23
 8009ab4:	2b40      	cmp	r3, #64	@ 0x40
 8009ab6:	d037      	beq.n	8009b28 <UART_SetConfig+0x6bc>
 8009ab8:	e03a      	b.n	8009b30 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009aba:	f7fe fb15 	bl	80080e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009abe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ac0:	e03c      	b.n	8009b3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe fb24 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad0:	e034      	b.n	8009b3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ad2:	f107 0318 	add.w	r3, r7, #24
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe fc70 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae0:	e02c      	b.n	8009b3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ae2:	4b09      	ldr	r3, [pc, #36]	@ (8009b08 <UART_SetConfig+0x69c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d016      	beq.n	8009b1c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009aee:	4b06      	ldr	r3, [pc, #24]	@ (8009b08 <UART_SetConfig+0x69c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	08db      	lsrs	r3, r3, #3
 8009af4:	f003 0303 	and.w	r3, r3, #3
 8009af8:	4a07      	ldr	r2, [pc, #28]	@ (8009b18 <UART_SetConfig+0x6ac>)
 8009afa:	fa22 f303 	lsr.w	r3, r2, r3
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b00:	e01c      	b.n	8009b3c <UART_SetConfig+0x6d0>
 8009b02:	bf00      	nop
 8009b04:	40011400 	.word	0x40011400
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	40007800 	.word	0x40007800
 8009b10:	40007c00 	.word	0x40007c00
 8009b14:	58000c00 	.word	0x58000c00
 8009b18:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009b1c:	4b9d      	ldr	r3, [pc, #628]	@ (8009d94 <UART_SetConfig+0x928>)
 8009b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b20:	e00c      	b.n	8009b3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b22:	4b9d      	ldr	r3, [pc, #628]	@ (8009d98 <UART_SetConfig+0x92c>)
 8009b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b26:	e009      	b.n	8009b3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b2e:	e005      	b.n	8009b3c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009b30:	2300      	movs	r3, #0
 8009b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 81de 	beq.w	8009f00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b48:	4a94      	ldr	r2, [pc, #592]	@ (8009d9c <UART_SetConfig+0x930>)
 8009b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b52:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b56:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	4413      	add	r3, r2
 8009b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d305      	bcc.n	8009b74 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d903      	bls.n	8009b7c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b7a:	e1c1      	b.n	8009f00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b7e:	2200      	movs	r2, #0
 8009b80:	60bb      	str	r3, [r7, #8]
 8009b82:	60fa      	str	r2, [r7, #12]
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b88:	4a84      	ldr	r2, [pc, #528]	@ (8009d9c <UART_SetConfig+0x930>)
 8009b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	2200      	movs	r2, #0
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	607a      	str	r2, [r7, #4]
 8009b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b9e:	f7f6 fbf7 	bl	8000390 <__aeabi_uldivmod>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	4619      	mov	r1, r3
 8009baa:	f04f 0200 	mov.w	r2, #0
 8009bae:	f04f 0300 	mov.w	r3, #0
 8009bb2:	020b      	lsls	r3, r1, #8
 8009bb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bb8:	0202      	lsls	r2, r0, #8
 8009bba:	6979      	ldr	r1, [r7, #20]
 8009bbc:	6849      	ldr	r1, [r1, #4]
 8009bbe:	0849      	lsrs	r1, r1, #1
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	eb12 0804 	adds.w	r8, r2, r4
 8009bca:	eb43 0905 	adc.w	r9, r3, r5
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	469a      	mov	sl, r3
 8009bd6:	4693      	mov	fp, r2
 8009bd8:	4652      	mov	r2, sl
 8009bda:	465b      	mov	r3, fp
 8009bdc:	4640      	mov	r0, r8
 8009bde:	4649      	mov	r1, r9
 8009be0:	f7f6 fbd6 	bl	8000390 <__aeabi_uldivmod>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4613      	mov	r3, r2
 8009bea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bf2:	d308      	bcc.n	8009c06 <UART_SetConfig+0x79a>
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bfa:	d204      	bcs.n	8009c06 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c02:	60da      	str	r2, [r3, #12]
 8009c04:	e17c      	b.n	8009f00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c0c:	e178      	b.n	8009f00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c16:	f040 80c5 	bne.w	8009da4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009c1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	dc48      	bgt.n	8009cb4 <UART_SetConfig+0x848>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	db7b      	blt.n	8009d1e <UART_SetConfig+0x8b2>
 8009c26:	2b20      	cmp	r3, #32
 8009c28:	d879      	bhi.n	8009d1e <UART_SetConfig+0x8b2>
 8009c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c30 <UART_SetConfig+0x7c4>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009cbb 	.word	0x08009cbb
 8009c34:	08009cc3 	.word	0x08009cc3
 8009c38:	08009d1f 	.word	0x08009d1f
 8009c3c:	08009d1f 	.word	0x08009d1f
 8009c40:	08009ccb 	.word	0x08009ccb
 8009c44:	08009d1f 	.word	0x08009d1f
 8009c48:	08009d1f 	.word	0x08009d1f
 8009c4c:	08009d1f 	.word	0x08009d1f
 8009c50:	08009cdb 	.word	0x08009cdb
 8009c54:	08009d1f 	.word	0x08009d1f
 8009c58:	08009d1f 	.word	0x08009d1f
 8009c5c:	08009d1f 	.word	0x08009d1f
 8009c60:	08009d1f 	.word	0x08009d1f
 8009c64:	08009d1f 	.word	0x08009d1f
 8009c68:	08009d1f 	.word	0x08009d1f
 8009c6c:	08009d1f 	.word	0x08009d1f
 8009c70:	08009ceb 	.word	0x08009ceb
 8009c74:	08009d1f 	.word	0x08009d1f
 8009c78:	08009d1f 	.word	0x08009d1f
 8009c7c:	08009d1f 	.word	0x08009d1f
 8009c80:	08009d1f 	.word	0x08009d1f
 8009c84:	08009d1f 	.word	0x08009d1f
 8009c88:	08009d1f 	.word	0x08009d1f
 8009c8c:	08009d1f 	.word	0x08009d1f
 8009c90:	08009d1f 	.word	0x08009d1f
 8009c94:	08009d1f 	.word	0x08009d1f
 8009c98:	08009d1f 	.word	0x08009d1f
 8009c9c:	08009d1f 	.word	0x08009d1f
 8009ca0:	08009d1f 	.word	0x08009d1f
 8009ca4:	08009d1f 	.word	0x08009d1f
 8009ca8:	08009d1f 	.word	0x08009d1f
 8009cac:	08009d1f 	.word	0x08009d1f
 8009cb0:	08009d11 	.word	0x08009d11
 8009cb4:	2b40      	cmp	r3, #64	@ 0x40
 8009cb6:	d02e      	beq.n	8009d16 <UART_SetConfig+0x8aa>
 8009cb8:	e031      	b.n	8009d1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cba:	f7fc ffdf 	bl	8006c7c <HAL_RCC_GetPCLK1Freq>
 8009cbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cc0:	e033      	b.n	8009d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cc2:	f7fc fff1 	bl	8006ca8 <HAL_RCC_GetPCLK2Freq>
 8009cc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cc8:	e02f      	b.n	8009d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fa20 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd8:	e027      	b.n	8009d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cda:	f107 0318 	add.w	r3, r7, #24
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe fb6c 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce8:	e01f      	b.n	8009d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cea:	4b2d      	ldr	r3, [pc, #180]	@ (8009da0 <UART_SetConfig+0x934>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0320 	and.w	r3, r3, #32
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8009da0 <UART_SetConfig+0x934>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	08db      	lsrs	r3, r3, #3
 8009cfc:	f003 0303 	and.w	r3, r3, #3
 8009d00:	4a24      	ldr	r2, [pc, #144]	@ (8009d94 <UART_SetConfig+0x928>)
 8009d02:	fa22 f303 	lsr.w	r3, r2, r3
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d08:	e00f      	b.n	8009d2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009d0a:	4b22      	ldr	r3, [pc, #136]	@ (8009d94 <UART_SetConfig+0x928>)
 8009d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d0e:	e00c      	b.n	8009d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d10:	4b21      	ldr	r3, [pc, #132]	@ (8009d98 <UART_SetConfig+0x92c>)
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d14:	e009      	b.n	8009d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d1c:	e005      	b.n	8009d2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 80e7 	beq.w	8009f00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d36:	4a19      	ldr	r2, [pc, #100]	@ (8009d9c <UART_SetConfig+0x930>)
 8009d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d44:	005a      	lsls	r2, r3, #1
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	085b      	lsrs	r3, r3, #1
 8009d4c:	441a      	add	r2, r3
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d56:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5a:	2b0f      	cmp	r3, #15
 8009d5c:	d916      	bls.n	8009d8c <UART_SetConfig+0x920>
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d64:	d212      	bcs.n	8009d8c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	f023 030f 	bic.w	r3, r3, #15
 8009d6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	085b      	lsrs	r3, r3, #1
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	f003 0307 	and.w	r3, r3, #7
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d88:	60da      	str	r2, [r3, #12]
 8009d8a:	e0b9      	b.n	8009f00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d92:	e0b5      	b.n	8009f00 <UART_SetConfig+0xa94>
 8009d94:	03d09000 	.word	0x03d09000
 8009d98:	003d0900 	.word	0x003d0900
 8009d9c:	0800c950 	.word	0x0800c950
 8009da0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009da4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	dc49      	bgt.n	8009e40 <UART_SetConfig+0x9d4>
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	db7c      	blt.n	8009eaa <UART_SetConfig+0xa3e>
 8009db0:	2b20      	cmp	r3, #32
 8009db2:	d87a      	bhi.n	8009eaa <UART_SetConfig+0xa3e>
 8009db4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dbc <UART_SetConfig+0x950>)
 8009db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dba:	bf00      	nop
 8009dbc:	08009e47 	.word	0x08009e47
 8009dc0:	08009e4f 	.word	0x08009e4f
 8009dc4:	08009eab 	.word	0x08009eab
 8009dc8:	08009eab 	.word	0x08009eab
 8009dcc:	08009e57 	.word	0x08009e57
 8009dd0:	08009eab 	.word	0x08009eab
 8009dd4:	08009eab 	.word	0x08009eab
 8009dd8:	08009eab 	.word	0x08009eab
 8009ddc:	08009e67 	.word	0x08009e67
 8009de0:	08009eab 	.word	0x08009eab
 8009de4:	08009eab 	.word	0x08009eab
 8009de8:	08009eab 	.word	0x08009eab
 8009dec:	08009eab 	.word	0x08009eab
 8009df0:	08009eab 	.word	0x08009eab
 8009df4:	08009eab 	.word	0x08009eab
 8009df8:	08009eab 	.word	0x08009eab
 8009dfc:	08009e77 	.word	0x08009e77
 8009e00:	08009eab 	.word	0x08009eab
 8009e04:	08009eab 	.word	0x08009eab
 8009e08:	08009eab 	.word	0x08009eab
 8009e0c:	08009eab 	.word	0x08009eab
 8009e10:	08009eab 	.word	0x08009eab
 8009e14:	08009eab 	.word	0x08009eab
 8009e18:	08009eab 	.word	0x08009eab
 8009e1c:	08009eab 	.word	0x08009eab
 8009e20:	08009eab 	.word	0x08009eab
 8009e24:	08009eab 	.word	0x08009eab
 8009e28:	08009eab 	.word	0x08009eab
 8009e2c:	08009eab 	.word	0x08009eab
 8009e30:	08009eab 	.word	0x08009eab
 8009e34:	08009eab 	.word	0x08009eab
 8009e38:	08009eab 	.word	0x08009eab
 8009e3c:	08009e9d 	.word	0x08009e9d
 8009e40:	2b40      	cmp	r3, #64	@ 0x40
 8009e42:	d02e      	beq.n	8009ea2 <UART_SetConfig+0xa36>
 8009e44:	e031      	b.n	8009eaa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e46:	f7fc ff19 	bl	8006c7c <HAL_RCC_GetPCLK1Freq>
 8009e4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e4c:	e033      	b.n	8009eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e4e:	f7fc ff2b 	bl	8006ca8 <HAL_RCC_GetPCLK2Freq>
 8009e52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e54:	e02f      	b.n	8009eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe f95a 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e64:	e027      	b.n	8009eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e66:	f107 0318 	add.w	r3, r7, #24
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe faa6 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e74:	e01f      	b.n	8009eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e76:	4b2d      	ldr	r3, [pc, #180]	@ (8009f2c <UART_SetConfig+0xac0>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0320 	and.w	r3, r3, #32
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d009      	beq.n	8009e96 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e82:	4b2a      	ldr	r3, [pc, #168]	@ (8009f2c <UART_SetConfig+0xac0>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	08db      	lsrs	r3, r3, #3
 8009e88:	f003 0303 	and.w	r3, r3, #3
 8009e8c:	4a28      	ldr	r2, [pc, #160]	@ (8009f30 <UART_SetConfig+0xac4>)
 8009e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e94:	e00f      	b.n	8009eb6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009e96:	4b26      	ldr	r3, [pc, #152]	@ (8009f30 <UART_SetConfig+0xac4>)
 8009e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e9a:	e00c      	b.n	8009eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e9c:	4b25      	ldr	r3, [pc, #148]	@ (8009f34 <UART_SetConfig+0xac8>)
 8009e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea0:	e009      	b.n	8009eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea8:	e005      	b.n	8009eb6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009eb4:	bf00      	nop
    }

    if (pclk != 0U)
 8009eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d021      	beq.n	8009f00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f38 <UART_SetConfig+0xacc>)
 8009ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eca:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	085b      	lsrs	r3, r3, #1
 8009ed4:	441a      	add	r2, r3
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ede:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee2:	2b0f      	cmp	r3, #15
 8009ee4:	d909      	bls.n	8009efa <UART_SetConfig+0xa8e>
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009eec:	d205      	bcs.n	8009efa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	60da      	str	r2, [r3, #12]
 8009ef8:	e002      	b.n	8009f00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2200      	movs	r2, #0
 8009f14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f1c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3748      	adds	r7, #72	@ 0x48
 8009f24:	46bd      	mov	sp, r7
 8009f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f2a:	bf00      	nop
 8009f2c:	58024400 	.word	0x58024400
 8009f30:	03d09000 	.word	0x03d09000
 8009f34:	003d0900 	.word	0x003d0900
 8009f38:	0800c950 	.word	0x0800c950

08009f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f48:	f003 0308 	and.w	r3, r3, #8
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00a      	beq.n	8009f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00a      	beq.n	8009f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	430a      	orrs	r2, r1
 8009f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8c:	f003 0302 	and.w	r3, r3, #2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00a      	beq.n	8009faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fae:	f003 0304 	and.w	r3, r3, #4
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00a      	beq.n	8009fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	430a      	orrs	r2, r1
 8009fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00a      	beq.n	8009fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	430a      	orrs	r2, r1
 8009fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	430a      	orrs	r2, r1
 800a00e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01a      	beq.n	800a052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	430a      	orrs	r2, r1
 800a030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a03a:	d10a      	bne.n	800a052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	430a      	orrs	r2, r1
 800a072:	605a      	str	r2, [r3, #4]
  }
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b098      	sub	sp, #96	@ 0x60
 800a084:	af02      	add	r7, sp, #8
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a090:	f7f7 fc00 	bl	8001894 <HAL_GetTick>
 800a094:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0308 	and.w	r3, r3, #8
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d12f      	bne.n	800a104 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f88e 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d022      	beq.n	800a104 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c6:	e853 3f00 	ldrex	r3, [r3]
 800a0ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0e4:	e841 2300 	strex	r3, r2, [r1]
 800a0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e6      	bne.n	800a0be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e063      	b.n	800a1cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 0304 	and.w	r3, r3, #4
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d149      	bne.n	800a1a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a112:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a11a:	2200      	movs	r2, #0
 800a11c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f857 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d03c      	beq.n	800a1a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	623b      	str	r3, [r7, #32]
   return(result);
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a14a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a14c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e6      	bne.n	800a12c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3308      	adds	r3, #8
 800a164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f023 0301 	bic.w	r3, r3, #1
 800a174:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3308      	adds	r3, #8
 800a17c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a17e:	61fa      	str	r2, [r7, #28]
 800a180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	69b9      	ldr	r1, [r7, #24]
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	617b      	str	r3, [r7, #20]
   return(result);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e5      	bne.n	800a15e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2220      	movs	r2, #32
 800a196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e012      	b.n	800a1cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3758      	adds	r7, #88	@ 0x58
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e4:	e04f      	b.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ec:	d04b      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ee:	f7f7 fb51 	bl	8001894 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d302      	bcc.n	800a204 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e04e      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d037      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b80      	cmp	r3, #128	@ 0x80
 800a21a:	d034      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b40      	cmp	r3, #64	@ 0x40
 800a220:	d031      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	f003 0308 	and.w	r3, r3, #8
 800a22c:	2b08      	cmp	r3, #8
 800a22e:	d110      	bne.n	800a252 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2208      	movs	r2, #8
 800a236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 fa43 	bl	800a6c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2208      	movs	r2, #8
 800a242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e029      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a25c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a260:	d111      	bne.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a26a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f000 fa29 	bl	800a6c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2220      	movs	r2, #32
 800a276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e00f      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	69da      	ldr	r2, [r3, #28]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4013      	ands	r3, r2
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	429a      	cmp	r2, r3
 800a294:	bf0c      	ite	eq
 800a296:	2301      	moveq	r3, #1
 800a298:	2300      	movne	r3, #0
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	461a      	mov	r2, r3
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d0a0      	beq.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b0a3      	sub	sp, #140	@ 0x8c
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	88fa      	ldrh	r2, [r7, #6]
 800a2c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	88fa      	ldrh	r2, [r7, #6]
 800a2d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2e2:	d10e      	bne.n	800a302 <UART_Start_Receive_IT+0x52>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d105      	bne.n	800a2f8 <UART_Start_Receive_IT+0x48>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a2f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2f6:	e02d      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	22ff      	movs	r2, #255	@ 0xff
 800a2fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a300:	e028      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10d      	bne.n	800a326 <UART_Start_Receive_IT+0x76>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d104      	bne.n	800a31c <UART_Start_Receive_IT+0x6c>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	22ff      	movs	r2, #255	@ 0xff
 800a316:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a31a:	e01b      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	227f      	movs	r2, #127	@ 0x7f
 800a320:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a324:	e016      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a32e:	d10d      	bne.n	800a34c <UART_Start_Receive_IT+0x9c>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d104      	bne.n	800a342 <UART_Start_Receive_IT+0x92>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	227f      	movs	r2, #127	@ 0x7f
 800a33c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a340:	e008      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	223f      	movs	r2, #63	@ 0x3f
 800a346:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a34a:	e003      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2222      	movs	r2, #34	@ 0x22
 800a360:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3308      	adds	r3, #8
 800a36a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a376:	f043 0301 	orr.w	r3, r3, #1
 800a37a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3308      	adds	r3, #8
 800a384:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a388:	673a      	str	r2, [r7, #112]	@ 0x70
 800a38a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a38e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a390:	e841 2300 	strex	r3, r2, [r1]
 800a394:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e3      	bne.n	800a364 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a4:	d14f      	bne.n	800a446 <UART_Start_Receive_IT+0x196>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3ac:	88fa      	ldrh	r2, [r7, #6]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d349      	bcc.n	800a446 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3ba:	d107      	bne.n	800a3cc <UART_Start_Receive_IT+0x11c>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d103      	bne.n	800a3cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4a47      	ldr	r2, [pc, #284]	@ (800a4e4 <UART_Start_Receive_IT+0x234>)
 800a3c8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a3ca:	e002      	b.n	800a3d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4a46      	ldr	r2, [pc, #280]	@ (800a4e8 <UART_Start_Receive_IT+0x238>)
 800a3d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d01a      	beq.n	800a410 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e2:	e853 3f00 	ldrex	r3, [r3]
 800a3e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a3e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a3fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a400:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a402:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a404:	e841 2300 	strex	r3, r2, [r1]
 800a408:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1e4      	bne.n	800a3da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3308      	adds	r3, #8
 800a416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a41a:	e853 3f00 	ldrex	r3, [r3]
 800a41e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a426:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3308      	adds	r3, #8
 800a42e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a430:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a432:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a438:	e841 2300 	strex	r3, r2, [r1]
 800a43c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e5      	bne.n	800a410 <UART_Start_Receive_IT+0x160>
 800a444:	e046      	b.n	800a4d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a44e:	d107      	bne.n	800a460 <UART_Start_Receive_IT+0x1b0>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d103      	bne.n	800a460 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4a24      	ldr	r2, [pc, #144]	@ (800a4ec <UART_Start_Receive_IT+0x23c>)
 800a45c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a45e:	e002      	b.n	800a466 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4a23      	ldr	r2, [pc, #140]	@ (800a4f0 <UART_Start_Receive_IT+0x240>)
 800a464:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d019      	beq.n	800a4a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a476:	e853 3f00 	ldrex	r3, [r3]
 800a47a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a482:	677b      	str	r3, [r7, #116]	@ 0x74
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	461a      	mov	r2, r3
 800a48a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a48e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a494:	e841 2300 	strex	r3, r2, [r1]
 800a498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e6      	bne.n	800a46e <UART_Start_Receive_IT+0x1be>
 800a4a0:	e018      	b.n	800a4d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	e853 3f00 	ldrex	r3, [r3]
 800a4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f043 0320 	orr.w	r3, r3, #32
 800a4b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4c0:	623b      	str	r3, [r7, #32]
 800a4c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	69f9      	ldr	r1, [r7, #28]
 800a4c6:	6a3a      	ldr	r2, [r7, #32]
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e6      	bne.n	800a4a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	378c      	adds	r7, #140	@ 0x8c
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	0800b40d 	.word	0x0800b40d
 800a4e8:	0800b0ad 	.word	0x0800b0ad
 800a4ec:	0800aef5 	.word	0x0800aef5
 800a4f0:	0800ad3d 	.word	0x0800ad3d

0800a4f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b096      	sub	sp, #88	@ 0x58
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	4613      	mov	r3, r2
 800a500:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	88fa      	ldrh	r2, [r7, #6]
 800a50c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2222      	movs	r2, #34	@ 0x22
 800a51c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a526:	2b00      	cmp	r3, #0
 800a528:	d02d      	beq.n	800a586 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a530:	4a40      	ldr	r2, [pc, #256]	@ (800a634 <UART_Start_Receive_DMA+0x140>)
 800a532:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a53a:	4a3f      	ldr	r2, [pc, #252]	@ (800a638 <UART_Start_Receive_DMA+0x144>)
 800a53c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a544:	4a3d      	ldr	r2, [pc, #244]	@ (800a63c <UART_Start_Receive_DMA+0x148>)
 800a546:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a54e:	2200      	movs	r2, #0
 800a550:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	3324      	adds	r3, #36	@ 0x24
 800a55e:	4619      	mov	r1, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a564:	461a      	mov	r2, r3
 800a566:	88fb      	ldrh	r3, [r7, #6]
 800a568:	f7f8 f838 	bl	80025dc <HAL_DMA_Start_IT>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d009      	beq.n	800a586 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2210      	movs	r2, #16
 800a576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2220      	movs	r2, #32
 800a57e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e051      	b.n	800a62a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d018      	beq.n	800a5c0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a596:	e853 3f00 	ldrex	r3, [r3]
 800a59a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5b4:	e841 2300 	strex	r3, r2, [r1]
 800a5b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a5ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1e6      	bne.n	800a58e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ca:	e853 3f00 	ldrex	r3, [r3]
 800a5ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d2:	f043 0301 	orr.w	r3, r3, #1
 800a5d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3308      	adds	r3, #8
 800a5de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5e0:	637a      	str	r2, [r7, #52]	@ 0x34
 800a5e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5e8:	e841 2300 	strex	r3, r2, [r1]
 800a5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1e5      	bne.n	800a5c0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3308      	adds	r3, #8
 800a5fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	e853 3f00 	ldrex	r3, [r3]
 800a602:	613b      	str	r3, [r7, #16]
   return(result);
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a60a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3308      	adds	r3, #8
 800a612:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a614:	623a      	str	r2, [r7, #32]
 800a616:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a618:	69f9      	ldr	r1, [r7, #28]
 800a61a:	6a3a      	ldr	r2, [r7, #32]
 800a61c:	e841 2300 	strex	r3, r2, [r1]
 800a620:	61bb      	str	r3, [r7, #24]
   return(result);
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e5      	bne.n	800a5f4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3758      	adds	r7, #88	@ 0x58
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	0800a791 	.word	0x0800a791
 800a638:	0800a8b9 	.word	0x0800a8b9
 800a63c:	0800a8f7 	.word	0x0800a8f7

0800a640 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a640:	b480      	push	{r7}
 800a642:	b08f      	sub	sp, #60	@ 0x3c
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64e:	6a3b      	ldr	r3, [r7, #32]
 800a650:	e853 3f00 	ldrex	r3, [r3]
 800a654:	61fb      	str	r3, [r7, #28]
   return(result);
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a65c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a668:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a66c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a66e:	e841 2300 	strex	r3, r2, [r1]
 800a672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1e6      	bne.n	800a648 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3308      	adds	r3, #8
 800a680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	e853 3f00 	ldrex	r3, [r3]
 800a688:	60bb      	str	r3, [r7, #8]
   return(result);
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a690:	633b      	str	r3, [r7, #48]	@ 0x30
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	3308      	adds	r3, #8
 800a698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a69a:	61ba      	str	r2, [r7, #24]
 800a69c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69e:	6979      	ldr	r1, [r7, #20]
 800a6a0:	69ba      	ldr	r2, [r7, #24]
 800a6a2:	e841 2300 	strex	r3, r2, [r1]
 800a6a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1e5      	bne.n	800a67a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a6b6:	bf00      	nop
 800a6b8:	373c      	adds	r7, #60	@ 0x3c
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b095      	sub	sp, #84	@ 0x54
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6f2:	e841 2300 	strex	r3, r2, [r1]
 800a6f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1e6      	bne.n	800a6cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3308      	adds	r3, #8
 800a704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	e853 3f00 	ldrex	r3, [r3]
 800a70c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a70e:	69fa      	ldr	r2, [r7, #28]
 800a710:	4b1e      	ldr	r3, [pc, #120]	@ (800a78c <UART_EndRxTransfer+0xc8>)
 800a712:	4013      	ands	r3, r2
 800a714:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3308      	adds	r3, #8
 800a71c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a71e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a726:	e841 2300 	strex	r3, r2, [r1]
 800a72a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1e5      	bne.n	800a6fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a736:	2b01      	cmp	r3, #1
 800a738:	d118      	bne.n	800a76c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	e853 3f00 	ldrex	r3, [r3]
 800a746:	60bb      	str	r3, [r7, #8]
   return(result);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f023 0310 	bic.w	r3, r3, #16
 800a74e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	461a      	mov	r2, r3
 800a756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a758:	61bb      	str	r3, [r7, #24]
 800a75a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75c:	6979      	ldr	r1, [r7, #20]
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	e841 2300 	strex	r3, r2, [r1]
 800a764:	613b      	str	r3, [r7, #16]
   return(result);
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1e6      	bne.n	800a73a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2220      	movs	r2, #32
 800a770:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a780:	bf00      	nop
 800a782:	3754      	adds	r7, #84	@ 0x54
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	effffffe 	.word	0xeffffffe

0800a790 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b09c      	sub	sp, #112	@ 0x70
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a79c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7a6:	d071      	beq.n	800a88c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a7a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7b8:	e853 3f00 	ldrex	r3, [r3]
 800a7bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7d6:	e841 2300 	strex	r3, r2, [r1]
 800a7da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1e6      	bne.n	800a7b0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ec:	e853 3f00 	ldrex	r3, [r3]
 800a7f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f4:	f023 0301 	bic.w	r3, r3, #1
 800a7f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3308      	adds	r3, #8
 800a800:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a802:	647a      	str	r2, [r7, #68]	@ 0x44
 800a804:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a806:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a80a:	e841 2300 	strex	r3, r2, [r1]
 800a80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1e5      	bne.n	800a7e2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3308      	adds	r3, #8
 800a81c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a820:	e853 3f00 	ldrex	r3, [r3]
 800a824:	623b      	str	r3, [r7, #32]
   return(result);
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a82c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a82e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3308      	adds	r3, #8
 800a834:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a836:	633a      	str	r2, [r7, #48]	@ 0x30
 800a838:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a83c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a83e:	e841 2300 	strex	r3, r2, [r1]
 800a842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1e5      	bne.n	800a816 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a84a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a84c:	2220      	movs	r2, #32
 800a84e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a856:	2b01      	cmp	r3, #1
 800a858:	d118      	bne.n	800a88c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a85a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	e853 3f00 	ldrex	r3, [r3]
 800a866:	60fb      	str	r3, [r7, #12]
   return(result);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 0310 	bic.w	r3, r3, #16
 800a86e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	461a      	mov	r2, r3
 800a876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a878:	61fb      	str	r3, [r7, #28]
 800a87a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87c:	69b9      	ldr	r1, [r7, #24]
 800a87e:	69fa      	ldr	r2, [r7, #28]
 800a880:	e841 2300 	strex	r3, r2, [r1]
 800a884:	617b      	str	r3, [r7, #20]
   return(result);
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1e6      	bne.n	800a85a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a88c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a88e:	2200      	movs	r2, #0
 800a890:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a896:	2b01      	cmp	r3, #1
 800a898:	d107      	bne.n	800a8aa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a89a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a89c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8a4:	f7fe fdd6 	bl	8009454 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8a8:	e002      	b.n	800a8b0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a8aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8ac:	f7f6 fa48 	bl	8000d40 <HAL_UART_RxCpltCallback>
}
 800a8b0:	bf00      	nop
 800a8b2:	3770      	adds	r7, #112	@ 0x70
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d109      	bne.n	800a8e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8da:	085b      	lsrs	r3, r3, #1
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	4619      	mov	r1, r3
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f7fe fdb7 	bl	8009454 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8e6:	e002      	b.n	800a8ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f7fe fd9f 	bl	800942c <HAL_UART_RxHalfCpltCallback>
}
 800a8ee:	bf00      	nop
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b086      	sub	sp, #24
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a902:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a90a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a912:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a91e:	2b80      	cmp	r3, #128	@ 0x80
 800a920:	d109      	bne.n	800a936 <UART_DMAError+0x40>
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b21      	cmp	r3, #33	@ 0x21
 800a926:	d106      	bne.n	800a936 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a930:	6978      	ldr	r0, [r7, #20]
 800a932:	f7ff fe85 	bl	800a640 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a940:	2b40      	cmp	r3, #64	@ 0x40
 800a942:	d109      	bne.n	800a958 <UART_DMAError+0x62>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b22      	cmp	r3, #34	@ 0x22
 800a948:	d106      	bne.n	800a958 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a952:	6978      	ldr	r0, [r7, #20]
 800a954:	f7ff feb6 	bl	800a6c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a95e:	f043 0210 	orr.w	r2, r3, #16
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a968:	6978      	ldr	r0, [r7, #20]
 800a96a:	f7fe fd69 	bl	8009440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a96e:	bf00      	nop
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f7fe fd53 	bl	8009440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a99a:	bf00      	nop
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b08f      	sub	sp, #60	@ 0x3c
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9b0:	2b21      	cmp	r3, #33	@ 0x21
 800a9b2:	d14c      	bne.n	800aa4e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d132      	bne.n	800aa26 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9e0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e6      	bne.n	800a9c0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa06:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa10:	61bb      	str	r3, [r7, #24]
 800aa12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	6979      	ldr	r1, [r7, #20]
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e6      	bne.n	800a9f2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800aa24:	e013      	b.n	800aa4e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa2a:	781a      	ldrb	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	3b01      	subs	r3, #1
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800aa4e:	bf00      	nop
 800aa50:	373c      	adds	r7, #60	@ 0x3c
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b091      	sub	sp, #68	@ 0x44
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa68:	2b21      	cmp	r3, #33	@ 0x21
 800aa6a:	d151      	bne.n	800ab10 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d132      	bne.n	800aade <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa80:	e853 3f00 	ldrex	r3, [r3]
 800aa84:	623b      	str	r3, [r7, #32]
   return(result);
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa96:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aaa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e6      	bne.n	800aa78 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	e853 3f00 	ldrex	r3, [r3]
 800aab6:	60fb      	str	r3, [r7, #12]
   return(result);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aabe:	637b      	str	r3, [r7, #52]	@ 0x34
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	461a      	mov	r2, r3
 800aac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac8:	61fb      	str	r3, [r7, #28]
 800aaca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	69b9      	ldr	r1, [r7, #24]
 800aace:	69fa      	ldr	r2, [r7, #28]
 800aad0:	e841 2300 	strex	r3, r2, [r1]
 800aad4:	617b      	str	r3, [r7, #20]
   return(result);
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1e6      	bne.n	800aaaa <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800aadc:	e018      	b.n	800ab10 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	461a      	mov	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aaf2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaf8:	1c9a      	adds	r2, r3, #2
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	3b01      	subs	r3, #1
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800ab10:	bf00      	nop
 800ab12:	3744      	adds	r7, #68	@ 0x44
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b091      	sub	sp, #68	@ 0x44
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab2a:	2b21      	cmp	r3, #33	@ 0x21
 800ab2c:	d160      	bne.n	800abf0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ab36:	e057      	b.n	800abe8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d133      	bne.n	800abac <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3308      	adds	r3, #8
 800ab4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4e:	e853 3f00 	ldrex	r3, [r3]
 800ab52:	623b      	str	r3, [r7, #32]
   return(result);
 800ab54:	6a3b      	ldr	r3, [r7, #32]
 800ab56:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ab5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3308      	adds	r3, #8
 800ab62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab64:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab6c:	e841 2300 	strex	r3, r2, [r1]
 800ab70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1e5      	bne.n	800ab44 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	e853 3f00 	ldrex	r3, [r3]
 800ab84:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	461a      	mov	r2, r3
 800ab94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab96:	61fb      	str	r3, [r7, #28]
 800ab98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	69b9      	ldr	r1, [r7, #24]
 800ab9c:	69fa      	ldr	r2, [r7, #28]
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	617b      	str	r3, [r7, #20]
   return(result);
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e6      	bne.n	800ab78 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800abaa:	e021      	b.n	800abf0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d013      	beq.n	800abe2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abbe:	781a      	ldrb	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	3b01      	subs	r3, #1
 800abda:	b29a      	uxth	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800abe2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abe4:	3b01      	subs	r3, #1
 800abe6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800abe8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1a4      	bne.n	800ab38 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800abee:	e7ff      	b.n	800abf0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800abf0:	bf00      	nop
 800abf2:	3744      	adds	r7, #68	@ 0x44
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b091      	sub	sp, #68	@ 0x44
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac0a:	2b21      	cmp	r3, #33	@ 0x21
 800ac0c:	d165      	bne.n	800acda <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ac16:	e05c      	b.n	800acd2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d133      	bne.n	800ac8c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3308      	adds	r3, #8
 800ac2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	e853 3f00 	ldrex	r3, [r3]
 800ac32:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ac3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3308      	adds	r3, #8
 800ac42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac4c:	e841 2300 	strex	r3, r2, [r1]
 800ac50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1e5      	bne.n	800ac24 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	e853 3f00 	ldrex	r3, [r3]
 800ac64:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac76:	61bb      	str	r3, [r7, #24]
 800ac78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7a:	6979      	ldr	r1, [r7, #20]
 800ac7c:	69ba      	ldr	r2, [r7, #24]
 800ac7e:	e841 2300 	strex	r3, r2, [r1]
 800ac82:	613b      	str	r3, [r7, #16]
   return(result);
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1e6      	bne.n	800ac58 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ac8a:	e026      	b.n	800acda <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d018      	beq.n	800accc <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	881b      	ldrh	r3, [r3, #0]
 800aca4:	461a      	mov	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acae:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acb4:	1c9a      	adds	r2, r3, #2
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	3b01      	subs	r3, #1
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800accc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800acce:	3b01      	subs	r3, #1
 800acd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800acd2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d19f      	bne.n	800ac18 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800acd8:	e7ff      	b.n	800acda <UART_TxISR_16BIT_FIFOEN+0xde>
 800acda:	bf00      	nop
 800acdc:	3744      	adds	r7, #68	@ 0x44
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b088      	sub	sp, #32
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	e853 3f00 	ldrex	r3, [r3]
 800acfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad02:	61fb      	str	r3, [r7, #28]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	61bb      	str	r3, [r7, #24]
 800ad0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad10:	6979      	ldr	r1, [r7, #20]
 800ad12:	69ba      	ldr	r2, [r7, #24]
 800ad14:	e841 2300 	strex	r3, r2, [r1]
 800ad18:	613b      	str	r3, [r7, #16]
   return(result);
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e6      	bne.n	800acee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2220      	movs	r2, #32
 800ad24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7fe fb72 	bl	8009418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad34:	bf00      	nop
 800ad36:	3720      	adds	r7, #32
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b09c      	sub	sp, #112	@ 0x70
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ad4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad54:	2b22      	cmp	r3, #34	@ 0x22
 800ad56:	f040 80be 	bne.w	800aed6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ad64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ad68:	b2d9      	uxtb	r1, r3
 800ad6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad74:	400a      	ands	r2, r1
 800ad76:	b2d2      	uxtb	r2, r2
 800ad78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad7e:	1c5a      	adds	r2, r3, #1
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f040 80a1 	bne.w	800aee6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800adb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800adb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800adc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800adc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800add0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e6      	bne.n	800ada4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3308      	adds	r3, #8
 800addc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ade6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade8:	f023 0301 	bic.w	r3, r3, #1
 800adec:	667b      	str	r3, [r7, #100]	@ 0x64
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3308      	adds	r3, #8
 800adf4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800adf6:	647a      	str	r2, [r7, #68]	@ 0x44
 800adf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800adfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e5      	bne.n	800add6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a33      	ldr	r2, [pc, #204]	@ (800aef0 <UART_RxISR_8BIT+0x1b4>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d01f      	beq.n	800ae68 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d018      	beq.n	800ae68 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3e:	e853 3f00 	ldrex	r3, [r3]
 800ae42:	623b      	str	r3, [r7, #32]
   return(result);
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae4a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae54:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae56:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae5c:	e841 2300 	strex	r3, r2, [r1]
 800ae60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1e6      	bne.n	800ae36 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d12e      	bne.n	800aece <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	e853 3f00 	ldrex	r3, [r3]
 800ae82:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f023 0310 	bic.w	r3, r3, #16
 800ae8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	461a      	mov	r2, r3
 800ae92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae94:	61fb      	str	r3, [r7, #28]
 800ae96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae98:	69b9      	ldr	r1, [r7, #24]
 800ae9a:	69fa      	ldr	r2, [r7, #28]
 800ae9c:	e841 2300 	strex	r3, r2, [r1]
 800aea0:	617b      	str	r3, [r7, #20]
   return(result);
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1e6      	bne.n	800ae76 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	f003 0310 	and.w	r3, r3, #16
 800aeb2:	2b10      	cmp	r3, #16
 800aeb4:	d103      	bne.n	800aebe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2210      	movs	r2, #16
 800aebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7fe fac4 	bl	8009454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aecc:	e00b      	b.n	800aee6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7f5 ff36 	bl	8000d40 <HAL_UART_RxCpltCallback>
}
 800aed4:	e007      	b.n	800aee6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	699a      	ldr	r2, [r3, #24]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f042 0208 	orr.w	r2, r2, #8
 800aee4:	619a      	str	r2, [r3, #24]
}
 800aee6:	bf00      	nop
 800aee8:	3770      	adds	r7, #112	@ 0x70
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	58000c00 	.word	0x58000c00

0800aef4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b09c      	sub	sp, #112	@ 0x70
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af0c:	2b22      	cmp	r3, #34	@ 0x22
 800af0e:	f040 80be 	bne.w	800b08e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af18:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af20:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800af22:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800af26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800af2a:	4013      	ands	r3, r2
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af36:	1c9a      	adds	r2, r3, #2
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af42:	b29b      	uxth	r3, r3
 800af44:	3b01      	subs	r3, #1
 800af46:	b29a      	uxth	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af54:	b29b      	uxth	r3, r3
 800af56:	2b00      	cmp	r3, #0
 800af58:	f040 80a1 	bne.w	800b09e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af64:	e853 3f00 	ldrex	r3, [r3]
 800af68:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800af6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af70:	667b      	str	r3, [r7, #100]	@ 0x64
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af7a:	657b      	str	r3, [r7, #84]	@ 0x54
 800af7c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800af80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800af82:	e841 2300 	strex	r3, r2, [r1]
 800af86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800af88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1e6      	bne.n	800af5c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3308      	adds	r3, #8
 800af94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af98:	e853 3f00 	ldrex	r3, [r3]
 800af9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa0:	f023 0301 	bic.w	r3, r3, #1
 800afa4:	663b      	str	r3, [r7, #96]	@ 0x60
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3308      	adds	r3, #8
 800afac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afae:	643a      	str	r2, [r7, #64]	@ 0x40
 800afb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800afb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800afb6:	e841 2300 	strex	r3, r2, [r1]
 800afba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800afbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1e5      	bne.n	800af8e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2220      	movs	r2, #32
 800afc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a33      	ldr	r2, [pc, #204]	@ (800b0a8 <UART_RxISR_16BIT+0x1b4>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d01f      	beq.n	800b020 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afea:	2b00      	cmp	r3, #0
 800afec:	d018      	beq.n	800b020 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	e853 3f00 	ldrex	r3, [r3]
 800affa:	61fb      	str	r3, [r7, #28]
   return(result);
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	461a      	mov	r2, r3
 800b00a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b00c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b00e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b014:	e841 2300 	strex	r3, r2, [r1]
 800b018:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e6      	bne.n	800afee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b024:	2b01      	cmp	r3, #1
 800b026:	d12e      	bne.n	800b086 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	e853 3f00 	ldrex	r3, [r3]
 800b03a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f023 0310 	bic.w	r3, r3, #16
 800b042:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	461a      	mov	r2, r3
 800b04a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b04c:	61bb      	str	r3, [r7, #24]
 800b04e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b050:	6979      	ldr	r1, [r7, #20]
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	e841 2300 	strex	r3, r2, [r1]
 800b058:	613b      	str	r3, [r7, #16]
   return(result);
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1e6      	bne.n	800b02e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	69db      	ldr	r3, [r3, #28]
 800b066:	f003 0310 	and.w	r3, r3, #16
 800b06a:	2b10      	cmp	r3, #16
 800b06c:	d103      	bne.n	800b076 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2210      	movs	r2, #16
 800b074:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7fe f9e8 	bl	8009454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b084:	e00b      	b.n	800b09e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7f5 fe5a 	bl	8000d40 <HAL_UART_RxCpltCallback>
}
 800b08c:	e007      	b.n	800b09e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	699a      	ldr	r2, [r3, #24]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f042 0208 	orr.w	r2, r2, #8
 800b09c:	619a      	str	r2, [r3, #24]
}
 800b09e:	bf00      	nop
 800b0a0:	3770      	adds	r7, #112	@ 0x70
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	58000c00 	.word	0x58000c00

0800b0ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b0ac      	sub	sp, #176	@ 0xb0
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b0ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0e2:	2b22      	cmp	r3, #34	@ 0x22
 800b0e4:	f040 8180 	bne.w	800b3e8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b0ee:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b0f2:	e123      	b.n	800b33c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b0fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b102:	b2d9      	uxtb	r1, r3
 800b104:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b108:	b2da      	uxtb	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b10e:	400a      	ands	r2, r1
 800b110:	b2d2      	uxtb	r2, r2
 800b112:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b124:	b29b      	uxth	r3, r3
 800b126:	3b01      	subs	r3, #1
 800b128:	b29a      	uxth	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	69db      	ldr	r3, [r3, #28]
 800b136:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b13a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b13e:	f003 0307 	and.w	r3, r3, #7
 800b142:	2b00      	cmp	r3, #0
 800b144:	d053      	beq.n	800b1ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d011      	beq.n	800b176 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00b      	beq.n	800b176 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2201      	movs	r2, #1
 800b164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b16c:	f043 0201 	orr.w	r2, r3, #1
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b17a:	f003 0302 	and.w	r3, r3, #2
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d011      	beq.n	800b1a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00b      	beq.n	800b1a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2202      	movs	r2, #2
 800b194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b19c:	f043 0204 	orr.w	r2, r3, #4
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1aa:	f003 0304 	and.w	r3, r3, #4
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d011      	beq.n	800b1d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b1b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00b      	beq.n	800b1d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2204      	movs	r2, #4
 800b1c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1cc:	f043 0202 	orr.w	r2, r3, #2
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d006      	beq.n	800b1ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7fe f92d 	bl	8009440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f040 80a0 	bne.w	800b33c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b204:	e853 3f00 	ldrex	r3, [r3]
 800b208:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b20a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b20c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	461a      	mov	r2, r3
 800b21a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b21e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b220:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b222:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b224:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b22c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e4      	bne.n	800b1fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3308      	adds	r3, #8
 800b238:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b23c:	e853 3f00 	ldrex	r3, [r3]
 800b240:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b242:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b244:	4b6e      	ldr	r3, [pc, #440]	@ (800b400 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b246:	4013      	ands	r3, r2
 800b248:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3308      	adds	r3, #8
 800b252:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b256:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b258:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b25c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b25e:	e841 2300 	strex	r3, r2, [r1]
 800b262:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1e3      	bne.n	800b232 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2220      	movs	r2, #32
 800b26e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a60      	ldr	r2, [pc, #384]	@ (800b404 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d021      	beq.n	800b2cc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d01a      	beq.n	800b2cc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b29e:	e853 3f00 	ldrex	r3, [r3]
 800b2a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b2a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b2aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b2b8:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2ba:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b2be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b2c0:	e841 2300 	strex	r3, r2, [r1]
 800b2c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b2c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1e4      	bne.n	800b296 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d130      	bne.n	800b336 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e2:	e853 3f00 	ldrex	r3, [r3]
 800b2e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	f023 0310 	bic.w	r3, r3, #16
 800b2ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b2fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b300:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b302:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b304:	e841 2300 	strex	r3, r2, [r1]
 800b308:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1e4      	bne.n	800b2da <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	69db      	ldr	r3, [r3, #28]
 800b316:	f003 0310 	and.w	r3, r3, #16
 800b31a:	2b10      	cmp	r3, #16
 800b31c:	d103      	bne.n	800b326 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2210      	movs	r2, #16
 800b324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b32c:	4619      	mov	r1, r3
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7fe f890 	bl	8009454 <HAL_UARTEx_RxEventCallback>
 800b334:	e002      	b.n	800b33c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7f5 fd02 	bl	8000d40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b33c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b340:	2b00      	cmp	r3, #0
 800b342:	d006      	beq.n	800b352 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b348:	f003 0320 	and.w	r3, r3, #32
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f47f aed1 	bne.w	800b0f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b358:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b35c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b360:	2b00      	cmp	r3, #0
 800b362:	d049      	beq.n	800b3f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b36a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b36e:	429a      	cmp	r2, r3
 800b370:	d242      	bcs.n	800b3f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3308      	adds	r3, #8
 800b378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	e853 3f00 	ldrex	r3, [r3]
 800b380:	61fb      	str	r3, [r7, #28]
   return(result);
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3308      	adds	r3, #8
 800b392:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b396:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b398:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b39c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b39e:	e841 2300 	strex	r3, r2, [r1]
 800b3a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1e3      	bne.n	800b372 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a16      	ldr	r2, [pc, #88]	@ (800b408 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b3ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	e853 3f00 	ldrex	r3, [r3]
 800b3bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	f043 0320 	orr.w	r3, r3, #32
 800b3c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b3d2:	61bb      	str	r3, [r7, #24]
 800b3d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d6:	6979      	ldr	r1, [r7, #20]
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	e841 2300 	strex	r3, r2, [r1]
 800b3de:	613b      	str	r3, [r7, #16]
   return(result);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1e4      	bne.n	800b3b0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b3e6:	e007      	b.n	800b3f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	699a      	ldr	r2, [r3, #24]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f042 0208 	orr.w	r2, r2, #8
 800b3f6:	619a      	str	r2, [r3, #24]
}
 800b3f8:	bf00      	nop
 800b3fa:	37b0      	adds	r7, #176	@ 0xb0
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	effffffe 	.word	0xeffffffe
 800b404:	58000c00 	.word	0x58000c00
 800b408:	0800ad3d 	.word	0x0800ad3d

0800b40c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b0ae      	sub	sp, #184	@ 0xb8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b41a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	69db      	ldr	r3, [r3, #28]
 800b424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b442:	2b22      	cmp	r3, #34	@ 0x22
 800b444:	f040 8184 	bne.w	800b750 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b44e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b452:	e127      	b.n	800b6a4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b45a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b466:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b46a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b46e:	4013      	ands	r3, r2
 800b470:	b29a      	uxth	r2, r3
 800b472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b476:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b47c:	1c9a      	adds	r2, r3, #2
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b488:	b29b      	uxth	r3, r3
 800b48a:	3b01      	subs	r3, #1
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b49e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4a2:	f003 0307 	and.w	r3, r3, #7
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d053      	beq.n	800b552 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d011      	beq.n	800b4da <UART_RxISR_16BIT_FIFOEN+0xce>
 800b4b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00b      	beq.n	800b4da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4d0:	f043 0201 	orr.w	r2, r3, #1
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4de:	f003 0302 	and.w	r3, r3, #2
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d011      	beq.n	800b50a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b4e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b4ea:	f003 0301 	and.w	r3, r3, #1
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00b      	beq.n	800b50a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b500:	f043 0204 	orr.w	r2, r3, #4
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b50a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	2b00      	cmp	r3, #0
 800b514:	d011      	beq.n	800b53a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00b      	beq.n	800b53a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2204      	movs	r2, #4
 800b528:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b530:	f043 0202 	orr.w	r2, r3, #2
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b540:	2b00      	cmp	r3, #0
 800b542:	d006      	beq.n	800b552 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7fd ff7b 	bl	8009440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b558:	b29b      	uxth	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f040 80a2 	bne.w	800b6a4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b566:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b568:	e853 3f00 	ldrex	r3, [r3]
 800b56c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b56e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	461a      	mov	r2, r3
 800b57e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b582:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b586:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b588:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b58a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e2      	bne.n	800b560 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b5a4:	e853 3f00 	ldrex	r3, [r3]
 800b5a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b5aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b5ac:	4b6e      	ldr	r3, [pc, #440]	@ (800b768 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b5be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b5c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b5c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b5c6:	e841 2300 	strex	r3, r2, [r1]
 800b5ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b5cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1e3      	bne.n	800b59a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a60      	ldr	r2, [pc, #384]	@ (800b76c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d021      	beq.n	800b634 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d01a      	beq.n	800b634 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b606:	e853 3f00 	ldrex	r3, [r3]
 800b60a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b60c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b60e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b612:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b620:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b622:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b624:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b626:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b628:	e841 2300 	strex	r3, r2, [r1]
 800b62c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b62e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1e4      	bne.n	800b5fe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d130      	bne.n	800b69e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64a:	e853 3f00 	ldrex	r3, [r3]
 800b64e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b652:	f023 0310 	bic.w	r3, r3, #16
 800b656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	461a      	mov	r2, r3
 800b660:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b664:	647b      	str	r3, [r7, #68]	@ 0x44
 800b666:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b668:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b66a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b66c:	e841 2300 	strex	r3, r2, [r1]
 800b670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1e4      	bne.n	800b642 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	f003 0310 	and.w	r3, r3, #16
 800b682:	2b10      	cmp	r3, #16
 800b684:	d103      	bne.n	800b68e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2210      	movs	r2, #16
 800b68c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7fd fedc 	bl	8009454 <HAL_UARTEx_RxEventCallback>
 800b69c:	e002      	b.n	800b6a4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7f5 fb4e 	bl	8000d40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b6a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d006      	beq.n	800b6ba <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b6ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b6b0:	f003 0320 	and.w	r3, r3, #32
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f47f aecd 	bne.w	800b454 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6c0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b6c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d049      	beq.n	800b760 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b6d2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d242      	bcs.n	800b760 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	3308      	adds	r3, #8
 800b6e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e4:	e853 3f00 	ldrex	r3, [r3]
 800b6e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b6fe:	633a      	str	r2, [r7, #48]	@ 0x30
 800b700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b706:	e841 2300 	strex	r3, r2, [r1]
 800b70a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1e3      	bne.n	800b6da <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a16      	ldr	r2, [pc, #88]	@ (800b770 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b716:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	e853 3f00 	ldrex	r3, [r3]
 800b724:	60fb      	str	r3, [r7, #12]
   return(result);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f043 0320 	orr.w	r3, r3, #32
 800b72c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	461a      	mov	r2, r3
 800b736:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b73a:	61fb      	str	r3, [r7, #28]
 800b73c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73e:	69b9      	ldr	r1, [r7, #24]
 800b740:	69fa      	ldr	r2, [r7, #28]
 800b742:	e841 2300 	strex	r3, r2, [r1]
 800b746:	617b      	str	r3, [r7, #20]
   return(result);
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1e4      	bne.n	800b718 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b74e:	e007      	b.n	800b760 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	699a      	ldr	r2, [r3, #24]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f042 0208 	orr.w	r2, r2, #8
 800b75e:	619a      	str	r2, [r3, #24]
}
 800b760:	bf00      	nop
 800b762:	37b8      	adds	r7, #184	@ 0xb8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	effffffe 	.word	0xeffffffe
 800b76c:	58000c00 	.word	0x58000c00
 800b770:	0800aef5 	.word	0x0800aef5

0800b774 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d101      	bne.n	800b7c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	e027      	b.n	800b816 <HAL_UARTEx_DisableFifoMode+0x66>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2224      	movs	r2, #36	@ 0x24
 800b7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f022 0201 	bic.w	r2, r2, #1
 800b7ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b7f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2220      	movs	r2, #32
 800b808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b832:	2b01      	cmp	r3, #1
 800b834:	d101      	bne.n	800b83a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b836:	2302      	movs	r3, #2
 800b838:	e02d      	b.n	800b896 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2224      	movs	r2, #36	@ 0x24
 800b846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f022 0201 	bic.w	r2, r2, #1
 800b860:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	430a      	orrs	r2, r1
 800b874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f850 	bl	800b91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2220      	movs	r2, #32
 800b888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d101      	bne.n	800b8b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	e02d      	b.n	800b912 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2224      	movs	r2, #36	@ 0x24
 800b8c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f022 0201 	bic.w	r2, r2, #1
 800b8dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f812 	bl	800b91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2220      	movs	r2, #32
 800b904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d108      	bne.n	800b93e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b93c:	e031      	b.n	800b9a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b93e:	2310      	movs	r3, #16
 800b940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b942:	2310      	movs	r3, #16
 800b944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	0e5b      	lsrs	r3, r3, #25
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	f003 0307 	and.w	r3, r3, #7
 800b954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	0f5b      	lsrs	r3, r3, #29
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	f003 0307 	and.w	r3, r3, #7
 800b964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b966:	7bbb      	ldrb	r3, [r7, #14]
 800b968:	7b3a      	ldrb	r2, [r7, #12]
 800b96a:	4911      	ldr	r1, [pc, #68]	@ (800b9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800b96c:	5c8a      	ldrb	r2, [r1, r2]
 800b96e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b972:	7b3a      	ldrb	r2, [r7, #12]
 800b974:	490f      	ldr	r1, [pc, #60]	@ (800b9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800b976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b978:	fb93 f3f2 	sdiv	r3, r3, r2
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b984:	7bfb      	ldrb	r3, [r7, #15]
 800b986:	7b7a      	ldrb	r2, [r7, #13]
 800b988:	4909      	ldr	r1, [pc, #36]	@ (800b9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800b98a:	5c8a      	ldrb	r2, [r1, r2]
 800b98c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b990:	7b7a      	ldrb	r2, [r7, #13]
 800b992:	4908      	ldr	r1, [pc, #32]	@ (800b9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800b994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b996:	fb93 f3f2 	sdiv	r3, r3, r2
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b9a2:	bf00      	nop
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	0800c968 	.word	0x0800c968
 800b9b4:	0800c970 	.word	0x0800c970

0800b9b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b084      	sub	sp, #16
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
 800b9c2:	f107 001c 	add.w	r0, r7, #28
 800b9c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d121      	bne.n	800ba16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68da      	ldr	r2, [r3, #12]
 800b9e2:	4b2c      	ldr	r3, [pc, #176]	@ (800ba94 <USB_CoreInit+0xdc>)
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b9f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d105      	bne.n	800ba0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 faaa 	bl	800bf64 <USB_CoreReset>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73fb      	strb	r3, [r7, #15]
 800ba14:	e01b      	b.n	800ba4e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fa9e 	bl	800bf64 <USB_CoreReset>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d106      	bne.n	800ba42 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ba40:	e005      	b.n	800ba4e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ba4e:	7fbb      	ldrb	r3, [r7, #30]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d116      	bne.n	800ba82 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba62:	4b0d      	ldr	r3, [pc, #52]	@ (800ba98 <USB_CoreInit+0xe0>)
 800ba64:	4313      	orrs	r3, r2
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	f043 0206 	orr.w	r2, r3, #6
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	f043 0220 	orr.w	r2, r3, #32
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba8e:	b004      	add	sp, #16
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	ffbdffbf 	.word	0xffbdffbf
 800ba98:	03ee0000 	.word	0x03ee0000

0800ba9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f023 0201 	bic.w	r2, r3, #1
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	460b      	mov	r3, r1
 800bac8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800baca:	2300      	movs	r3, #0
 800bacc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bada:	78fb      	ldrb	r3, [r7, #3]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d115      	bne.n	800bb0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800baec:	200a      	movs	r0, #10
 800baee:	f7f5 fedd 	bl	80018ac <HAL_Delay>
      ms += 10U;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	330a      	adds	r3, #10
 800baf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fa25 	bl	800bf48 <USB_GetMode>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d01e      	beq.n	800bb42 <USB_SetCurrentMode+0x84>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2bc7      	cmp	r3, #199	@ 0xc7
 800bb08:	d9f0      	bls.n	800baec <USB_SetCurrentMode+0x2e>
 800bb0a:	e01a      	b.n	800bb42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb0c:	78fb      	ldrb	r3, [r7, #3]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d115      	bne.n	800bb3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bb1e:	200a      	movs	r0, #10
 800bb20:	f7f5 fec4 	bl	80018ac <HAL_Delay>
      ms += 10U;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	330a      	adds	r3, #10
 800bb28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fa0c 	bl	800bf48 <USB_GetMode>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d005      	beq.n	800bb42 <USB_SetCurrentMode+0x84>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2bc7      	cmp	r3, #199	@ 0xc7
 800bb3a:	d9f0      	bls.n	800bb1e <USB_SetCurrentMode+0x60>
 800bb3c:	e001      	b.n	800bb42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e005      	b.n	800bb4e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2bc8      	cmp	r3, #200	@ 0xc8
 800bb46:	d101      	bne.n	800bb4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e000      	b.n	800bb4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
	...

0800bb58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb58:	b084      	sub	sp, #16
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b086      	sub	sp, #24
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bb66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb72:	2300      	movs	r3, #0
 800bb74:	613b      	str	r3, [r7, #16]
 800bb76:	e009      	b.n	800bb8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	3340      	adds	r3, #64	@ 0x40
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	2200      	movs	r2, #0
 800bb84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	613b      	str	r3, [r7, #16]
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2b0e      	cmp	r3, #14
 800bb90:	d9f2      	bls.n	800bb78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bb92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d11c      	bne.n	800bbd4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bba8:	f043 0302 	orr.w	r3, r3, #2
 800bbac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbb2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	e005      	b.n	800bbe0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	2300      	movs	r3, #0
 800bbea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bbec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d10d      	bne.n	800bc10 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d104      	bne.n	800bc06 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f968 	bl	800bed4 <USB_SetDevSpeed>
 800bc04:	e008      	b.n	800bc18 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bc06:	2101      	movs	r1, #1
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f963 	bl	800bed4 <USB_SetDevSpeed>
 800bc0e:	e003      	b.n	800bc18 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bc10:	2103      	movs	r1, #3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f95e 	bl	800bed4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bc18:	2110      	movs	r1, #16
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f8fa 	bl	800be14 <USB_FlushTxFifo>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d001      	beq.n	800bc2a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f924 	bl	800be78 <USB_FlushRxFifo>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc40:	461a      	mov	r2, r3
 800bc42:	2300      	movs	r3, #0
 800bc44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	2300      	movs	r3, #0
 800bc50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc58:	461a      	mov	r2, r3
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc5e:	2300      	movs	r3, #0
 800bc60:	613b      	str	r3, [r7, #16]
 800bc62:	e043      	b.n	800bcec <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	015a      	lsls	r2, r3, #5
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc7a:	d118      	bne.n	800bcae <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10a      	bne.n	800bc98 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	e013      	b.n	800bcc0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bca4:	461a      	mov	r2, r3
 800bca6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bcaa:	6013      	str	r3, [r2, #0]
 800bcac:	e008      	b.n	800bcc0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	015a      	lsls	r2, r3, #5
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcba:	461a      	mov	r2, r3
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	015a      	lsls	r2, r3, #5
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bccc:	461a      	mov	r2, r3
 800bcce:	2300      	movs	r3, #0
 800bcd0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	015a      	lsls	r2, r3, #5
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcde:	461a      	mov	r2, r3
 800bce0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bce4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	3301      	adds	r3, #1
 800bcea:	613b      	str	r3, [r7, #16]
 800bcec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d3b5      	bcc.n	800bc64 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	613b      	str	r3, [r7, #16]
 800bcfc:	e043      	b.n	800bd86 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	015a      	lsls	r2, r3, #5
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	4413      	add	r3, r2
 800bd06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd14:	d118      	bne.n	800bd48 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10a      	bne.n	800bd32 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	015a      	lsls	r2, r3, #5
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd28:	461a      	mov	r2, r3
 800bd2a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	e013      	b.n	800bd5a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	015a      	lsls	r2, r3, #5
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	4413      	add	r3, r2
 800bd3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bd44:	6013      	str	r3, [r2, #0]
 800bd46:	e008      	b.n	800bd5a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	015a      	lsls	r2, r3, #5
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	4413      	add	r3, r2
 800bd50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd54:	461a      	mov	r2, r3
 800bd56:	2300      	movs	r3, #0
 800bd58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	015a      	lsls	r2, r3, #5
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	4413      	add	r3, r2
 800bd62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd66:	461a      	mov	r2, r3
 800bd68:	2300      	movs	r3, #0
 800bd6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	015a      	lsls	r2, r3, #5
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	4413      	add	r3, r2
 800bd74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd78:	461a      	mov	r2, r3
 800bd7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bd7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	3301      	adds	r3, #1
 800bd84:	613b      	str	r3, [r7, #16]
 800bd86:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d3b5      	bcc.n	800bcfe <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bda0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bda4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bdb2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bdb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d105      	bne.n	800bdc8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	f043 0210 	orr.w	r2, r3, #16
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	699a      	ldr	r2, [r3, #24]
 800bdcc:	4b0f      	ldr	r3, [pc, #60]	@ (800be0c <USB_DevInit+0x2b4>)
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bdd4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d005      	beq.n	800bde8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	f043 0208 	orr.w	r2, r3, #8
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bde8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d105      	bne.n	800bdfc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	699a      	ldr	r2, [r3, #24]
 800bdf4:	4b06      	ldr	r3, [pc, #24]	@ (800be10 <USB_DevInit+0x2b8>)
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3718      	adds	r7, #24
 800be02:	46bd      	mov	sp, r7
 800be04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be08:	b004      	add	sp, #16
 800be0a:	4770      	bx	lr
 800be0c:	803c3800 	.word	0x803c3800
 800be10:	40000004 	.word	0x40000004

0800be14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be1e:	2300      	movs	r3, #0
 800be20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3301      	adds	r3, #1
 800be26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be2e:	d901      	bls.n	800be34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be30:	2303      	movs	r3, #3
 800be32:	e01b      	b.n	800be6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	daf2      	bge.n	800be22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be3c:	2300      	movs	r3, #0
 800be3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	019b      	lsls	r3, r3, #6
 800be44:	f043 0220 	orr.w	r2, r3, #32
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3301      	adds	r3, #1
 800be50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be58:	d901      	bls.n	800be5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	e006      	b.n	800be6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	f003 0320 	and.w	r3, r3, #32
 800be66:	2b20      	cmp	r3, #32
 800be68:	d0f0      	beq.n	800be4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3301      	adds	r3, #1
 800be88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be90:	d901      	bls.n	800be96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e018      	b.n	800bec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	daf2      	bge.n	800be84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800be9e:	2300      	movs	r3, #0
 800bea0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2210      	movs	r2, #16
 800bea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3301      	adds	r3, #1
 800beac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800beb4:	d901      	bls.n	800beba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e006      	b.n	800bec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	f003 0310 	and.w	r3, r3, #16
 800bec2:	2b10      	cmp	r3, #16
 800bec4:	d0f0      	beq.n	800bea8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	460b      	mov	r3, r1
 800bede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	78fb      	ldrb	r3, [r7, #3]
 800beee:	68f9      	ldr	r1, [r7, #12]
 800bef0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bef4:	4313      	orrs	r3, r2
 800bef6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b085      	sub	sp, #20
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf20:	f023 0303 	bic.w	r3, r3, #3
 800bf24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf34:	f043 0302 	orr.w	r3, r3, #2
 800bf38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3714      	adds	r7, #20
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	f003 0301 	and.w	r3, r3, #1
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3301      	adds	r3, #1
 800bf74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf7c:	d901      	bls.n	800bf82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	e01b      	b.n	800bfba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	daf2      	bge.n	800bf70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	691b      	ldr	r3, [r3, #16]
 800bf92:	f043 0201 	orr.w	r2, r3, #1
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bfa6:	d901      	bls.n	800bfac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	e006      	b.n	800bfba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d0f0      	beq.n	800bf9a <USB_CoreReset+0x36>

  return HAL_OK;
 800bfb8:	2300      	movs	r3, #0
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
	...

0800bfc8 <siprintf>:
 800bfc8:	b40e      	push	{r1, r2, r3}
 800bfca:	b500      	push	{lr}
 800bfcc:	b09c      	sub	sp, #112	@ 0x70
 800bfce:	ab1d      	add	r3, sp, #116	@ 0x74
 800bfd0:	9002      	str	r0, [sp, #8]
 800bfd2:	9006      	str	r0, [sp, #24]
 800bfd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bfd8:	4809      	ldr	r0, [pc, #36]	@ (800c000 <siprintf+0x38>)
 800bfda:	9107      	str	r1, [sp, #28]
 800bfdc:	9104      	str	r1, [sp, #16]
 800bfde:	4909      	ldr	r1, [pc, #36]	@ (800c004 <siprintf+0x3c>)
 800bfe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe4:	9105      	str	r1, [sp, #20]
 800bfe6:	6800      	ldr	r0, [r0, #0]
 800bfe8:	9301      	str	r3, [sp, #4]
 800bfea:	a902      	add	r1, sp, #8
 800bfec:	f000 f994 	bl	800c318 <_svfiprintf_r>
 800bff0:	9b02      	ldr	r3, [sp, #8]
 800bff2:	2200      	movs	r2, #0
 800bff4:	701a      	strb	r2, [r3, #0]
 800bff6:	b01c      	add	sp, #112	@ 0x70
 800bff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bffc:	b003      	add	sp, #12
 800bffe:	4770      	bx	lr
 800c000:	24000014 	.word	0x24000014
 800c004:	ffff0208 	.word	0xffff0208

0800c008 <memset>:
 800c008:	4402      	add	r2, r0
 800c00a:	4603      	mov	r3, r0
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d100      	bne.n	800c012 <memset+0xa>
 800c010:	4770      	bx	lr
 800c012:	f803 1b01 	strb.w	r1, [r3], #1
 800c016:	e7f9      	b.n	800c00c <memset+0x4>

0800c018 <__errno>:
 800c018:	4b01      	ldr	r3, [pc, #4]	@ (800c020 <__errno+0x8>)
 800c01a:	6818      	ldr	r0, [r3, #0]
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	24000014 	.word	0x24000014

0800c024 <__libc_init_array>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	4d0d      	ldr	r5, [pc, #52]	@ (800c05c <__libc_init_array+0x38>)
 800c028:	4c0d      	ldr	r4, [pc, #52]	@ (800c060 <__libc_init_array+0x3c>)
 800c02a:	1b64      	subs	r4, r4, r5
 800c02c:	10a4      	asrs	r4, r4, #2
 800c02e:	2600      	movs	r6, #0
 800c030:	42a6      	cmp	r6, r4
 800c032:	d109      	bne.n	800c048 <__libc_init_array+0x24>
 800c034:	4d0b      	ldr	r5, [pc, #44]	@ (800c064 <__libc_init_array+0x40>)
 800c036:	4c0c      	ldr	r4, [pc, #48]	@ (800c068 <__libc_init_array+0x44>)
 800c038:	f000 fc66 	bl	800c908 <_init>
 800c03c:	1b64      	subs	r4, r4, r5
 800c03e:	10a4      	asrs	r4, r4, #2
 800c040:	2600      	movs	r6, #0
 800c042:	42a6      	cmp	r6, r4
 800c044:	d105      	bne.n	800c052 <__libc_init_array+0x2e>
 800c046:	bd70      	pop	{r4, r5, r6, pc}
 800c048:	f855 3b04 	ldr.w	r3, [r5], #4
 800c04c:	4798      	blx	r3
 800c04e:	3601      	adds	r6, #1
 800c050:	e7ee      	b.n	800c030 <__libc_init_array+0xc>
 800c052:	f855 3b04 	ldr.w	r3, [r5], #4
 800c056:	4798      	blx	r3
 800c058:	3601      	adds	r6, #1
 800c05a:	e7f2      	b.n	800c042 <__libc_init_array+0x1e>
 800c05c:	0800c9b4 	.word	0x0800c9b4
 800c060:	0800c9b4 	.word	0x0800c9b4
 800c064:	0800c9b4 	.word	0x0800c9b4
 800c068:	0800c9b8 	.word	0x0800c9b8

0800c06c <__retarget_lock_acquire_recursive>:
 800c06c:	4770      	bx	lr

0800c06e <__retarget_lock_release_recursive>:
 800c06e:	4770      	bx	lr

0800c070 <_free_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	4605      	mov	r5, r0
 800c074:	2900      	cmp	r1, #0
 800c076:	d041      	beq.n	800c0fc <_free_r+0x8c>
 800c078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c07c:	1f0c      	subs	r4, r1, #4
 800c07e:	2b00      	cmp	r3, #0
 800c080:	bfb8      	it	lt
 800c082:	18e4      	addlt	r4, r4, r3
 800c084:	f000 f8e0 	bl	800c248 <__malloc_lock>
 800c088:	4a1d      	ldr	r2, [pc, #116]	@ (800c100 <_free_r+0x90>)
 800c08a:	6813      	ldr	r3, [r2, #0]
 800c08c:	b933      	cbnz	r3, 800c09c <_free_r+0x2c>
 800c08e:	6063      	str	r3, [r4, #4]
 800c090:	6014      	str	r4, [r2, #0]
 800c092:	4628      	mov	r0, r5
 800c094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c098:	f000 b8dc 	b.w	800c254 <__malloc_unlock>
 800c09c:	42a3      	cmp	r3, r4
 800c09e:	d908      	bls.n	800c0b2 <_free_r+0x42>
 800c0a0:	6820      	ldr	r0, [r4, #0]
 800c0a2:	1821      	adds	r1, r4, r0
 800c0a4:	428b      	cmp	r3, r1
 800c0a6:	bf01      	itttt	eq
 800c0a8:	6819      	ldreq	r1, [r3, #0]
 800c0aa:	685b      	ldreq	r3, [r3, #4]
 800c0ac:	1809      	addeq	r1, r1, r0
 800c0ae:	6021      	streq	r1, [r4, #0]
 800c0b0:	e7ed      	b.n	800c08e <_free_r+0x1e>
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	b10b      	cbz	r3, 800c0bc <_free_r+0x4c>
 800c0b8:	42a3      	cmp	r3, r4
 800c0ba:	d9fa      	bls.n	800c0b2 <_free_r+0x42>
 800c0bc:	6811      	ldr	r1, [r2, #0]
 800c0be:	1850      	adds	r0, r2, r1
 800c0c0:	42a0      	cmp	r0, r4
 800c0c2:	d10b      	bne.n	800c0dc <_free_r+0x6c>
 800c0c4:	6820      	ldr	r0, [r4, #0]
 800c0c6:	4401      	add	r1, r0
 800c0c8:	1850      	adds	r0, r2, r1
 800c0ca:	4283      	cmp	r3, r0
 800c0cc:	6011      	str	r1, [r2, #0]
 800c0ce:	d1e0      	bne.n	800c092 <_free_r+0x22>
 800c0d0:	6818      	ldr	r0, [r3, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	6053      	str	r3, [r2, #4]
 800c0d6:	4408      	add	r0, r1
 800c0d8:	6010      	str	r0, [r2, #0]
 800c0da:	e7da      	b.n	800c092 <_free_r+0x22>
 800c0dc:	d902      	bls.n	800c0e4 <_free_r+0x74>
 800c0de:	230c      	movs	r3, #12
 800c0e0:	602b      	str	r3, [r5, #0]
 800c0e2:	e7d6      	b.n	800c092 <_free_r+0x22>
 800c0e4:	6820      	ldr	r0, [r4, #0]
 800c0e6:	1821      	adds	r1, r4, r0
 800c0e8:	428b      	cmp	r3, r1
 800c0ea:	bf04      	itt	eq
 800c0ec:	6819      	ldreq	r1, [r3, #0]
 800c0ee:	685b      	ldreq	r3, [r3, #4]
 800c0f0:	6063      	str	r3, [r4, #4]
 800c0f2:	bf04      	itt	eq
 800c0f4:	1809      	addeq	r1, r1, r0
 800c0f6:	6021      	streq	r1, [r4, #0]
 800c0f8:	6054      	str	r4, [r2, #4]
 800c0fa:	e7ca      	b.n	800c092 <_free_r+0x22>
 800c0fc:	bd38      	pop	{r3, r4, r5, pc}
 800c0fe:	bf00      	nop
 800c100:	24000ca4 	.word	0x24000ca4

0800c104 <sbrk_aligned>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	4e0f      	ldr	r6, [pc, #60]	@ (800c144 <sbrk_aligned+0x40>)
 800c108:	460c      	mov	r4, r1
 800c10a:	6831      	ldr	r1, [r6, #0]
 800c10c:	4605      	mov	r5, r0
 800c10e:	b911      	cbnz	r1, 800c116 <sbrk_aligned+0x12>
 800c110:	f000 fba6 	bl	800c860 <_sbrk_r>
 800c114:	6030      	str	r0, [r6, #0]
 800c116:	4621      	mov	r1, r4
 800c118:	4628      	mov	r0, r5
 800c11a:	f000 fba1 	bl	800c860 <_sbrk_r>
 800c11e:	1c43      	adds	r3, r0, #1
 800c120:	d103      	bne.n	800c12a <sbrk_aligned+0x26>
 800c122:	f04f 34ff 	mov.w	r4, #4294967295
 800c126:	4620      	mov	r0, r4
 800c128:	bd70      	pop	{r4, r5, r6, pc}
 800c12a:	1cc4      	adds	r4, r0, #3
 800c12c:	f024 0403 	bic.w	r4, r4, #3
 800c130:	42a0      	cmp	r0, r4
 800c132:	d0f8      	beq.n	800c126 <sbrk_aligned+0x22>
 800c134:	1a21      	subs	r1, r4, r0
 800c136:	4628      	mov	r0, r5
 800c138:	f000 fb92 	bl	800c860 <_sbrk_r>
 800c13c:	3001      	adds	r0, #1
 800c13e:	d1f2      	bne.n	800c126 <sbrk_aligned+0x22>
 800c140:	e7ef      	b.n	800c122 <sbrk_aligned+0x1e>
 800c142:	bf00      	nop
 800c144:	24000ca0 	.word	0x24000ca0

0800c148 <_malloc_r>:
 800c148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c14c:	1ccd      	adds	r5, r1, #3
 800c14e:	f025 0503 	bic.w	r5, r5, #3
 800c152:	3508      	adds	r5, #8
 800c154:	2d0c      	cmp	r5, #12
 800c156:	bf38      	it	cc
 800c158:	250c      	movcc	r5, #12
 800c15a:	2d00      	cmp	r5, #0
 800c15c:	4606      	mov	r6, r0
 800c15e:	db01      	blt.n	800c164 <_malloc_r+0x1c>
 800c160:	42a9      	cmp	r1, r5
 800c162:	d904      	bls.n	800c16e <_malloc_r+0x26>
 800c164:	230c      	movs	r3, #12
 800c166:	6033      	str	r3, [r6, #0]
 800c168:	2000      	movs	r0, #0
 800c16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c16e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c244 <_malloc_r+0xfc>
 800c172:	f000 f869 	bl	800c248 <__malloc_lock>
 800c176:	f8d8 3000 	ldr.w	r3, [r8]
 800c17a:	461c      	mov	r4, r3
 800c17c:	bb44      	cbnz	r4, 800c1d0 <_malloc_r+0x88>
 800c17e:	4629      	mov	r1, r5
 800c180:	4630      	mov	r0, r6
 800c182:	f7ff ffbf 	bl	800c104 <sbrk_aligned>
 800c186:	1c43      	adds	r3, r0, #1
 800c188:	4604      	mov	r4, r0
 800c18a:	d158      	bne.n	800c23e <_malloc_r+0xf6>
 800c18c:	f8d8 4000 	ldr.w	r4, [r8]
 800c190:	4627      	mov	r7, r4
 800c192:	2f00      	cmp	r7, #0
 800c194:	d143      	bne.n	800c21e <_malloc_r+0xd6>
 800c196:	2c00      	cmp	r4, #0
 800c198:	d04b      	beq.n	800c232 <_malloc_r+0xea>
 800c19a:	6823      	ldr	r3, [r4, #0]
 800c19c:	4639      	mov	r1, r7
 800c19e:	4630      	mov	r0, r6
 800c1a0:	eb04 0903 	add.w	r9, r4, r3
 800c1a4:	f000 fb5c 	bl	800c860 <_sbrk_r>
 800c1a8:	4581      	cmp	r9, r0
 800c1aa:	d142      	bne.n	800c232 <_malloc_r+0xea>
 800c1ac:	6821      	ldr	r1, [r4, #0]
 800c1ae:	1a6d      	subs	r5, r5, r1
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7ff ffa6 	bl	800c104 <sbrk_aligned>
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	d03a      	beq.n	800c232 <_malloc_r+0xea>
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	442b      	add	r3, r5
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c1c6:	685a      	ldr	r2, [r3, #4]
 800c1c8:	bb62      	cbnz	r2, 800c224 <_malloc_r+0xdc>
 800c1ca:	f8c8 7000 	str.w	r7, [r8]
 800c1ce:	e00f      	b.n	800c1f0 <_malloc_r+0xa8>
 800c1d0:	6822      	ldr	r2, [r4, #0]
 800c1d2:	1b52      	subs	r2, r2, r5
 800c1d4:	d420      	bmi.n	800c218 <_malloc_r+0xd0>
 800c1d6:	2a0b      	cmp	r2, #11
 800c1d8:	d917      	bls.n	800c20a <_malloc_r+0xc2>
 800c1da:	1961      	adds	r1, r4, r5
 800c1dc:	42a3      	cmp	r3, r4
 800c1de:	6025      	str	r5, [r4, #0]
 800c1e0:	bf18      	it	ne
 800c1e2:	6059      	strne	r1, [r3, #4]
 800c1e4:	6863      	ldr	r3, [r4, #4]
 800c1e6:	bf08      	it	eq
 800c1e8:	f8c8 1000 	streq.w	r1, [r8]
 800c1ec:	5162      	str	r2, [r4, r5]
 800c1ee:	604b      	str	r3, [r1, #4]
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f000 f82f 	bl	800c254 <__malloc_unlock>
 800c1f6:	f104 000b 	add.w	r0, r4, #11
 800c1fa:	1d23      	adds	r3, r4, #4
 800c1fc:	f020 0007 	bic.w	r0, r0, #7
 800c200:	1ac2      	subs	r2, r0, r3
 800c202:	bf1c      	itt	ne
 800c204:	1a1b      	subne	r3, r3, r0
 800c206:	50a3      	strne	r3, [r4, r2]
 800c208:	e7af      	b.n	800c16a <_malloc_r+0x22>
 800c20a:	6862      	ldr	r2, [r4, #4]
 800c20c:	42a3      	cmp	r3, r4
 800c20e:	bf0c      	ite	eq
 800c210:	f8c8 2000 	streq.w	r2, [r8]
 800c214:	605a      	strne	r2, [r3, #4]
 800c216:	e7eb      	b.n	800c1f0 <_malloc_r+0xa8>
 800c218:	4623      	mov	r3, r4
 800c21a:	6864      	ldr	r4, [r4, #4]
 800c21c:	e7ae      	b.n	800c17c <_malloc_r+0x34>
 800c21e:	463c      	mov	r4, r7
 800c220:	687f      	ldr	r7, [r7, #4]
 800c222:	e7b6      	b.n	800c192 <_malloc_r+0x4a>
 800c224:	461a      	mov	r2, r3
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	42a3      	cmp	r3, r4
 800c22a:	d1fb      	bne.n	800c224 <_malloc_r+0xdc>
 800c22c:	2300      	movs	r3, #0
 800c22e:	6053      	str	r3, [r2, #4]
 800c230:	e7de      	b.n	800c1f0 <_malloc_r+0xa8>
 800c232:	230c      	movs	r3, #12
 800c234:	6033      	str	r3, [r6, #0]
 800c236:	4630      	mov	r0, r6
 800c238:	f000 f80c 	bl	800c254 <__malloc_unlock>
 800c23c:	e794      	b.n	800c168 <_malloc_r+0x20>
 800c23e:	6005      	str	r5, [r0, #0]
 800c240:	e7d6      	b.n	800c1f0 <_malloc_r+0xa8>
 800c242:	bf00      	nop
 800c244:	24000ca4 	.word	0x24000ca4

0800c248 <__malloc_lock>:
 800c248:	4801      	ldr	r0, [pc, #4]	@ (800c250 <__malloc_lock+0x8>)
 800c24a:	f7ff bf0f 	b.w	800c06c <__retarget_lock_acquire_recursive>
 800c24e:	bf00      	nop
 800c250:	24000c9c 	.word	0x24000c9c

0800c254 <__malloc_unlock>:
 800c254:	4801      	ldr	r0, [pc, #4]	@ (800c25c <__malloc_unlock+0x8>)
 800c256:	f7ff bf0a 	b.w	800c06e <__retarget_lock_release_recursive>
 800c25a:	bf00      	nop
 800c25c:	24000c9c 	.word	0x24000c9c

0800c260 <__ssputs_r>:
 800c260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c264:	688e      	ldr	r6, [r1, #8]
 800c266:	461f      	mov	r7, r3
 800c268:	42be      	cmp	r6, r7
 800c26a:	680b      	ldr	r3, [r1, #0]
 800c26c:	4682      	mov	sl, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	4690      	mov	r8, r2
 800c272:	d82d      	bhi.n	800c2d0 <__ssputs_r+0x70>
 800c274:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c278:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c27c:	d026      	beq.n	800c2cc <__ssputs_r+0x6c>
 800c27e:	6965      	ldr	r5, [r4, #20]
 800c280:	6909      	ldr	r1, [r1, #16]
 800c282:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c286:	eba3 0901 	sub.w	r9, r3, r1
 800c28a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c28e:	1c7b      	adds	r3, r7, #1
 800c290:	444b      	add	r3, r9
 800c292:	106d      	asrs	r5, r5, #1
 800c294:	429d      	cmp	r5, r3
 800c296:	bf38      	it	cc
 800c298:	461d      	movcc	r5, r3
 800c29a:	0553      	lsls	r3, r2, #21
 800c29c:	d527      	bpl.n	800c2ee <__ssputs_r+0x8e>
 800c29e:	4629      	mov	r1, r5
 800c2a0:	f7ff ff52 	bl	800c148 <_malloc_r>
 800c2a4:	4606      	mov	r6, r0
 800c2a6:	b360      	cbz	r0, 800c302 <__ssputs_r+0xa2>
 800c2a8:	6921      	ldr	r1, [r4, #16]
 800c2aa:	464a      	mov	r2, r9
 800c2ac:	f000 fae8 	bl	800c880 <memcpy>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c2b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2ba:	81a3      	strh	r3, [r4, #12]
 800c2bc:	6126      	str	r6, [r4, #16]
 800c2be:	6165      	str	r5, [r4, #20]
 800c2c0:	444e      	add	r6, r9
 800c2c2:	eba5 0509 	sub.w	r5, r5, r9
 800c2c6:	6026      	str	r6, [r4, #0]
 800c2c8:	60a5      	str	r5, [r4, #8]
 800c2ca:	463e      	mov	r6, r7
 800c2cc:	42be      	cmp	r6, r7
 800c2ce:	d900      	bls.n	800c2d2 <__ssputs_r+0x72>
 800c2d0:	463e      	mov	r6, r7
 800c2d2:	6820      	ldr	r0, [r4, #0]
 800c2d4:	4632      	mov	r2, r6
 800c2d6:	4641      	mov	r1, r8
 800c2d8:	f000 faa8 	bl	800c82c <memmove>
 800c2dc:	68a3      	ldr	r3, [r4, #8]
 800c2de:	1b9b      	subs	r3, r3, r6
 800c2e0:	60a3      	str	r3, [r4, #8]
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	4433      	add	r3, r6
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ee:	462a      	mov	r2, r5
 800c2f0:	f000 fad4 	bl	800c89c <_realloc_r>
 800c2f4:	4606      	mov	r6, r0
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d1e0      	bne.n	800c2bc <__ssputs_r+0x5c>
 800c2fa:	6921      	ldr	r1, [r4, #16]
 800c2fc:	4650      	mov	r0, sl
 800c2fe:	f7ff feb7 	bl	800c070 <_free_r>
 800c302:	230c      	movs	r3, #12
 800c304:	f8ca 3000 	str.w	r3, [sl]
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c30e:	81a3      	strh	r3, [r4, #12]
 800c310:	f04f 30ff 	mov.w	r0, #4294967295
 800c314:	e7e9      	b.n	800c2ea <__ssputs_r+0x8a>
	...

0800c318 <_svfiprintf_r>:
 800c318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31c:	4698      	mov	r8, r3
 800c31e:	898b      	ldrh	r3, [r1, #12]
 800c320:	061b      	lsls	r3, r3, #24
 800c322:	b09d      	sub	sp, #116	@ 0x74
 800c324:	4607      	mov	r7, r0
 800c326:	460d      	mov	r5, r1
 800c328:	4614      	mov	r4, r2
 800c32a:	d510      	bpl.n	800c34e <_svfiprintf_r+0x36>
 800c32c:	690b      	ldr	r3, [r1, #16]
 800c32e:	b973      	cbnz	r3, 800c34e <_svfiprintf_r+0x36>
 800c330:	2140      	movs	r1, #64	@ 0x40
 800c332:	f7ff ff09 	bl	800c148 <_malloc_r>
 800c336:	6028      	str	r0, [r5, #0]
 800c338:	6128      	str	r0, [r5, #16]
 800c33a:	b930      	cbnz	r0, 800c34a <_svfiprintf_r+0x32>
 800c33c:	230c      	movs	r3, #12
 800c33e:	603b      	str	r3, [r7, #0]
 800c340:	f04f 30ff 	mov.w	r0, #4294967295
 800c344:	b01d      	add	sp, #116	@ 0x74
 800c346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34a:	2340      	movs	r3, #64	@ 0x40
 800c34c:	616b      	str	r3, [r5, #20]
 800c34e:	2300      	movs	r3, #0
 800c350:	9309      	str	r3, [sp, #36]	@ 0x24
 800c352:	2320      	movs	r3, #32
 800c354:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c358:	f8cd 800c 	str.w	r8, [sp, #12]
 800c35c:	2330      	movs	r3, #48	@ 0x30
 800c35e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c4fc <_svfiprintf_r+0x1e4>
 800c362:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c366:	f04f 0901 	mov.w	r9, #1
 800c36a:	4623      	mov	r3, r4
 800c36c:	469a      	mov	sl, r3
 800c36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c372:	b10a      	cbz	r2, 800c378 <_svfiprintf_r+0x60>
 800c374:	2a25      	cmp	r2, #37	@ 0x25
 800c376:	d1f9      	bne.n	800c36c <_svfiprintf_r+0x54>
 800c378:	ebba 0b04 	subs.w	fp, sl, r4
 800c37c:	d00b      	beq.n	800c396 <_svfiprintf_r+0x7e>
 800c37e:	465b      	mov	r3, fp
 800c380:	4622      	mov	r2, r4
 800c382:	4629      	mov	r1, r5
 800c384:	4638      	mov	r0, r7
 800c386:	f7ff ff6b 	bl	800c260 <__ssputs_r>
 800c38a:	3001      	adds	r0, #1
 800c38c:	f000 80a7 	beq.w	800c4de <_svfiprintf_r+0x1c6>
 800c390:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c392:	445a      	add	r2, fp
 800c394:	9209      	str	r2, [sp, #36]	@ 0x24
 800c396:	f89a 3000 	ldrb.w	r3, [sl]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 809f 	beq.w	800c4de <_svfiprintf_r+0x1c6>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3aa:	f10a 0a01 	add.w	sl, sl, #1
 800c3ae:	9304      	str	r3, [sp, #16]
 800c3b0:	9307      	str	r3, [sp, #28]
 800c3b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3b8:	4654      	mov	r4, sl
 800c3ba:	2205      	movs	r2, #5
 800c3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c0:	484e      	ldr	r0, [pc, #312]	@ (800c4fc <_svfiprintf_r+0x1e4>)
 800c3c2:	f7f3 ff95 	bl	80002f0 <memchr>
 800c3c6:	9a04      	ldr	r2, [sp, #16]
 800c3c8:	b9d8      	cbnz	r0, 800c402 <_svfiprintf_r+0xea>
 800c3ca:	06d0      	lsls	r0, r2, #27
 800c3cc:	bf44      	itt	mi
 800c3ce:	2320      	movmi	r3, #32
 800c3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3d4:	0711      	lsls	r1, r2, #28
 800c3d6:	bf44      	itt	mi
 800c3d8:	232b      	movmi	r3, #43	@ 0x2b
 800c3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3de:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3e4:	d015      	beq.n	800c412 <_svfiprintf_r+0xfa>
 800c3e6:	9a07      	ldr	r2, [sp, #28]
 800c3e8:	4654      	mov	r4, sl
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	f04f 0c0a 	mov.w	ip, #10
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3f6:	3b30      	subs	r3, #48	@ 0x30
 800c3f8:	2b09      	cmp	r3, #9
 800c3fa:	d94b      	bls.n	800c494 <_svfiprintf_r+0x17c>
 800c3fc:	b1b0      	cbz	r0, 800c42c <_svfiprintf_r+0x114>
 800c3fe:	9207      	str	r2, [sp, #28]
 800c400:	e014      	b.n	800c42c <_svfiprintf_r+0x114>
 800c402:	eba0 0308 	sub.w	r3, r0, r8
 800c406:	fa09 f303 	lsl.w	r3, r9, r3
 800c40a:	4313      	orrs	r3, r2
 800c40c:	9304      	str	r3, [sp, #16]
 800c40e:	46a2      	mov	sl, r4
 800c410:	e7d2      	b.n	800c3b8 <_svfiprintf_r+0xa0>
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	1d19      	adds	r1, r3, #4
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	9103      	str	r1, [sp, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	bfbb      	ittet	lt
 800c41e:	425b      	neglt	r3, r3
 800c420:	f042 0202 	orrlt.w	r2, r2, #2
 800c424:	9307      	strge	r3, [sp, #28]
 800c426:	9307      	strlt	r3, [sp, #28]
 800c428:	bfb8      	it	lt
 800c42a:	9204      	strlt	r2, [sp, #16]
 800c42c:	7823      	ldrb	r3, [r4, #0]
 800c42e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c430:	d10a      	bne.n	800c448 <_svfiprintf_r+0x130>
 800c432:	7863      	ldrb	r3, [r4, #1]
 800c434:	2b2a      	cmp	r3, #42	@ 0x2a
 800c436:	d132      	bne.n	800c49e <_svfiprintf_r+0x186>
 800c438:	9b03      	ldr	r3, [sp, #12]
 800c43a:	1d1a      	adds	r2, r3, #4
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	9203      	str	r2, [sp, #12]
 800c440:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c444:	3402      	adds	r4, #2
 800c446:	9305      	str	r3, [sp, #20]
 800c448:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c50c <_svfiprintf_r+0x1f4>
 800c44c:	7821      	ldrb	r1, [r4, #0]
 800c44e:	2203      	movs	r2, #3
 800c450:	4650      	mov	r0, sl
 800c452:	f7f3 ff4d 	bl	80002f0 <memchr>
 800c456:	b138      	cbz	r0, 800c468 <_svfiprintf_r+0x150>
 800c458:	9b04      	ldr	r3, [sp, #16]
 800c45a:	eba0 000a 	sub.w	r0, r0, sl
 800c45e:	2240      	movs	r2, #64	@ 0x40
 800c460:	4082      	lsls	r2, r0
 800c462:	4313      	orrs	r3, r2
 800c464:	3401      	adds	r4, #1
 800c466:	9304      	str	r3, [sp, #16]
 800c468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c46c:	4824      	ldr	r0, [pc, #144]	@ (800c500 <_svfiprintf_r+0x1e8>)
 800c46e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c472:	2206      	movs	r2, #6
 800c474:	f7f3 ff3c 	bl	80002f0 <memchr>
 800c478:	2800      	cmp	r0, #0
 800c47a:	d036      	beq.n	800c4ea <_svfiprintf_r+0x1d2>
 800c47c:	4b21      	ldr	r3, [pc, #132]	@ (800c504 <_svfiprintf_r+0x1ec>)
 800c47e:	bb1b      	cbnz	r3, 800c4c8 <_svfiprintf_r+0x1b0>
 800c480:	9b03      	ldr	r3, [sp, #12]
 800c482:	3307      	adds	r3, #7
 800c484:	f023 0307 	bic.w	r3, r3, #7
 800c488:	3308      	adds	r3, #8
 800c48a:	9303      	str	r3, [sp, #12]
 800c48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c48e:	4433      	add	r3, r6
 800c490:	9309      	str	r3, [sp, #36]	@ 0x24
 800c492:	e76a      	b.n	800c36a <_svfiprintf_r+0x52>
 800c494:	fb0c 3202 	mla	r2, ip, r2, r3
 800c498:	460c      	mov	r4, r1
 800c49a:	2001      	movs	r0, #1
 800c49c:	e7a8      	b.n	800c3f0 <_svfiprintf_r+0xd8>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	3401      	adds	r4, #1
 800c4a2:	9305      	str	r3, [sp, #20]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	f04f 0c0a 	mov.w	ip, #10
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4b0:	3a30      	subs	r2, #48	@ 0x30
 800c4b2:	2a09      	cmp	r2, #9
 800c4b4:	d903      	bls.n	800c4be <_svfiprintf_r+0x1a6>
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d0c6      	beq.n	800c448 <_svfiprintf_r+0x130>
 800c4ba:	9105      	str	r1, [sp, #20]
 800c4bc:	e7c4      	b.n	800c448 <_svfiprintf_r+0x130>
 800c4be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e7f0      	b.n	800c4aa <_svfiprintf_r+0x192>
 800c4c8:	ab03      	add	r3, sp, #12
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	462a      	mov	r2, r5
 800c4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c508 <_svfiprintf_r+0x1f0>)
 800c4d0:	a904      	add	r1, sp, #16
 800c4d2:	4638      	mov	r0, r7
 800c4d4:	f3af 8000 	nop.w
 800c4d8:	1c42      	adds	r2, r0, #1
 800c4da:	4606      	mov	r6, r0
 800c4dc:	d1d6      	bne.n	800c48c <_svfiprintf_r+0x174>
 800c4de:	89ab      	ldrh	r3, [r5, #12]
 800c4e0:	065b      	lsls	r3, r3, #25
 800c4e2:	f53f af2d 	bmi.w	800c340 <_svfiprintf_r+0x28>
 800c4e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4e8:	e72c      	b.n	800c344 <_svfiprintf_r+0x2c>
 800c4ea:	ab03      	add	r3, sp, #12
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	462a      	mov	r2, r5
 800c4f0:	4b05      	ldr	r3, [pc, #20]	@ (800c508 <_svfiprintf_r+0x1f0>)
 800c4f2:	a904      	add	r1, sp, #16
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	f000 f879 	bl	800c5ec <_printf_i>
 800c4fa:	e7ed      	b.n	800c4d8 <_svfiprintf_r+0x1c0>
 800c4fc:	0800c978 	.word	0x0800c978
 800c500:	0800c982 	.word	0x0800c982
 800c504:	00000000 	.word	0x00000000
 800c508:	0800c261 	.word	0x0800c261
 800c50c:	0800c97e 	.word	0x0800c97e

0800c510 <_printf_common>:
 800c510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c514:	4616      	mov	r6, r2
 800c516:	4698      	mov	r8, r3
 800c518:	688a      	ldr	r2, [r1, #8]
 800c51a:	690b      	ldr	r3, [r1, #16]
 800c51c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c520:	4293      	cmp	r3, r2
 800c522:	bfb8      	it	lt
 800c524:	4613      	movlt	r3, r2
 800c526:	6033      	str	r3, [r6, #0]
 800c528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c52c:	4607      	mov	r7, r0
 800c52e:	460c      	mov	r4, r1
 800c530:	b10a      	cbz	r2, 800c536 <_printf_common+0x26>
 800c532:	3301      	adds	r3, #1
 800c534:	6033      	str	r3, [r6, #0]
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	0699      	lsls	r1, r3, #26
 800c53a:	bf42      	ittt	mi
 800c53c:	6833      	ldrmi	r3, [r6, #0]
 800c53e:	3302      	addmi	r3, #2
 800c540:	6033      	strmi	r3, [r6, #0]
 800c542:	6825      	ldr	r5, [r4, #0]
 800c544:	f015 0506 	ands.w	r5, r5, #6
 800c548:	d106      	bne.n	800c558 <_printf_common+0x48>
 800c54a:	f104 0a19 	add.w	sl, r4, #25
 800c54e:	68e3      	ldr	r3, [r4, #12]
 800c550:	6832      	ldr	r2, [r6, #0]
 800c552:	1a9b      	subs	r3, r3, r2
 800c554:	42ab      	cmp	r3, r5
 800c556:	dc26      	bgt.n	800c5a6 <_printf_common+0x96>
 800c558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c55c:	6822      	ldr	r2, [r4, #0]
 800c55e:	3b00      	subs	r3, #0
 800c560:	bf18      	it	ne
 800c562:	2301      	movne	r3, #1
 800c564:	0692      	lsls	r2, r2, #26
 800c566:	d42b      	bmi.n	800c5c0 <_printf_common+0xb0>
 800c568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c56c:	4641      	mov	r1, r8
 800c56e:	4638      	mov	r0, r7
 800c570:	47c8      	blx	r9
 800c572:	3001      	adds	r0, #1
 800c574:	d01e      	beq.n	800c5b4 <_printf_common+0xa4>
 800c576:	6823      	ldr	r3, [r4, #0]
 800c578:	6922      	ldr	r2, [r4, #16]
 800c57a:	f003 0306 	and.w	r3, r3, #6
 800c57e:	2b04      	cmp	r3, #4
 800c580:	bf02      	ittt	eq
 800c582:	68e5      	ldreq	r5, [r4, #12]
 800c584:	6833      	ldreq	r3, [r6, #0]
 800c586:	1aed      	subeq	r5, r5, r3
 800c588:	68a3      	ldr	r3, [r4, #8]
 800c58a:	bf0c      	ite	eq
 800c58c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c590:	2500      	movne	r5, #0
 800c592:	4293      	cmp	r3, r2
 800c594:	bfc4      	itt	gt
 800c596:	1a9b      	subgt	r3, r3, r2
 800c598:	18ed      	addgt	r5, r5, r3
 800c59a:	2600      	movs	r6, #0
 800c59c:	341a      	adds	r4, #26
 800c59e:	42b5      	cmp	r5, r6
 800c5a0:	d11a      	bne.n	800c5d8 <_printf_common+0xc8>
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e008      	b.n	800c5b8 <_printf_common+0xa8>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	4652      	mov	r2, sl
 800c5aa:	4641      	mov	r1, r8
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	47c8      	blx	r9
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	d103      	bne.n	800c5bc <_printf_common+0xac>
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5bc:	3501      	adds	r5, #1
 800c5be:	e7c6      	b.n	800c54e <_printf_common+0x3e>
 800c5c0:	18e1      	adds	r1, r4, r3
 800c5c2:	1c5a      	adds	r2, r3, #1
 800c5c4:	2030      	movs	r0, #48	@ 0x30
 800c5c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c5ca:	4422      	add	r2, r4
 800c5cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c5d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c5d4:	3302      	adds	r3, #2
 800c5d6:	e7c7      	b.n	800c568 <_printf_common+0x58>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	4622      	mov	r2, r4
 800c5dc:	4641      	mov	r1, r8
 800c5de:	4638      	mov	r0, r7
 800c5e0:	47c8      	blx	r9
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d0e6      	beq.n	800c5b4 <_printf_common+0xa4>
 800c5e6:	3601      	adds	r6, #1
 800c5e8:	e7d9      	b.n	800c59e <_printf_common+0x8e>
	...

0800c5ec <_printf_i>:
 800c5ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f0:	7e0f      	ldrb	r7, [r1, #24]
 800c5f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5f4:	2f78      	cmp	r7, #120	@ 0x78
 800c5f6:	4691      	mov	r9, r2
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	469a      	mov	sl, r3
 800c5fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c602:	d807      	bhi.n	800c614 <_printf_i+0x28>
 800c604:	2f62      	cmp	r7, #98	@ 0x62
 800c606:	d80a      	bhi.n	800c61e <_printf_i+0x32>
 800c608:	2f00      	cmp	r7, #0
 800c60a:	f000 80d2 	beq.w	800c7b2 <_printf_i+0x1c6>
 800c60e:	2f58      	cmp	r7, #88	@ 0x58
 800c610:	f000 80b9 	beq.w	800c786 <_printf_i+0x19a>
 800c614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c61c:	e03a      	b.n	800c694 <_printf_i+0xa8>
 800c61e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c622:	2b15      	cmp	r3, #21
 800c624:	d8f6      	bhi.n	800c614 <_printf_i+0x28>
 800c626:	a101      	add	r1, pc, #4	@ (adr r1, 800c62c <_printf_i+0x40>)
 800c628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c62c:	0800c685 	.word	0x0800c685
 800c630:	0800c699 	.word	0x0800c699
 800c634:	0800c615 	.word	0x0800c615
 800c638:	0800c615 	.word	0x0800c615
 800c63c:	0800c615 	.word	0x0800c615
 800c640:	0800c615 	.word	0x0800c615
 800c644:	0800c699 	.word	0x0800c699
 800c648:	0800c615 	.word	0x0800c615
 800c64c:	0800c615 	.word	0x0800c615
 800c650:	0800c615 	.word	0x0800c615
 800c654:	0800c615 	.word	0x0800c615
 800c658:	0800c799 	.word	0x0800c799
 800c65c:	0800c6c3 	.word	0x0800c6c3
 800c660:	0800c753 	.word	0x0800c753
 800c664:	0800c615 	.word	0x0800c615
 800c668:	0800c615 	.word	0x0800c615
 800c66c:	0800c7bb 	.word	0x0800c7bb
 800c670:	0800c615 	.word	0x0800c615
 800c674:	0800c6c3 	.word	0x0800c6c3
 800c678:	0800c615 	.word	0x0800c615
 800c67c:	0800c615 	.word	0x0800c615
 800c680:	0800c75b 	.word	0x0800c75b
 800c684:	6833      	ldr	r3, [r6, #0]
 800c686:	1d1a      	adds	r2, r3, #4
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	6032      	str	r2, [r6, #0]
 800c68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c694:	2301      	movs	r3, #1
 800c696:	e09d      	b.n	800c7d4 <_printf_i+0x1e8>
 800c698:	6833      	ldr	r3, [r6, #0]
 800c69a:	6820      	ldr	r0, [r4, #0]
 800c69c:	1d19      	adds	r1, r3, #4
 800c69e:	6031      	str	r1, [r6, #0]
 800c6a0:	0606      	lsls	r6, r0, #24
 800c6a2:	d501      	bpl.n	800c6a8 <_printf_i+0xbc>
 800c6a4:	681d      	ldr	r5, [r3, #0]
 800c6a6:	e003      	b.n	800c6b0 <_printf_i+0xc4>
 800c6a8:	0645      	lsls	r5, r0, #25
 800c6aa:	d5fb      	bpl.n	800c6a4 <_printf_i+0xb8>
 800c6ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6b0:	2d00      	cmp	r5, #0
 800c6b2:	da03      	bge.n	800c6bc <_printf_i+0xd0>
 800c6b4:	232d      	movs	r3, #45	@ 0x2d
 800c6b6:	426d      	negs	r5, r5
 800c6b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6bc:	4859      	ldr	r0, [pc, #356]	@ (800c824 <_printf_i+0x238>)
 800c6be:	230a      	movs	r3, #10
 800c6c0:	e011      	b.n	800c6e6 <_printf_i+0xfa>
 800c6c2:	6821      	ldr	r1, [r4, #0]
 800c6c4:	6833      	ldr	r3, [r6, #0]
 800c6c6:	0608      	lsls	r0, r1, #24
 800c6c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6cc:	d402      	bmi.n	800c6d4 <_printf_i+0xe8>
 800c6ce:	0649      	lsls	r1, r1, #25
 800c6d0:	bf48      	it	mi
 800c6d2:	b2ad      	uxthmi	r5, r5
 800c6d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c6d6:	4853      	ldr	r0, [pc, #332]	@ (800c824 <_printf_i+0x238>)
 800c6d8:	6033      	str	r3, [r6, #0]
 800c6da:	bf14      	ite	ne
 800c6dc:	230a      	movne	r3, #10
 800c6de:	2308      	moveq	r3, #8
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6e6:	6866      	ldr	r6, [r4, #4]
 800c6e8:	60a6      	str	r6, [r4, #8]
 800c6ea:	2e00      	cmp	r6, #0
 800c6ec:	bfa2      	ittt	ge
 800c6ee:	6821      	ldrge	r1, [r4, #0]
 800c6f0:	f021 0104 	bicge.w	r1, r1, #4
 800c6f4:	6021      	strge	r1, [r4, #0]
 800c6f6:	b90d      	cbnz	r5, 800c6fc <_printf_i+0x110>
 800c6f8:	2e00      	cmp	r6, #0
 800c6fa:	d04b      	beq.n	800c794 <_printf_i+0x1a8>
 800c6fc:	4616      	mov	r6, r2
 800c6fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800c702:	fb03 5711 	mls	r7, r3, r1, r5
 800c706:	5dc7      	ldrb	r7, [r0, r7]
 800c708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c70c:	462f      	mov	r7, r5
 800c70e:	42bb      	cmp	r3, r7
 800c710:	460d      	mov	r5, r1
 800c712:	d9f4      	bls.n	800c6fe <_printf_i+0x112>
 800c714:	2b08      	cmp	r3, #8
 800c716:	d10b      	bne.n	800c730 <_printf_i+0x144>
 800c718:	6823      	ldr	r3, [r4, #0]
 800c71a:	07df      	lsls	r7, r3, #31
 800c71c:	d508      	bpl.n	800c730 <_printf_i+0x144>
 800c71e:	6923      	ldr	r3, [r4, #16]
 800c720:	6861      	ldr	r1, [r4, #4]
 800c722:	4299      	cmp	r1, r3
 800c724:	bfde      	ittt	le
 800c726:	2330      	movle	r3, #48	@ 0x30
 800c728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c72c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c730:	1b92      	subs	r2, r2, r6
 800c732:	6122      	str	r2, [r4, #16]
 800c734:	f8cd a000 	str.w	sl, [sp]
 800c738:	464b      	mov	r3, r9
 800c73a:	aa03      	add	r2, sp, #12
 800c73c:	4621      	mov	r1, r4
 800c73e:	4640      	mov	r0, r8
 800c740:	f7ff fee6 	bl	800c510 <_printf_common>
 800c744:	3001      	adds	r0, #1
 800c746:	d14a      	bne.n	800c7de <_printf_i+0x1f2>
 800c748:	f04f 30ff 	mov.w	r0, #4294967295
 800c74c:	b004      	add	sp, #16
 800c74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c752:	6823      	ldr	r3, [r4, #0]
 800c754:	f043 0320 	orr.w	r3, r3, #32
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	4833      	ldr	r0, [pc, #204]	@ (800c828 <_printf_i+0x23c>)
 800c75c:	2778      	movs	r7, #120	@ 0x78
 800c75e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	6831      	ldr	r1, [r6, #0]
 800c766:	061f      	lsls	r7, r3, #24
 800c768:	f851 5b04 	ldr.w	r5, [r1], #4
 800c76c:	d402      	bmi.n	800c774 <_printf_i+0x188>
 800c76e:	065f      	lsls	r7, r3, #25
 800c770:	bf48      	it	mi
 800c772:	b2ad      	uxthmi	r5, r5
 800c774:	6031      	str	r1, [r6, #0]
 800c776:	07d9      	lsls	r1, r3, #31
 800c778:	bf44      	itt	mi
 800c77a:	f043 0320 	orrmi.w	r3, r3, #32
 800c77e:	6023      	strmi	r3, [r4, #0]
 800c780:	b11d      	cbz	r5, 800c78a <_printf_i+0x19e>
 800c782:	2310      	movs	r3, #16
 800c784:	e7ac      	b.n	800c6e0 <_printf_i+0xf4>
 800c786:	4827      	ldr	r0, [pc, #156]	@ (800c824 <_printf_i+0x238>)
 800c788:	e7e9      	b.n	800c75e <_printf_i+0x172>
 800c78a:	6823      	ldr	r3, [r4, #0]
 800c78c:	f023 0320 	bic.w	r3, r3, #32
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	e7f6      	b.n	800c782 <_printf_i+0x196>
 800c794:	4616      	mov	r6, r2
 800c796:	e7bd      	b.n	800c714 <_printf_i+0x128>
 800c798:	6833      	ldr	r3, [r6, #0]
 800c79a:	6825      	ldr	r5, [r4, #0]
 800c79c:	6961      	ldr	r1, [r4, #20]
 800c79e:	1d18      	adds	r0, r3, #4
 800c7a0:	6030      	str	r0, [r6, #0]
 800c7a2:	062e      	lsls	r6, r5, #24
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	d501      	bpl.n	800c7ac <_printf_i+0x1c0>
 800c7a8:	6019      	str	r1, [r3, #0]
 800c7aa:	e002      	b.n	800c7b2 <_printf_i+0x1c6>
 800c7ac:	0668      	lsls	r0, r5, #25
 800c7ae:	d5fb      	bpl.n	800c7a8 <_printf_i+0x1bc>
 800c7b0:	8019      	strh	r1, [r3, #0]
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	6123      	str	r3, [r4, #16]
 800c7b6:	4616      	mov	r6, r2
 800c7b8:	e7bc      	b.n	800c734 <_printf_i+0x148>
 800c7ba:	6833      	ldr	r3, [r6, #0]
 800c7bc:	1d1a      	adds	r2, r3, #4
 800c7be:	6032      	str	r2, [r6, #0]
 800c7c0:	681e      	ldr	r6, [r3, #0]
 800c7c2:	6862      	ldr	r2, [r4, #4]
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f7f3 fd92 	bl	80002f0 <memchr>
 800c7cc:	b108      	cbz	r0, 800c7d2 <_printf_i+0x1e6>
 800c7ce:	1b80      	subs	r0, r0, r6
 800c7d0:	6060      	str	r0, [r4, #4]
 800c7d2:	6863      	ldr	r3, [r4, #4]
 800c7d4:	6123      	str	r3, [r4, #16]
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7dc:	e7aa      	b.n	800c734 <_printf_i+0x148>
 800c7de:	6923      	ldr	r3, [r4, #16]
 800c7e0:	4632      	mov	r2, r6
 800c7e2:	4649      	mov	r1, r9
 800c7e4:	4640      	mov	r0, r8
 800c7e6:	47d0      	blx	sl
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	d0ad      	beq.n	800c748 <_printf_i+0x15c>
 800c7ec:	6823      	ldr	r3, [r4, #0]
 800c7ee:	079b      	lsls	r3, r3, #30
 800c7f0:	d413      	bmi.n	800c81a <_printf_i+0x22e>
 800c7f2:	68e0      	ldr	r0, [r4, #12]
 800c7f4:	9b03      	ldr	r3, [sp, #12]
 800c7f6:	4298      	cmp	r0, r3
 800c7f8:	bfb8      	it	lt
 800c7fa:	4618      	movlt	r0, r3
 800c7fc:	e7a6      	b.n	800c74c <_printf_i+0x160>
 800c7fe:	2301      	movs	r3, #1
 800c800:	4632      	mov	r2, r6
 800c802:	4649      	mov	r1, r9
 800c804:	4640      	mov	r0, r8
 800c806:	47d0      	blx	sl
 800c808:	3001      	adds	r0, #1
 800c80a:	d09d      	beq.n	800c748 <_printf_i+0x15c>
 800c80c:	3501      	adds	r5, #1
 800c80e:	68e3      	ldr	r3, [r4, #12]
 800c810:	9903      	ldr	r1, [sp, #12]
 800c812:	1a5b      	subs	r3, r3, r1
 800c814:	42ab      	cmp	r3, r5
 800c816:	dcf2      	bgt.n	800c7fe <_printf_i+0x212>
 800c818:	e7eb      	b.n	800c7f2 <_printf_i+0x206>
 800c81a:	2500      	movs	r5, #0
 800c81c:	f104 0619 	add.w	r6, r4, #25
 800c820:	e7f5      	b.n	800c80e <_printf_i+0x222>
 800c822:	bf00      	nop
 800c824:	0800c989 	.word	0x0800c989
 800c828:	0800c99a 	.word	0x0800c99a

0800c82c <memmove>:
 800c82c:	4288      	cmp	r0, r1
 800c82e:	b510      	push	{r4, lr}
 800c830:	eb01 0402 	add.w	r4, r1, r2
 800c834:	d902      	bls.n	800c83c <memmove+0x10>
 800c836:	4284      	cmp	r4, r0
 800c838:	4623      	mov	r3, r4
 800c83a:	d807      	bhi.n	800c84c <memmove+0x20>
 800c83c:	1e43      	subs	r3, r0, #1
 800c83e:	42a1      	cmp	r1, r4
 800c840:	d008      	beq.n	800c854 <memmove+0x28>
 800c842:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c84a:	e7f8      	b.n	800c83e <memmove+0x12>
 800c84c:	4402      	add	r2, r0
 800c84e:	4601      	mov	r1, r0
 800c850:	428a      	cmp	r2, r1
 800c852:	d100      	bne.n	800c856 <memmove+0x2a>
 800c854:	bd10      	pop	{r4, pc}
 800c856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c85a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c85e:	e7f7      	b.n	800c850 <memmove+0x24>

0800c860 <_sbrk_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4d06      	ldr	r5, [pc, #24]	@ (800c87c <_sbrk_r+0x1c>)
 800c864:	2300      	movs	r3, #0
 800c866:	4604      	mov	r4, r0
 800c868:	4608      	mov	r0, r1
 800c86a:	602b      	str	r3, [r5, #0]
 800c86c:	f7f4 fea4 	bl	80015b8 <_sbrk>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	d102      	bne.n	800c87a <_sbrk_r+0x1a>
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	b103      	cbz	r3, 800c87a <_sbrk_r+0x1a>
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	24000c98 	.word	0x24000c98

0800c880 <memcpy>:
 800c880:	440a      	add	r2, r1
 800c882:	4291      	cmp	r1, r2
 800c884:	f100 33ff 	add.w	r3, r0, #4294967295
 800c888:	d100      	bne.n	800c88c <memcpy+0xc>
 800c88a:	4770      	bx	lr
 800c88c:	b510      	push	{r4, lr}
 800c88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c892:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c896:	4291      	cmp	r1, r2
 800c898:	d1f9      	bne.n	800c88e <memcpy+0xe>
 800c89a:	bd10      	pop	{r4, pc}

0800c89c <_realloc_r>:
 800c89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a0:	4680      	mov	r8, r0
 800c8a2:	4615      	mov	r5, r2
 800c8a4:	460c      	mov	r4, r1
 800c8a6:	b921      	cbnz	r1, 800c8b2 <_realloc_r+0x16>
 800c8a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	f7ff bc4b 	b.w	800c148 <_malloc_r>
 800c8b2:	b92a      	cbnz	r2, 800c8c0 <_realloc_r+0x24>
 800c8b4:	f7ff fbdc 	bl	800c070 <_free_r>
 800c8b8:	2400      	movs	r4, #0
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c0:	f000 f81a 	bl	800c8f8 <_malloc_usable_size_r>
 800c8c4:	4285      	cmp	r5, r0
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	d802      	bhi.n	800c8d0 <_realloc_r+0x34>
 800c8ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c8ce:	d8f4      	bhi.n	800c8ba <_realloc_r+0x1e>
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	4640      	mov	r0, r8
 800c8d4:	f7ff fc38 	bl	800c148 <_malloc_r>
 800c8d8:	4607      	mov	r7, r0
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d0ec      	beq.n	800c8b8 <_realloc_r+0x1c>
 800c8de:	42b5      	cmp	r5, r6
 800c8e0:	462a      	mov	r2, r5
 800c8e2:	4621      	mov	r1, r4
 800c8e4:	bf28      	it	cs
 800c8e6:	4632      	movcs	r2, r6
 800c8e8:	f7ff ffca 	bl	800c880 <memcpy>
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	4640      	mov	r0, r8
 800c8f0:	f7ff fbbe 	bl	800c070 <_free_r>
 800c8f4:	463c      	mov	r4, r7
 800c8f6:	e7e0      	b.n	800c8ba <_realloc_r+0x1e>

0800c8f8 <_malloc_usable_size_r>:
 800c8f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8fc:	1f18      	subs	r0, r3, #4
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	bfbc      	itt	lt
 800c902:	580b      	ldrlt	r3, [r1, r0]
 800c904:	18c0      	addlt	r0, r0, r3
 800c906:	4770      	bx	lr

0800c908 <_init>:
 800c908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90a:	bf00      	nop
 800c90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c90e:	bc08      	pop	{r3}
 800c910:	469e      	mov	lr, r3
 800c912:	4770      	bx	lr

0800c914 <_fini>:
 800c914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c916:	bf00      	nop
 800c918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c91a:	bc08      	pop	{r3}
 800c91c:	469e      	mov	lr, r3
 800c91e:	4770      	bx	lr
