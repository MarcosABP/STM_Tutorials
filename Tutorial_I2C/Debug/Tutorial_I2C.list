
Tutorial_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0bc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800a35c  0800a35c  0000b35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a564  0800a564  0000b564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a56c  0800a56c  0000b56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a570  0800a570  0000b570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800a574  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800a5d4  0000c060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800a634  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  24000120  0800a694  0000c120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000958  0800a694  0000c958  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce1c  00000000  00000000  0000c14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003132  00000000  00000000  00028f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f11  00000000  00000000  0002d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003884f  00000000  00000000  0002e2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0ee  00000000  00000000  00066b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001629eb  00000000  00000000  00082c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e5619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000584c  00000000  00000000  001e565c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001eaea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a344 	.word	0x0800a344

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800a344 	.word	0x0800a344

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <clean_command_buffer>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char command_buffer[13];

char * clean_command_buffer(char *command) {
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    while (*command == '\r' || *command == '\n') {
 8000688:	e002      	b.n	8000690 <clean_command_buffer+0x10>
        command++;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
    while (*command == '\r' || *command == '\n') {
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b0d      	cmp	r3, #13
 8000696:	d0f8      	beq.n	800068a <clean_command_buffer+0xa>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b0a      	cmp	r3, #10
 800069e:	d0f4      	beq.n	800068a <clean_command_buffer+0xa>
    }
    return command;
 80006a0:	687b      	ldr	r3, [r7, #4]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <read_analog>:

void read_analog(uint8_t channel) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
    uint8_t command_ain;
    uint8_t data;

    switch (channel) {
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d00c      	beq.n	80006da <read_analog+0x2a>
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	dc37      	bgt.n	8000734 <read_analog+0x84>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <read_analog+0x1e>
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d003      	beq.n	80006d4 <read_analog+0x24>
        case 0: command_ain = 0x40; break;
        case 1: command_ain = 0x41; break;
        case 3: command_ain = 0x43; break;
        default: return;
 80006cc:	e032      	b.n	8000734 <read_analog+0x84>
        case 0: command_ain = 0x40; break;
 80006ce:	2340      	movs	r3, #64	@ 0x40
 80006d0:	77fb      	strb	r3, [r7, #31]
 80006d2:	e005      	b.n	80006e0 <read_analog+0x30>
        case 1: command_ain = 0x41; break;
 80006d4:	2341      	movs	r3, #65	@ 0x41
 80006d6:	77fb      	strb	r3, [r7, #31]
 80006d8:	e002      	b.n	80006e0 <read_analog+0x30>
        case 3: command_ain = 0x43; break;
 80006da:	2343      	movs	r3, #67	@ 0x43
 80006dc:	77fb      	strb	r3, [r7, #31]
 80006de:	bf00      	nop
    }

    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)PCF8591_ADDRESS, &command_ain, 1, HAL_MAX_DELAY);
 80006e0:	f107 021f 	add.w	r2, r7, #31
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	2190      	movs	r1, #144	@ 0x90
 80006ee:	4813      	ldr	r0, [pc, #76]	@ (800073c <read_analog+0x8c>)
 80006f0:	f002 fce4 	bl	80030bc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, (uint16_t)PCF8591_ADDRESS, &data, 1, HAL_MAX_DELAY);
 80006f4:	f107 021e 	add.w	r2, r7, #30
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2301      	movs	r3, #1
 8000700:	2190      	movs	r1, #144	@ 0x90
 8000702:	480e      	ldr	r0, [pc, #56]	@ (800073c <read_analog+0x8c>)
 8000704:	f002 fdf2 	bl	80032ec <HAL_I2C_Master_Receive>

    char msg[20];
	sprintf(msg, "AIN%d: %d\n", channel, data);
 8000708:	79fa      	ldrb	r2, [r7, #7]
 800070a:	7fbb      	ldrb	r3, [r7, #30]
 800070c:	f107 0008 	add.w	r0, r7, #8
 8000710:	490b      	ldr	r1, [pc, #44]	@ (8000740 <read_analog+0x90>)
 8000712:	f009 f965 	bl	80099e0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fde0 	bl	80002e0 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	f107 0108 	add.w	r1, r7, #8
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	4805      	ldr	r0, [pc, #20]	@ (8000744 <read_analog+0x94>)
 800072e:	f006 f9ed 	bl	8006b0c <HAL_UART_Transmit>
 8000732:	e000      	b.n	8000736 <read_analog+0x86>
        default: return;
 8000734:	bf00      	nop
}
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	24000224 	.word	0x24000224
 8000740:	0800a35c 	.word	0x0800a35c
 8000744:	24000278 	.word	0x24000278

08000748 <set_dac>:

void set_dac(uint8_t value) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af02      	add	r7, sp, #8
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
    uint8_t command = 0x40;
 8000752:	2340      	movs	r3, #64	@ 0x40
 8000754:	77fb      	strb	r3, [r7, #31]
    uint8_t data[2] = {command, value};
 8000756:	7ffb      	ldrb	r3, [r7, #31]
 8000758:	773b      	strb	r3, [r7, #28]
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	777b      	strb	r3, [r7, #29]

    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)PCF8591_ADDRESS, data, 2, HAL_MAX_DELAY);
 800075e:	f107 021c 	add.w	r2, r7, #28
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2302      	movs	r3, #2
 800076a:	2190      	movs	r1, #144	@ 0x90
 800076c:	480d      	ldr	r0, [pc, #52]	@ (80007a4 <set_dac+0x5c>)
 800076e:	f002 fca5 	bl	80030bc <HAL_I2C_Master_Transmit>

    char msg[20];
    sprintf(msg, "DAC Value: %d\n", value);
 8000772:	79fa      	ldrb	r2, [r7, #7]
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	490b      	ldr	r1, [pc, #44]	@ (80007a8 <set_dac+0x60>)
 800077a:	4618      	mov	r0, r3
 800077c:	f009 f930 	bl	80099e0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fdab 	bl	80002e0 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	b29a      	uxth	r2, r3
 800078e:	f107 0108 	add.w	r1, r7, #8
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <set_dac+0x64>)
 8000798:	f006 f9b8 	bl	8006b0c <HAL_UART_Transmit>
}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	24000224 	.word	0x24000224
 80007a8:	0800a368 	.word	0x0800a368
 80007ac:	24000278 	.word	0x24000278

080007b0 <process_command>:

void process_command(char *command) {
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b098      	sub	sp, #96	@ 0x60
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

	command = clean_command_buffer(command);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff61 	bl	8000680 <clean_command_buffer>
 80007be:	6078      	str	r0, [r7, #4]

    if (strncmp(command, "Read_AIN0", 9) == 0) {
 80007c0:	2209      	movs	r2, #9
 80007c2:	493f      	ldr	r1, [pc, #252]	@ (80008c0 <process_command+0x110>)
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f009 f933 	bl	8009a30 <strncmp>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d103      	bne.n	80007d8 <process_command+0x28>
        read_analog(0);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ff6d 	bl	80006b0 <read_analog>
        }
    } else {
        char error_msg[] = "Comando desconhecido. \n";
        HAL_UART_Transmit(&huart3, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
    }
}
 80007d6:	e06e      	b.n	80008b6 <process_command+0x106>
    } else if (strncmp(command, "Read_AIN1", 9) == 0) {
 80007d8:	2209      	movs	r2, #9
 80007da:	493a      	ldr	r1, [pc, #232]	@ (80008c4 <process_command+0x114>)
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f009 f927 	bl	8009a30 <strncmp>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d103      	bne.n	80007f0 <process_command+0x40>
        read_analog(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff ff61 	bl	80006b0 <read_analog>
}
 80007ee:	e062      	b.n	80008b6 <process_command+0x106>
    } else if (strncmp(command, "Read_AIN3", 9) == 0) {
 80007f0:	2209      	movs	r2, #9
 80007f2:	4935      	ldr	r1, [pc, #212]	@ (80008c8 <process_command+0x118>)
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f009 f91b 	bl	8009a30 <strncmp>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d103      	bne.n	8000808 <process_command+0x58>
        read_analog(3);
 8000800:	2003      	movs	r0, #3
 8000802:	f7ff ff55 	bl	80006b0 <read_analog>
}
 8000806:	e056      	b.n	80008b6 <process_command+0x106>
    } else if (strncmp(command, "Set_DAC_", 8) == 0) {
 8000808:	2208      	movs	r2, #8
 800080a:	4930      	ldr	r1, [pc, #192]	@ (80008cc <process_command+0x11c>)
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f009 f90f 	bl	8009a30 <strncmp>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d136      	bne.n	8000886 <process_command+0xd6>
        long value = strtol(&command[8], &endptr, 10);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3308      	adds	r3, #8
 800081c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000820:	220a      	movs	r2, #10
 8000822:	4618      	mov	r0, r3
 8000824:	f009 f8d2 	bl	80099cc <strtol>
 8000828:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (*endptr == '\0' && value >= 0 && value <= 255) {
 800082a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10b      	bne.n	800084a <process_command+0x9a>
 8000832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000834:	2b00      	cmp	r3, #0
 8000836:	db08      	blt.n	800084a <process_command+0x9a>
 8000838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800083a:	2bff      	cmp	r3, #255	@ 0xff
 800083c:	dc05      	bgt.n	800084a <process_command+0x9a>
            set_dac((uint8_t)value);
 800083e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff80 	bl	8000748 <set_dac>
}
 8000848:	e035      	b.n	80008b6 <process_command+0x106>
            char error_msg[] = "Valor invalido para o DAC. Deve estar entre 0 e 255.\n";
 800084a:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <process_command+0x120>)
 800084c:	f107 0408 	add.w	r4, r7, #8
 8000850:	461d      	mov	r5, r3
 8000852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000862:	6020      	str	r0, [r4, #0]
 8000864:	3404      	adds	r4, #4
 8000866:	8021      	strh	r1, [r4, #0]
            HAL_UART_Transmit(&huart3, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fd37 	bl	80002e0 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f107 0108 	add.w	r1, r7, #8
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	4815      	ldr	r0, [pc, #84]	@ (80008d4 <process_command+0x124>)
 8000880:	f006 f944 	bl	8006b0c <HAL_UART_Transmit>
}
 8000884:	e017      	b.n	80008b6 <process_command+0x106>
        char error_msg[] = "Comando desconhecido. \n";
 8000886:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <process_command+0x128>)
 8000888:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800088c:	461d      	mov	r5, r3
 800088e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000892:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000896:	e884 0003 	stmia.w	r4, {r0, r1}
        HAL_UART_Transmit(&huart3, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 800089a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fd1e 	bl	80002e0 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <process_command+0x124>)
 80008b2:	f006 f92b 	bl	8006b0c <HAL_UART_Transmit>
}
 80008b6:	bf00      	nop
 80008b8:	3760      	adds	r7, #96	@ 0x60
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bdb0      	pop	{r4, r5, r7, pc}
 80008be:	bf00      	nop
 80008c0:	0800a378 	.word	0x0800a378
 80008c4:	0800a384 	.word	0x0800a384
 80008c8:	0800a390 	.word	0x0800a390
 80008cc:	0800a39c 	.word	0x0800a39c
 80008d0:	0800a3a8 	.word	0x0800a3a8
 80008d4:	24000278 	.word	0x24000278
 80008d8:	0800a3e0 	.word	0x0800a3e0

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e0:	f000 fe08 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f81a 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e8:	f000 f9a2 	bl	8000c30 <MX_GPIO_Init>
  MX_ETH_Init();
 80008ec:	f000 f896 	bl	8000a1c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008f0:	f000 f920 	bl	8000b34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008f4:	f000 f96a 	bl	8000bcc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80008f8:	f000 f8dc 	bl	8000ab4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  memset(command_buffer, 0, sizeof(command_buffer));
 80008fc:	220d      	movs	r2, #13
 80008fe:	2100      	movs	r1, #0
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <main+0x38>)
 8000902:	f009 f88d 	bl	8009a20 <memset>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)command_buffer, sizeof(command_buffer) - 1);
 8000906:	220c      	movs	r2, #12
 8000908:	4902      	ldr	r1, [pc, #8]	@ (8000914 <main+0x38>)
 800090a:	4803      	ldr	r0, [pc, #12]	@ (8000918 <main+0x3c>)
 800090c:	f006 f98c 	bl	8006c28 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN 3 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <main+0x34>
 8000914:	240007f0 	.word	0x240007f0
 8000918:	24000278 	.word	0x24000278

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09c      	sub	sp, #112	@ 0x70
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	224c      	movs	r2, #76	@ 0x4c
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f009 f878 	bl	8009a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f009 f872 	bl	8009a20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800093c:	2002      	movs	r0, #2
 800093e:	f003 fa39 	bl	8003db4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b33      	ldr	r3, [pc, #204]	@ (8000a14 <SystemClock_Config+0xf8>)
 8000948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094a:	4a32      	ldr	r2, [pc, #200]	@ (8000a14 <SystemClock_Config+0xf8>)
 800094c:	f023 0301 	bic.w	r3, r3, #1
 8000950:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000952:	4b30      	ldr	r3, [pc, #192]	@ (8000a14 <SystemClock_Config+0xf8>)
 8000954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <SystemClock_Config+0xfc>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000964:	4a2c      	ldr	r2, [pc, #176]	@ (8000a18 <SystemClock_Config+0xfc>)
 8000966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <SystemClock_Config+0xfc>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000978:	bf00      	nop
 800097a:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <SystemClock_Config+0xfc>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000986:	d1f8      	bne.n	800097a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000988:	2303      	movs	r3, #3
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800098c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000992:	2301      	movs	r3, #1
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000996:	2340      	movs	r3, #64	@ 0x40
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	2302      	movs	r3, #2
 80009a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009a6:	2318      	movs	r3, #24
 80009a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ae:	2304      	movs	r3, #4
 80009b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009b6:	230c      	movs	r3, #12
 80009b8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fa3e 	bl	8003e48 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009d2:	f000 fa27 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	233f      	movs	r3, #63	@ 0x3f
 80009d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2101      	movs	r1, #1
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fe7e 	bl	80046fc <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000a06:	f000 fa0d 	bl	8000e24 <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3770      	adds	r7, #112	@ 0x70
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	58000400 	.word	0x58000400
 8000a18:	58024800 	.word	0x58024800

08000a1c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	@ (8000a9c <MX_ETH_Init+0x80>)
 8000a22:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa0 <MX_ETH_Init+0x84>)
 8000a24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_ETH_Init+0x88>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_ETH_Init+0x88>)
 8000a2e:	2280      	movs	r2, #128	@ 0x80
 8000a30:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_ETH_Init+0x88>)
 8000a34:	22e1      	movs	r2, #225	@ 0xe1
 8000a36:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_ETH_Init+0x88>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <MX_ETH_Init+0x88>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_ETH_Init+0x88>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_ETH_Init+0x80>)
 8000a4c:	4a15      	ldr	r2, [pc, #84]	@ (8000aa4 <MX_ETH_Init+0x88>)
 8000a4e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_ETH_Init+0x80>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_ETH_Init+0x80>)
 8000a58:	4a13      	ldr	r2, [pc, #76]	@ (8000aa8 <MX_ETH_Init+0x8c>)
 8000a5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_ETH_Init+0x80>)
 8000a5e:	4a13      	ldr	r2, [pc, #76]	@ (8000aac <MX_ETH_Init+0x90>)
 8000a60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_ETH_Init+0x80>)
 8000a64:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a6a:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <MX_ETH_Init+0x80>)
 8000a6c:	f001 fc8c 	bl	8002388 <HAL_ETH_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a76:	f000 f9d5 	bl	8000e24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a7a:	2238      	movs	r2, #56	@ 0x38
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <MX_ETH_Init+0x94>)
 8000a80:	f008 ffce 	bl	8009a20 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <MX_ETH_Init+0x94>)
 8000a86:	2221      	movs	r2, #33	@ 0x21
 8000a88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_ETH_Init+0x94>)
 8000a8c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a92:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <MX_ETH_Init+0x94>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	24000174 	.word	0x24000174
 8000aa0:	40028000 	.word	0x40028000
 8000aa4:	24000800 	.word	0x24000800
 8000aa8:	240000c0 	.word	0x240000c0
 8000aac:	24000060 	.word	0x24000060
 8000ab0:	2400013c 	.word	0x2400013c

08000ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000aba:	4a1c      	ldr	r2, [pc, #112]	@ (8000b2c <MX_I2C1_Init+0x78>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <MX_I2C1_Init+0x7c>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aee:	480e      	ldr	r0, [pc, #56]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000af0:	f002 fa48 	bl	8002f84 <HAL_I2C_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000afa:	f000 f993 	bl	8000e24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000b02:	f002 ff8f 	bl	8003a24 <HAL_I2CEx_ConfigAnalogFilter>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b0c:	f000 f98a 	bl	8000e24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000b14:	f002 ffd1 	bl	8003aba <HAL_I2CEx_ConfigDigitalFilter>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b1e:	f000 f981 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	24000224 	.word	0x24000224
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	10707dbc 	.word	0x10707dbc

08000b34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b3a:	4a23      	ldr	r2, [pc, #140]	@ (8000bc8 <MX_USART3_UART_Init+0x94>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7c:	4811      	ldr	r0, [pc, #68]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b7e:	f005 ff75 	bl	8006a6c <HAL_UART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b88:	f000 f94c 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b90:	f008 facf 	bl	8009132 <HAL_UARTEx_SetTxFifoThreshold>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9a:	f000 f943 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4808      	ldr	r0, [pc, #32]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000ba2:	f008 fb04 	bl	80091ae <HAL_UARTEx_SetRxFifoThreshold>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 f93a 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000bb2:	f008 fa85 	bl	80090c0 <HAL_UARTEx_DisableFifoMode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 f932 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000278 	.word	0x24000278
 8000bc8:	40004800 	.word	0x40004800

08000bcc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd2:	4a16      	ldr	r2, [pc, #88]	@ (8000c2c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd8:	2209      	movs	r2, #9
 8000bda:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c14:	f002 ff9d 	bl	8003b52 <HAL_PCD_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c1e:	f000 f901 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2400030c 	.word	0x2400030c
 8000c2c:	40080000 	.word	0x40080000

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	@ 0x30
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b62      	ldr	r3, [pc, #392]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	4a60      	ldr	r2, [pc, #384]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c56:	4b5e      	ldr	r3, [pc, #376]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c64:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	4a59      	ldr	r2, [pc, #356]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c74:	4b56      	ldr	r3, [pc, #344]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b53      	ldr	r3, [pc, #332]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	4a51      	ldr	r2, [pc, #324]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c92:	4b4f      	ldr	r3, [pc, #316]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb0:	4b47      	ldr	r3, [pc, #284]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	4b44      	ldr	r3, [pc, #272]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	4a42      	ldr	r2, [pc, #264]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cce:	4b40      	ldr	r3, [pc, #256]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	f003 0308 	and.w	r3, r3, #8
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cec:	4b38      	ldr	r3, [pc, #224]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfa:	4b35      	ldr	r3, [pc, #212]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d00:	4a33      	ldr	r2, [pc, #204]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0a:	4b31      	ldr	r3, [pc, #196]	@ (8000dd0 <MX_GPIO_Init+0x1a0>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d1e:	482d      	ldr	r0, [pc, #180]	@ (8000dd4 <MX_GPIO_Init+0x1a4>)
 8000d20:	f002 f916 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d2a:	482b      	ldr	r0, [pc, #172]	@ (8000dd8 <MX_GPIO_Init+0x1a8>)
 8000d2c:	f002 f910 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2102      	movs	r1, #2
 8000d34:	4829      	ldr	r0, [pc, #164]	@ (8000ddc <MX_GPIO_Init+0x1ac>)
 8000d36:	f002 f90b 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4824      	ldr	r0, [pc, #144]	@ (8000de0 <MX_GPIO_Init+0x1b0>)
 8000d50:	f001 ff4e 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d54:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4819      	ldr	r0, [pc, #100]	@ (8000dd4 <MX_GPIO_Init+0x1a4>)
 8000d6e:	f001 ff3f 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4813      	ldr	r0, [pc, #76]	@ (8000dd8 <MX_GPIO_Init+0x1a8>)
 8000d8c:	f001 ff30 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d90:	2380      	movs	r3, #128	@ 0x80
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	480f      	ldr	r0, [pc, #60]	@ (8000de4 <MX_GPIO_Init+0x1b4>)
 8000da6:	f001 ff23 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <MX_GPIO_Init+0x1ac>)
 8000dc2:	f001 ff15 	bl	8002bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3730      	adds	r7, #48	@ 0x30
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020400 	.word	0x58020400
 8000dd8:	58020c00 	.word	0x58020c00
 8000ddc:	58021000 	.word	0x58021000
 8000de0:	58020800 	.word	0x58020800
 8000de4:	58021800 	.word	0x58021800

08000de8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <HAL_UART_RxCpltCallback+0x34>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d10c      	bne.n	8000e12 <HAL_UART_RxCpltCallback+0x2a>
		process_command(command_buffer);
 8000df8:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <HAL_UART_RxCpltCallback+0x38>)
 8000dfa:	f7ff fcd9 	bl	80007b0 <process_command>
		memset(command_buffer, 0, sizeof(command_buffer));
 8000dfe:	220d      	movs	r2, #13
 8000e00:	2100      	movs	r1, #0
 8000e02:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <HAL_UART_RxCpltCallback+0x38>)
 8000e04:	f008 fe0c 	bl	8009a20 <memset>
        HAL_UART_Receive_IT(&huart3, (uint8_t*)command_buffer, sizeof(command_buffer) - 1);
 8000e08:	220c      	movs	r2, #12
 8000e0a:	4905      	ldr	r1, [pc, #20]	@ (8000e20 <HAL_UART_RxCpltCallback+0x38>)
 8000e0c:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <HAL_UART_RxCpltCallback+0x34>)
 8000e0e:	f005 ff0b 	bl	8006c28 <HAL_UART_Receive_IT>
	}
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	24000278 	.word	0x24000278
 8000e20:	240007f0 	.word	0x240007f0

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <Error_Handler+0x8>

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_MspInit+0x30>)
 8000e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e3c:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_MspInit+0x30>)
 8000e3e:	f043 0302 	orr.w	r3, r3, #2
 8000e42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_MspInit+0x30>)
 8000e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	58024400 	.word	0x58024400

08000e64 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	@ 0x38
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a59      	ldr	r2, [pc, #356]	@ (8000fe8 <HAL_ETH_MspInit+0x184>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	f040 80ab 	bne.w	8000fde <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e88:	4b58      	ldr	r3, [pc, #352]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e8e:	4a57      	ldr	r2, [pc, #348]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e94:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e98:	4b54      	ldr	r3, [pc, #336]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ea2:	623b      	str	r3, [r7, #32]
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ea6:	4b51      	ldr	r3, [pc, #324]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eac:	4a4f      	ldr	r2, [pc, #316]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ec4:	4b49      	ldr	r3, [pc, #292]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000ec6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eca:	4a48      	ldr	r2, [pc, #288]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ed4:	4b45      	ldr	r3, [pc, #276]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000ed6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b42      	ldr	r3, [pc, #264]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee8:	4a40      	ldr	r2, [pc, #256]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b3a      	ldr	r3, [pc, #232]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f06:	4a39      	ldr	r2, [pc, #228]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f10:	4b36      	ldr	r3, [pc, #216]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b33      	ldr	r3, [pc, #204]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f24:	4a31      	ldr	r2, [pc, #196]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f42:	4a2a      	ldr	r2, [pc, #168]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f5a:	2332      	movs	r3, #50	@ 0x32
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	481e      	ldr	r0, [pc, #120]	@ (8000ff0 <HAL_ETH_MspInit+0x18c>)
 8000f76:	f001 fe3b 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f7a:	2386      	movs	r3, #134	@ 0x86
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8a:	230b      	movs	r3, #11
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	4817      	ldr	r0, [pc, #92]	@ (8000ff4 <HAL_ETH_MspInit+0x190>)
 8000f96:	f001 fe2b 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fac:	230b      	movs	r3, #11
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4810      	ldr	r0, [pc, #64]	@ (8000ff8 <HAL_ETH_MspInit+0x194>)
 8000fb8:	f001 fe1a 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fbc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fce:	230b      	movs	r3, #11
 8000fd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4808      	ldr	r0, [pc, #32]	@ (8000ffc <HAL_ETH_MspInit+0x198>)
 8000fda:	f001 fe09 	bl	8002bf0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000fde:	bf00      	nop
 8000fe0:	3738      	adds	r7, #56	@ 0x38
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40028000 	.word	0x40028000
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	58020800 	.word	0x58020800
 8000ff4:	58020000 	.word	0x58020000
 8000ff8:	58020400 	.word	0x58020400
 8000ffc:	58021800 	.word	0x58021800

08001000 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ba      	sub	sp, #232	@ 0xe8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	22c0      	movs	r2, #192	@ 0xc0
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f008 fcfd 	bl	8009a20 <memset>
  if(hi2c->Instance==I2C1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <HAL_I2C_MspInit+0xc8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d146      	bne.n	80010be <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001030:	f04f 0208 	mov.w	r2, #8
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fee4 	bl	8004e14 <HAL_RCCEx_PeriphCLKConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001052:	f7ff fee7 	bl	8000e24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105c:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001074:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001078:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107c:	2312      	movs	r3, #18
 800107e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001082:	2301      	movs	r3, #1
 8001084:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108e:	2304      	movs	r3, #4
 8001090:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001098:	4619      	mov	r1, r3
 800109a:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <HAL_I2C_MspInit+0xd0>)
 800109c:	f001 fda8 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 80010a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010a6:	4a09      	ldr	r2, [pc, #36]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 80010a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 80010b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010be:	bf00      	nop
 80010c0:	37e8      	adds	r7, #232	@ 0xe8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40005400 	.word	0x40005400
 80010cc:	58024400 	.word	0x58024400
 80010d0:	58020400 	.word	0x58020400

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ba      	sub	sp, #232	@ 0xe8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	22c0      	movs	r2, #192	@ 0xc0
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f008 fc93 	bl	8009a20 <memset>
  if(huart->Instance==USART3)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a2b      	ldr	r2, [pc, #172]	@ (80011ac <HAL_UART_MspInit+0xd8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d14e      	bne.n	80011a2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001104:	f04f 0202 	mov.w	r2, #2
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fe7a 	bl	8004e14 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001126:	f7ff fe7d 	bl	8000e24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800112a:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <HAL_UART_MspInit+0xdc>)
 800112c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001130:	4a1f      	ldr	r2, [pc, #124]	@ (80011b0 <HAL_UART_MspInit+0xdc>)
 8001132:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001136:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800113a:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <HAL_UART_MspInit+0xdc>)
 800113c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_UART_MspInit+0xdc>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <HAL_UART_MspInit+0xdc>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <HAL_UART_MspInit+0xdc>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001166:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800116a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001180:	2307      	movs	r3, #7
 8001182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800118a:	4619      	mov	r1, r3
 800118c:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <HAL_UART_MspInit+0xe0>)
 800118e:	f001 fd2f 	bl	8002bf0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2027      	movs	r0, #39	@ 0x27
 8001198:	f000 fb5d 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800119c:	2027      	movs	r0, #39	@ 0x27
 800119e:	f000 fb74 	bl	800188a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011a2:	bf00      	nop
 80011a4:	37e8      	adds	r7, #232	@ 0xe8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40004800 	.word	0x40004800
 80011b0:	58024400 	.word	0x58024400
 80011b4:	58020c00 	.word	0x58020c00

080011b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0ba      	sub	sp, #232	@ 0xe8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	22c0      	movs	r2, #192	@ 0xc0
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f008 fc21 	bl	8009a20 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a30      	ldr	r2, [pc, #192]	@ (80012a4 <HAL_PCD_MspInit+0xec>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d159      	bne.n	800129c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4618      	mov	r0, r3
 8001202:	f003 fe07 	bl	8004e14 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800120c:	f7ff fe0a 	bl	8000e24 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001210:	f002 fe0a 	bl	8003e28 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <HAL_PCD_MspInit+0xf0>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121a:	4a23      	ldr	r2, [pc, #140]	@ (80012a8 <HAL_PCD_MspInit+0xf0>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001224:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_PCD_MspInit+0xf0>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001232:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001236:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800124c:	230a      	movs	r3, #10
 800124e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001256:	4619      	mov	r1, r3
 8001258:	4814      	ldr	r0, [pc, #80]	@ (80012ac <HAL_PCD_MspInit+0xf4>)
 800125a:	f001 fcc9 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800125e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001262:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001276:	4619      	mov	r1, r3
 8001278:	480c      	ldr	r0, [pc, #48]	@ (80012ac <HAL_PCD_MspInit+0xf4>)
 800127a:	f001 fcb9 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_PCD_MspInit+0xf0>)
 8001280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001284:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <HAL_PCD_MspInit+0xf0>)
 8001286:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800128a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_PCD_MspInit+0xf0>)
 8001290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800129c:	bf00      	nop
 800129e:	37e8      	adds	r7, #232	@ 0xe8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40080000 	.word	0x40080000
 80012a8:	58024400 	.word	0x58024400
 80012ac:	58020000 	.word	0x58020000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <NMI_Handler+0x4>

080012b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <MemManage_Handler+0x4>

080012c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001306:	f000 f967 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <USART3_IRQHandler+0x10>)
 8001316:	f005 fcd3 	bl	8006cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	24000278 	.word	0x24000278

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f008 fb7e 	bl	8009a54 <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	24080000 	.word	0x24080000
 8001384:	00000400 	.word	0x00000400
 8001388:	24000808 	.word	0x24000808
 800138c:	24000958 	.word	0x24000958

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001394:	4b37      	ldr	r3, [pc, #220]	@ (8001474 <SystemInit+0xe4>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139a:	4a36      	ldr	r2, [pc, #216]	@ (8001474 <SystemInit+0xe4>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a4:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <SystemInit+0xe8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	2b06      	cmp	r3, #6
 80013ae:	d807      	bhi.n	80013c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013b0:	4b31      	ldr	r3, [pc, #196]	@ (8001478 <SystemInit+0xe8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 030f 	bic.w	r3, r3, #15
 80013b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001478 <SystemInit+0xe8>)
 80013ba:	f043 0307 	orr.w	r3, r3, #7
 80013be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013c0:	4b2e      	ldr	r3, [pc, #184]	@ (800147c <SystemInit+0xec>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2d      	ldr	r2, [pc, #180]	@ (800147c <SystemInit+0xec>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <SystemInit+0xec>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <SystemInit+0xec>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4929      	ldr	r1, [pc, #164]	@ (800147c <SystemInit+0xec>)
 80013d8:	4b29      	ldr	r3, [pc, #164]	@ (8001480 <SystemInit+0xf0>)
 80013da:	4013      	ands	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013de:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <SystemInit+0xe8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ea:	4b23      	ldr	r3, [pc, #140]	@ (8001478 <SystemInit+0xe8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 030f 	bic.w	r3, r3, #15
 80013f2:	4a21      	ldr	r2, [pc, #132]	@ (8001478 <SystemInit+0xe8>)
 80013f4:	f043 0307 	orr.w	r3, r3, #7
 80013f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <SystemInit+0xec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001400:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <SystemInit+0xec>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <SystemInit+0xec>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <SystemInit+0xec>)
 800140e:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <SystemInit+0xf4>)
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <SystemInit+0xec>)
 8001414:	4a1c      	ldr	r2, [pc, #112]	@ (8001488 <SystemInit+0xf8>)
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001418:	4b18      	ldr	r3, [pc, #96]	@ (800147c <SystemInit+0xec>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <SystemInit+0xfc>)
 800141c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <SystemInit+0xec>)
 8001420:	2200      	movs	r2, #0
 8001422:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001424:	4b15      	ldr	r3, [pc, #84]	@ (800147c <SystemInit+0xec>)
 8001426:	4a19      	ldr	r2, [pc, #100]	@ (800148c <SystemInit+0xfc>)
 8001428:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <SystemInit+0xec>)
 800142c:	2200      	movs	r2, #0
 800142e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <SystemInit+0xec>)
 8001432:	4a16      	ldr	r2, [pc, #88]	@ (800148c <SystemInit+0xfc>)
 8001434:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <SystemInit+0xec>)
 8001438:	2200      	movs	r2, #0
 800143a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <SystemInit+0xec>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0e      	ldr	r2, [pc, #56]	@ (800147c <SystemInit+0xec>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001446:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <SystemInit+0xec>)
 800144a:	2200      	movs	r2, #0
 800144c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <SystemInit+0x100>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <SystemInit+0x104>)
 8001454:	4013      	ands	r3, r2
 8001456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800145a:	d202      	bcs.n	8001462 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <SystemInit+0x108>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <SystemInit+0x10c>)
 8001464:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	52002000 	.word	0x52002000
 800147c:	58024400 	.word	0x58024400
 8001480:	eaf6ed7f 	.word	0xeaf6ed7f
 8001484:	02020200 	.word	0x02020200
 8001488:	01ff0000 	.word	0x01ff0000
 800148c:	01010280 	.word	0x01010280
 8001490:	5c001000 	.word	0x5c001000
 8001494:	ffff0000 	.word	0xffff0000
 8001498:	51008108 	.word	0x51008108
 800149c:	52004000 	.word	0x52004000

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014a4:	f7ff ff74 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	@ (80014e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	@ (80014ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f008 fac7 	bl	8009a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fa03 	bl	80008dc <main>
  bx  lr
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014e0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80014e4:	0800a574 	.word	0x0800a574
  ldr r2, =_sbss
 80014e8:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80014ec:	24000958 	.word	0x24000958

080014f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC3_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fa:	2003      	movs	r0, #3
 80014fc:	f000 f9a0 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001500:	f003 fab2 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8001504:	4602      	mov	r2, r0
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_Init+0x68>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	4913      	ldr	r1, [pc, #76]	@ (8001560 <HAL_Init+0x6c>)
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	f003 031f 	and.w	r3, r3, #31
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <HAL_Init+0x68>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <HAL_Init+0x6c>)
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	4a0b      	ldr	r2, [pc, #44]	@ (8001564 <HAL_Init+0x70>)
 8001536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001538:	4a0b      	ldr	r2, [pc, #44]	@ (8001568 <HAL_Init+0x74>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f814 	bl	800156c <HAL_InitTick>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e002      	b.n	8001554 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800154e:	f7ff fc6f 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	58024400 	.word	0x58024400
 8001560:	0800a3f8 	.word	0x0800a3f8
 8001564:	24000004 	.word	0x24000004
 8001568:	24000000 	.word	0x24000000

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_InitTick+0x60>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e021      	b.n	80015c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <HAL_InitTick+0x64>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_InitTick+0x60>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f985 	bl	80018a6 <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 f94f 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <HAL_InitTick+0x68>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2400000c 	.word	0x2400000c
 80015d0:	24000000 	.word	0x24000000
 80015d4:	24000008 	.word	0x24000008

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2400000c 	.word	0x2400000c
 80015fc:	2400080c 	.word	0x2400080c

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	@ (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	2400080c 	.word	0x2400080c

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff ffee 	bl	8001600 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_Delay+0x44>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffde 	bl	8001600 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2400000c 	.word	0x2400000c

08001660 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <HAL_GetREVID+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0c1b      	lsrs	r3, r3, #16
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	5c001000 	.word	0x5c001000

08001678 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001688:	4904      	ldr	r1, [pc, #16]	@ (800169c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	58000400 	.word	0x58000400

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <__NVIC_SetPriorityGrouping+0x40>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <__NVIC_SetPriorityGrouping+0x40>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00
 80016e4:	05fa0000 	.word	0x05fa0000

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	@ (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	@ (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	@ (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	@ (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff29 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff40 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff90 	bl	8001794 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5f 	bl	8001740 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff33 	bl	8001704 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa4 	bl	80017fc <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff fe9a 	bl	8001600 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e2dc      	b.n	8001e92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d008      	beq.n	80018f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2280      	movs	r2, #128	@ 0x80
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e2cd      	b.n	8001e92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a76      	ldr	r2, [pc, #472]	@ (8001ad4 <HAL_DMA_Abort+0x214>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d04a      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a74      	ldr	r2, [pc, #464]	@ (8001ad8 <HAL_DMA_Abort+0x218>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d045      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a73      	ldr	r2, [pc, #460]	@ (8001adc <HAL_DMA_Abort+0x21c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d040      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a71      	ldr	r2, [pc, #452]	@ (8001ae0 <HAL_DMA_Abort+0x220>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d03b      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a70      	ldr	r2, [pc, #448]	@ (8001ae4 <HAL_DMA_Abort+0x224>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d036      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae8 <HAL_DMA_Abort+0x228>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d031      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6d      	ldr	r2, [pc, #436]	@ (8001aec <HAL_DMA_Abort+0x22c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d02c      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6b      	ldr	r2, [pc, #428]	@ (8001af0 <HAL_DMA_Abort+0x230>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d027      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a6a      	ldr	r2, [pc, #424]	@ (8001af4 <HAL_DMA_Abort+0x234>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d022      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a68      	ldr	r2, [pc, #416]	@ (8001af8 <HAL_DMA_Abort+0x238>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d01d      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a67      	ldr	r2, [pc, #412]	@ (8001afc <HAL_DMA_Abort+0x23c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d018      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a65      	ldr	r2, [pc, #404]	@ (8001b00 <HAL_DMA_Abort+0x240>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a64      	ldr	r2, [pc, #400]	@ (8001b04 <HAL_DMA_Abort+0x244>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00e      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a62      	ldr	r2, [pc, #392]	@ (8001b08 <HAL_DMA_Abort+0x248>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d009      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a61      	ldr	r2, [pc, #388]	@ (8001b0c <HAL_DMA_Abort+0x24c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d004      	beq.n	8001996 <HAL_DMA_Abort+0xd6>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a5f      	ldr	r2, [pc, #380]	@ (8001b10 <HAL_DMA_Abort+0x250>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_DMA_Abort+0xda>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_DMA_Abort+0xdc>
 800199a:	2300      	movs	r3, #0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 021e 	bic.w	r2, r2, #30
 80019ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	e00a      	b.n	80019de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 020e 	bic.w	r2, r2, #14
 80019d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ad4 <HAL_DMA_Abort+0x214>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d072      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a3a      	ldr	r2, [pc, #232]	@ (8001ad8 <HAL_DMA_Abort+0x218>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d06d      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a39      	ldr	r2, [pc, #228]	@ (8001adc <HAL_DMA_Abort+0x21c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d068      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a37      	ldr	r2, [pc, #220]	@ (8001ae0 <HAL_DMA_Abort+0x220>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d063      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ae4 <HAL_DMA_Abort+0x224>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d05e      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a34      	ldr	r2, [pc, #208]	@ (8001ae8 <HAL_DMA_Abort+0x228>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d059      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a33      	ldr	r2, [pc, #204]	@ (8001aec <HAL_DMA_Abort+0x22c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d054      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a31      	ldr	r2, [pc, #196]	@ (8001af0 <HAL_DMA_Abort+0x230>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d04f      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a30      	ldr	r2, [pc, #192]	@ (8001af4 <HAL_DMA_Abort+0x234>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d04a      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8001af8 <HAL_DMA_Abort+0x238>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d045      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a2d      	ldr	r2, [pc, #180]	@ (8001afc <HAL_DMA_Abort+0x23c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d040      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a2b      	ldr	r2, [pc, #172]	@ (8001b00 <HAL_DMA_Abort+0x240>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d03b      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8001b04 <HAL_DMA_Abort+0x244>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d036      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a28      	ldr	r2, [pc, #160]	@ (8001b08 <HAL_DMA_Abort+0x248>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d031      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a27      	ldr	r2, [pc, #156]	@ (8001b0c <HAL_DMA_Abort+0x24c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d02c      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a25      	ldr	r2, [pc, #148]	@ (8001b10 <HAL_DMA_Abort+0x250>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d027      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a24      	ldr	r2, [pc, #144]	@ (8001b14 <HAL_DMA_Abort+0x254>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a22      	ldr	r2, [pc, #136]	@ (8001b18 <HAL_DMA_Abort+0x258>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01d      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a21      	ldr	r2, [pc, #132]	@ (8001b1c <HAL_DMA_Abort+0x25c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d018      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b20 <HAL_DMA_Abort+0x260>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8001b24 <HAL_DMA_Abort+0x264>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00e      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b28 <HAL_DMA_Abort+0x268>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d009      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1b      	ldr	r2, [pc, #108]	@ (8001b2c <HAL_DMA_Abort+0x26c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d004      	beq.n	8001ace <HAL_DMA_Abort+0x20e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a19      	ldr	r2, [pc, #100]	@ (8001b30 <HAL_DMA_Abort+0x270>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d132      	bne.n	8001b34 <HAL_DMA_Abort+0x274>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e031      	b.n	8001b36 <HAL_DMA_Abort+0x276>
 8001ad2:	bf00      	nop
 8001ad4:	40020010 	.word	0x40020010
 8001ad8:	40020028 	.word	0x40020028
 8001adc:	40020040 	.word	0x40020040
 8001ae0:	40020058 	.word	0x40020058
 8001ae4:	40020070 	.word	0x40020070
 8001ae8:	40020088 	.word	0x40020088
 8001aec:	400200a0 	.word	0x400200a0
 8001af0:	400200b8 	.word	0x400200b8
 8001af4:	40020410 	.word	0x40020410
 8001af8:	40020428 	.word	0x40020428
 8001afc:	40020440 	.word	0x40020440
 8001b00:	40020458 	.word	0x40020458
 8001b04:	40020470 	.word	0x40020470
 8001b08:	40020488 	.word	0x40020488
 8001b0c:	400204a0 	.word	0x400204a0
 8001b10:	400204b8 	.word	0x400204b8
 8001b14:	58025408 	.word	0x58025408
 8001b18:	5802541c 	.word	0x5802541c
 8001b1c:	58025430 	.word	0x58025430
 8001b20:	58025444 	.word	0x58025444
 8001b24:	58025458 	.word	0x58025458
 8001b28:	5802546c 	.word	0x5802546c
 8001b2c:	58025480 	.word	0x58025480
 8001b30:	58025494 	.word	0x58025494
 8001b34:	2300      	movs	r3, #0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6d      	ldr	r2, [pc, #436]	@ (8001d04 <HAL_DMA_Abort+0x444>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d04a      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6b      	ldr	r2, [pc, #428]	@ (8001d08 <HAL_DMA_Abort+0x448>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d045      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6a      	ldr	r2, [pc, #424]	@ (8001d0c <HAL_DMA_Abort+0x44c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d040      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a68      	ldr	r2, [pc, #416]	@ (8001d10 <HAL_DMA_Abort+0x450>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d03b      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a67      	ldr	r2, [pc, #412]	@ (8001d14 <HAL_DMA_Abort+0x454>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d036      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a65      	ldr	r2, [pc, #404]	@ (8001d18 <HAL_DMA_Abort+0x458>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d031      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a64      	ldr	r2, [pc, #400]	@ (8001d1c <HAL_DMA_Abort+0x45c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d02c      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a62      	ldr	r2, [pc, #392]	@ (8001d20 <HAL_DMA_Abort+0x460>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d027      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a61      	ldr	r2, [pc, #388]	@ (8001d24 <HAL_DMA_Abort+0x464>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d022      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a5f      	ldr	r2, [pc, #380]	@ (8001d28 <HAL_DMA_Abort+0x468>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01d      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8001d2c <HAL_DMA_Abort+0x46c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d018      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a5c      	ldr	r2, [pc, #368]	@ (8001d30 <HAL_DMA_Abort+0x470>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d34 <HAL_DMA_Abort+0x474>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00e      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a59      	ldr	r2, [pc, #356]	@ (8001d38 <HAL_DMA_Abort+0x478>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d009      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a58      	ldr	r2, [pc, #352]	@ (8001d3c <HAL_DMA_Abort+0x47c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d004      	beq.n	8001bea <HAL_DMA_Abort+0x32a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a56      	ldr	r2, [pc, #344]	@ (8001d40 <HAL_DMA_Abort+0x480>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d108      	bne.n	8001bfc <HAL_DMA_Abort+0x33c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_DMA_Abort+0x34c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c0c:	e013      	b.n	8001c36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c0e:	f7ff fcf7 	bl	8001600 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d90c      	bls.n	8001c36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2203      	movs	r2, #3
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e12d      	b.n	8001e92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1e5      	bne.n	8001c0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2f      	ldr	r2, [pc, #188]	@ (8001d04 <HAL_DMA_Abort+0x444>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d04a      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2d      	ldr	r2, [pc, #180]	@ (8001d08 <HAL_DMA_Abort+0x448>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d045      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d0c <HAL_DMA_Abort+0x44c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d040      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a2a      	ldr	r2, [pc, #168]	@ (8001d10 <HAL_DMA_Abort+0x450>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d03b      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a29      	ldr	r2, [pc, #164]	@ (8001d14 <HAL_DMA_Abort+0x454>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d036      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a27      	ldr	r2, [pc, #156]	@ (8001d18 <HAL_DMA_Abort+0x458>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d031      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a26      	ldr	r2, [pc, #152]	@ (8001d1c <HAL_DMA_Abort+0x45c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d02c      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a24      	ldr	r2, [pc, #144]	@ (8001d20 <HAL_DMA_Abort+0x460>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d027      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a23      	ldr	r2, [pc, #140]	@ (8001d24 <HAL_DMA_Abort+0x464>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d022      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a21      	ldr	r2, [pc, #132]	@ (8001d28 <HAL_DMA_Abort+0x468>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01d      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a20      	ldr	r2, [pc, #128]	@ (8001d2c <HAL_DMA_Abort+0x46c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d018      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d30 <HAL_DMA_Abort+0x470>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001d34 <HAL_DMA_Abort+0x474>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00e      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d38 <HAL_DMA_Abort+0x478>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d009      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d3c <HAL_DMA_Abort+0x47c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d004      	beq.n	8001ce2 <HAL_DMA_Abort+0x422>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a18      	ldr	r2, [pc, #96]	@ (8001d40 <HAL_DMA_Abort+0x480>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_DMA_Abort+0x426>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_DMA_Abort+0x428>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d02b      	beq.n	8001d44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	223f      	movs	r2, #63	@ 0x3f
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	e02a      	b.n	8001d5a <HAL_DMA_Abort+0x49a>
 8001d04:	40020010 	.word	0x40020010
 8001d08:	40020028 	.word	0x40020028
 8001d0c:	40020040 	.word	0x40020040
 8001d10:	40020058 	.word	0x40020058
 8001d14:	40020070 	.word	0x40020070
 8001d18:	40020088 	.word	0x40020088
 8001d1c:	400200a0 	.word	0x400200a0
 8001d20:	400200b8 	.word	0x400200b8
 8001d24:	40020410 	.word	0x40020410
 8001d28:	40020428 	.word	0x40020428
 8001d2c:	40020440 	.word	0x40020440
 8001d30:	40020458 	.word	0x40020458
 8001d34:	40020470 	.word	0x40020470
 8001d38:	40020488 	.word	0x40020488
 8001d3c:	400204a0 	.word	0x400204a0
 8001d40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2201      	movs	r2, #1
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a4f      	ldr	r2, [pc, #316]	@ (8001e9c <HAL_DMA_Abort+0x5dc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d072      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea0 <HAL_DMA_Abort+0x5e0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d06d      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea4 <HAL_DMA_Abort+0x5e4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d068      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ea8 <HAL_DMA_Abort+0x5e8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d063      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a49      	ldr	r2, [pc, #292]	@ (8001eac <HAL_DMA_Abort+0x5ec>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d05e      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a47      	ldr	r2, [pc, #284]	@ (8001eb0 <HAL_DMA_Abort+0x5f0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d059      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a46      	ldr	r2, [pc, #280]	@ (8001eb4 <HAL_DMA_Abort+0x5f4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d054      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a44      	ldr	r2, [pc, #272]	@ (8001eb8 <HAL_DMA_Abort+0x5f8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d04f      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a43      	ldr	r2, [pc, #268]	@ (8001ebc <HAL_DMA_Abort+0x5fc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d04a      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a41      	ldr	r2, [pc, #260]	@ (8001ec0 <HAL_DMA_Abort+0x600>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d045      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a40      	ldr	r2, [pc, #256]	@ (8001ec4 <HAL_DMA_Abort+0x604>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d040      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ec8 <HAL_DMA_Abort+0x608>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d03b      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001ecc <HAL_DMA_Abort+0x60c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d036      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed0 <HAL_DMA_Abort+0x610>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d031      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a3a      	ldr	r2, [pc, #232]	@ (8001ed4 <HAL_DMA_Abort+0x614>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d02c      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a38      	ldr	r2, [pc, #224]	@ (8001ed8 <HAL_DMA_Abort+0x618>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d027      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a37      	ldr	r2, [pc, #220]	@ (8001edc <HAL_DMA_Abort+0x61c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a35      	ldr	r2, [pc, #212]	@ (8001ee0 <HAL_DMA_Abort+0x620>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01d      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a34      	ldr	r2, [pc, #208]	@ (8001ee4 <HAL_DMA_Abort+0x624>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d018      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a32      	ldr	r2, [pc, #200]	@ (8001ee8 <HAL_DMA_Abort+0x628>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a31      	ldr	r2, [pc, #196]	@ (8001eec <HAL_DMA_Abort+0x62c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00e      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef0 <HAL_DMA_Abort+0x630>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef4 <HAL_DMA_Abort+0x634>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_DMA_Abort+0x58a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef8 <HAL_DMA_Abort+0x638>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA_Abort+0x58e>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_DMA_Abort+0x590>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d015      	beq.n	8001e80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00c      	beq.n	8001e80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40020010 	.word	0x40020010
 8001ea0:	40020028 	.word	0x40020028
 8001ea4:	40020040 	.word	0x40020040
 8001ea8:	40020058 	.word	0x40020058
 8001eac:	40020070 	.word	0x40020070
 8001eb0:	40020088 	.word	0x40020088
 8001eb4:	400200a0 	.word	0x400200a0
 8001eb8:	400200b8 	.word	0x400200b8
 8001ebc:	40020410 	.word	0x40020410
 8001ec0:	40020428 	.word	0x40020428
 8001ec4:	40020440 	.word	0x40020440
 8001ec8:	40020458 	.word	0x40020458
 8001ecc:	40020470 	.word	0x40020470
 8001ed0:	40020488 	.word	0x40020488
 8001ed4:	400204a0 	.word	0x400204a0
 8001ed8:	400204b8 	.word	0x400204b8
 8001edc:	58025408 	.word	0x58025408
 8001ee0:	5802541c 	.word	0x5802541c
 8001ee4:	58025430 	.word	0x58025430
 8001ee8:	58025444 	.word	0x58025444
 8001eec:	58025458 	.word	0x58025458
 8001ef0:	5802546c 	.word	0x5802546c
 8001ef4:	58025480 	.word	0x58025480
 8001ef8:	58025494 	.word	0x58025494

08001efc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e237      	b.n	800237e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d004      	beq.n	8001f24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2280      	movs	r2, #128	@ 0x80
 8001f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e22c      	b.n	800237e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a5c      	ldr	r2, [pc, #368]	@ (800209c <HAL_DMA_Abort_IT+0x1a0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d04a      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a5b      	ldr	r2, [pc, #364]	@ (80020a0 <HAL_DMA_Abort_IT+0x1a4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d045      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a59      	ldr	r2, [pc, #356]	@ (80020a4 <HAL_DMA_Abort_IT+0x1a8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d040      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a58      	ldr	r2, [pc, #352]	@ (80020a8 <HAL_DMA_Abort_IT+0x1ac>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d03b      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a56      	ldr	r2, [pc, #344]	@ (80020ac <HAL_DMA_Abort_IT+0x1b0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d036      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a55      	ldr	r2, [pc, #340]	@ (80020b0 <HAL_DMA_Abort_IT+0x1b4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d031      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a53      	ldr	r2, [pc, #332]	@ (80020b4 <HAL_DMA_Abort_IT+0x1b8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d02c      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a52      	ldr	r2, [pc, #328]	@ (80020b8 <HAL_DMA_Abort_IT+0x1bc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d027      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a50      	ldr	r2, [pc, #320]	@ (80020bc <HAL_DMA_Abort_IT+0x1c0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d022      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a4f      	ldr	r2, [pc, #316]	@ (80020c0 <HAL_DMA_Abort_IT+0x1c4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d01d      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80020c4 <HAL_DMA_Abort_IT+0x1c8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d018      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a4c      	ldr	r2, [pc, #304]	@ (80020c8 <HAL_DMA_Abort_IT+0x1cc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80020cc <HAL_DMA_Abort_IT+0x1d0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a49      	ldr	r2, [pc, #292]	@ (80020d0 <HAL_DMA_Abort_IT+0x1d4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a47      	ldr	r2, [pc, #284]	@ (80020d4 <HAL_DMA_Abort_IT+0x1d8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xc8>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a46      	ldr	r2, [pc, #280]	@ (80020d8 <HAL_DMA_Abort_IT+0x1dc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_DMA_Abort_IT+0xcc>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_DMA_Abort_IT+0xce>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8086 	beq.w	80020dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800209c <HAL_DMA_Abort_IT+0x1a0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d04a      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2e      	ldr	r2, [pc, #184]	@ (80020a0 <HAL_DMA_Abort_IT+0x1a4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d045      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80020a4 <HAL_DMA_Abort_IT+0x1a8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d040      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80020a8 <HAL_DMA_Abort_IT+0x1ac>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d03b      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a29      	ldr	r2, [pc, #164]	@ (80020ac <HAL_DMA_Abort_IT+0x1b0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d036      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a28      	ldr	r2, [pc, #160]	@ (80020b0 <HAL_DMA_Abort_IT+0x1b4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d031      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a26      	ldr	r2, [pc, #152]	@ (80020b4 <HAL_DMA_Abort_IT+0x1b8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d02c      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a25      	ldr	r2, [pc, #148]	@ (80020b8 <HAL_DMA_Abort_IT+0x1bc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d027      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a23      	ldr	r2, [pc, #140]	@ (80020bc <HAL_DMA_Abort_IT+0x1c0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d022      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a22      	ldr	r2, [pc, #136]	@ (80020c0 <HAL_DMA_Abort_IT+0x1c4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d01d      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a20      	ldr	r2, [pc, #128]	@ (80020c4 <HAL_DMA_Abort_IT+0x1c8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d018      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1f      	ldr	r2, [pc, #124]	@ (80020c8 <HAL_DMA_Abort_IT+0x1cc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d013      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1d      	ldr	r2, [pc, #116]	@ (80020cc <HAL_DMA_Abort_IT+0x1d0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00e      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1c      	ldr	r2, [pc, #112]	@ (80020d0 <HAL_DMA_Abort_IT+0x1d4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d009      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1a      	ldr	r2, [pc, #104]	@ (80020d4 <HAL_DMA_Abort_IT+0x1d8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_DMA_Abort_IT+0x17c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a19      	ldr	r2, [pc, #100]	@ (80020d8 <HAL_DMA_Abort_IT+0x1dc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d108      	bne.n	800208a <HAL_DMA_Abort_IT+0x18e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e178      	b.n	800237c <HAL_DMA_Abort_IT+0x480>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e16f      	b.n	800237c <HAL_DMA_Abort_IT+0x480>
 800209c:	40020010 	.word	0x40020010
 80020a0:	40020028 	.word	0x40020028
 80020a4:	40020040 	.word	0x40020040
 80020a8:	40020058 	.word	0x40020058
 80020ac:	40020070 	.word	0x40020070
 80020b0:	40020088 	.word	0x40020088
 80020b4:	400200a0 	.word	0x400200a0
 80020b8:	400200b8 	.word	0x400200b8
 80020bc:	40020410 	.word	0x40020410
 80020c0:	40020428 	.word	0x40020428
 80020c4:	40020440 	.word	0x40020440
 80020c8:	40020458 	.word	0x40020458
 80020cc:	40020470 	.word	0x40020470
 80020d0:	40020488 	.word	0x40020488
 80020d4:	400204a0 	.word	0x400204a0
 80020d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 020e 	bic.w	r2, r2, #14
 80020ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6c      	ldr	r2, [pc, #432]	@ (80022a4 <HAL_DMA_Abort_IT+0x3a8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d04a      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a6b      	ldr	r2, [pc, #428]	@ (80022a8 <HAL_DMA_Abort_IT+0x3ac>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d045      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a69      	ldr	r2, [pc, #420]	@ (80022ac <HAL_DMA_Abort_IT+0x3b0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d040      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a68      	ldr	r2, [pc, #416]	@ (80022b0 <HAL_DMA_Abort_IT+0x3b4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d03b      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a66      	ldr	r2, [pc, #408]	@ (80022b4 <HAL_DMA_Abort_IT+0x3b8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d036      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a65      	ldr	r2, [pc, #404]	@ (80022b8 <HAL_DMA_Abort_IT+0x3bc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d031      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a63      	ldr	r2, [pc, #396]	@ (80022bc <HAL_DMA_Abort_IT+0x3c0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d02c      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a62      	ldr	r2, [pc, #392]	@ (80022c0 <HAL_DMA_Abort_IT+0x3c4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d027      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a60      	ldr	r2, [pc, #384]	@ (80022c4 <HAL_DMA_Abort_IT+0x3c8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d022      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5f      	ldr	r2, [pc, #380]	@ (80022c8 <HAL_DMA_Abort_IT+0x3cc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d01d      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5d      	ldr	r2, [pc, #372]	@ (80022cc <HAL_DMA_Abort_IT+0x3d0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d018      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a5c      	ldr	r2, [pc, #368]	@ (80022d0 <HAL_DMA_Abort_IT+0x3d4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a5a      	ldr	r2, [pc, #360]	@ (80022d4 <HAL_DMA_Abort_IT+0x3d8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00e      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a59      	ldr	r2, [pc, #356]	@ (80022d8 <HAL_DMA_Abort_IT+0x3dc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a57      	ldr	r2, [pc, #348]	@ (80022dc <HAL_DMA_Abort_IT+0x3e0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d004      	beq.n	800218c <HAL_DMA_Abort_IT+0x290>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a56      	ldr	r2, [pc, #344]	@ (80022e0 <HAL_DMA_Abort_IT+0x3e4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d108      	bne.n	800219e <HAL_DMA_Abort_IT+0x2a2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e007      	b.n	80021ae <HAL_DMA_Abort_IT+0x2b2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a3c      	ldr	r2, [pc, #240]	@ (80022a4 <HAL_DMA_Abort_IT+0x3a8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d072      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a3a      	ldr	r2, [pc, #232]	@ (80022a8 <HAL_DMA_Abort_IT+0x3ac>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d06d      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a39      	ldr	r2, [pc, #228]	@ (80022ac <HAL_DMA_Abort_IT+0x3b0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d068      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a37      	ldr	r2, [pc, #220]	@ (80022b0 <HAL_DMA_Abort_IT+0x3b4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d063      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a36      	ldr	r2, [pc, #216]	@ (80022b4 <HAL_DMA_Abort_IT+0x3b8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d05e      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a34      	ldr	r2, [pc, #208]	@ (80022b8 <HAL_DMA_Abort_IT+0x3bc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d059      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a33      	ldr	r2, [pc, #204]	@ (80022bc <HAL_DMA_Abort_IT+0x3c0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d054      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a31      	ldr	r2, [pc, #196]	@ (80022c0 <HAL_DMA_Abort_IT+0x3c4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d04f      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a30      	ldr	r2, [pc, #192]	@ (80022c4 <HAL_DMA_Abort_IT+0x3c8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d04a      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2e      	ldr	r2, [pc, #184]	@ (80022c8 <HAL_DMA_Abort_IT+0x3cc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d045      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2d      	ldr	r2, [pc, #180]	@ (80022cc <HAL_DMA_Abort_IT+0x3d0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d040      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2b      	ldr	r2, [pc, #172]	@ (80022d0 <HAL_DMA_Abort_IT+0x3d4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d03b      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2a      	ldr	r2, [pc, #168]	@ (80022d4 <HAL_DMA_Abort_IT+0x3d8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d036      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a28      	ldr	r2, [pc, #160]	@ (80022d8 <HAL_DMA_Abort_IT+0x3dc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d031      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a27      	ldr	r2, [pc, #156]	@ (80022dc <HAL_DMA_Abort_IT+0x3e0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d02c      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a25      	ldr	r2, [pc, #148]	@ (80022e0 <HAL_DMA_Abort_IT+0x3e4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d027      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a24      	ldr	r2, [pc, #144]	@ (80022e4 <HAL_DMA_Abort_IT+0x3e8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a22      	ldr	r2, [pc, #136]	@ (80022e8 <HAL_DMA_Abort_IT+0x3ec>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01d      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a21      	ldr	r2, [pc, #132]	@ (80022ec <HAL_DMA_Abort_IT+0x3f0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d018      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1f      	ldr	r2, [pc, #124]	@ (80022f0 <HAL_DMA_Abort_IT+0x3f4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1e      	ldr	r2, [pc, #120]	@ (80022f4 <HAL_DMA_Abort_IT+0x3f8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00e      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1c      	ldr	r2, [pc, #112]	@ (80022f8 <HAL_DMA_Abort_IT+0x3fc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d009      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1b      	ldr	r2, [pc, #108]	@ (80022fc <HAL_DMA_Abort_IT+0x400>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d004      	beq.n	800229e <HAL_DMA_Abort_IT+0x3a2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	@ (8002300 <HAL_DMA_Abort_IT+0x404>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d132      	bne.n	8002304 <HAL_DMA_Abort_IT+0x408>
 800229e:	2301      	movs	r3, #1
 80022a0:	e031      	b.n	8002306 <HAL_DMA_Abort_IT+0x40a>
 80022a2:	bf00      	nop
 80022a4:	40020010 	.word	0x40020010
 80022a8:	40020028 	.word	0x40020028
 80022ac:	40020040 	.word	0x40020040
 80022b0:	40020058 	.word	0x40020058
 80022b4:	40020070 	.word	0x40020070
 80022b8:	40020088 	.word	0x40020088
 80022bc:	400200a0 	.word	0x400200a0
 80022c0:	400200b8 	.word	0x400200b8
 80022c4:	40020410 	.word	0x40020410
 80022c8:	40020428 	.word	0x40020428
 80022cc:	40020440 	.word	0x40020440
 80022d0:	40020458 	.word	0x40020458
 80022d4:	40020470 	.word	0x40020470
 80022d8:	40020488 	.word	0x40020488
 80022dc:	400204a0 	.word	0x400204a0
 80022e0:	400204b8 	.word	0x400204b8
 80022e4:	58025408 	.word	0x58025408
 80022e8:	5802541c 	.word	0x5802541c
 80022ec:	58025430 	.word	0x58025430
 80022f0:	58025444 	.word	0x58025444
 80022f4:	58025458 	.word	0x58025458
 80022f8:	5802546c 	.word	0x5802546c
 80022fc:	58025480 	.word	0x58025480
 8002300:	58025494 	.word	0x58025494
 8002304:	2300      	movs	r3, #0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d028      	beq.n	800235c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002314:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002318:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2201      	movs	r2, #1
 800232a:	409a      	lsls	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002338:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00c      	beq.n	800235c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800234c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002350:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800235a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop

08002388 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e0e3      	b.n	8002562 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2223      	movs	r2, #35	@ 0x23
 80023a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7fe fd59 	bl	8000e64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	4b6e      	ldr	r3, [pc, #440]	@ (800256c <HAL_ETH_Init+0x1e4>)
 80023b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023b8:	4a6c      	ldr	r2, [pc, #432]	@ (800256c <HAL_ETH_Init+0x1e4>)
 80023ba:	f043 0302 	orr.w	r3, r3, #2
 80023be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023c2:	4b6a      	ldr	r3, [pc, #424]	@ (800256c <HAL_ETH_Init+0x1e4>)
 80023c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7a1b      	ldrb	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff f94d 	bl	8001678 <HAL_SYSCFG_ETHInterfaceSelect>
 80023de:	e003      	b.n	80023e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80023e0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80023e4:	f7ff f948 	bl	8001678 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80023e8:	4b61      	ldr	r3, [pc, #388]	@ (8002570 <HAL_ETH_Init+0x1e8>)
 80023ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002402:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002404:	f7ff f8fc 	bl	8001600 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800240a:	e011      	b.n	8002430 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800240c:	f7ff f8f8 	bl	8001600 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800241a:	d909      	bls.n	8002430 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2204      	movs	r2, #4
 8002420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	22e0      	movs	r2, #224	@ 0xe0
 8002428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e098      	b.n	8002562 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1e4      	bne.n	800240c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f89e 	bl	8002584 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002448:	f002 fc88 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 800244c:	4603      	mov	r3, r0
 800244e:	4a49      	ldr	r2, [pc, #292]	@ (8002574 <HAL_ETH_Init+0x1ec>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	0c9a      	lsrs	r2, r3, #18
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3a01      	subs	r2, #1
 800245c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fa81 	bl	8002968 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800246e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002472:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800247e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002482:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	22e0      	movs	r2, #224	@ 0xe0
 800249e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e05d      	b.n	8002562 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80024b2:	4b31      	ldr	r3, [pc, #196]	@ (8002578 <HAL_ETH_Init+0x1f0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6952      	ldr	r2, [r2, #20]
 80024ba:	0051      	lsls	r1, r2, #1
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024c6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fae9 	bl	8002aa2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fb2f 	bl	8002b34 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	3305      	adds	r3, #5
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	021a      	lsls	r2, r3, #8
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	3303      	adds	r3, #3
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	061a      	lsls	r2, r3, #24
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	3302      	adds	r3, #2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	3301      	adds	r3, #1
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002514:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002522:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002524:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <HAL_ETH_Init+0x1f4>)
 8002536:	430b      	orrs	r3, r1
 8002538:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <HAL_ETH_Init+0x1f8>)
 800254a:	430b      	orrs	r3, r1
 800254c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2210      	movs	r2, #16
 800255c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	58024400 	.word	0x58024400
 8002570:	58000400 	.word	0x58000400
 8002574:	431bde83 	.word	0x431bde83
 8002578:	ffff8001 	.word	0xffff8001
 800257c:	0c020060 	.word	0x0c020060
 8002580:	0c20c000 	.word	0x0c20c000

08002584 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002594:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800259c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800259e:	f002 fbdd 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 80025a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002610 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d804      	bhi.n	80025b6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e022      	b.n	80025fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4a16      	ldr	r2, [pc, #88]	@ (8002614 <HAL_ETH_SetMDIOClockRange+0x90>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d204      	bcs.n	80025c8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e019      	b.n	80025fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <HAL_ETH_SetMDIOClockRange+0x94>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d915      	bls.n	80025fc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4a12      	ldr	r2, [pc, #72]	@ (800261c <HAL_ETH_SetMDIOClockRange+0x98>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d804      	bhi.n	80025e2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e00c      	b.n	80025fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002620 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d804      	bhi.n	80025f4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e003      	b.n	80025fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80025fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	02160ebf 	.word	0x02160ebf
 8002614:	03938700 	.word	0x03938700
 8002618:	05f5e0ff 	.word	0x05f5e0ff
 800261c:	08f0d17f 	.word	0x08f0d17f
 8002620:	0ee6b27f 	.word	0x0ee6b27f

08002624 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	791b      	ldrb	r3, [r3, #4]
 800263c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800263e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	7b1b      	ldrb	r3, [r3, #12]
 8002644:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	7b5b      	ldrb	r3, [r3, #13]
 800264c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800264e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	7b9b      	ldrb	r3, [r3, #14]
 8002654:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	7bdb      	ldrb	r3, [r3, #15]
 800265c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800265e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	7c12      	ldrb	r2, [r2, #16]
 8002664:	2a00      	cmp	r2, #0
 8002666:	d102      	bne.n	800266e <ETH_SetMACConfig+0x4a>
 8002668:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800266c:	e000      	b.n	8002670 <ETH_SetMACConfig+0x4c>
 800266e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002670:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	7c52      	ldrb	r2, [r2, #17]
 8002676:	2a00      	cmp	r2, #0
 8002678:	d102      	bne.n	8002680 <ETH_SetMACConfig+0x5c>
 800267a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800267e:	e000      	b.n	8002682 <ETH_SetMACConfig+0x5e>
 8002680:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	7c9b      	ldrb	r3, [r3, #18]
 8002688:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800268a:	431a      	orrs	r2, r3
               macconf->Speed |
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002690:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002696:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	7f1b      	ldrb	r3, [r3, #28]
 800269c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800269e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	7f5b      	ldrb	r3, [r3, #29]
 80026a4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80026a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	7f92      	ldrb	r2, [r2, #30]
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	d102      	bne.n	80026b6 <ETH_SetMACConfig+0x92>
 80026b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026b4:	e000      	b.n	80026b8 <ETH_SetMACConfig+0x94>
 80026b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80026b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	7fdb      	ldrb	r3, [r3, #31]
 80026be:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026c8:	2a00      	cmp	r2, #0
 80026ca:	d102      	bne.n	80026d2 <ETH_SetMACConfig+0xae>
 80026cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026d0:	e000      	b.n	80026d4 <ETH_SetMACConfig+0xb0>
 80026d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80026d4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80026da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026e2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80026e4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b56      	ldr	r3, [pc, #344]	@ (8002850 <ETH_SetMACConfig+0x22c>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	68f9      	ldr	r1, [r7, #12]
 80026fe:	430b      	orrs	r3, r1
 8002700:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002706:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800270e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002710:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002718:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800271a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002722:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002724:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800272c:	2a00      	cmp	r2, #0
 800272e:	d102      	bne.n	8002736 <ETH_SetMACConfig+0x112>
 8002730:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002734:	e000      	b.n	8002738 <ETH_SetMACConfig+0x114>
 8002736:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002738:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4b42      	ldr	r3, [pc, #264]	@ (8002854 <ETH_SetMACConfig+0x230>)
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	430b      	orrs	r3, r1
 8002754:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800275c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <ETH_SetMACConfig+0x234>)
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	430b      	orrs	r3, r1
 8002778:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002780:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002786:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800278e:	2a00      	cmp	r2, #0
 8002790:	d101      	bne.n	8002796 <ETH_SetMACConfig+0x172>
 8002792:	2280      	movs	r2, #128	@ 0x80
 8002794:	e000      	b.n	8002798 <ETH_SetMACConfig+0x174>
 8002796:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002798:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027aa:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80027ae:	4013      	ands	r3, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	68f9      	ldr	r1, [r7, #12]
 80027b6:	430b      	orrs	r3, r1
 80027b8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80027c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80027c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d6:	f023 0103 	bic.w	r1, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80027ee:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800280a:	2a00      	cmp	r2, #0
 800280c:	d101      	bne.n	8002812 <ETH_SetMACConfig+0x1ee>
 800280e:	2240      	movs	r2, #64	@ 0x40
 8002810:	e000      	b.n	8002814 <ETH_SetMACConfig+0x1f0>
 8002812:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002814:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800281c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800281e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002826:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002834:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	430a      	orrs	r2, r1
 8002840:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	00048083 	.word	0x00048083
 8002854:	c0f88000 	.word	0xc0f88000
 8002858:	fffffef0 	.word	0xfffffef0

0800285c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b38      	ldr	r3, [pc, #224]	@ (8002954 <ETH_SetDMAConfig+0xf8>)
 8002872:	4013      	ands	r3, r2
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	6811      	ldr	r1, [r2, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002882:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	791b      	ldrb	r3, [r3, #4]
 8002888:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800288e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	7b1b      	ldrb	r3, [r3, #12]
 8002894:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002958 <ETH_SetDMAConfig+0xfc>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	430b      	orrs	r3, r1
 80028b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028b4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	7b5b      	ldrb	r3, [r3, #13]
 80028ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80028d0:	4b22      	ldr	r3, [pc, #136]	@ (800295c <ETH_SetDMAConfig+0x100>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	430b      	orrs	r3, r1
 80028dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028e0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	7d1b      	ldrb	r3, [r3, #20]
 80028ec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80028ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	7f5b      	ldrb	r3, [r3, #29]
 80028f4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002902:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002906:	4b16      	ldr	r3, [pc, #88]	@ (8002960 <ETH_SetDMAConfig+0x104>)
 8002908:	4013      	ands	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	68f9      	ldr	r1, [r7, #12]
 8002910:	430b      	orrs	r3, r1
 8002912:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002916:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	7f1b      	ldrb	r3, [r3, #28]
 800291e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002930:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <ETH_SetDMAConfig+0x108>)
 8002936:	4013      	ands	r3, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	68f9      	ldr	r1, [r7, #12]
 800293e:	430b      	orrs	r3, r1
 8002940:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002944:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	ffff87fd 	.word	0xffff87fd
 8002958:	ffff2ffe 	.word	0xffff2ffe
 800295c:	fffec000 	.word	0xfffec000
 8002960:	ffc0efef 	.word	0xffc0efef
 8002964:	7fc0ffff 	.word	0x7fc0ffff

08002968 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0a4      	sub	sp, #144	@ 0x90
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002976:	2300      	movs	r3, #0
 8002978:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800298c:	2301      	movs	r3, #1
 800298e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029a8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80029c0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80029c4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80029cc:	2300      	movs	r3, #0
 80029ce:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80029e2:	2300      	movs	r3, #0
 80029e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80029ea:	2300      	movs	r3, #0
 80029ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002a00:	2320      	movs	r3, #32
 8002a02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002a12:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a1c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a42:	2300      	movs	r3, #0
 8002a44:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff fde6 	bl	8002624 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a72:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a88:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002a8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a8e:	f107 0308 	add.w	r3, r7, #8
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fee1 	bl	800285c <ETH_SetDMAConfig>
}
 8002a9a:	bf00      	nop
 8002a9c:	3790      	adds	r7, #144	@ 0x90
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e01d      	b.n	8002aec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68d9      	ldr	r1, [r3, #12]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2200      	movs	r2, #0
 8002acc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	3206      	adds	r2, #6
 8002ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d9de      	bls.n	8002ab0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b00:	461a      	mov	r2, r3
 8002b02:	2303      	movs	r3, #3
 8002b04:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b14:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b24:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e023      	b.n	8002b8a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6919      	ldr	r1, [r3, #16]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	3212      	adds	r2, #18
 8002b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3301      	adds	r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d9d8      	bls.n	8002b42 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2303      	movs	r3, #3
 8002bba:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bca:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bde:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	@ 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002bfe:	4b89      	ldr	r3, [pc, #548]	@ (8002e24 <HAL_GPIO_Init+0x234>)
 8002c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c02:	e194      	b.n	8002f2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8186 	beq.w	8002f28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d005      	beq.n	8002c34 <HAL_GPIO_Init+0x44>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d130      	bne.n	8002c96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 0201 	and.w	r2, r3, #1
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d017      	beq.n	8002cd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d123      	bne.n	8002d26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	69b9      	ldr	r1, [r7, #24]
 8002d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0203 	and.w	r2, r3, #3
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80e0 	beq.w	8002f28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d68:	4b2f      	ldr	r3, [pc, #188]	@ (8002e28 <HAL_GPIO_Init+0x238>)
 8002d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002e28 <HAL_GPIO_Init+0x238>)
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d78:	4b2b      	ldr	r3, [pc, #172]	@ (8002e28 <HAL_GPIO_Init+0x238>)
 8002d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d86:	4a29      	ldr	r2, [pc, #164]	@ (8002e2c <HAL_GPIO_Init+0x23c>)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a20      	ldr	r2, [pc, #128]	@ (8002e30 <HAL_GPIO_Init+0x240>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d052      	beq.n	8002e58 <HAL_GPIO_Init+0x268>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e34 <HAL_GPIO_Init+0x244>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d031      	beq.n	8002e1e <HAL_GPIO_Init+0x22e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e38 <HAL_GPIO_Init+0x248>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02b      	beq.n	8002e1a <HAL_GPIO_Init+0x22a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e3c <HAL_GPIO_Init+0x24c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d025      	beq.n	8002e16 <HAL_GPIO_Init+0x226>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e40 <HAL_GPIO_Init+0x250>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01f      	beq.n	8002e12 <HAL_GPIO_Init+0x222>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e44 <HAL_GPIO_Init+0x254>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d019      	beq.n	8002e0e <HAL_GPIO_Init+0x21e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8002e48 <HAL_GPIO_Init+0x258>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_GPIO_Init+0x21a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a19      	ldr	r2, [pc, #100]	@ (8002e4c <HAL_GPIO_Init+0x25c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00d      	beq.n	8002e06 <HAL_GPIO_Init+0x216>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a18      	ldr	r2, [pc, #96]	@ (8002e50 <HAL_GPIO_Init+0x260>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <HAL_GPIO_Init+0x212>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a17      	ldr	r2, [pc, #92]	@ (8002e54 <HAL_GPIO_Init+0x264>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_GPIO_Init+0x20e>
 8002dfa:	2309      	movs	r3, #9
 8002dfc:	e02d      	b.n	8002e5a <HAL_GPIO_Init+0x26a>
 8002dfe:	230a      	movs	r3, #10
 8002e00:	e02b      	b.n	8002e5a <HAL_GPIO_Init+0x26a>
 8002e02:	2308      	movs	r3, #8
 8002e04:	e029      	b.n	8002e5a <HAL_GPIO_Init+0x26a>
 8002e06:	2307      	movs	r3, #7
 8002e08:	e027      	b.n	8002e5a <HAL_GPIO_Init+0x26a>
 8002e0a:	2306      	movs	r3, #6
 8002e0c:	e025      	b.n	8002e5a <HAL_GPIO_Init+0x26a>
 8002e0e:	2305      	movs	r3, #5
 8002e10:	e023      	b.n	8002e5a <HAL_GPIO_Init+0x26a>
 8002e12:	2304      	movs	r3, #4
 8002e14:	e021      	b.n	8002e5a <HAL_GPIO_Init+0x26a>
 8002e16:	2303      	movs	r3, #3
 8002e18:	e01f      	b.n	8002e5a <HAL_GPIO_Init+0x26a>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e01d      	b.n	8002e5a <HAL_GPIO_Init+0x26a>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e01b      	b.n	8002e5a <HAL_GPIO_Init+0x26a>
 8002e22:	bf00      	nop
 8002e24:	58000080 	.word	0x58000080
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	58000400 	.word	0x58000400
 8002e30:	58020000 	.word	0x58020000
 8002e34:	58020400 	.word	0x58020400
 8002e38:	58020800 	.word	0x58020800
 8002e3c:	58020c00 	.word	0x58020c00
 8002e40:	58021000 	.word	0x58021000
 8002e44:	58021400 	.word	0x58021400
 8002e48:	58021800 	.word	0x58021800
 8002e4c:	58021c00 	.word	0x58021c00
 8002e50:	58022000 	.word	0x58022000
 8002e54:	58022400 	.word	0x58022400
 8002e58:	2300      	movs	r3, #0
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	f002 0203 	and.w	r2, r2, #3
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	4093      	lsls	r3, r2
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e6a:	4938      	ldr	r1, [pc, #224]	@ (8002f4c <HAL_GPIO_Init+0x35c>)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ecc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f47f ae63 	bne.w	8002c04 <HAL_GPIO_Init+0x14>
  }
}
 8002f3e:	bf00      	nop
 8002f40:	bf00      	nop
 8002f42:	3724      	adds	r7, #36	@ 0x24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	58000400 	.word	0x58000400

08002f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f6c:	e003      	b.n	8002f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	041a      	lsls	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	619a      	str	r2, [r3, #24]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e08b      	b.n	80030ae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe f828 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	@ 0x24
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fe4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	e006      	b.n	800300c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800300a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d108      	bne.n	8003026 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	e007      	b.n	8003036 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003034:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <HAL_I2C_Init+0x134>)
 8003042:	430b      	orrs	r3, r1
 8003044:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003054:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69d9      	ldr	r1, [r3, #28]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	02008000 	.word	0x02008000

080030bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	461a      	mov	r2, r3
 80030c8:	460b      	mov	r3, r1
 80030ca:	817b      	strh	r3, [r7, #10]
 80030cc:	4613      	mov	r3, r2
 80030ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b20      	cmp	r3, #32
 80030da:	f040 80fd 	bne.w	80032d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_I2C_Master_Transmit+0x30>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e0f6      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030f4:	f7fe fa84 	bl	8001600 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2319      	movs	r3, #25
 8003100:	2201      	movs	r2, #1
 8003102:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fa0a 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e0e1      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2221      	movs	r2, #33	@ 0x21
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2210      	movs	r2, #16
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	893a      	ldrh	r2, [r7, #8]
 8003136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2bff      	cmp	r3, #255	@ 0xff
 8003146:	d906      	bls.n	8003156 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	22ff      	movs	r2, #255	@ 0xff
 800314c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800314e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e007      	b.n	8003166 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003164:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	d024      	beq.n	80031b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	8979      	ldrh	r1, [r7, #10]
 80031aa:	4b4e      	ldr	r3, [pc, #312]	@ (80032e4 <HAL_I2C_Master_Transmit+0x228>)
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fc05 	bl	80039c0 <I2C_TransferConfig>
 80031b6:	e066      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	8979      	ldrh	r1, [r7, #10]
 80031c0:	4b48      	ldr	r3, [pc, #288]	@ (80032e4 <HAL_I2C_Master_Transmit+0x228>)
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fbfa 	bl	80039c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031cc:	e05b      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	6a39      	ldr	r1, [r7, #32]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f9fd 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e07b      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d034      	beq.n	8003286 <HAL_I2C_Master_Transmit+0x1ca>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d130      	bne.n	8003286 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	2200      	movs	r2, #0
 800322c:	2180      	movs	r1, #128	@ 0x80
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f976 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e04d      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2bff      	cmp	r3, #255	@ 0xff
 8003246:	d90e      	bls.n	8003266 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22ff      	movs	r2, #255	@ 0xff
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	b2da      	uxtb	r2, r3
 8003254:	8979      	ldrh	r1, [r7, #10]
 8003256:	2300      	movs	r3, #0
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fbae 	bl	80039c0 <I2C_TransferConfig>
 8003264:	e00f      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003274:	b2da      	uxtb	r2, r3
 8003276:	8979      	ldrh	r1, [r7, #10]
 8003278:	2300      	movs	r3, #0
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fb9d 	bl	80039c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d19e      	bne.n	80031ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	6a39      	ldr	r1, [r7, #32]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f9e3 	bl	8003660 <I2C_WaitOnSTOPFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e01a      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2220      	movs	r2, #32
 80032aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <HAL_I2C_Master_Transmit+0x22c>)
 80032b8:	400b      	ands	r3, r1
 80032ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	80002000 	.word	0x80002000
 80032e8:	fe00e800 	.word	0xfe00e800

080032ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	461a      	mov	r2, r3
 80032f8:	460b      	mov	r3, r1
 80032fa:	817b      	strh	r3, [r7, #10]
 80032fc:	4613      	mov	r3, r2
 80032fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b20      	cmp	r3, #32
 800330a:	f040 80db 	bne.w	80034c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_I2C_Master_Receive+0x30>
 8003318:	2302      	movs	r3, #2
 800331a:	e0d4      	b.n	80034c6 <HAL_I2C_Master_Receive+0x1da>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003324:	f7fe f96c 	bl	8001600 <HAL_GetTick>
 8003328:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2319      	movs	r3, #25
 8003330:	2201      	movs	r2, #1
 8003332:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f8f2 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0bf      	b.n	80034c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2222      	movs	r2, #34	@ 0x22
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2210      	movs	r2, #16
 8003352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	893a      	ldrh	r2, [r7, #8]
 8003366:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	2bff      	cmp	r3, #255	@ 0xff
 8003376:	d90e      	bls.n	8003396 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	22ff      	movs	r2, #255	@ 0xff
 800337c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003382:	b2da      	uxtb	r2, r3
 8003384:	8979      	ldrh	r1, [r7, #10]
 8003386:	4b52      	ldr	r3, [pc, #328]	@ (80034d0 <HAL_I2C_Master_Receive+0x1e4>)
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fb16 	bl	80039c0 <I2C_TransferConfig>
 8003394:	e06d      	b.n	8003472 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	8979      	ldrh	r1, [r7, #10]
 80033a8:	4b49      	ldr	r3, [pc, #292]	@ (80034d0 <HAL_I2C_Master_Receive+0x1e4>)
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fb05 	bl	80039c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80033b6:	e05c      	b.n	8003472 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	6a39      	ldr	r1, [r7, #32]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f993 	bl	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e07c      	b.n	80034c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d034      	beq.n	8003472 <HAL_I2C_Master_Receive+0x186>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d130      	bne.n	8003472 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2200      	movs	r2, #0
 8003418:	2180      	movs	r1, #128	@ 0x80
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f880 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e04d      	b.n	80034c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	2bff      	cmp	r3, #255	@ 0xff
 8003432:	d90e      	bls.n	8003452 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	22ff      	movs	r2, #255	@ 0xff
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343e:	b2da      	uxtb	r2, r3
 8003440:	8979      	ldrh	r1, [r7, #10]
 8003442:	2300      	movs	r3, #0
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fab8 	bl	80039c0 <I2C_TransferConfig>
 8003450:	e00f      	b.n	8003472 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003460:	b2da      	uxtb	r2, r3
 8003462:	8979      	ldrh	r1, [r7, #10]
 8003464:	2300      	movs	r3, #0
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 faa7 	bl	80039c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d19d      	bne.n	80033b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	6a39      	ldr	r1, [r7, #32]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f8ed 	bl	8003660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e01a      	b.n	80034c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2220      	movs	r2, #32
 8003496:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <HAL_I2C_Master_Receive+0x1e8>)
 80034a4:	400b      	ands	r3, r1
 80034a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	80002400 	.word	0x80002400
 80034d4:	fe00e800 	.word	0xfe00e800

080034d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d103      	bne.n	80034f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d007      	beq.n	8003514 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	619a      	str	r2, [r3, #24]
  }
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	e03b      	b.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	6839      	ldr	r1, [r7, #0]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f962 	bl	8003800 <I2C_IsErrorOccurred>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e041      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d02d      	beq.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354e:	f7fe f857 	bl	8001600 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <I2C_WaitOnFlagUntilTimeout+0x44>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d122      	bne.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	429a      	cmp	r2, r3
 8003580:	d113      	bne.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e00f      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d0b4      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035de:	e033      	b.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f90b 	bl	8003800 <I2C_IsErrorOccurred>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e031      	b.n	8003658 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d025      	beq.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fc:	f7fe f800 	bl	8001600 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11a      	bne.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b02      	cmp	r3, #2
 800361e:	d013      	beq.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e007      	b.n	8003658 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d1c4      	bne.n	80035e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800366c:	e02f      	b.n	80036ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f8c4 	bl	8003800 <I2C_IsErrorOccurred>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e02d      	b.n	80036de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7fd ffbd 	bl	8001600 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11a      	bne.n	80036ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d013      	beq.n	80036ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e007      	b.n	80036de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d1c8      	bne.n	800366e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80036f8:	e071      	b.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f87e 	bl	8003800 <I2C_IsErrorOccurred>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b20      	cmp	r3, #32
 800371a:	d13b      	bne.n	8003794 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d138      	bne.n	8003794 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d105      	bne.n	800373c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b10      	cmp	r3, #16
 8003748:	d121      	bne.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2210      	movs	r2, #16
 8003750:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2204      	movs	r2, #4
 8003756:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2220      	movs	r2, #32
 800375e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b24      	ldr	r3, [pc, #144]	@ (80037fc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800376c:	400b      	ands	r3, r1
 800376e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	75fb      	strb	r3, [r7, #23]
 800378c:	e002      	b.n	8003794 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003794:	f7fd ff34 	bl	8001600 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d302      	bcc.n	80037aa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d119      	bne.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d116      	bne.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d00f      	beq.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	f043 0220 	orr.w	r2, r3, #32
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d002      	beq.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d083      	beq.n	80036fa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	fe00e800 	.word	0xfe00e800

08003800 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d068      	beq.n	80038fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2210      	movs	r2, #16
 8003832:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003834:	e049      	b.n	80038ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d045      	beq.n	80038ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fd fedf 	bl	8001600 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_IsErrorOccurred+0x54>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d13a      	bne.n	80038ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800385e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003866:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003876:	d121      	bne.n	80038bc <I2C_IsErrorOccurred+0xbc>
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800387e:	d01d      	beq.n	80038bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	2b20      	cmp	r3, #32
 8003884:	d01a      	beq.n	80038bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003894:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003896:	f7fd feb3 	bl	8001600 <HAL_GetTick>
 800389a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800389c:	e00e      	b.n	80038bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800389e:	f7fd feaf 	bl	8001600 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b19      	cmp	r3, #25
 80038aa:	d907      	bls.n	80038bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f043 0320 	orr.w	r3, r3, #32
 80038b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80038ba:	e006      	b.n	80038ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d1e9      	bne.n	800389e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d003      	beq.n	80038e0 <I2C_IsErrorOccurred+0xe0>
 80038d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0aa      	beq.n	8003836 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d103      	bne.n	80038f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2220      	movs	r2, #32
 80038ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003920:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f043 0308 	orr.w	r3, r3, #8
 8003938:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003942:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	f043 0302 	orr.w	r3, r3, #2
 800395a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003964:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800396c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01c      	beq.n	80039ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff fdaf 	bl	80034d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <I2C_IsErrorOccurred+0x1bc>)
 8003986:	400b      	ands	r3, r1
 8003988:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80039ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3728      	adds	r7, #40	@ 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	fe00e800 	.word	0xfe00e800

080039c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	4613      	mov	r3, r2
 80039d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039d2:	897b      	ldrh	r3, [r7, #10]
 80039d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039d8:	7a7b      	ldrb	r3, [r7, #9]
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	0d5b      	lsrs	r3, r3, #21
 80039fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <I2C_TransferConfig+0x60>)
 8003a00:	430b      	orrs	r3, r1
 8003a02:	43db      	mvns	r3, r3
 8003a04:	ea02 0103 	and.w	r1, r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	03ff63ff 	.word	0x03ff63ff

08003a24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d138      	bne.n	8003aac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e032      	b.n	8003aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	@ 0x24
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d139      	bne.n	8003b44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e033      	b.n	8003b46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2224      	movs	r2, #36	@ 0x24
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af02      	add	r7, sp, #8
 8003b58:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0fe      	b.n	8003d62 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fd fb1d 	bl	80011b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2203      	movs	r2, #3
 8003b82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f005 fc0e 	bl	80093ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7c1a      	ldrb	r2, [r3, #16]
 8003b98:	f88d 2000 	strb.w	r2, [sp]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ba0:	f005 fb92 	bl	80092c8 <USB_CoreInit>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e0d5      	b.n	8003d62 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f005 fc06 	bl	80093ce <USB_SetCurrentMode>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0c6      	b.n	8003d62 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	e04a      	b.n	8003c70 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3315      	adds	r3, #21
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bee:	7bfa      	ldrb	r2, [r7, #15]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	7bfa      	ldrb	r2, [r7, #15]
 8003c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	b298      	uxth	r0, r3
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	332e      	adds	r3, #46	@ 0x2e
 8003c16:	4602      	mov	r2, r0
 8003c18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	3318      	adds	r3, #24
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	331c      	adds	r3, #28
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	3320      	adds	r3, #32
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c56:	7bfa      	ldrb	r2, [r7, #15]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	3324      	adds	r3, #36	@ 0x24
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	791b      	ldrb	r3, [r3, #4]
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d3af      	bcc.n	8003bda <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	73fb      	strb	r3, [r7, #15]
 8003c7e:	e044      	b.n	8003d0a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c96:	7bfa      	ldrb	r2, [r7, #15]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cac:	7bfa      	ldrb	r2, [r7, #15]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cc2:	7bfa      	ldrb	r2, [r7, #15]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cd8:	7bfa      	ldrb	r2, [r7, #15]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cee:	7bfa      	ldrb	r2, [r7, #15]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	3301      	adds	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	791b      	ldrb	r3, [r3, #4]
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d3b5      	bcc.n	8003c80 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7c1a      	ldrb	r2, [r3, #16]
 8003d1c:	f88d 2000 	strb.w	r2, [sp]
 8003d20:	3304      	adds	r3, #4
 8003d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d24:	f005 fba0 	bl	8009468 <USB_DevInit>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e013      	b.n	8003d62 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7b1b      	ldrb	r3, [r3, #12]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d102      	bne.n	8003d56 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f80b 	bl	8003d6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f005 fd5b 	bl	8009816 <USB_DevDisconnect>

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d9a:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	10000003 	.word	0x10000003

08003db4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003dbc:	4b19      	ldr	r3, [pc, #100]	@ (8003e24 <HAL_PWREx_ConfigSupply+0x70>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d00a      	beq.n	8003dde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003dc8:	4b16      	ldr	r3, [pc, #88]	@ (8003e24 <HAL_PWREx_ConfigSupply+0x70>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d001      	beq.n	8003dda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e01f      	b.n	8003e1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e01d      	b.n	8003e1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003dde:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <HAL_PWREx_ConfigSupply+0x70>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f023 0207 	bic.w	r2, r3, #7
 8003de6:	490f      	ldr	r1, [pc, #60]	@ (8003e24 <HAL_PWREx_ConfigSupply+0x70>)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003dee:	f7fd fc07 	bl	8001600 <HAL_GetTick>
 8003df2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003df4:	e009      	b.n	8003e0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003df6:	f7fd fc03 	bl	8001600 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e04:	d901      	bls.n	8003e0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e007      	b.n	8003e1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e0a:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_PWREx_ConfigSupply+0x70>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e16:	d1ee      	bne.n	8003df6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	58024800 	.word	0x58024800

08003e28 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a04      	ldr	r2, [pc, #16]	@ (8003e44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e36:	60d3      	str	r3, [r2, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	58024800 	.word	0x58024800

08003e48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	@ 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f000 bc48 	b.w	80046ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8088 	beq.w	8003f7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e6a:	4b99      	ldr	r3, [pc, #612]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e74:	4b96      	ldr	r3, [pc, #600]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d007      	beq.n	8003e90 <HAL_RCC_OscConfig+0x48>
 8003e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e82:	2b18      	cmp	r3, #24
 8003e84:	d111      	bne.n	8003eaa <HAL_RCC_OscConfig+0x62>
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	4b8f      	ldr	r3, [pc, #572]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d06d      	beq.n	8003f78 <HAL_RCC_OscConfig+0x130>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d169      	bne.n	8003f78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f000 bc21 	b.w	80046ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x7a>
 8003eb4:	4b86      	ldr	r3, [pc, #536]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a85      	ldr	r2, [pc, #532]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e02e      	b.n	8003f20 <HAL_RCC_OscConfig+0xd8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x9c>
 8003eca:	4b81      	ldr	r3, [pc, #516]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a80      	ldr	r2, [pc, #512]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b7e      	ldr	r3, [pc, #504]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a7d      	ldr	r2, [pc, #500]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003edc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e01d      	b.n	8003f20 <HAL_RCC_OscConfig+0xd8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0xc0>
 8003eee:	4b78      	ldr	r3, [pc, #480]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a77      	ldr	r2, [pc, #476]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	4b75      	ldr	r3, [pc, #468]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a74      	ldr	r2, [pc, #464]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e00b      	b.n	8003f20 <HAL_RCC_OscConfig+0xd8>
 8003f08:	4b71      	ldr	r3, [pc, #452]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a70      	ldr	r2, [pc, #448]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	4b6e      	ldr	r3, [pc, #440]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a6d      	ldr	r2, [pc, #436]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d013      	beq.n	8003f50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd fb6a 	bl	8001600 <HAL_GetTick>
 8003f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f30:	f7fd fb66 	bl	8001600 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b64      	cmp	r3, #100	@ 0x64
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e3d4      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f42:	4b63      	ldr	r3, [pc, #396]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0xe8>
 8003f4e:	e014      	b.n	8003f7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fd fb56 	bl	8001600 <HAL_GetTick>
 8003f54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fd fb52 	bl	8001600 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	@ 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e3c0      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f6a:	4b59      	ldr	r3, [pc, #356]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x110>
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80ca 	beq.w	800411c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f88:	4b51      	ldr	r3, [pc, #324]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f92:	4b4f      	ldr	r3, [pc, #316]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f96:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <HAL_RCC_OscConfig+0x166>
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	2b18      	cmp	r3, #24
 8003fa2:	d156      	bne.n	8004052 <HAL_RCC_OscConfig+0x20a>
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d151      	bne.n	8004052 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fae:	4b48      	ldr	r3, [pc, #288]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x17e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e392      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fc6:	4b42      	ldr	r3, [pc, #264]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0219 	bic.w	r2, r3, #25
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	493f      	ldr	r1, [pc, #252]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fb12 	bl	8001600 <HAL_GetTick>
 8003fdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe0:	f7fd fb0e 	bl	8001600 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e37c      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ff2:	4b37      	ldr	r3, [pc, #220]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffe:	f7fd fb2f 	bl	8001660 <HAL_GetREVID>
 8004002:	4603      	mov	r3, r0
 8004004:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004008:	4293      	cmp	r3, r2
 800400a:	d817      	bhi.n	800403c <HAL_RCC_OscConfig+0x1f4>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b40      	cmp	r3, #64	@ 0x40
 8004012:	d108      	bne.n	8004026 <HAL_RCC_OscConfig+0x1de>
 8004014:	4b2e      	ldr	r3, [pc, #184]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800401c:	4a2c      	ldr	r2, [pc, #176]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004022:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004024:	e07a      	b.n	800411c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004026:	4b2a      	ldr	r3, [pc, #168]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	031b      	lsls	r3, r3, #12
 8004034:	4926      	ldr	r1, [pc, #152]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800403a:	e06f      	b.n	800411c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403c:	4b24      	ldr	r3, [pc, #144]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	4921      	ldr	r1, [pc, #132]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004050:	e064      	b.n	800411c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d047      	beq.n	80040ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800405a:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 0219 	bic.w	r2, r3, #25
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	491a      	ldr	r1, [pc, #104]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8004068:	4313      	orrs	r3, r2
 800406a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fac8 	bl	8001600 <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004074:	f7fd fac4 	bl	8001600 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e332      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004086:	4b12      	ldr	r3, [pc, #72]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004092:	f7fd fae5 	bl	8001660 <HAL_GetREVID>
 8004096:	4603      	mov	r3, r0
 8004098:	f241 0203 	movw	r2, #4099	@ 0x1003
 800409c:	4293      	cmp	r3, r2
 800409e:	d819      	bhi.n	80040d4 <HAL_RCC_OscConfig+0x28c>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b40      	cmp	r3, #64	@ 0x40
 80040a6:	d108      	bne.n	80040ba <HAL_RCC_OscConfig+0x272>
 80040a8:	4b09      	ldr	r3, [pc, #36]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80040b0:	4a07      	ldr	r2, [pc, #28]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b6:	6053      	str	r3, [r2, #4]
 80040b8:	e030      	b.n	800411c <HAL_RCC_OscConfig+0x2d4>
 80040ba:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	031b      	lsls	r3, r3, #12
 80040c8:	4901      	ldr	r1, [pc, #4]	@ (80040d0 <HAL_RCC_OscConfig+0x288>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]
 80040ce:	e025      	b.n	800411c <HAL_RCC_OscConfig+0x2d4>
 80040d0:	58024400 	.word	0x58024400
 80040d4:	4b9a      	ldr	r3, [pc, #616]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	061b      	lsls	r3, r3, #24
 80040e2:	4997      	ldr	r1, [pc, #604]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]
 80040e8:	e018      	b.n	800411c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ea:	4b95      	ldr	r3, [pc, #596]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a94      	ldr	r2, [pc, #592]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fd fa83 	bl	8001600 <HAL_GetTick>
 80040fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fe:	f7fd fa7f 	bl	8001600 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e2ed      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004110:	4b8b      	ldr	r3, [pc, #556]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80a9 	beq.w	800427c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800412a:	4b85      	ldr	r3, [pc, #532]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004132:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004134:	4b82      	ldr	r3, [pc, #520]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d007      	beq.n	8004150 <HAL_RCC_OscConfig+0x308>
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b18      	cmp	r3, #24
 8004144:	d13a      	bne.n	80041bc <HAL_RCC_OscConfig+0x374>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d135      	bne.n	80041bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004150:	4b7b      	ldr	r3, [pc, #492]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_OscConfig+0x320>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	2b80      	cmp	r3, #128	@ 0x80
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e2c1      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004168:	f7fd fa7a 	bl	8001660 <HAL_GetREVID>
 800416c:	4603      	mov	r3, r0
 800416e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004172:	4293      	cmp	r3, r2
 8004174:	d817      	bhi.n	80041a6 <HAL_RCC_OscConfig+0x35e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	2b20      	cmp	r3, #32
 800417c:	d108      	bne.n	8004190 <HAL_RCC_OscConfig+0x348>
 800417e:	4b70      	ldr	r3, [pc, #448]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004186:	4a6e      	ldr	r2, [pc, #440]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004188:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800418c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800418e:	e075      	b.n	800427c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004190:	4b6b      	ldr	r3, [pc, #428]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	069b      	lsls	r3, r3, #26
 800419e:	4968      	ldr	r1, [pc, #416]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041a4:	e06a      	b.n	800427c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041a6:	4b66      	ldr	r3, [pc, #408]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	061b      	lsls	r3, r3, #24
 80041b4:	4962      	ldr	r1, [pc, #392]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041ba:	e05f      	b.n	800427c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d042      	beq.n	800424a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5d      	ldr	r2, [pc, #372]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80041ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd fa16 	bl	8001600 <HAL_GetTick>
 80041d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041d8:	f7fd fa12 	bl	8001600 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e280      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ea:	4b55      	ldr	r3, [pc, #340]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041f6:	f7fd fa33 	bl	8001660 <HAL_GetREVID>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004200:	4293      	cmp	r3, r2
 8004202:	d817      	bhi.n	8004234 <HAL_RCC_OscConfig+0x3ec>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	2b20      	cmp	r3, #32
 800420a:	d108      	bne.n	800421e <HAL_RCC_OscConfig+0x3d6>
 800420c:	4b4c      	ldr	r3, [pc, #304]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004214:	4a4a      	ldr	r2, [pc, #296]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004216:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800421a:	6053      	str	r3, [r2, #4]
 800421c:	e02e      	b.n	800427c <HAL_RCC_OscConfig+0x434>
 800421e:	4b48      	ldr	r3, [pc, #288]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	069b      	lsls	r3, r3, #26
 800422c:	4944      	ldr	r1, [pc, #272]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]
 8004232:	e023      	b.n	800427c <HAL_RCC_OscConfig+0x434>
 8004234:	4b42      	ldr	r3, [pc, #264]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	061b      	lsls	r3, r3, #24
 8004242:	493f      	ldr	r1, [pc, #252]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004244:	4313      	orrs	r3, r2
 8004246:	60cb      	str	r3, [r1, #12]
 8004248:	e018      	b.n	800427c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800424a:	4b3d      	ldr	r3, [pc, #244]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a3c      	ldr	r2, [pc, #240]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004256:	f7fd f9d3 	bl	8001600 <HAL_GetTick>
 800425a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800425e:	f7fd f9cf 	bl	8001600 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e23d      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004270:	4b33      	ldr	r3, [pc, #204]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f0      	bne.n	800425e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d036      	beq.n	80042f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d019      	beq.n	80042c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004290:	4b2b      	ldr	r3, [pc, #172]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004294:	4a2a      	ldr	r2, [pc, #168]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fd f9b0 	bl	8001600 <HAL_GetTick>
 80042a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a4:	f7fd f9ac 	bl	8001600 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e21a      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042b6:	4b22      	ldr	r3, [pc, #136]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80042b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x45c>
 80042c2:	e018      	b.n	80042f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80042c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fd f996 	bl	8001600 <HAL_GetTick>
 80042d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d8:	f7fd f992 	bl	8001600 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e200      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042ea:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 80042ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d039      	beq.n	8004376 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01c      	beq.n	8004344 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800430a:	4b0d      	ldr	r3, [pc, #52]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a0c      	ldr	r2, [pc, #48]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004310:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004314:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004316:	f7fd f973 	bl	8001600 <HAL_GetTick>
 800431a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800431e:	f7fd f96f 	bl	8001600 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1dd      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004330:	4b03      	ldr	r3, [pc, #12]	@ (8004340 <HAL_RCC_OscConfig+0x4f8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x4d6>
 800433c:	e01b      	b.n	8004376 <HAL_RCC_OscConfig+0x52e>
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004344:	4b9b      	ldr	r3, [pc, #620]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a9a      	ldr	r2, [pc, #616]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 800434a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800434e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004350:	f7fd f956 	bl	8001600 <HAL_GetTick>
 8004354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004358:	f7fd f952 	bl	8001600 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e1c0      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800436a:	4b92      	ldr	r3, [pc, #584]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8081 	beq.w	8004486 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004384:	4b8c      	ldr	r3, [pc, #560]	@ (80045b8 <HAL_RCC_OscConfig+0x770>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a8b      	ldr	r2, [pc, #556]	@ (80045b8 <HAL_RCC_OscConfig+0x770>)
 800438a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800438e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004390:	f7fd f936 	bl	8001600 <HAL_GetTick>
 8004394:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004398:	f7fd f932 	bl	8001600 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	@ 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1a0      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043aa:	4b83      	ldr	r3, [pc, #524]	@ (80045b8 <HAL_RCC_OscConfig+0x770>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x584>
 80043be:	4b7d      	ldr	r3, [pc, #500]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	4a7c      	ldr	r2, [pc, #496]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ca:	e02d      	b.n	8004428 <HAL_RCC_OscConfig+0x5e0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10c      	bne.n	80043ee <HAL_RCC_OscConfig+0x5a6>
 80043d4:	4b77      	ldr	r3, [pc, #476]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	4a76      	ldr	r2, [pc, #472]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e0:	4b74      	ldr	r3, [pc, #464]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e4:	4a73      	ldr	r2, [pc, #460]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80043e6:	f023 0304 	bic.w	r3, r3, #4
 80043ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ec:	e01c      	b.n	8004428 <HAL_RCC_OscConfig+0x5e0>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0x5c8>
 80043f6:	4b6f      	ldr	r3, [pc, #444]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fa:	4a6e      	ldr	r2, [pc, #440]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80043fc:	f043 0304 	orr.w	r3, r3, #4
 8004400:	6713      	str	r3, [r2, #112]	@ 0x70
 8004402:	4b6c      	ldr	r3, [pc, #432]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004406:	4a6b      	ldr	r2, [pc, #428]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	6713      	str	r3, [r2, #112]	@ 0x70
 800440e:	e00b      	b.n	8004428 <HAL_RCC_OscConfig+0x5e0>
 8004410:	4b68      	ldr	r3, [pc, #416]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004414:	4a67      	ldr	r2, [pc, #412]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	6713      	str	r3, [r2, #112]	@ 0x70
 800441c:	4b65      	ldr	r3, [pc, #404]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004420:	4a64      	ldr	r2, [pc, #400]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004422:	f023 0304 	bic.w	r3, r3, #4
 8004426:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d015      	beq.n	800445c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fd f8e6 	bl	8001600 <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004436:	e00a      	b.n	800444e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004438:	f7fd f8e2 	bl	8001600 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e14e      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800444e:	4b59      	ldr	r3, [pc, #356]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0ee      	beq.n	8004438 <HAL_RCC_OscConfig+0x5f0>
 800445a:	e014      	b.n	8004486 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fd f8d0 	bl	8001600 <HAL_GetTick>
 8004460:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004462:	e00a      	b.n	800447a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004464:	f7fd f8cc 	bl	8001600 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004472:	4293      	cmp	r3, r2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e138      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800447a:	4b4e      	ldr	r3, [pc, #312]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1ee      	bne.n	8004464 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 812d 	beq.w	80046ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004490:	4b48      	ldr	r3, [pc, #288]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004498:	2b18      	cmp	r3, #24
 800449a:	f000 80bd 	beq.w	8004618 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	f040 809e 	bne.w	80045e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a8:	4b42      	ldr	r3, [pc, #264]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a41      	ldr	r2, [pc, #260]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80044ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fd f8a4 	bl	8001600 <HAL_GetTick>
 80044b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fd f8a0 	bl	8001600 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e10e      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ce:	4b39      	ldr	r3, [pc, #228]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044da:	4b36      	ldr	r3, [pc, #216]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80044dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044de:	4b37      	ldr	r3, [pc, #220]	@ (80045bc <HAL_RCC_OscConfig+0x774>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	430a      	orrs	r2, r1
 80044ee:	4931      	ldr	r1, [pc, #196]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	3b01      	subs	r3, #1
 80044fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004502:	3b01      	subs	r3, #1
 8004504:	025b      	lsls	r3, r3, #9
 8004506:	b29b      	uxth	r3, r3
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450e:	3b01      	subs	r3, #1
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451c:	3b01      	subs	r3, #1
 800451e:	061b      	lsls	r3, r3, #24
 8004520:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004524:	4923      	ldr	r1, [pc, #140]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004526:	4313      	orrs	r3, r2
 8004528:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800452a:	4b22      	ldr	r3, [pc, #136]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	4a21      	ldr	r2, [pc, #132]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004536:	4b1f      	ldr	r3, [pc, #124]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800453a:	4b21      	ldr	r3, [pc, #132]	@ (80045c0 <HAL_RCC_OscConfig+0x778>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004542:	00d2      	lsls	r2, r2, #3
 8004544:	491b      	ldr	r1, [pc, #108]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004546:	4313      	orrs	r3, r2
 8004548:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800454a:	4b1a      	ldr	r3, [pc, #104]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	f023 020c 	bic.w	r2, r3, #12
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	4917      	ldr	r1, [pc, #92]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004558:	4313      	orrs	r3, r2
 800455a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800455c:	4b15      	ldr	r3, [pc, #84]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	f023 0202 	bic.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004568:	4912      	ldr	r1, [pc, #72]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 800456a:	4313      	orrs	r3, r2
 800456c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800456e:	4b11      	ldr	r3, [pc, #68]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	4a10      	ldr	r2, [pc, #64]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800457a:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 800457c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457e:	4a0d      	ldr	r2, [pc, #52]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004586:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	4a0a      	ldr	r2, [pc, #40]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 800458c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004592:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	4a07      	ldr	r2, [pc, #28]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459e:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a04      	ldr	r2, [pc, #16]	@ (80045b4 <HAL_RCC_OscConfig+0x76c>)
 80045a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fd f829 	bl	8001600 <HAL_GetTick>
 80045ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045b0:	e011      	b.n	80045d6 <HAL_RCC_OscConfig+0x78e>
 80045b2:	bf00      	nop
 80045b4:	58024400 	.word	0x58024400
 80045b8:	58024800 	.word	0x58024800
 80045bc:	fffffc0c 	.word	0xfffffc0c
 80045c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c4:	f7fd f81c 	bl	8001600 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e08a      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045d6:	4b47      	ldr	r3, [pc, #284]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x77c>
 80045e2:	e082      	b.n	80046ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e4:	4b43      	ldr	r3, [pc, #268]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a42      	ldr	r2, [pc, #264]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 80045ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fd f806 	bl	8001600 <HAL_GetTick>
 80045f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fd f802 	bl	8001600 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e070      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800460a:	4b3a      	ldr	r3, [pc, #232]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x7b0>
 8004616:	e068      	b.n	80046ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004618:	4b36      	ldr	r3, [pc, #216]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800461e:	4b35      	ldr	r3, [pc, #212]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004622:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	2b01      	cmp	r3, #1
 800462a:	d031      	beq.n	8004690 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f003 0203 	and.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d12a      	bne.n	8004690 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d122      	bne.n	8004690 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004654:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d11a      	bne.n	8004690 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	0a5b      	lsrs	r3, r3, #9
 800465e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004666:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d111      	bne.n	8004690 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	0c1b      	lsrs	r3, r3, #16
 8004670:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d108      	bne.n	8004690 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	0e1b      	lsrs	r3, r3, #24
 8004682:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e02b      	b.n	80046ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004694:	4b17      	ldr	r3, [pc, #92]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 8004696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004698:	08db      	lsrs	r3, r3, #3
 800469a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800469e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d01f      	beq.n	80046ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80046aa:	4b12      	ldr	r3, [pc, #72]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	4a11      	ldr	r2, [pc, #68]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046b6:	f7fc ffa3 	bl	8001600 <HAL_GetTick>
 80046ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80046bc:	bf00      	nop
 80046be:	f7fc ff9f 	bl	8001600 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d0f9      	beq.n	80046be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046ca:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 80046cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046ce:	4b0a      	ldr	r3, [pc, #40]	@ (80046f8 <HAL_RCC_OscConfig+0x8b0>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046d6:	00d2      	lsls	r2, r2, #3
 80046d8:	4906      	ldr	r1, [pc, #24]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80046de:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	4a04      	ldr	r2, [pc, #16]	@ (80046f4 <HAL_RCC_OscConfig+0x8ac>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3730      	adds	r7, #48	@ 0x30
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	58024400 	.word	0x58024400
 80046f8:	ffff0007 	.word	0xffff0007

080046fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e19c      	b.n	8004a4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004710:	4b8a      	ldr	r3, [pc, #552]	@ (800493c <HAL_RCC_ClockConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d910      	bls.n	8004740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b87      	ldr	r3, [pc, #540]	@ (800493c <HAL_RCC_ClockConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 020f 	bic.w	r2, r3, #15
 8004726:	4985      	ldr	r1, [pc, #532]	@ (800493c <HAL_RCC_ClockConfig+0x240>)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	4313      	orrs	r3, r2
 800472c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b83      	ldr	r3, [pc, #524]	@ (800493c <HAL_RCC_ClockConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e184      	b.n	8004a4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d010      	beq.n	800476e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	4b7b      	ldr	r3, [pc, #492]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004758:	429a      	cmp	r2, r3
 800475a:	d908      	bls.n	800476e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800475c:	4b78      	ldr	r3, [pc, #480]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	4975      	ldr	r1, [pc, #468]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 800476a:	4313      	orrs	r3, r2
 800476c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d010      	beq.n	800479c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	4b70      	ldr	r3, [pc, #448]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004786:	429a      	cmp	r2, r3
 8004788:	d908      	bls.n	800479c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800478a:	4b6d      	ldr	r3, [pc, #436]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	496a      	ldr	r1, [pc, #424]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 8004798:	4313      	orrs	r3, r2
 800479a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	4b64      	ldr	r3, [pc, #400]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d908      	bls.n	80047ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047b8:	4b61      	ldr	r3, [pc, #388]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	495e      	ldr	r1, [pc, #376]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69da      	ldr	r2, [r3, #28]
 80047da:	4b59      	ldr	r3, [pc, #356]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d908      	bls.n	80047f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047e6:	4b56      	ldr	r3, [pc, #344]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	4953      	ldr	r1, [pc, #332]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d010      	beq.n	8004826 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	4b4d      	ldr	r3, [pc, #308]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	429a      	cmp	r2, r3
 8004812:	d908      	bls.n	8004826 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004814:	4b4a      	ldr	r3, [pc, #296]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f023 020f 	bic.w	r2, r3, #15
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4947      	ldr	r1, [pc, #284]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 8004822:	4313      	orrs	r3, r2
 8004824:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d055      	beq.n	80048de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004832:	4b43      	ldr	r3, [pc, #268]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4940      	ldr	r1, [pc, #256]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 8004840:	4313      	orrs	r3, r2
 8004842:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d107      	bne.n	800485c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800484c:	4b3c      	ldr	r3, [pc, #240]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d121      	bne.n	800489c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0f6      	b.n	8004a4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d107      	bne.n	8004874 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004864:	4b36      	ldr	r3, [pc, #216]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d115      	bne.n	800489c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0ea      	b.n	8004a4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d107      	bne.n	800488c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800487c:	4b30      	ldr	r3, [pc, #192]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0de      	b.n	8004a4a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800488c:	4b2c      	ldr	r3, [pc, #176]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0d6      	b.n	8004a4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800489c:	4b28      	ldr	r3, [pc, #160]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f023 0207 	bic.w	r2, r3, #7
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4925      	ldr	r1, [pc, #148]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ae:	f7fc fea7 	bl	8001600 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b6:	f7fc fea3 	bl	8001600 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e0be      	b.n	8004a4a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	429a      	cmp	r2, r3
 80048dc:	d1eb      	bne.n	80048b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d010      	beq.n	800490c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	4b14      	ldr	r3, [pc, #80]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d208      	bcs.n	800490c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048fa:	4b11      	ldr	r3, [pc, #68]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f023 020f 	bic.w	r2, r3, #15
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	490e      	ldr	r1, [pc, #56]	@ (8004940 <HAL_RCC_ClockConfig+0x244>)
 8004908:	4313      	orrs	r3, r2
 800490a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800490c:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <HAL_RCC_ClockConfig+0x240>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d214      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b08      	ldr	r3, [pc, #32]	@ (800493c <HAL_RCC_ClockConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 020f 	bic.w	r2, r3, #15
 8004922:	4906      	ldr	r1, [pc, #24]	@ (800493c <HAL_RCC_ClockConfig+0x240>)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b04      	ldr	r3, [pc, #16]	@ (800493c <HAL_RCC_ClockConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e086      	b.n	8004a4a <HAL_RCC_ClockConfig+0x34e>
 800493c:	52002000 	.word	0x52002000
 8004940:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	4b3f      	ldr	r3, [pc, #252]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800495c:	429a      	cmp	r2, r3
 800495e:	d208      	bcs.n	8004972 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004960:	4b3c      	ldr	r3, [pc, #240]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	4939      	ldr	r1, [pc, #228]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 800496e:	4313      	orrs	r3, r2
 8004970:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d010      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	4b34      	ldr	r3, [pc, #208]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800498a:	429a      	cmp	r2, r3
 800498c:	d208      	bcs.n	80049a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800498e:	4b31      	ldr	r3, [pc, #196]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	492e      	ldr	r1, [pc, #184]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 800499c:	4313      	orrs	r3, r2
 800499e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d010      	beq.n	80049ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699a      	ldr	r2, [r3, #24]
 80049b0:	4b28      	ldr	r3, [pc, #160]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d208      	bcs.n	80049ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049bc:	4b25      	ldr	r3, [pc, #148]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	4922      	ldr	r1, [pc, #136]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d010      	beq.n	80049fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69da      	ldr	r2, [r3, #28]
 80049de:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d208      	bcs.n	80049fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	4917      	ldr	r1, [pc, #92]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049fc:	f000 f834 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b14      	ldr	r3, [pc, #80]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	4912      	ldr	r1, [pc, #72]	@ (8004a58 <HAL_RCC_ClockConfig+0x35c>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
 8004a18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a54 <HAL_RCC_ClockConfig+0x358>)
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	4a0d      	ldr	r2, [pc, #52]	@ (8004a58 <HAL_RCC_ClockConfig+0x35c>)
 8004a24:	5cd3      	ldrb	r3, [r2, r3]
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a30:	4a0a      	ldr	r2, [pc, #40]	@ (8004a5c <HAL_RCC_ClockConfig+0x360>)
 8004a32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a34:	4a0a      	ldr	r2, [pc, #40]	@ (8004a60 <HAL_RCC_ClockConfig+0x364>)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <HAL_RCC_ClockConfig+0x368>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc fd94 	bl	800156c <HAL_InitTick>
 8004a44:	4603      	mov	r3, r0
 8004a46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	58024400 	.word	0x58024400
 8004a58:	0800a3f8 	.word	0x0800a3f8
 8004a5c:	24000004 	.word	0x24000004
 8004a60:	24000000 	.word	0x24000000
 8004a64:	24000008 	.word	0x24000008

08004a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	@ 0x24
 8004a6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a6e:	4bb3      	ldr	r3, [pc, #716]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a76:	2b18      	cmp	r3, #24
 8004a78:	f200 8155 	bhi.w	8004d26 <HAL_RCC_GetSysClockFreq+0x2be>
 8004a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004ae9 	.word	0x08004ae9
 8004a88:	08004d27 	.word	0x08004d27
 8004a8c:	08004d27 	.word	0x08004d27
 8004a90:	08004d27 	.word	0x08004d27
 8004a94:	08004d27 	.word	0x08004d27
 8004a98:	08004d27 	.word	0x08004d27
 8004a9c:	08004d27 	.word	0x08004d27
 8004aa0:	08004d27 	.word	0x08004d27
 8004aa4:	08004b0f 	.word	0x08004b0f
 8004aa8:	08004d27 	.word	0x08004d27
 8004aac:	08004d27 	.word	0x08004d27
 8004ab0:	08004d27 	.word	0x08004d27
 8004ab4:	08004d27 	.word	0x08004d27
 8004ab8:	08004d27 	.word	0x08004d27
 8004abc:	08004d27 	.word	0x08004d27
 8004ac0:	08004d27 	.word	0x08004d27
 8004ac4:	08004b15 	.word	0x08004b15
 8004ac8:	08004d27 	.word	0x08004d27
 8004acc:	08004d27 	.word	0x08004d27
 8004ad0:	08004d27 	.word	0x08004d27
 8004ad4:	08004d27 	.word	0x08004d27
 8004ad8:	08004d27 	.word	0x08004d27
 8004adc:	08004d27 	.word	0x08004d27
 8004ae0:	08004d27 	.word	0x08004d27
 8004ae4:	08004b1b 	.word	0x08004b1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ae8:	4b94      	ldr	r3, [pc, #592]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d009      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004af4:	4b91      	ldr	r3, [pc, #580]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	08db      	lsrs	r3, r3, #3
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	4a90      	ldr	r2, [pc, #576]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b06:	e111      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b08:	4b8d      	ldr	r3, [pc, #564]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b0a:	61bb      	str	r3, [r7, #24]
      break;
 8004b0c:	e10e      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b10:	61bb      	str	r3, [r7, #24]
      break;
 8004b12:	e10b      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b14:	4b8c      	ldr	r3, [pc, #560]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b16:	61bb      	str	r3, [r7, #24]
      break;
 8004b18:	e108      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b1a:	4b88      	ldr	r3, [pc, #544]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b24:	4b85      	ldr	r3, [pc, #532]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b2e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b30:	4b82      	ldr	r3, [pc, #520]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b3a:	4b80      	ldr	r3, [pc, #512]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3e:	08db      	lsrs	r3, r3, #3
 8004b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80e1 	beq.w	8004d20 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	f000 8083 	beq.w	8004c6c <HAL_RCC_GetSysClockFreq+0x204>
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	f200 80a1 	bhi.w	8004cb0 <HAL_RCC_GetSysClockFreq+0x248>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x114>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d056      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b7a:	e099      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d02d      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b88:	4b6c      	ldr	r3, [pc, #432]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	08db      	lsrs	r3, r3, #3
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	4a6b      	ldr	r2, [pc, #428]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
 8004b98:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb2:	4b62      	ldr	r3, [pc, #392]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bc6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004d4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004be2:	e087      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004d50 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b51      	ldr	r3, [pc, #324]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c0a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004d4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c26:	e065      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004d54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3a:	4b40      	ldr	r3, [pc, #256]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c4e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004d4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c6a:	e043      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004d58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c92:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004d4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004caa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cae:	e021      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cd6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004d4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cf2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004cf4:	4b11      	ldr	r3, [pc, #68]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf8:	0a5b      	lsrs	r3, r3, #9
 8004cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cfe:	3301      	adds	r3, #1
 8004d00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	ee07 3a90 	vmov	s15, r3
 8004d08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d18:	ee17 3a90 	vmov	r3, s15
 8004d1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d1e:	e005      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61bb      	str	r3, [r7, #24]
      break;
 8004d24:	e002      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d26:	4b07      	ldr	r3, [pc, #28]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d28:	61bb      	str	r3, [r7, #24]
      break;
 8004d2a:	bf00      	nop
  }

  return sysclockfreq;
 8004d2c:	69bb      	ldr	r3, [r7, #24]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3724      	adds	r7, #36	@ 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	03d09000 	.word	0x03d09000
 8004d44:	003d0900 	.word	0x003d0900
 8004d48:	007a1200 	.word	0x007a1200
 8004d4c:	46000000 	.word	0x46000000
 8004d50:	4c742400 	.word	0x4c742400
 8004d54:	4a742400 	.word	0x4a742400
 8004d58:	4af42400 	.word	0x4af42400

08004d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d62:	f7ff fe81 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <HAL_RCC_GetHCLKFreq+0x50>)
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	490f      	ldr	r1, [pc, #60]	@ (8004db0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d80:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <HAL_RCC_GetHCLKFreq+0x50>)
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	4a09      	ldr	r2, [pc, #36]	@ (8004db0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d8a:	5cd3      	ldrb	r3, [r2, r3]
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
 8004d96:	4a07      	ldr	r2, [pc, #28]	@ (8004db4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d9a:	4a07      	ldr	r2, [pc, #28]	@ (8004db8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004da0:	4b04      	ldr	r3, [pc, #16]	@ (8004db4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004da2:	681b      	ldr	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	58024400 	.word	0x58024400
 8004db0:	0800a3f8 	.word	0x0800a3f8
 8004db4:	24000004 	.word	0x24000004
 8004db8:	24000000 	.word	0x24000000

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004dc0:	f7ff ffcc 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	4904      	ldr	r1, [pc, #16]	@ (8004de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dd2:	5ccb      	ldrb	r3, [r1, r3]
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	58024400 	.word	0x58024400
 8004de4:	0800a3f8 	.word	0x0800a3f8

08004de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004dec:	f7ff ffb6 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4904      	ldr	r1, [pc, #16]	@ (8004e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	0800a3f8 	.word	0x0800a3f8

08004e14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e18:	b0ca      	sub	sp, #296	@ 0x128
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e26:	2300      	movs	r3, #0
 8004e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004e38:	2500      	movs	r5, #0
 8004e3a:	ea54 0305 	orrs.w	r3, r4, r5
 8004e3e:	d049      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e4a:	d02f      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e50:	d828      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e56:	d01a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e5c:	d822      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e66:	d007      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e68:	e01c      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e6a:	4bb8      	ldr	r3, [pc, #736]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	4ab7      	ldr	r2, [pc, #732]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e76:	e01a      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	2102      	movs	r1, #2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 fc8f 	bl	80067a4 <RCCEx_PLL2_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e8c:	e00f      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e92:	3328      	adds	r3, #40	@ 0x28
 8004e94:	2102      	movs	r1, #2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 fd36 	bl	8006908 <RCCEx_PLL3_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ea2:	e004      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eaa:	e000      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004eb6:	4ba5      	ldr	r3, [pc, #660]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ec4:	4aa1      	ldr	r2, [pc, #644]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004eca:	e003      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004ee0:	f04f 0900 	mov.w	r9, #0
 8004ee4:	ea58 0309 	orrs.w	r3, r8, r9
 8004ee8:	d047      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d82a      	bhi.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f11 	.word	0x08004f11
 8004f00:	08004f1f 	.word	0x08004f1f
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08004f53 	.word	0x08004f53
 8004f0c:	08004f53 	.word	0x08004f53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f10:	4b8e      	ldr	r3, [pc, #568]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	4a8d      	ldr	r2, [pc, #564]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f1c:	e01a      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f22:	3308      	adds	r3, #8
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 fc3c 	bl	80067a4 <RCCEx_PLL2_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f32:	e00f      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f38:	3328      	adds	r3, #40	@ 0x28
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 fce3 	bl	8006908 <RCCEx_PLL3_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f48:	e004      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f50:	e000      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f5c:	4b7b      	ldr	r3, [pc, #492]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f60:	f023 0107 	bic.w	r1, r3, #7
 8004f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6a:	4a78      	ldr	r2, [pc, #480]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f70:	e003      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004f86:	f04f 0b00 	mov.w	fp, #0
 8004f8a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f8e:	d04c      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f9a:	d030      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa0:	d829      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004fa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa4:	d02d      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa8:	d825      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004faa:	2b80      	cmp	r3, #128	@ 0x80
 8004fac:	d018      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004fae:	2b80      	cmp	r3, #128	@ 0x80
 8004fb0:	d821      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004fb6:	2b40      	cmp	r3, #64	@ 0x40
 8004fb8:	d007      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004fba:	e01c      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fbc:	4b63      	ldr	r3, [pc, #396]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	4a62      	ldr	r2, [pc, #392]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fc8:	e01c      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fce:	3308      	adds	r3, #8
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 fbe6 	bl	80067a4 <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fde:	e011      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe4:	3328      	adds	r3, #40	@ 0x28
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 fc8d 	bl	8006908 <RCCEx_PLL3_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ff4:	e006      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ffc:	e002      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004ffe:	bf00      	nop
 8005000:	e000      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800500c:	4b4f      	ldr	r3, [pc, #316]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800500e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005010:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501a:	4a4c      	ldr	r2, [pc, #304]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800501c:	430b      	orrs	r3, r1
 800501e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005020:	e003      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800502a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005036:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800503a:	2300      	movs	r3, #0
 800503c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005040:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005044:	460b      	mov	r3, r1
 8005046:	4313      	orrs	r3, r2
 8005048:	d053      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800504a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005052:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005056:	d035      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005058:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800505c:	d82e      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800505e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005062:	d031      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005064:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005068:	d828      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800506a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800506e:	d01a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005074:	d822      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800507a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800507e:	d007      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005080:	e01c      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005082:	4b32      	ldr	r3, [pc, #200]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	4a31      	ldr	r2, [pc, #196]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800508c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800508e:	e01c      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005094:	3308      	adds	r3, #8
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f001 fb83 	bl	80067a4 <RCCEx_PLL2_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050a4:	e011      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050aa:	3328      	adds	r3, #40	@ 0x28
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 fc2a 	bl	8006908 <RCCEx_PLL3_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050ba:	e006      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050c2:	e002      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80050c4:	bf00      	nop
 80050c6:	e000      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80050c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80050d2:	4b1e      	ldr	r3, [pc, #120]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050e2:	4a1a      	ldr	r2, [pc, #104]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80050e8:	e003      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80050f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005108:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800510c:	460b      	mov	r3, r1
 800510e:	4313      	orrs	r3, r2
 8005110:	d056      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005116:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800511a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800511e:	d038      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005120:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005124:	d831      	bhi.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005126:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800512a:	d034      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800512c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005130:	d82b      	bhi.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005136:	d01d      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005138:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800513c:	d825      	bhi.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d006      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005146:	d00a      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005148:	e01f      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005150:	4ba2      	ldr	r3, [pc, #648]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	4aa1      	ldr	r2, [pc, #644]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800515a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800515c:	e01c      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005162:	3308      	adds	r3, #8
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f001 fb1c 	bl	80067a4 <RCCEx_PLL2_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005172:	e011      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005178:	3328      	adds	r3, #40	@ 0x28
 800517a:	2100      	movs	r1, #0
 800517c:	4618      	mov	r0, r3
 800517e:	f001 fbc3 	bl	8006908 <RCCEx_PLL3_Config>
 8005182:	4603      	mov	r3, r0
 8005184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005188:	e006      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005190:	e002      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005192:	bf00      	nop
 8005194:	e000      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80051a0:	4b8e      	ldr	r3, [pc, #568]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80051a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80051b0:	4a8a      	ldr	r2, [pc, #552]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051b2:	430b      	orrs	r3, r1
 80051b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051b6:	e003      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80051cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051d0:	2300      	movs	r3, #0
 80051d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80051da:	460b      	mov	r3, r1
 80051dc:	4313      	orrs	r3, r2
 80051de:	d03a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e6:	2b30      	cmp	r3, #48	@ 0x30
 80051e8:	d01f      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80051ea:	2b30      	cmp	r3, #48	@ 0x30
 80051ec:	d819      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d00c      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d815      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d019      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80051fa:	2b10      	cmp	r3, #16
 80051fc:	d111      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051fe:	4b77      	ldr	r3, [pc, #476]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	4a76      	ldr	r2, [pc, #472]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005208:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800520a:	e011      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800520c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005210:	3308      	adds	r3, #8
 8005212:	2102      	movs	r1, #2
 8005214:	4618      	mov	r0, r3
 8005216:	f001 fac5 	bl	80067a4 <RCCEx_PLL2_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005220:	e006      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005228:	e002      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800522e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005238:	4b68      	ldr	r3, [pc, #416]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800523a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800523c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005246:	4a65      	ldr	r2, [pc, #404]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005248:	430b      	orrs	r3, r1
 800524a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800524c:	e003      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005262:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005266:	2300      	movs	r3, #0
 8005268:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800526c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005270:	460b      	mov	r3, r1
 8005272:	4313      	orrs	r3, r2
 8005274:	d051      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800527c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005280:	d035      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005282:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005286:	d82e      	bhi.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005288:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800528c:	d031      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800528e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005292:	d828      	bhi.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005298:	d01a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800529e:	d822      	bhi.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80052a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052a8:	d007      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80052aa:	e01c      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ac:	4b4b      	ldr	r3, [pc, #300]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b0:	4a4a      	ldr	r2, [pc, #296]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052b8:	e01c      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052be:	3308      	adds	r3, #8
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 fa6e 	bl	80067a4 <RCCEx_PLL2_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052ce:	e011      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d4:	3328      	adds	r3, #40	@ 0x28
 80052d6:	2100      	movs	r1, #0
 80052d8:	4618      	mov	r0, r3
 80052da:	f001 fb15 	bl	8006908 <RCCEx_PLL3_Config>
 80052de:	4603      	mov	r3, r0
 80052e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052e4:	e006      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052ec:	e002      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80052ee:	bf00      	nop
 80052f0:	e000      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80052f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052fc:	4b37      	ldr	r3, [pc, #220]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005300:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530a:	4a34      	ldr	r2, [pc, #208]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800530c:	430b      	orrs	r3, r1
 800530e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005310:	e003      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005316:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800531a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005326:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800532a:	2300      	movs	r3, #0
 800532c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005330:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005334:	460b      	mov	r3, r1
 8005336:	4313      	orrs	r3, r2
 8005338:	d056      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005344:	d033      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005346:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800534a:	d82c      	bhi.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800534c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005350:	d02f      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005352:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005356:	d826      	bhi.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005358:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800535c:	d02b      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800535e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005362:	d820      	bhi.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005364:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005368:	d012      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800536a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800536e:	d81a      	bhi.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d022      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005378:	d115      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800537a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537e:	3308      	adds	r3, #8
 8005380:	2101      	movs	r1, #1
 8005382:	4618      	mov	r0, r3
 8005384:	f001 fa0e 	bl	80067a4 <RCCEx_PLL2_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800538e:	e015      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005394:	3328      	adds	r3, #40	@ 0x28
 8005396:	2101      	movs	r1, #1
 8005398:	4618      	mov	r0, r3
 800539a:	f001 fab5 	bl	8006908 <RCCEx_PLL3_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80053a4:	e00a      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053ac:	e006      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053ae:	bf00      	nop
 80053b0:	e004      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053b2:	bf00      	nop
 80053b4:	e002      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053b6:	bf00      	nop
 80053b8:	e000      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10d      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053c4:	4b05      	ldr	r3, [pc, #20]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053d2:	4a02      	ldr	r2, [pc, #8]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80053d8:	e006      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80053da:	bf00      	nop
 80053dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80053f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005402:	460b      	mov	r3, r1
 8005404:	4313      	orrs	r3, r2
 8005406:	d055      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005414:	d033      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800541a:	d82c      	bhi.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800541c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005420:	d02f      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005426:	d826      	bhi.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005428:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800542c:	d02b      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800542e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005432:	d820      	bhi.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005438:	d012      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800543a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800543e:	d81a      	bhi.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005440:	2b00      	cmp	r3, #0
 8005442:	d022      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005448:	d115      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544e:	3308      	adds	r3, #8
 8005450:	2101      	movs	r1, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f001 f9a6 	bl	80067a4 <RCCEx_PLL2_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800545e:	e015      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005464:	3328      	adds	r3, #40	@ 0x28
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fa4d 	bl	8006908 <RCCEx_PLL3_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005474:	e00a      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800547c:	e006      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800547e:	bf00      	nop
 8005480:	e004      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005482:	bf00      	nop
 8005484:	e002      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005486:	bf00      	nop
 8005488:	e000      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800548a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10b      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005494:	4ba3      	ldr	r3, [pc, #652]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005498:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054a4:	4a9f      	ldr	r2, [pc, #636]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a6:	430b      	orrs	r3, r1
 80054a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80054aa:	e003      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80054c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054c4:	2300      	movs	r3, #0
 80054c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80054ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054ce:	460b      	mov	r3, r1
 80054d0:	4313      	orrs	r3, r2
 80054d2:	d037      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054de:	d00e      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80054e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054e4:	d816      	bhi.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d018      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80054ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ee:	d111      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f0:	4b8c      	ldr	r3, [pc, #560]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	4a8b      	ldr	r2, [pc, #556]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054fc:	e00f      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005502:	3308      	adds	r3, #8
 8005504:	2101      	movs	r1, #1
 8005506:	4618      	mov	r0, r3
 8005508:	f001 f94c 	bl	80067a4 <RCCEx_PLL2_Config>
 800550c:	4603      	mov	r3, r0
 800550e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005512:	e004      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800551a:	e000      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800551c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800551e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005526:	4b7f      	ldr	r3, [pc, #508]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005534:	4a7b      	ldr	r2, [pc, #492]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005536:	430b      	orrs	r3, r1
 8005538:	6513      	str	r3, [r2, #80]	@ 0x50
 800553a:	e003      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005554:	2300      	movs	r3, #0
 8005556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800555a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800555e:	460b      	mov	r3, r1
 8005560:	4313      	orrs	r3, r2
 8005562:	d039      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800556a:	2b03      	cmp	r3, #3
 800556c:	d81c      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800556e:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	080055b1 	.word	0x080055b1
 8005578:	08005585 	.word	0x08005585
 800557c:	08005593 	.word	0x08005593
 8005580:	080055b1 	.word	0x080055b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005584:	4b67      	ldr	r3, [pc, #412]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005588:	4a66      	ldr	r2, [pc, #408]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800558a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800558e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005590:	e00f      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	3308      	adds	r3, #8
 8005598:	2102      	movs	r1, #2
 800559a:	4618      	mov	r0, r3
 800559c:	f001 f902 	bl	80067a4 <RCCEx_PLL2_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80055a6:	e004      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80055b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055ba:	4b5a      	ldr	r3, [pc, #360]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055be:	f023 0103 	bic.w	r1, r3, #3
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c8:	4a56      	ldr	r2, [pc, #344]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ca:	430b      	orrs	r3, r1
 80055cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055ce:	e003      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055e8:	2300      	movs	r3, #0
 80055ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80055f2:	460b      	mov	r3, r1
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f000 809f 	beq.w	8005738 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a4a      	ldr	r2, [pc, #296]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005604:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005606:	f7fb fffb 	bl	8001600 <HAL_GetTick>
 800560a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800560e:	e00b      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005610:	f7fb fff6 	bl	8001600 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b64      	cmp	r3, #100	@ 0x64
 800561e:	d903      	bls.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005626:	e005      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005628:	4b3f      	ldr	r3, [pc, #252]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0ed      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005638:	2b00      	cmp	r3, #0
 800563a:	d179      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800563c:	4b39      	ldr	r3, [pc, #228]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800563e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005644:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005648:	4053      	eors	r3, r2
 800564a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800564e:	2b00      	cmp	r3, #0
 8005650:	d015      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005652:	4b34      	ldr	r3, [pc, #208]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800565a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800565e:	4b31      	ldr	r3, [pc, #196]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005662:	4a30      	ldr	r2, [pc, #192]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005668:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800566a:	4b2e      	ldr	r3, [pc, #184]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566e:	4a2d      	ldr	r2, [pc, #180]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005674:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005676:	4a2b      	ldr	r2, [pc, #172]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005678:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800567c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005682:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800568a:	d118      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fb ffb8 	bl	8001600 <HAL_GetTick>
 8005690:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005694:	e00d      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005696:	f7fb ffb3 	bl	8001600 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80056a0:	1ad2      	subs	r2, r2, r3
 80056a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d903      	bls.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80056b0:	e005      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0eb      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80056be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d129      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056d6:	d10e      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80056d8:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056e8:	091a      	lsrs	r2, r3, #4
 80056ea:	4b10      	ldr	r3, [pc, #64]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6113      	str	r3, [r2, #16]
 80056f4:	e005      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80056f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005700:	6113      	str	r3, [r2, #16]
 8005702:	4b08      	ldr	r3, [pc, #32]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005704:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800570e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005712:	4a04      	ldr	r2, [pc, #16]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005714:	430b      	orrs	r3, r1
 8005716:	6713      	str	r3, [r2, #112]	@ 0x70
 8005718:	e00e      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800571a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800571e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005722:	e009      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005724:	58024400 	.word	0x58024400
 8005728:	58024800 	.word	0x58024800
 800572c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005734:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f002 0301 	and.w	r3, r2, #1
 8005744:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005748:	2300      	movs	r3, #0
 800574a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800574e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005752:	460b      	mov	r3, r1
 8005754:	4313      	orrs	r3, r2
 8005756:	f000 8089 	beq.w	800586c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005760:	2b28      	cmp	r3, #40	@ 0x28
 8005762:	d86b      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005764:	a201      	add	r2, pc, #4	@ (adr r2, 800576c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	08005845 	.word	0x08005845
 8005770:	0800583d 	.word	0x0800583d
 8005774:	0800583d 	.word	0x0800583d
 8005778:	0800583d 	.word	0x0800583d
 800577c:	0800583d 	.word	0x0800583d
 8005780:	0800583d 	.word	0x0800583d
 8005784:	0800583d 	.word	0x0800583d
 8005788:	0800583d 	.word	0x0800583d
 800578c:	08005811 	.word	0x08005811
 8005790:	0800583d 	.word	0x0800583d
 8005794:	0800583d 	.word	0x0800583d
 8005798:	0800583d 	.word	0x0800583d
 800579c:	0800583d 	.word	0x0800583d
 80057a0:	0800583d 	.word	0x0800583d
 80057a4:	0800583d 	.word	0x0800583d
 80057a8:	0800583d 	.word	0x0800583d
 80057ac:	08005827 	.word	0x08005827
 80057b0:	0800583d 	.word	0x0800583d
 80057b4:	0800583d 	.word	0x0800583d
 80057b8:	0800583d 	.word	0x0800583d
 80057bc:	0800583d 	.word	0x0800583d
 80057c0:	0800583d 	.word	0x0800583d
 80057c4:	0800583d 	.word	0x0800583d
 80057c8:	0800583d 	.word	0x0800583d
 80057cc:	08005845 	.word	0x08005845
 80057d0:	0800583d 	.word	0x0800583d
 80057d4:	0800583d 	.word	0x0800583d
 80057d8:	0800583d 	.word	0x0800583d
 80057dc:	0800583d 	.word	0x0800583d
 80057e0:	0800583d 	.word	0x0800583d
 80057e4:	0800583d 	.word	0x0800583d
 80057e8:	0800583d 	.word	0x0800583d
 80057ec:	08005845 	.word	0x08005845
 80057f0:	0800583d 	.word	0x0800583d
 80057f4:	0800583d 	.word	0x0800583d
 80057f8:	0800583d 	.word	0x0800583d
 80057fc:	0800583d 	.word	0x0800583d
 8005800:	0800583d 	.word	0x0800583d
 8005804:	0800583d 	.word	0x0800583d
 8005808:	0800583d 	.word	0x0800583d
 800580c:	08005845 	.word	0x08005845
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005814:	3308      	adds	r3, #8
 8005816:	2101      	movs	r1, #1
 8005818:	4618      	mov	r0, r3
 800581a:	f000 ffc3 	bl	80067a4 <RCCEx_PLL2_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005824:	e00f      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582a:	3328      	adds	r3, #40	@ 0x28
 800582c:	2101      	movs	r1, #1
 800582e:	4618      	mov	r0, r3
 8005830:	f001 f86a 	bl	8006908 <RCCEx_PLL3_Config>
 8005834:	4603      	mov	r3, r0
 8005836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800583a:	e004      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005842:	e000      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800584e:	4bbf      	ldr	r3, [pc, #764]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005852:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800585c:	4abb      	ldr	r2, [pc, #748]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800585e:	430b      	orrs	r3, r1
 8005860:	6553      	str	r3, [r2, #84]	@ 0x54
 8005862:	e003      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f002 0302 	and.w	r3, r2, #2
 8005878:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800587c:	2300      	movs	r3, #0
 800587e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005882:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005886:	460b      	mov	r3, r1
 8005888:	4313      	orrs	r3, r2
 800588a:	d041      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005890:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005892:	2b05      	cmp	r3, #5
 8005894:	d824      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005896:	a201      	add	r2, pc, #4	@ (adr r2, 800589c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058e9 	.word	0x080058e9
 80058a0:	080058b5 	.word	0x080058b5
 80058a4:	080058cb 	.word	0x080058cb
 80058a8:	080058e9 	.word	0x080058e9
 80058ac:	080058e9 	.word	0x080058e9
 80058b0:	080058e9 	.word	0x080058e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b8:	3308      	adds	r3, #8
 80058ba:	2101      	movs	r1, #1
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 ff71 	bl	80067a4 <RCCEx_PLL2_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058c8:	e00f      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ce:	3328      	adds	r3, #40	@ 0x28
 80058d0:	2101      	movs	r1, #1
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 f818 	bl	8006908 <RCCEx_PLL3_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058de:	e004      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058e6:	e000      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80058e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058f2:	4b96      	ldr	r3, [pc, #600]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f6:	f023 0107 	bic.w	r1, r3, #7
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005900:	4a92      	ldr	r2, [pc, #584]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005902:	430b      	orrs	r3, r1
 8005904:	6553      	str	r3, [r2, #84]	@ 0x54
 8005906:	e003      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800590c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f002 0304 	and.w	r3, r2, #4
 800591c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005920:	2300      	movs	r3, #0
 8005922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005926:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800592a:	460b      	mov	r3, r1
 800592c:	4313      	orrs	r3, r2
 800592e:	d044      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005938:	2b05      	cmp	r3, #5
 800593a:	d825      	bhi.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800593c:	a201      	add	r2, pc, #4	@ (adr r2, 8005944 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005991 	.word	0x08005991
 8005948:	0800595d 	.word	0x0800595d
 800594c:	08005973 	.word	0x08005973
 8005950:	08005991 	.word	0x08005991
 8005954:	08005991 	.word	0x08005991
 8005958:	08005991 	.word	0x08005991
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005960:	3308      	adds	r3, #8
 8005962:	2101      	movs	r1, #1
 8005964:	4618      	mov	r0, r3
 8005966:	f000 ff1d 	bl	80067a4 <RCCEx_PLL2_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005970:	e00f      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005976:	3328      	adds	r3, #40	@ 0x28
 8005978:	2101      	movs	r1, #1
 800597a:	4618      	mov	r0, r3
 800597c:	f000 ffc4 	bl	8006908 <RCCEx_PLL3_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005986:	e004      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800598e:	e000      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10b      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800599a:	4b6c      	ldr	r3, [pc, #432]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800599c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599e:	f023 0107 	bic.w	r1, r3, #7
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059aa:	4a68      	ldr	r2, [pc, #416]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059ac:	430b      	orrs	r3, r1
 80059ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f002 0320 	and.w	r3, r2, #32
 80059c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059d4:	460b      	mov	r3, r1
 80059d6:	4313      	orrs	r3, r2
 80059d8:	d055      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e6:	d033      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80059e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059ec:	d82c      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f2:	d02f      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f8:	d826      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059fe:	d02b      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005a00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a04:	d820      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a0a:	d012      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a10:	d81a      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d022      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005a16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a1a:	d115      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a20:	3308      	adds	r3, #8
 8005a22:	2100      	movs	r1, #0
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 febd 	bl	80067a4 <RCCEx_PLL2_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a30:	e015      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a36:	3328      	adds	r3, #40	@ 0x28
 8005a38:	2102      	movs	r1, #2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 ff64 	bl	8006908 <RCCEx_PLL3_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a46:	e00a      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a4e:	e006      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a50:	bf00      	nop
 8005a52:	e004      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a54:	bf00      	nop
 8005a56:	e002      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a66:	4b39      	ldr	r3, [pc, #228]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	4a35      	ldr	r2, [pc, #212]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a7c:	e003      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a96:	2300      	movs	r3, #0
 8005a98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	d058      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ab2:	d033      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005ab4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ab8:	d82c      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005abe:	d02f      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac4:	d826      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ac6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005aca:	d02b      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005acc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ad0:	d820      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ad6:	d012      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005adc:	d81a      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d022      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ae6:	d115      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aec:	3308      	adds	r3, #8
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fe57 	bl	80067a4 <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005afc:	e015      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	3328      	adds	r3, #40	@ 0x28
 8005b04:	2102      	movs	r1, #2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fefe 	bl	8006908 <RCCEx_PLL3_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b12:	e00a      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b1a:	e006      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b1c:	bf00      	nop
 8005b1e:	e004      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b20:	bf00      	nop
 8005b22:	e002      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b24:	bf00      	nop
 8005b26:	e000      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10e      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b32:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b36:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b42:	4a02      	ldr	r2, [pc, #8]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b44:	430b      	orrs	r3, r1
 8005b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b48:	e006      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005b4a:	bf00      	nop
 8005b4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b6e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005b72:	460b      	mov	r3, r1
 8005b74:	4313      	orrs	r3, r2
 8005b76:	d055      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b80:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b84:	d033      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005b86:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b8a:	d82c      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b90:	d02f      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005b92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b96:	d826      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b98:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b9c:	d02b      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005b9e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ba2:	d820      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ba8:	d012      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005baa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bae:	d81a      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d022      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bb8:	d115      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fdee 	bl	80067a4 <RCCEx_PLL2_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bce:	e015      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd4:	3328      	adds	r3, #40	@ 0x28
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fe95 	bl	8006908 <RCCEx_PLL3_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005be4:	e00a      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bec:	e006      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005bee:	bf00      	nop
 8005bf0:	e004      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005bf2:	bf00      	nop
 8005bf4:	e002      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005bf6:	bf00      	nop
 8005bf8:	e000      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10b      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005c04:	4ba1      	ldr	r3, [pc, #644]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c08:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c14:	4a9d      	ldr	r2, [pc, #628]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c16:	430b      	orrs	r3, r1
 8005c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c1a:	e003      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	f002 0308 	and.w	r3, r2, #8
 8005c30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	d01e      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c50:	d10c      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	3328      	adds	r3, #40	@ 0x28
 8005c58:	2102      	movs	r1, #2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fe54 	bl	8006908 <RCCEx_PLL3_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c6c:	4b87      	ldr	r3, [pc, #540]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c70:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c7c:	4a83      	ldr	r2, [pc, #524]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f002 0310 	and.w	r3, r2, #16
 8005c8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c92:	2300      	movs	r3, #0
 8005c94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c98:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	d01e      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cae:	d10c      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb4:	3328      	adds	r3, #40	@ 0x28
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fe25 	bl	8006908 <RCCEx_PLL3_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cca:	4b70      	ldr	r3, [pc, #448]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cda:	4a6c      	ldr	r2, [pc, #432]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005cec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cf6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	d03e      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d0c:	d022      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005d0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d12:	d81b      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d1c:	d00b      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005d1e:	e015      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d24:	3308      	adds	r3, #8
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fd3b 	bl	80067a4 <RCCEx_PLL2_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d34:	e00f      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	3328      	adds	r3, #40	@ 0x28
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fde2 	bl	8006908 <RCCEx_PLL3_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d4a:	e004      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d52:	e000      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d5e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d6e:	4a47      	ldr	r2, [pc, #284]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d70:	430b      	orrs	r3, r1
 8005d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d74:	e003      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d90:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d94:	460b      	mov	r3, r1
 8005d96:	4313      	orrs	r3, r2
 8005d98:	d03b      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005da6:	d01f      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005da8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dac:	d818      	bhi.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005db2:	d003      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005db4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005db8:	d007      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005dba:	e011      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dbc:	4b33      	ldr	r3, [pc, #204]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc0:	4a32      	ldr	r2, [pc, #200]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dc8:	e00f      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dce:	3328      	adds	r3, #40	@ 0x28
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fd98 	bl	8006908 <RCCEx_PLL3_Config>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dde:	e004      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de6:	e000      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10b      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005df2:	4b26      	ldr	r3, [pc, #152]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e02:	4a22      	ldr	r2, [pc, #136]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e04:	430b      	orrs	r3, r1
 8005e06:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e08:	e003      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005e1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e20:	2300      	movs	r3, #0
 8005e22:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	d034      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e3c:	d007      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005e3e:	e011      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e40:	4b12      	ldr	r3, [pc, #72]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	4a11      	ldr	r2, [pc, #68]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e4c:	e00e      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e52:	3308      	adds	r3, #8
 8005e54:	2102      	movs	r1, #2
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fca4 	bl	80067a4 <RCCEx_PLL2_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e62:	e003      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10d      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e74:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e82:	4a02      	ldr	r2, [pc, #8]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e84:	430b      	orrs	r3, r1
 8005e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e88:	e006      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005e8a:	bf00      	nop
 8005e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005eaa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	d00c      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb8:	3328      	adds	r3, #40	@ 0x28
 8005eba:	2102      	movs	r1, #2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fd23 	bl	8006908 <RCCEx_PLL3_Config>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8005edc:	2300      	movs	r3, #0
 8005ede:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ee0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	d038      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ef2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ef6:	d018      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005efc:	d811      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f02:	d014      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f08:	d80b      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d011      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f12:	d106      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f14:	4bc3      	ldr	r3, [pc, #780]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	4ac2      	ldr	r2, [pc, #776]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005f20:	e008      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f28:	e004      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f2a:	bf00      	nop
 8005f2c:	e002      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f2e:	bf00      	nop
 8005f30:	e000      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f3c:	4bb9      	ldr	r3, [pc, #740]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f4c:	4ab5      	ldr	r2, [pc, #724]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f52:	e003      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f72:	460b      	mov	r3, r1
 8005f74:	4313      	orrs	r3, r2
 8005f76:	d009      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f78:	4baa      	ldr	r3, [pc, #680]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f86:	4aa7      	ldr	r2, [pc, #668]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f98:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	d00a      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005fa8:	4b9e      	ldr	r3, [pc, #632]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005fb8:	4a9a      	ldr	r2, [pc, #616]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fcc:	2300      	movs	r3, #0
 8005fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fd0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fda:	4b92      	ldr	r3, [pc, #584]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fde:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe8:	4a8e      	ldr	r2, [pc, #568]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fea:	430b      	orrs	r3, r1
 8005fec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005ffa:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006000:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006004:	460b      	mov	r3, r1
 8006006:	4313      	orrs	r3, r2
 8006008:	d00e      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800600a:	4b86      	ldr	r3, [pc, #536]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	4a85      	ldr	r2, [pc, #532]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006010:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006014:	6113      	str	r3, [r2, #16]
 8006016:	4b83      	ldr	r3, [pc, #524]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006018:	6919      	ldr	r1, [r3, #16]
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006022:	4a80      	ldr	r2, [pc, #512]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006024:	430b      	orrs	r3, r1
 8006026:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006034:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006036:	2300      	movs	r3, #0
 8006038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800603a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800603e:	460b      	mov	r3, r1
 8006040:	4313      	orrs	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006044:	4b77      	ldr	r3, [pc, #476]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006048:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006052:	4a74      	ldr	r2, [pc, #464]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006054:	430b      	orrs	r3, r1
 8006056:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006064:	633b      	str	r3, [r7, #48]	@ 0x30
 8006066:	2300      	movs	r3, #0
 8006068:	637b      	str	r3, [r7, #52]	@ 0x34
 800606a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800606e:	460b      	mov	r3, r1
 8006070:	4313      	orrs	r3, r2
 8006072:	d00a      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006074:	4b6b      	ldr	r3, [pc, #428]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006078:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800607c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006084:	4a67      	ldr	r2, [pc, #412]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006086:	430b      	orrs	r3, r1
 8006088:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800608a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	2100      	movs	r1, #0
 8006094:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800609c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80060a0:	460b      	mov	r3, r1
 80060a2:	4313      	orrs	r3, r2
 80060a4:	d011      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060aa:	3308      	adds	r3, #8
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fb78 	bl	80067a4 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	2100      	movs	r1, #0
 80060d4:	6239      	str	r1, [r7, #32]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
 80060dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80060e0:	460b      	mov	r3, r1
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d011      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ea:	3308      	adds	r3, #8
 80060ec:	2101      	movs	r1, #1
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fb58 	bl	80067a4 <RCCEx_PLL2_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	2100      	movs	r1, #0
 8006114:	61b9      	str	r1, [r7, #24]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006120:	460b      	mov	r3, r1
 8006122:	4313      	orrs	r3, r2
 8006124:	d011      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612a:	3308      	adds	r3, #8
 800612c:	2102      	movs	r1, #2
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fb38 	bl	80067a4 <RCCEx_PLL2_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800613a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800614a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	2100      	movs	r1, #0
 8006154:	6139      	str	r1, [r7, #16]
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006160:	460b      	mov	r3, r1
 8006162:	4313      	orrs	r3, r2
 8006164:	d011      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	3328      	adds	r3, #40	@ 0x28
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fbca 	bl	8006908 <RCCEx_PLL3_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800617a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	2100      	movs	r1, #0
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80061a0:	460b      	mov	r3, r1
 80061a2:	4313      	orrs	r3, r2
 80061a4:	d011      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	3328      	adds	r3, #40	@ 0x28
 80061ac:	2101      	movs	r1, #1
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fbaa 	bl	8006908 <RCCEx_PLL3_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80061ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	2100      	movs	r1, #0
 80061d4:	6039      	str	r1, [r7, #0]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	607b      	str	r3, [r7, #4]
 80061dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061e0:	460b      	mov	r3, r1
 80061e2:	4313      	orrs	r3, r2
 80061e4:	d011      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ea:	3328      	adds	r3, #40	@ 0x28
 80061ec:	2102      	movs	r1, #2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fb8a 	bl	8006908 <RCCEx_PLL3_Config>
 80061f4:	4603      	mov	r3, r0
 80061f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80061fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800620a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
}
 8006218:	4618      	mov	r0, r3
 800621a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800621e:	46bd      	mov	sp, r7
 8006220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006224:	58024400 	.word	0x58024400

08006228 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800622c:	f7fe fd96 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8006230:	4602      	mov	r2, r0
 8006232:	4b06      	ldr	r3, [pc, #24]	@ (800624c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	091b      	lsrs	r3, r3, #4
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	4904      	ldr	r1, [pc, #16]	@ (8006250 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800623e:	5ccb      	ldrb	r3, [r1, r3]
 8006240:	f003 031f 	and.w	r3, r3, #31
 8006244:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006248:	4618      	mov	r0, r3
 800624a:	bd80      	pop	{r7, pc}
 800624c:	58024400 	.word	0x58024400
 8006250:	0800a3f8 	.word	0x0800a3f8

08006254 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006254:	b480      	push	{r7}
 8006256:	b089      	sub	sp, #36	@ 0x24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800625c:	4ba1      	ldr	r3, [pc, #644]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800625e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006260:	f003 0303 	and.w	r3, r3, #3
 8006264:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006266:	4b9f      	ldr	r3, [pc, #636]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626a:	0b1b      	lsrs	r3, r3, #12
 800626c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006270:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006272:	4b9c      	ldr	r3, [pc, #624]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006276:	091b      	lsrs	r3, r3, #4
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800627e:	4b99      	ldr	r3, [pc, #612]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006282:	08db      	lsrs	r3, r3, #3
 8006284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	fb02 f303 	mul.w	r3, r2, r3
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006296:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8111 	beq.w	80064c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	f000 8083 	beq.w	80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	f200 80a1 	bhi.w	80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d056      	beq.n	800636c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80062be:	e099      	b.n	80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062c0:	4b88      	ldr	r3, [pc, #544]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d02d      	beq.n	8006328 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062cc:	4b85      	ldr	r3, [pc, #532]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	08db      	lsrs	r3, r3, #3
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	4a84      	ldr	r2, [pc, #528]	@ (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80062d8:	fa22 f303 	lsr.w	r3, r2, r3
 80062dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f6:	4b7b      	ldr	r3, [pc, #492]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006306:	ed97 6a03 	vldr	s12, [r7, #12]
 800630a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800630e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800631a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006322:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006326:	e087      	b.n	8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633a:	4b6a      	ldr	r3, [pc, #424]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800633c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634a:	ed97 6a03 	vldr	s12, [r7, #12]
 800634e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800635e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800636a:	e065      	b.n	8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006376:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800637a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637e:	4b59      	ldr	r3, [pc, #356]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006392:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ae:	e043      	b.n	8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80064f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80063be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c2:	4b48      	ldr	r3, [pc, #288]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063f2:	e021      	b.n	8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006406:	4b37      	ldr	r3, [pc, #220]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006416:	ed97 6a03 	vldr	s12, [r7, #12]
 800641a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800641e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800642a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006436:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006438:	4b2a      	ldr	r3, [pc, #168]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643c:	0a5b      	lsrs	r3, r3, #9
 800643e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800644e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006452:	edd7 6a07 	vldr	s13, [r7, #28]
 8006456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800645a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800645e:	ee17 2a90 	vmov	r2, s15
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006466:	4b1f      	ldr	r3, [pc, #124]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646a:	0c1b      	lsrs	r3, r3, #16
 800646c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006470:	ee07 3a90 	vmov	s15, r3
 8006474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800647c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006480:	edd7 6a07 	vldr	s13, [r7, #28]
 8006484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800648c:	ee17 2a90 	vmov	r2, s15
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006494:	4b13      	ldr	r3, [pc, #76]	@ (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	0e1b      	lsrs	r3, r3, #24
 800649a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80064b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ba:	ee17 2a90 	vmov	r2, s15
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80064c2:	e008      	b.n	80064d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	609a      	str	r2, [r3, #8]
}
 80064d6:	bf00      	nop
 80064d8:	3724      	adds	r7, #36	@ 0x24
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	58024400 	.word	0x58024400
 80064e8:	03d09000 	.word	0x03d09000
 80064ec:	46000000 	.word	0x46000000
 80064f0:	4c742400 	.word	0x4c742400
 80064f4:	4a742400 	.word	0x4a742400
 80064f8:	4af42400 	.word	0x4af42400

080064fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b089      	sub	sp, #36	@ 0x24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006504:	4ba1      	ldr	r3, [pc, #644]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800650e:	4b9f      	ldr	r3, [pc, #636]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006512:	0d1b      	lsrs	r3, r3, #20
 8006514:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006518:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800651a:	4b9c      	ldr	r3, [pc, #624]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800651c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651e:	0a1b      	lsrs	r3, r3, #8
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006526:	4b99      	ldr	r3, [pc, #612]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652a:	08db      	lsrs	r3, r3, #3
 800652c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	fb02 f303 	mul.w	r3, r2, r3
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 8111 	beq.w	800676c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b02      	cmp	r3, #2
 800654e:	f000 8083 	beq.w	8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b02      	cmp	r3, #2
 8006556:	f200 80a1 	bhi.w	800669c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d056      	beq.n	8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006566:	e099      	b.n	800669c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006568:	4b88      	ldr	r3, [pc, #544]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d02d      	beq.n	80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006574:	4b85      	ldr	r3, [pc, #532]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	08db      	lsrs	r3, r3, #3
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	4a84      	ldr	r2, [pc, #528]	@ (8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
 8006584:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800659e:	4b7b      	ldr	r3, [pc, #492]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80065b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065ce:	e087      	b.n	80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006798 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80065de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e2:	4b6a      	ldr	r3, [pc, #424]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800660a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006612:	e065      	b.n	80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800679c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006626:	4b59      	ldr	r3, [pc, #356]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006636:	ed97 6a03 	vldr	s12, [r7, #12]
 800663a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800663e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800664a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006656:	e043      	b.n	80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006662:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800666a:	4b48      	ldr	r3, [pc, #288]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667a:	ed97 6a03 	vldr	s12, [r7, #12]
 800667e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800668a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800668e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800669a:	e021      	b.n	80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800679c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ae:	4b37      	ldr	r3, [pc, #220]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066be:	ed97 6a03 	vldr	s12, [r7, #12]
 80066c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80066e0:	4b2a      	ldr	r3, [pc, #168]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e4:	0a5b      	lsrs	r3, r3, #9
 80066e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80066fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006706:	ee17 2a90 	vmov	r2, s15
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800670e:	4b1f      	ldr	r3, [pc, #124]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006712:	0c1b      	lsrs	r3, r3, #16
 8006714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006718:	ee07 3a90 	vmov	s15, r3
 800671c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006720:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006724:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006728:	edd7 6a07 	vldr	s13, [r7, #28]
 800672c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006734:	ee17 2a90 	vmov	r2, s15
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800673c:	4b13      	ldr	r3, [pc, #76]	@ (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800673e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006740:	0e1b      	lsrs	r3, r3, #24
 8006742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006752:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006756:	edd7 6a07 	vldr	s13, [r7, #28]
 800675a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800675e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006762:	ee17 2a90 	vmov	r2, s15
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800676a:	e008      	b.n	800677e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	609a      	str	r2, [r3, #8]
}
 800677e:	bf00      	nop
 8006780:	3724      	adds	r7, #36	@ 0x24
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	58024400 	.word	0x58024400
 8006790:	03d09000 	.word	0x03d09000
 8006794:	46000000 	.word	0x46000000
 8006798:	4c742400 	.word	0x4c742400
 800679c:	4a742400 	.word	0x4a742400
 80067a0:	4af42400 	.word	0x4af42400

080067a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067b2:	4b53      	ldr	r3, [pc, #332]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d101      	bne.n	80067c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e099      	b.n	80068f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a4e      	ldr	r2, [pc, #312]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80067c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ce:	f7fa ff17 	bl	8001600 <HAL_GetTick>
 80067d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067d4:	e008      	b.n	80067e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067d6:	f7fa ff13 	bl	8001600 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e086      	b.n	80068f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067e8:	4b45      	ldr	r3, [pc, #276]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f0      	bne.n	80067d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067f4:	4b42      	ldr	r3, [pc, #264]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	031b      	lsls	r3, r3, #12
 8006802:	493f      	ldr	r1, [pc, #252]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 8006804:	4313      	orrs	r3, r2
 8006806:	628b      	str	r3, [r1, #40]	@ 0x28
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	3b01      	subs	r3, #1
 800680e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	3b01      	subs	r3, #1
 8006818:	025b      	lsls	r3, r3, #9
 800681a:	b29b      	uxth	r3, r3
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	3b01      	subs	r3, #1
 8006824:	041b      	lsls	r3, r3, #16
 8006826:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	3b01      	subs	r3, #1
 8006832:	061b      	lsls	r3, r3, #24
 8006834:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006838:	4931      	ldr	r1, [pc, #196]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 800683a:	4313      	orrs	r3, r2
 800683c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800683e:	4b30      	ldr	r3, [pc, #192]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	492d      	ldr	r1, [pc, #180]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 800684c:	4313      	orrs	r3, r2
 800684e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006850:	4b2b      	ldr	r3, [pc, #172]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	f023 0220 	bic.w	r2, r3, #32
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	4928      	ldr	r1, [pc, #160]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 800685e:	4313      	orrs	r3, r2
 8006860:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006862:	4b27      	ldr	r3, [pc, #156]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	4a26      	ldr	r2, [pc, #152]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 8006868:	f023 0310 	bic.w	r3, r3, #16
 800686c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800686e:	4b24      	ldr	r3, [pc, #144]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 8006870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006872:	4b24      	ldr	r3, [pc, #144]	@ (8006904 <RCCEx_PLL2_Config+0x160>)
 8006874:	4013      	ands	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	69d2      	ldr	r2, [r2, #28]
 800687a:	00d2      	lsls	r2, r2, #3
 800687c:	4920      	ldr	r1, [pc, #128]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 800687e:	4313      	orrs	r3, r2
 8006880:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006882:	4b1f      	ldr	r3, [pc, #124]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006886:	4a1e      	ldr	r2, [pc, #120]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 8006888:	f043 0310 	orr.w	r3, r3, #16
 800688c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d106      	bne.n	80068a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006894:	4b1a      	ldr	r3, [pc, #104]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	4a19      	ldr	r2, [pc, #100]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 800689a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800689e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068a0:	e00f      	b.n	80068c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d106      	bne.n	80068b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068a8:	4b15      	ldr	r3, [pc, #84]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	4a14      	ldr	r2, [pc, #80]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80068ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068b4:	e005      	b.n	80068c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068b6:	4b12      	ldr	r3, [pc, #72]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80068b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ba:	4a11      	ldr	r2, [pc, #68]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80068bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80068c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ce:	f7fa fe97 	bl	8001600 <HAL_GetTick>
 80068d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068d4:	e008      	b.n	80068e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068d6:	f7fa fe93 	bl	8001600 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e006      	b.n	80068f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068e8:	4b05      	ldr	r3, [pc, #20]	@ (8006900 <RCCEx_PLL2_Config+0x15c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f0      	beq.n	80068d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	58024400 	.word	0x58024400
 8006904:	ffff0007 	.word	0xffff0007

08006908 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006916:	4b53      	ldr	r3, [pc, #332]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 8006918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	2b03      	cmp	r3, #3
 8006920:	d101      	bne.n	8006926 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e099      	b.n	8006a5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006926:	4b4f      	ldr	r3, [pc, #316]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a4e      	ldr	r2, [pc, #312]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 800692c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006932:	f7fa fe65 	bl	8001600 <HAL_GetTick>
 8006936:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006938:	e008      	b.n	800694c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800693a:	f7fa fe61 	bl	8001600 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d901      	bls.n	800694c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e086      	b.n	8006a5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800694c:	4b45      	ldr	r3, [pc, #276]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1f0      	bne.n	800693a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006958:	4b42      	ldr	r3, [pc, #264]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 800695a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	051b      	lsls	r3, r3, #20
 8006966:	493f      	ldr	r1, [pc, #252]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	628b      	str	r3, [r1, #40]	@ 0x28
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	3b01      	subs	r3, #1
 8006972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	3b01      	subs	r3, #1
 800697c:	025b      	lsls	r3, r3, #9
 800697e:	b29b      	uxth	r3, r3
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	3b01      	subs	r3, #1
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	3b01      	subs	r3, #1
 8006996:	061b      	lsls	r3, r3, #24
 8006998:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800699c:	4931      	ldr	r1, [pc, #196]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069a2:	4b30      	ldr	r3, [pc, #192]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	492d      	ldr	r1, [pc, #180]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	4928      	ldr	r1, [pc, #160]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069c6:	4b27      	ldr	r3, [pc, #156]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ca:	4a26      	ldr	r2, [pc, #152]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069d2:	4b24      	ldr	r3, [pc, #144]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069d6:	4b24      	ldr	r3, [pc, #144]	@ (8006a68 <RCCEx_PLL3_Config+0x160>)
 80069d8:	4013      	ands	r3, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	69d2      	ldr	r2, [r2, #28]
 80069de:	00d2      	lsls	r2, r2, #3
 80069e0:	4920      	ldr	r1, [pc, #128]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	4a19      	ldr	r2, [pc, #100]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 80069fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a04:	e00f      	b.n	8006a26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d106      	bne.n	8006a1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a0c:	4b15      	ldr	r3, [pc, #84]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 8006a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a10:	4a14      	ldr	r2, [pc, #80]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 8006a12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a18:	e005      	b.n	8006a26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a1a:	4b12      	ldr	r3, [pc, #72]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	4a11      	ldr	r2, [pc, #68]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 8006a20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a26:	4b0f      	ldr	r3, [pc, #60]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 8006a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a32:	f7fa fde5 	bl	8001600 <HAL_GetTick>
 8006a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a38:	e008      	b.n	8006a4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a3a:	f7fa fde1 	bl	8001600 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e006      	b.n	8006a5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a4c:	4b05      	ldr	r3, [pc, #20]	@ (8006a64 <RCCEx_PLL3_Config+0x15c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	58024400 	.word	0x58024400
 8006a68:	ffff0007 	.word	0xffff0007

08006a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e042      	b.n	8006b04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d106      	bne.n	8006a96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fa fb1f 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2224      	movs	r2, #36	@ 0x24
 8006a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0201 	bic.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 fa44 	bl	8007f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fcd9 	bl	8007474 <UART_SetConfig>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e01b      	b.n	8006b04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fac3 	bl	8008088 <UART_CheckIdleState>
 8006b02:	4603      	mov	r3, r0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	@ 0x28
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d17b      	bne.n	8006c1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_UART_Transmit+0x26>
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e074      	b.n	8006c20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2221      	movs	r2, #33	@ 0x21
 8006b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b46:	f7fa fd5b 	bl	8001600 <HAL_GetTick>
 8006b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b64:	d108      	bne.n	8006b78 <HAL_UART_Transmit+0x6c>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	e003      	b.n	8006b80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b80:	e030      	b.n	8006be4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2180      	movs	r1, #128	@ 0x80
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 fb25 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e03d      	b.n	8006c20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	3302      	adds	r3, #2
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	e007      	b.n	8006bd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1c8      	bne.n	8006b82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2140      	movs	r1, #64	@ 0x40
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f001 faee 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e006      	b.n	8006c20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e000      	b.n	8006c20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c1e:	2302      	movs	r3, #2
  }
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	@ 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d137      	bne.n	8006cb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_UART_Receive_IT+0x24>
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e030      	b.n	8006cb2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a18      	ldr	r2, [pc, #96]	@ (8006cbc <HAL_UART_Receive_IT+0x94>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d01f      	beq.n	8006ca0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d018      	beq.n	8006ca0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8c:	623b      	str	r3, [r7, #32]
 8006c8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	69f9      	ldr	r1, [r7, #28]
 8006c92:	6a3a      	ldr	r2, [r7, #32]
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e6      	bne.n	8006c6e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ca0:	88fb      	ldrh	r3, [r7, #6]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f001 fb06 	bl	80082b8 <UART_Start_Receive_IT>
 8006cac:	4603      	mov	r3, r0
 8006cae:	e000      	b.n	8006cb2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cb0:	2302      	movs	r3, #2
  }
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3728      	adds	r7, #40	@ 0x28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	58000c00 	.word	0x58000c00

08006cc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b0ba      	sub	sp, #232	@ 0xe8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ce6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006cea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006cee:	4013      	ands	r3, r2
 8006cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006cf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d11b      	bne.n	8006d34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d00:	f003 0320 	and.w	r3, r3, #32
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d015      	beq.n	8006d34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8377 	beq.w	8007418 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
      }
      return;
 8006d32:	e371      	b.n	8007418 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8123 	beq.w	8006f84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d42:	4b8d      	ldr	r3, [pc, #564]	@ (8006f78 <HAL_UART_IRQHandler+0x2b8>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8006f7c <HAL_UART_IRQHandler+0x2bc>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8116 	beq.w	8006f84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d011      	beq.n	8006d88 <HAL_UART_IRQHandler+0xc8>
 8006d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2201      	movs	r2, #1
 8006d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7e:	f043 0201 	orr.w	r2, r3, #1
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d011      	beq.n	8006db8 <HAL_UART_IRQHandler+0xf8>
 8006d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2202      	movs	r2, #2
 8006da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dae:	f043 0204 	orr.w	r2, r3, #4
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d011      	beq.n	8006de8 <HAL_UART_IRQHandler+0x128>
 8006dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dde:	f043 0202 	orr.w	r2, r3, #2
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d017      	beq.n	8006e24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d105      	bne.n	8006e0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e04:	4b5c      	ldr	r3, [pc, #368]	@ (8006f78 <HAL_UART_IRQHandler+0x2b8>)
 8006e06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2208      	movs	r2, #8
 8006e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1a:	f043 0208 	orr.w	r2, r3, #8
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d012      	beq.n	8006e56 <HAL_UART_IRQHandler+0x196>
 8006e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00c      	beq.n	8006e56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e4c:	f043 0220 	orr.w	r2, r3, #32
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 82dd 	beq.w	800741c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d013      	beq.n	8006e96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d105      	bne.n	8006e86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eaa:	2b40      	cmp	r3, #64	@ 0x40
 8006eac:	d005      	beq.n	8006eba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eb2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d054      	beq.n	8006f64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 fb1e 	bl	80084fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eca:	2b40      	cmp	r3, #64	@ 0x40
 8006ecc:	d146      	bne.n	8006f5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006efa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006efe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1d9      	bne.n	8006ece <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d017      	beq.n	8006f54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f2a:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <HAL_UART_IRQHandler+0x2c0>)
 8006f2c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fa ffe1 	bl	8001efc <HAL_DMA_Abort_IT>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d019      	beq.n	8006f74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f52:	e00f      	b.n	8006f74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fa77 	bl	8007448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f5a:	e00b      	b.n	8006f74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fa73 	bl	8007448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f62:	e007      	b.n	8006f74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fa6f 	bl	8007448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006f72:	e253      	b.n	800741c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f74:	bf00      	nop
    return;
 8006f76:	e251      	b.n	800741c <HAL_UART_IRQHandler+0x75c>
 8006f78:	10000001 	.word	0x10000001
 8006f7c:	04000120 	.word	0x04000120
 8006f80:	080085c9 	.word	0x080085c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	f040 81e7 	bne.w	800735c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 81e0 	beq.w	800735c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 81d9 	beq.w	800735c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2210      	movs	r2, #16
 8006fb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fbc:	2b40      	cmp	r3, #64	@ 0x40
 8006fbe:	f040 8151 	bne.w	8007264 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a96      	ldr	r2, [pc, #600]	@ (8007224 <HAL_UART_IRQHandler+0x564>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d068      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a93      	ldr	r2, [pc, #588]	@ (8007228 <HAL_UART_IRQHandler+0x568>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d061      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a91      	ldr	r2, [pc, #580]	@ (800722c <HAL_UART_IRQHandler+0x56c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d05a      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a8e      	ldr	r2, [pc, #568]	@ (8007230 <HAL_UART_IRQHandler+0x570>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d053      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a8c      	ldr	r2, [pc, #560]	@ (8007234 <HAL_UART_IRQHandler+0x574>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d04c      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a89      	ldr	r2, [pc, #548]	@ (8007238 <HAL_UART_IRQHandler+0x578>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d045      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a87      	ldr	r2, [pc, #540]	@ (800723c <HAL_UART_IRQHandler+0x57c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d03e      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a84      	ldr	r2, [pc, #528]	@ (8007240 <HAL_UART_IRQHandler+0x580>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d037      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a82      	ldr	r2, [pc, #520]	@ (8007244 <HAL_UART_IRQHandler+0x584>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d030      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a7f      	ldr	r2, [pc, #508]	@ (8007248 <HAL_UART_IRQHandler+0x588>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d029      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a7d      	ldr	r2, [pc, #500]	@ (800724c <HAL_UART_IRQHandler+0x58c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d022      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a7a      	ldr	r2, [pc, #488]	@ (8007250 <HAL_UART_IRQHandler+0x590>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01b      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a78      	ldr	r2, [pc, #480]	@ (8007254 <HAL_UART_IRQHandler+0x594>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d014      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a75      	ldr	r2, [pc, #468]	@ (8007258 <HAL_UART_IRQHandler+0x598>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00d      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a73      	ldr	r2, [pc, #460]	@ (800725c <HAL_UART_IRQHandler+0x59c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d006      	beq.n	80070a2 <HAL_UART_IRQHandler+0x3e2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a70      	ldr	r2, [pc, #448]	@ (8007260 <HAL_UART_IRQHandler+0x5a0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d106      	bne.n	80070b0 <HAL_UART_IRQHandler+0x3f0>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	e005      	b.n	80070bc <HAL_UART_IRQHandler+0x3fc>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 81ab 	beq.w	8007420 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070d4:	429a      	cmp	r2, r3
 80070d6:	f080 81a3 	bcs.w	8007420 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f0:	f000 8087 	beq.w	8007202 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007108:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800710c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	461a      	mov	r2, r3
 800711a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800711e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007122:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800712a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1da      	bne.n	80070f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3308      	adds	r3, #8
 8007144:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800714e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007150:	f023 0301 	bic.w	r3, r3, #1
 8007154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3308      	adds	r3, #8
 800715e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007162:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007166:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800716a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e1      	bne.n	800713e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3308      	adds	r3, #8
 8007180:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800718a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800718c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007190:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3308      	adds	r3, #8
 800719a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800719e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e3      	bne.n	800717a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071d0:	f023 0310 	bic.w	r3, r3, #16
 80071d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e4      	bne.n	80071c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fa fb5f 	bl	80018c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007214:	b29b      	uxth	r3, r3
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	b29b      	uxth	r3, r3
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f91d 	bl	800745c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007222:	e0fd      	b.n	8007420 <HAL_UART_IRQHandler+0x760>
 8007224:	40020010 	.word	0x40020010
 8007228:	40020028 	.word	0x40020028
 800722c:	40020040 	.word	0x40020040
 8007230:	40020058 	.word	0x40020058
 8007234:	40020070 	.word	0x40020070
 8007238:	40020088 	.word	0x40020088
 800723c:	400200a0 	.word	0x400200a0
 8007240:	400200b8 	.word	0x400200b8
 8007244:	40020410 	.word	0x40020410
 8007248:	40020428 	.word	0x40020428
 800724c:	40020440 	.word	0x40020440
 8007250:	40020458 	.word	0x40020458
 8007254:	40020470 	.word	0x40020470
 8007258:	40020488 	.word	0x40020488
 800725c:	400204a0 	.word	0x400204a0
 8007260:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007270:	b29b      	uxth	r3, r3
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800727e:	b29b      	uxth	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 80cf 	beq.w	8007424 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 80ca 	beq.w	8007424 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800729e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e4      	bne.n	8007290 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	623b      	str	r3, [r7, #32]
   return(result);
 80072d6:	6a3a      	ldr	r2, [r7, #32]
 80072d8:	4b55      	ldr	r3, [pc, #340]	@ (8007430 <HAL_UART_IRQHandler+0x770>)
 80072da:	4013      	ands	r3, r2
 80072dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3308      	adds	r3, #8
 80072e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80072ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e3      	bne.n	80072c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0310 	bic.w	r3, r3, #16
 8007326:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007334:	61fb      	str	r3, [r7, #28]
 8007336:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	69b9      	ldr	r1, [r7, #24]
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	617b      	str	r3, [r7, #20]
   return(result);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e4      	bne.n	8007312 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800734e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f881 	bl	800745c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800735a:	e063      	b.n	8007424 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800735c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007360:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00e      	beq.n	8007386 <HAL_UART_IRQHandler+0x6c6>
 8007368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800736c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800737c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 fe80 	bl	8009084 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007384:	e051      	b.n	800742a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800738e:	2b00      	cmp	r3, #0
 8007390:	d014      	beq.n	80073bc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800739a:	2b00      	cmp	r3, #0
 800739c:	d105      	bne.n	80073aa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800739e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d03a      	beq.n	8007428 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
    }
    return;
 80073ba:	e035      	b.n	8007428 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <HAL_UART_IRQHandler+0x71c>
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f90d 	bl	80085f4 <UART_EndTransmit_IT>
    return;
 80073da:	e026      	b.n	800742a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d009      	beq.n	80073fc <HAL_UART_IRQHandler+0x73c>
 80073e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 fe59 	bl	80090ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073fa:	e016      	b.n	800742a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <HAL_UART_IRQHandler+0x76a>
 8007408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800740c:	2b00      	cmp	r3, #0
 800740e:	da0c      	bge.n	800742a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fe41 	bl	8009098 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007416:	e008      	b.n	800742a <HAL_UART_IRQHandler+0x76a>
      return;
 8007418:	bf00      	nop
 800741a:	e006      	b.n	800742a <HAL_UART_IRQHandler+0x76a>
    return;
 800741c:	bf00      	nop
 800741e:	e004      	b.n	800742a <HAL_UART_IRQHandler+0x76a>
      return;
 8007420:	bf00      	nop
 8007422:	e002      	b.n	800742a <HAL_UART_IRQHandler+0x76a>
      return;
 8007424:	bf00      	nop
 8007426:	e000      	b.n	800742a <HAL_UART_IRQHandler+0x76a>
    return;
 8007428:	bf00      	nop
  }
}
 800742a:	37e8      	adds	r7, #232	@ 0xe8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	effffffe 	.word	0xeffffffe

08007434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007478:	b092      	sub	sp, #72	@ 0x48
 800747a:	af00      	add	r7, sp, #0
 800747c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	431a      	orrs	r2, r3
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	431a      	orrs	r2, r3
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	4313      	orrs	r3, r2
 800749a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4bbe      	ldr	r3, [pc, #760]	@ (800779c <UART_SetConfig+0x328>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074ac:	430b      	orrs	r3, r1
 80074ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4ab3      	ldr	r2, [pc, #716]	@ (80077a0 <UART_SetConfig+0x32c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d004      	beq.n	80074e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074dc:	4313      	orrs	r3, r2
 80074de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	4baf      	ldr	r3, [pc, #700]	@ (80077a4 <UART_SetConfig+0x330>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fa:	f023 010f 	bic.w	r1, r3, #15
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4aa6      	ldr	r2, [pc, #664]	@ (80077a8 <UART_SetConfig+0x334>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d177      	bne.n	8007604 <UART_SetConfig+0x190>
 8007514:	4ba5      	ldr	r3, [pc, #660]	@ (80077ac <UART_SetConfig+0x338>)
 8007516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007518:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800751c:	2b28      	cmp	r3, #40	@ 0x28
 800751e:	d86d      	bhi.n	80075fc <UART_SetConfig+0x188>
 8007520:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <UART_SetConfig+0xb4>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	080075cd 	.word	0x080075cd
 800752c:	080075fd 	.word	0x080075fd
 8007530:	080075fd 	.word	0x080075fd
 8007534:	080075fd 	.word	0x080075fd
 8007538:	080075fd 	.word	0x080075fd
 800753c:	080075fd 	.word	0x080075fd
 8007540:	080075fd 	.word	0x080075fd
 8007544:	080075fd 	.word	0x080075fd
 8007548:	080075d5 	.word	0x080075d5
 800754c:	080075fd 	.word	0x080075fd
 8007550:	080075fd 	.word	0x080075fd
 8007554:	080075fd 	.word	0x080075fd
 8007558:	080075fd 	.word	0x080075fd
 800755c:	080075fd 	.word	0x080075fd
 8007560:	080075fd 	.word	0x080075fd
 8007564:	080075fd 	.word	0x080075fd
 8007568:	080075dd 	.word	0x080075dd
 800756c:	080075fd 	.word	0x080075fd
 8007570:	080075fd 	.word	0x080075fd
 8007574:	080075fd 	.word	0x080075fd
 8007578:	080075fd 	.word	0x080075fd
 800757c:	080075fd 	.word	0x080075fd
 8007580:	080075fd 	.word	0x080075fd
 8007584:	080075fd 	.word	0x080075fd
 8007588:	080075e5 	.word	0x080075e5
 800758c:	080075fd 	.word	0x080075fd
 8007590:	080075fd 	.word	0x080075fd
 8007594:	080075fd 	.word	0x080075fd
 8007598:	080075fd 	.word	0x080075fd
 800759c:	080075fd 	.word	0x080075fd
 80075a0:	080075fd 	.word	0x080075fd
 80075a4:	080075fd 	.word	0x080075fd
 80075a8:	080075ed 	.word	0x080075ed
 80075ac:	080075fd 	.word	0x080075fd
 80075b0:	080075fd 	.word	0x080075fd
 80075b4:	080075fd 	.word	0x080075fd
 80075b8:	080075fd 	.word	0x080075fd
 80075bc:	080075fd 	.word	0x080075fd
 80075c0:	080075fd 	.word	0x080075fd
 80075c4:	080075fd 	.word	0x080075fd
 80075c8:	080075f5 	.word	0x080075f5
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d2:	e222      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80075d4:	2304      	movs	r3, #4
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e21e      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80075dc:	2308      	movs	r3, #8
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e21a      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80075e4:	2310      	movs	r3, #16
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ea:	e216      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80075ec:	2320      	movs	r3, #32
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e212      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80075f4:	2340      	movs	r3, #64	@ 0x40
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e20e      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80075fc:	2380      	movs	r3, #128	@ 0x80
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e20a      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a69      	ldr	r2, [pc, #420]	@ (80077b0 <UART_SetConfig+0x33c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d130      	bne.n	8007670 <UART_SetConfig+0x1fc>
 800760e:	4b67      	ldr	r3, [pc, #412]	@ (80077ac <UART_SetConfig+0x338>)
 8007610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	2b05      	cmp	r3, #5
 8007618:	d826      	bhi.n	8007668 <UART_SetConfig+0x1f4>
 800761a:	a201      	add	r2, pc, #4	@ (adr r2, 8007620 <UART_SetConfig+0x1ac>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007639 	.word	0x08007639
 8007624:	08007641 	.word	0x08007641
 8007628:	08007649 	.word	0x08007649
 800762c:	08007651 	.word	0x08007651
 8007630:	08007659 	.word	0x08007659
 8007634:	08007661 	.word	0x08007661
 8007638:	2300      	movs	r3, #0
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763e:	e1ec      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007640:	2304      	movs	r3, #4
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007646:	e1e8      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007648:	2308      	movs	r3, #8
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764e:	e1e4      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007650:	2310      	movs	r3, #16
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007656:	e1e0      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007658:	2320      	movs	r3, #32
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765e:	e1dc      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007660:	2340      	movs	r3, #64	@ 0x40
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007666:	e1d8      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007668:	2380      	movs	r3, #128	@ 0x80
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766e:	e1d4      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a4f      	ldr	r2, [pc, #316]	@ (80077b4 <UART_SetConfig+0x340>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d130      	bne.n	80076dc <UART_SetConfig+0x268>
 800767a:	4b4c      	ldr	r3, [pc, #304]	@ (80077ac <UART_SetConfig+0x338>)
 800767c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800767e:	f003 0307 	and.w	r3, r3, #7
 8007682:	2b05      	cmp	r3, #5
 8007684:	d826      	bhi.n	80076d4 <UART_SetConfig+0x260>
 8007686:	a201      	add	r2, pc, #4	@ (adr r2, 800768c <UART_SetConfig+0x218>)
 8007688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768c:	080076a5 	.word	0x080076a5
 8007690:	080076ad 	.word	0x080076ad
 8007694:	080076b5 	.word	0x080076b5
 8007698:	080076bd 	.word	0x080076bd
 800769c:	080076c5 	.word	0x080076c5
 80076a0:	080076cd 	.word	0x080076cd
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076aa:	e1b6      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80076ac:	2304      	movs	r3, #4
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e1b2      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80076b4:	2308      	movs	r3, #8
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ba:	e1ae      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80076bc:	2310      	movs	r3, #16
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c2:	e1aa      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80076c4:	2320      	movs	r3, #32
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ca:	e1a6      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80076cc:	2340      	movs	r3, #64	@ 0x40
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d2:	e1a2      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80076d4:	2380      	movs	r3, #128	@ 0x80
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076da:	e19e      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a35      	ldr	r2, [pc, #212]	@ (80077b8 <UART_SetConfig+0x344>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d130      	bne.n	8007748 <UART_SetConfig+0x2d4>
 80076e6:	4b31      	ldr	r3, [pc, #196]	@ (80077ac <UART_SetConfig+0x338>)
 80076e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	2b05      	cmp	r3, #5
 80076f0:	d826      	bhi.n	8007740 <UART_SetConfig+0x2cc>
 80076f2:	a201      	add	r2, pc, #4	@ (adr r2, 80076f8 <UART_SetConfig+0x284>)
 80076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f8:	08007711 	.word	0x08007711
 80076fc:	08007719 	.word	0x08007719
 8007700:	08007721 	.word	0x08007721
 8007704:	08007729 	.word	0x08007729
 8007708:	08007731 	.word	0x08007731
 800770c:	08007739 	.word	0x08007739
 8007710:	2300      	movs	r3, #0
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e180      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007718:	2304      	movs	r3, #4
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e17c      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007720:	2308      	movs	r3, #8
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007726:	e178      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007728:	2310      	movs	r3, #16
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772e:	e174      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007730:	2320      	movs	r3, #32
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007736:	e170      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007738:	2340      	movs	r3, #64	@ 0x40
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773e:	e16c      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007740:	2380      	movs	r3, #128	@ 0x80
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007746:	e168      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1b      	ldr	r2, [pc, #108]	@ (80077bc <UART_SetConfig+0x348>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d142      	bne.n	80077d8 <UART_SetConfig+0x364>
 8007752:	4b16      	ldr	r3, [pc, #88]	@ (80077ac <UART_SetConfig+0x338>)
 8007754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	2b05      	cmp	r3, #5
 800775c:	d838      	bhi.n	80077d0 <UART_SetConfig+0x35c>
 800775e:	a201      	add	r2, pc, #4	@ (adr r2, 8007764 <UART_SetConfig+0x2f0>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	0800777d 	.word	0x0800777d
 8007768:	08007785 	.word	0x08007785
 800776c:	0800778d 	.word	0x0800778d
 8007770:	08007795 	.word	0x08007795
 8007774:	080077c1 	.word	0x080077c1
 8007778:	080077c9 	.word	0x080077c9
 800777c:	2300      	movs	r3, #0
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e14a      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007784:	2304      	movs	r3, #4
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e146      	b.n	8007a1a <UART_SetConfig+0x5a6>
 800778c:	2308      	movs	r3, #8
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e142      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007794:	2310      	movs	r3, #16
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e13e      	b.n	8007a1a <UART_SetConfig+0x5a6>
 800779c:	cfff69f3 	.word	0xcfff69f3
 80077a0:	58000c00 	.word	0x58000c00
 80077a4:	11fff4ff 	.word	0x11fff4ff
 80077a8:	40011000 	.word	0x40011000
 80077ac:	58024400 	.word	0x58024400
 80077b0:	40004400 	.word	0x40004400
 80077b4:	40004800 	.word	0x40004800
 80077b8:	40004c00 	.word	0x40004c00
 80077bc:	40005000 	.word	0x40005000
 80077c0:	2320      	movs	r3, #32
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c6:	e128      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80077c8:	2340      	movs	r3, #64	@ 0x40
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e124      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80077d0:	2380      	movs	r3, #128	@ 0x80
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e120      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4acb      	ldr	r2, [pc, #812]	@ (8007b0c <UART_SetConfig+0x698>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d176      	bne.n	80078d0 <UART_SetConfig+0x45c>
 80077e2:	4bcb      	ldr	r3, [pc, #812]	@ (8007b10 <UART_SetConfig+0x69c>)
 80077e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077ea:	2b28      	cmp	r3, #40	@ 0x28
 80077ec:	d86c      	bhi.n	80078c8 <UART_SetConfig+0x454>
 80077ee:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <UART_SetConfig+0x380>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	08007899 	.word	0x08007899
 80077f8:	080078c9 	.word	0x080078c9
 80077fc:	080078c9 	.word	0x080078c9
 8007800:	080078c9 	.word	0x080078c9
 8007804:	080078c9 	.word	0x080078c9
 8007808:	080078c9 	.word	0x080078c9
 800780c:	080078c9 	.word	0x080078c9
 8007810:	080078c9 	.word	0x080078c9
 8007814:	080078a1 	.word	0x080078a1
 8007818:	080078c9 	.word	0x080078c9
 800781c:	080078c9 	.word	0x080078c9
 8007820:	080078c9 	.word	0x080078c9
 8007824:	080078c9 	.word	0x080078c9
 8007828:	080078c9 	.word	0x080078c9
 800782c:	080078c9 	.word	0x080078c9
 8007830:	080078c9 	.word	0x080078c9
 8007834:	080078a9 	.word	0x080078a9
 8007838:	080078c9 	.word	0x080078c9
 800783c:	080078c9 	.word	0x080078c9
 8007840:	080078c9 	.word	0x080078c9
 8007844:	080078c9 	.word	0x080078c9
 8007848:	080078c9 	.word	0x080078c9
 800784c:	080078c9 	.word	0x080078c9
 8007850:	080078c9 	.word	0x080078c9
 8007854:	080078b1 	.word	0x080078b1
 8007858:	080078c9 	.word	0x080078c9
 800785c:	080078c9 	.word	0x080078c9
 8007860:	080078c9 	.word	0x080078c9
 8007864:	080078c9 	.word	0x080078c9
 8007868:	080078c9 	.word	0x080078c9
 800786c:	080078c9 	.word	0x080078c9
 8007870:	080078c9 	.word	0x080078c9
 8007874:	080078b9 	.word	0x080078b9
 8007878:	080078c9 	.word	0x080078c9
 800787c:	080078c9 	.word	0x080078c9
 8007880:	080078c9 	.word	0x080078c9
 8007884:	080078c9 	.word	0x080078c9
 8007888:	080078c9 	.word	0x080078c9
 800788c:	080078c9 	.word	0x080078c9
 8007890:	080078c9 	.word	0x080078c9
 8007894:	080078c1 	.word	0x080078c1
 8007898:	2301      	movs	r3, #1
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789e:	e0bc      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80078a0:	2304      	movs	r3, #4
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a6:	e0b8      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80078a8:	2308      	movs	r3, #8
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ae:	e0b4      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80078b0:	2310      	movs	r3, #16
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b6:	e0b0      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80078b8:	2320      	movs	r3, #32
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078be:	e0ac      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80078c0:	2340      	movs	r3, #64	@ 0x40
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c6:	e0a8      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80078c8:	2380      	movs	r3, #128	@ 0x80
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ce:	e0a4      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a8f      	ldr	r2, [pc, #572]	@ (8007b14 <UART_SetConfig+0x6a0>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d130      	bne.n	800793c <UART_SetConfig+0x4c8>
 80078da:	4b8d      	ldr	r3, [pc, #564]	@ (8007b10 <UART_SetConfig+0x69c>)
 80078dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	d826      	bhi.n	8007934 <UART_SetConfig+0x4c0>
 80078e6:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <UART_SetConfig+0x478>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	08007905 	.word	0x08007905
 80078f0:	0800790d 	.word	0x0800790d
 80078f4:	08007915 	.word	0x08007915
 80078f8:	0800791d 	.word	0x0800791d
 80078fc:	08007925 	.word	0x08007925
 8007900:	0800792d 	.word	0x0800792d
 8007904:	2300      	movs	r3, #0
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e086      	b.n	8007a1a <UART_SetConfig+0x5a6>
 800790c:	2304      	movs	r3, #4
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e082      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007914:	2308      	movs	r3, #8
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e07e      	b.n	8007a1a <UART_SetConfig+0x5a6>
 800791c:	2310      	movs	r3, #16
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007922:	e07a      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007924:	2320      	movs	r3, #32
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792a:	e076      	b.n	8007a1a <UART_SetConfig+0x5a6>
 800792c:	2340      	movs	r3, #64	@ 0x40
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007932:	e072      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007934:	2380      	movs	r3, #128	@ 0x80
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793a:	e06e      	b.n	8007a1a <UART_SetConfig+0x5a6>
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a75      	ldr	r2, [pc, #468]	@ (8007b18 <UART_SetConfig+0x6a4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d130      	bne.n	80079a8 <UART_SetConfig+0x534>
 8007946:	4b72      	ldr	r3, [pc, #456]	@ (8007b10 <UART_SetConfig+0x69c>)
 8007948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794a:	f003 0307 	and.w	r3, r3, #7
 800794e:	2b05      	cmp	r3, #5
 8007950:	d826      	bhi.n	80079a0 <UART_SetConfig+0x52c>
 8007952:	a201      	add	r2, pc, #4	@ (adr r2, 8007958 <UART_SetConfig+0x4e4>)
 8007954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007958:	08007971 	.word	0x08007971
 800795c:	08007979 	.word	0x08007979
 8007960:	08007981 	.word	0x08007981
 8007964:	08007989 	.word	0x08007989
 8007968:	08007991 	.word	0x08007991
 800796c:	08007999 	.word	0x08007999
 8007970:	2300      	movs	r3, #0
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e050      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007978:	2304      	movs	r3, #4
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797e:	e04c      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007980:	2308      	movs	r3, #8
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007986:	e048      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007988:	2310      	movs	r3, #16
 800798a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798e:	e044      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007990:	2320      	movs	r3, #32
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007996:	e040      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007998:	2340      	movs	r3, #64	@ 0x40
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799e:	e03c      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80079a0:	2380      	movs	r3, #128	@ 0x80
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a6:	e038      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5b      	ldr	r2, [pc, #364]	@ (8007b1c <UART_SetConfig+0x6a8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d130      	bne.n	8007a14 <UART_SetConfig+0x5a0>
 80079b2:	4b57      	ldr	r3, [pc, #348]	@ (8007b10 <UART_SetConfig+0x69c>)
 80079b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	2b05      	cmp	r3, #5
 80079bc:	d826      	bhi.n	8007a0c <UART_SetConfig+0x598>
 80079be:	a201      	add	r2, pc, #4	@ (adr r2, 80079c4 <UART_SetConfig+0x550>)
 80079c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c4:	080079dd 	.word	0x080079dd
 80079c8:	080079e5 	.word	0x080079e5
 80079cc:	080079ed 	.word	0x080079ed
 80079d0:	080079f5 	.word	0x080079f5
 80079d4:	080079fd 	.word	0x080079fd
 80079d8:	08007a05 	.word	0x08007a05
 80079dc:	2302      	movs	r3, #2
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e2:	e01a      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80079e4:	2304      	movs	r3, #4
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ea:	e016      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80079ec:	2308      	movs	r3, #8
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f2:	e012      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80079f4:	2310      	movs	r3, #16
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fa:	e00e      	b.n	8007a1a <UART_SetConfig+0x5a6>
 80079fc:	2320      	movs	r3, #32
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a02:	e00a      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007a04:	2340      	movs	r3, #64	@ 0x40
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0a:	e006      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007a0c:	2380      	movs	r3, #128	@ 0x80
 8007a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a12:	e002      	b.n	8007a1a <UART_SetConfig+0x5a6>
 8007a14:	2380      	movs	r3, #128	@ 0x80
 8007a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8007b1c <UART_SetConfig+0x6a8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	f040 80f8 	bne.w	8007c16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	dc46      	bgt.n	8007abc <UART_SetConfig+0x648>
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	f2c0 8082 	blt.w	8007b38 <UART_SetConfig+0x6c4>
 8007a34:	3b02      	subs	r3, #2
 8007a36:	2b1e      	cmp	r3, #30
 8007a38:	d87e      	bhi.n	8007b38 <UART_SetConfig+0x6c4>
 8007a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a40 <UART_SetConfig+0x5cc>)
 8007a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a40:	08007ac3 	.word	0x08007ac3
 8007a44:	08007b39 	.word	0x08007b39
 8007a48:	08007acb 	.word	0x08007acb
 8007a4c:	08007b39 	.word	0x08007b39
 8007a50:	08007b39 	.word	0x08007b39
 8007a54:	08007b39 	.word	0x08007b39
 8007a58:	08007adb 	.word	0x08007adb
 8007a5c:	08007b39 	.word	0x08007b39
 8007a60:	08007b39 	.word	0x08007b39
 8007a64:	08007b39 	.word	0x08007b39
 8007a68:	08007b39 	.word	0x08007b39
 8007a6c:	08007b39 	.word	0x08007b39
 8007a70:	08007b39 	.word	0x08007b39
 8007a74:	08007b39 	.word	0x08007b39
 8007a78:	08007aeb 	.word	0x08007aeb
 8007a7c:	08007b39 	.word	0x08007b39
 8007a80:	08007b39 	.word	0x08007b39
 8007a84:	08007b39 	.word	0x08007b39
 8007a88:	08007b39 	.word	0x08007b39
 8007a8c:	08007b39 	.word	0x08007b39
 8007a90:	08007b39 	.word	0x08007b39
 8007a94:	08007b39 	.word	0x08007b39
 8007a98:	08007b39 	.word	0x08007b39
 8007a9c:	08007b39 	.word	0x08007b39
 8007aa0:	08007b39 	.word	0x08007b39
 8007aa4:	08007b39 	.word	0x08007b39
 8007aa8:	08007b39 	.word	0x08007b39
 8007aac:	08007b39 	.word	0x08007b39
 8007ab0:	08007b39 	.word	0x08007b39
 8007ab4:	08007b39 	.word	0x08007b39
 8007ab8:	08007b2b 	.word	0x08007b2b
 8007abc:	2b40      	cmp	r3, #64	@ 0x40
 8007abe:	d037      	beq.n	8007b30 <UART_SetConfig+0x6bc>
 8007ac0:	e03a      	b.n	8007b38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ac2:	f7fe fbb1 	bl	8006228 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ac6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ac8:	e03c      	b.n	8007b44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fbc0 	bl	8006254 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ad8:	e034      	b.n	8007b44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ada:	f107 0318 	add.w	r3, r7, #24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe fd0c 	bl	80064fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae8:	e02c      	b.n	8007b44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aea:	4b09      	ldr	r3, [pc, #36]	@ (8007b10 <UART_SetConfig+0x69c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d016      	beq.n	8007b24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007af6:	4b06      	ldr	r3, [pc, #24]	@ (8007b10 <UART_SetConfig+0x69c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	08db      	lsrs	r3, r3, #3
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	4a07      	ldr	r2, [pc, #28]	@ (8007b20 <UART_SetConfig+0x6ac>)
 8007b02:	fa22 f303 	lsr.w	r3, r2, r3
 8007b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b08:	e01c      	b.n	8007b44 <UART_SetConfig+0x6d0>
 8007b0a:	bf00      	nop
 8007b0c:	40011400 	.word	0x40011400
 8007b10:	58024400 	.word	0x58024400
 8007b14:	40007800 	.word	0x40007800
 8007b18:	40007c00 	.word	0x40007c00
 8007b1c:	58000c00 	.word	0x58000c00
 8007b20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007b24:	4b9d      	ldr	r3, [pc, #628]	@ (8007d9c <UART_SetConfig+0x928>)
 8007b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b28:	e00c      	b.n	8007b44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b2a:	4b9d      	ldr	r3, [pc, #628]	@ (8007da0 <UART_SetConfig+0x92c>)
 8007b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b2e:	e009      	b.n	8007b44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b36:	e005      	b.n	8007b44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 81de 	beq.w	8007f08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b50:	4a94      	ldr	r2, [pc, #592]	@ (8007da4 <UART_SetConfig+0x930>)
 8007b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b56:	461a      	mov	r2, r3
 8007b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	4613      	mov	r3, r2
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	4413      	add	r3, r2
 8007b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d305      	bcc.n	8007b7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d903      	bls.n	8007b84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b82:	e1c1      	b.n	8007f08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b86:	2200      	movs	r2, #0
 8007b88:	60bb      	str	r3, [r7, #8]
 8007b8a:	60fa      	str	r2, [r7, #12]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b90:	4a84      	ldr	r2, [pc, #528]	@ (8007da4 <UART_SetConfig+0x930>)
 8007b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2200      	movs	r2, #0
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ba6:	f7f8 fbf3 	bl	8000390 <__aeabi_uldivmod>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4610      	mov	r0, r2
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	f04f 0300 	mov.w	r3, #0
 8007bba:	020b      	lsls	r3, r1, #8
 8007bbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bc0:	0202      	lsls	r2, r0, #8
 8007bc2:	6979      	ldr	r1, [r7, #20]
 8007bc4:	6849      	ldr	r1, [r1, #4]
 8007bc6:	0849      	lsrs	r1, r1, #1
 8007bc8:	2000      	movs	r0, #0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	4605      	mov	r5, r0
 8007bce:	eb12 0804 	adds.w	r8, r2, r4
 8007bd2:	eb43 0905 	adc.w	r9, r3, r5
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	469a      	mov	sl, r3
 8007bde:	4693      	mov	fp, r2
 8007be0:	4652      	mov	r2, sl
 8007be2:	465b      	mov	r3, fp
 8007be4:	4640      	mov	r0, r8
 8007be6:	4649      	mov	r1, r9
 8007be8:	f7f8 fbd2 	bl	8000390 <__aeabi_uldivmod>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bfa:	d308      	bcc.n	8007c0e <UART_SetConfig+0x79a>
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c02:	d204      	bcs.n	8007c0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c0a:	60da      	str	r2, [r3, #12]
 8007c0c:	e17c      	b.n	8007f08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c14:	e178      	b.n	8007f08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c1e:	f040 80c5 	bne.w	8007dac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007c22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	dc48      	bgt.n	8007cbc <UART_SetConfig+0x848>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	db7b      	blt.n	8007d26 <UART_SetConfig+0x8b2>
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	d879      	bhi.n	8007d26 <UART_SetConfig+0x8b2>
 8007c32:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <UART_SetConfig+0x7c4>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007cc3 	.word	0x08007cc3
 8007c3c:	08007ccb 	.word	0x08007ccb
 8007c40:	08007d27 	.word	0x08007d27
 8007c44:	08007d27 	.word	0x08007d27
 8007c48:	08007cd3 	.word	0x08007cd3
 8007c4c:	08007d27 	.word	0x08007d27
 8007c50:	08007d27 	.word	0x08007d27
 8007c54:	08007d27 	.word	0x08007d27
 8007c58:	08007ce3 	.word	0x08007ce3
 8007c5c:	08007d27 	.word	0x08007d27
 8007c60:	08007d27 	.word	0x08007d27
 8007c64:	08007d27 	.word	0x08007d27
 8007c68:	08007d27 	.word	0x08007d27
 8007c6c:	08007d27 	.word	0x08007d27
 8007c70:	08007d27 	.word	0x08007d27
 8007c74:	08007d27 	.word	0x08007d27
 8007c78:	08007cf3 	.word	0x08007cf3
 8007c7c:	08007d27 	.word	0x08007d27
 8007c80:	08007d27 	.word	0x08007d27
 8007c84:	08007d27 	.word	0x08007d27
 8007c88:	08007d27 	.word	0x08007d27
 8007c8c:	08007d27 	.word	0x08007d27
 8007c90:	08007d27 	.word	0x08007d27
 8007c94:	08007d27 	.word	0x08007d27
 8007c98:	08007d27 	.word	0x08007d27
 8007c9c:	08007d27 	.word	0x08007d27
 8007ca0:	08007d27 	.word	0x08007d27
 8007ca4:	08007d27 	.word	0x08007d27
 8007ca8:	08007d27 	.word	0x08007d27
 8007cac:	08007d27 	.word	0x08007d27
 8007cb0:	08007d27 	.word	0x08007d27
 8007cb4:	08007d27 	.word	0x08007d27
 8007cb8:	08007d19 	.word	0x08007d19
 8007cbc:	2b40      	cmp	r3, #64	@ 0x40
 8007cbe:	d02e      	beq.n	8007d1e <UART_SetConfig+0x8aa>
 8007cc0:	e031      	b.n	8007d26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc2:	f7fd f87b 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8007cc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cc8:	e033      	b.n	8007d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cca:	f7fd f88d 	bl	8004de8 <HAL_RCC_GetPCLK2Freq>
 8007cce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cd0:	e02f      	b.n	8007d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fabc 	bl	8006254 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce0:	e027      	b.n	8007d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ce2:	f107 0318 	add.w	r3, r7, #24
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fc08 	bl	80064fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf0:	e01f      	b.n	8007d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8007da8 <UART_SetConfig+0x934>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8007da8 <UART_SetConfig+0x934>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	08db      	lsrs	r3, r3, #3
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	4a24      	ldr	r2, [pc, #144]	@ (8007d9c <UART_SetConfig+0x928>)
 8007d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d10:	e00f      	b.n	8007d32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d12:	4b22      	ldr	r3, [pc, #136]	@ (8007d9c <UART_SetConfig+0x928>)
 8007d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d16:	e00c      	b.n	8007d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d18:	4b21      	ldr	r3, [pc, #132]	@ (8007da0 <UART_SetConfig+0x92c>)
 8007d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1c:	e009      	b.n	8007d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d24:	e005      	b.n	8007d32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 80e7 	beq.w	8007f08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3e:	4a19      	ldr	r2, [pc, #100]	@ (8007da4 <UART_SetConfig+0x930>)
 8007d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d4c:	005a      	lsls	r2, r3, #1
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	441a      	add	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d62:	2b0f      	cmp	r3, #15
 8007d64:	d916      	bls.n	8007d94 <UART_SetConfig+0x920>
 8007d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d6c:	d212      	bcs.n	8007d94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f023 030f 	bic.w	r3, r3, #15
 8007d76:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	085b      	lsrs	r3, r3, #1
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d86:	4313      	orrs	r3, r2
 8007d88:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d90:	60da      	str	r2, [r3, #12]
 8007d92:	e0b9      	b.n	8007f08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d9a:	e0b5      	b.n	8007f08 <UART_SetConfig+0xa94>
 8007d9c:	03d09000 	.word	0x03d09000
 8007da0:	003d0900 	.word	0x003d0900
 8007da4:	0800a408 	.word	0x0800a408
 8007da8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	dc49      	bgt.n	8007e48 <UART_SetConfig+0x9d4>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	db7c      	blt.n	8007eb2 <UART_SetConfig+0xa3e>
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	d87a      	bhi.n	8007eb2 <UART_SetConfig+0xa3e>
 8007dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc4 <UART_SetConfig+0x950>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007e4f 	.word	0x08007e4f
 8007dc8:	08007e57 	.word	0x08007e57
 8007dcc:	08007eb3 	.word	0x08007eb3
 8007dd0:	08007eb3 	.word	0x08007eb3
 8007dd4:	08007e5f 	.word	0x08007e5f
 8007dd8:	08007eb3 	.word	0x08007eb3
 8007ddc:	08007eb3 	.word	0x08007eb3
 8007de0:	08007eb3 	.word	0x08007eb3
 8007de4:	08007e6f 	.word	0x08007e6f
 8007de8:	08007eb3 	.word	0x08007eb3
 8007dec:	08007eb3 	.word	0x08007eb3
 8007df0:	08007eb3 	.word	0x08007eb3
 8007df4:	08007eb3 	.word	0x08007eb3
 8007df8:	08007eb3 	.word	0x08007eb3
 8007dfc:	08007eb3 	.word	0x08007eb3
 8007e00:	08007eb3 	.word	0x08007eb3
 8007e04:	08007e7f 	.word	0x08007e7f
 8007e08:	08007eb3 	.word	0x08007eb3
 8007e0c:	08007eb3 	.word	0x08007eb3
 8007e10:	08007eb3 	.word	0x08007eb3
 8007e14:	08007eb3 	.word	0x08007eb3
 8007e18:	08007eb3 	.word	0x08007eb3
 8007e1c:	08007eb3 	.word	0x08007eb3
 8007e20:	08007eb3 	.word	0x08007eb3
 8007e24:	08007eb3 	.word	0x08007eb3
 8007e28:	08007eb3 	.word	0x08007eb3
 8007e2c:	08007eb3 	.word	0x08007eb3
 8007e30:	08007eb3 	.word	0x08007eb3
 8007e34:	08007eb3 	.word	0x08007eb3
 8007e38:	08007eb3 	.word	0x08007eb3
 8007e3c:	08007eb3 	.word	0x08007eb3
 8007e40:	08007eb3 	.word	0x08007eb3
 8007e44:	08007ea5 	.word	0x08007ea5
 8007e48:	2b40      	cmp	r3, #64	@ 0x40
 8007e4a:	d02e      	beq.n	8007eaa <UART_SetConfig+0xa36>
 8007e4c:	e031      	b.n	8007eb2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e4e:	f7fc ffb5 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8007e52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e54:	e033      	b.n	8007ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e56:	f7fc ffc7 	bl	8004de8 <HAL_RCC_GetPCLK2Freq>
 8007e5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e5c:	e02f      	b.n	8007ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe f9f6 	bl	8006254 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e6c:	e027      	b.n	8007ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e6e:	f107 0318 	add.w	r3, r7, #24
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe fb42 	bl	80064fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7c:	e01f      	b.n	8007ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8007f34 <UART_SetConfig+0xac0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0320 	and.w	r3, r3, #32
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d009      	beq.n	8007e9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8007f34 <UART_SetConfig+0xac0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	08db      	lsrs	r3, r3, #3
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	4a28      	ldr	r2, [pc, #160]	@ (8007f38 <UART_SetConfig+0xac4>)
 8007e96:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e9c:	e00f      	b.n	8007ebe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e9e:	4b26      	ldr	r3, [pc, #152]	@ (8007f38 <UART_SetConfig+0xac4>)
 8007ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea2:	e00c      	b.n	8007ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ea4:	4b25      	ldr	r3, [pc, #148]	@ (8007f3c <UART_SetConfig+0xac8>)
 8007ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea8:	e009      	b.n	8007ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb0:	e005      	b.n	8007ebe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ebc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d021      	beq.n	8007f08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f40 <UART_SetConfig+0xacc>)
 8007eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ed2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	441a      	add	r2, r3
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eea:	2b0f      	cmp	r3, #15
 8007eec:	d909      	bls.n	8007f02 <UART_SetConfig+0xa8e>
 8007eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ef4:	d205      	bcs.n	8007f02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60da      	str	r2, [r3, #12]
 8007f00:	e002      	b.n	8007f08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2200      	movs	r2, #0
 8007f22:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f24:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3748      	adds	r7, #72	@ 0x48
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f32:	bf00      	nop
 8007f34:	58024400 	.word	0x58024400
 8007f38:	03d09000 	.word	0x03d09000
 8007f3c:	003d0900 	.word	0x003d0900
 8007f40:	0800a408 	.word	0x0800a408

08007f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00a      	beq.n	8007ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01a      	beq.n	800805a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800803e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008042:	d10a      	bne.n	800805a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	605a      	str	r2, [r3, #4]
  }
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b098      	sub	sp, #96	@ 0x60
 800808c:	af02      	add	r7, sp, #8
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008098:	f7f9 fab2 	bl	8001600 <HAL_GetTick>
 800809c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0308 	and.w	r3, r3, #8
 80080a8:	2b08      	cmp	r3, #8
 80080aa:	d12f      	bne.n	800810c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080b4:	2200      	movs	r2, #0
 80080b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f88e 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d022      	beq.n	800810c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080da:	653b      	str	r3, [r7, #80]	@ 0x50
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e6      	bne.n	80080c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e063      	b.n	80081d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b04      	cmp	r3, #4
 8008118:	d149      	bne.n	80081ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800811a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008122:	2200      	movs	r2, #0
 8008124:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f857 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d03c      	beq.n	80081ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	623b      	str	r3, [r7, #32]
   return(result);
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008152:	633b      	str	r3, [r7, #48]	@ 0x30
 8008154:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e6      	bne.n	8008134 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3308      	adds	r3, #8
 800816c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	60fb      	str	r3, [r7, #12]
   return(result);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f023 0301 	bic.w	r3, r3, #1
 800817c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3308      	adds	r3, #8
 8008184:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008186:	61fa      	str	r2, [r7, #28]
 8008188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	69b9      	ldr	r1, [r7, #24]
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	617b      	str	r3, [r7, #20]
   return(result);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e5      	bne.n	8008166 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e012      	b.n	80081d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3758      	adds	r7, #88	@ 0x58
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ec:	e04f      	b.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f4:	d04b      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f6:	f7f9 fa03 	bl	8001600 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	429a      	cmp	r2, r3
 8008204:	d302      	bcc.n	800820c <UART_WaitOnFlagUntilTimeout+0x30>
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e04e      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d037      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b80      	cmp	r3, #128	@ 0x80
 8008222:	d034      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b40      	cmp	r3, #64	@ 0x40
 8008228:	d031      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b08      	cmp	r3, #8
 8008236:	d110      	bne.n	800825a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2208      	movs	r2, #8
 800823e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f95b 	bl	80084fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2208      	movs	r2, #8
 800824a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e029      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008268:	d111      	bne.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f941 	bl	80084fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2220      	movs	r2, #32
 800827e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e00f      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4013      	ands	r3, r2
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	bf0c      	ite	eq
 800829e:	2301      	moveq	r3, #1
 80082a0:	2300      	movne	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d0a0      	beq.n	80081ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b0a3      	sub	sp, #140	@ 0x8c
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	88fa      	ldrh	r2, [r7, #6]
 80082d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	88fa      	ldrh	r2, [r7, #6]
 80082d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ea:	d10e      	bne.n	800830a <UART_Start_Receive_IT+0x52>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d105      	bne.n	8008300 <UART_Start_Receive_IT+0x48>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80082fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80082fe:	e02d      	b.n	800835c <UART_Start_Receive_IT+0xa4>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	22ff      	movs	r2, #255	@ 0xff
 8008304:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008308:	e028      	b.n	800835c <UART_Start_Receive_IT+0xa4>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10d      	bne.n	800832e <UART_Start_Receive_IT+0x76>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d104      	bne.n	8008324 <UART_Start_Receive_IT+0x6c>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	22ff      	movs	r2, #255	@ 0xff
 800831e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008322:	e01b      	b.n	800835c <UART_Start_Receive_IT+0xa4>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	227f      	movs	r2, #127	@ 0x7f
 8008328:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800832c:	e016      	b.n	800835c <UART_Start_Receive_IT+0xa4>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008336:	d10d      	bne.n	8008354 <UART_Start_Receive_IT+0x9c>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d104      	bne.n	800834a <UART_Start_Receive_IT+0x92>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	227f      	movs	r2, #127	@ 0x7f
 8008344:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008348:	e008      	b.n	800835c <UART_Start_Receive_IT+0xa4>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	223f      	movs	r2, #63	@ 0x3f
 800834e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008352:	e003      	b.n	800835c <UART_Start_Receive_IT+0xa4>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2222      	movs	r2, #34	@ 0x22
 8008368:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3308      	adds	r3, #8
 8008372:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008376:	e853 3f00 	ldrex	r3, [r3]
 800837a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800837c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800837e:	f043 0301 	orr.w	r3, r3, #1
 8008382:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3308      	adds	r3, #8
 800838c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008390:	673a      	str	r2, [r7, #112]	@ 0x70
 8008392:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008396:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800839e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e3      	bne.n	800836c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083ac:	d14f      	bne.n	800844e <UART_Start_Receive_IT+0x196>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80083b4:	88fa      	ldrh	r2, [r7, #6]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d349      	bcc.n	800844e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083c2:	d107      	bne.n	80083d4 <UART_Start_Receive_IT+0x11c>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d103      	bne.n	80083d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4a47      	ldr	r2, [pc, #284]	@ (80084ec <UART_Start_Receive_IT+0x234>)
 80083d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80083d2:	e002      	b.n	80083da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4a46      	ldr	r2, [pc, #280]	@ (80084f0 <UART_Start_Receive_IT+0x238>)
 80083d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01a      	beq.n	8008418 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80083f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008404:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008406:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008408:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800840a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800840c:	e841 2300 	strex	r3, r2, [r1]
 8008410:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e4      	bne.n	80083e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3308      	adds	r3, #8
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800842e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3308      	adds	r3, #8
 8008436:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008438:	64ba      	str	r2, [r7, #72]	@ 0x48
 800843a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800843e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e5      	bne.n	8008418 <UART_Start_Receive_IT+0x160>
 800844c:	e046      	b.n	80084dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008456:	d107      	bne.n	8008468 <UART_Start_Receive_IT+0x1b0>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d103      	bne.n	8008468 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a24      	ldr	r2, [pc, #144]	@ (80084f4 <UART_Start_Receive_IT+0x23c>)
 8008464:	675a      	str	r2, [r3, #116]	@ 0x74
 8008466:	e002      	b.n	800846e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4a23      	ldr	r2, [pc, #140]	@ (80084f8 <UART_Start_Receive_IT+0x240>)
 800846c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d019      	beq.n	80084aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008486:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800848a:	677b      	str	r3, [r7, #116]	@ 0x74
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	461a      	mov	r2, r3
 8008492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008494:	637b      	str	r3, [r7, #52]	@ 0x34
 8008496:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008498:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800849a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800849c:	e841 2300 	strex	r3, r2, [r1]
 80084a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80084a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e6      	bne.n	8008476 <UART_Start_Receive_IT+0x1be>
 80084a8:	e018      	b.n	80084dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	613b      	str	r3, [r7, #16]
   return(result);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f043 0320 	orr.w	r3, r3, #32
 80084be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084c8:	623b      	str	r3, [r7, #32]
 80084ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	69f9      	ldr	r1, [r7, #28]
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e6      	bne.n	80084aa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	378c      	adds	r7, #140	@ 0x8c
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	08008d1d 	.word	0x08008d1d
 80084f0:	080089bd 	.word	0x080089bd
 80084f4:	08008805 	.word	0x08008805
 80084f8:	0800864d 	.word	0x0800864d

080084fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b095      	sub	sp, #84	@ 0x54
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008518:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008522:	643b      	str	r3, [r7, #64]	@ 0x40
 8008524:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008528:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e6      	bne.n	8008504 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3308      	adds	r3, #8
 800853c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	61fb      	str	r3, [r7, #28]
   return(result);
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	4b1e      	ldr	r3, [pc, #120]	@ (80085c4 <UART_EndRxTransfer+0xc8>)
 800854a:	4013      	ands	r3, r2
 800854c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3308      	adds	r3, #8
 8008554:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008556:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008558:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800855c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e5      	bne.n	8008536 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800856e:	2b01      	cmp	r3, #1
 8008570:	d118      	bne.n	80085a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	e853 3f00 	ldrex	r3, [r3]
 800857e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f023 0310 	bic.w	r3, r3, #16
 8008586:	647b      	str	r3, [r7, #68]	@ 0x44
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008594:	6979      	ldr	r1, [r7, #20]
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	e841 2300 	strex	r3, r2, [r1]
 800859c:	613b      	str	r3, [r7, #16]
   return(result);
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e6      	bne.n	8008572 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80085b8:	bf00      	nop
 80085ba:	3754      	adds	r7, #84	@ 0x54
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	effffffe 	.word	0xeffffffe

080085c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f7fe ff2e 	bl	8007448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ec:	bf00      	nop
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	e853 3f00 	ldrex	r3, [r3]
 8008608:	60bb      	str	r3, [r7, #8]
   return(result);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	61bb      	str	r3, [r7, #24]
 800861c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861e:	6979      	ldr	r1, [r7, #20]
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	613b      	str	r3, [r7, #16]
   return(result);
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e6      	bne.n	80085fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7fe fef9 	bl	8007434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008642:	bf00      	nop
 8008644:	3720      	adds	r7, #32
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b09c      	sub	sp, #112	@ 0x70
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800865a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008664:	2b22      	cmp	r3, #34	@ 0x22
 8008666:	f040 80be 	bne.w	80087e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008670:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008674:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008678:	b2d9      	uxtb	r1, r3
 800867a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800867e:	b2da      	uxtb	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008684:	400a      	ands	r2, r1
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800869a:	b29b      	uxth	r3, r3
 800869c:	3b01      	subs	r3, #1
 800869e:	b29a      	uxth	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f040 80a1 	bne.w	80087f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086bc:	e853 3f00 	ldrex	r3, [r3]
 80086c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e6      	bne.n	80086b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3308      	adds	r3, #8
 80086ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f8:	f023 0301 	bic.w	r3, r3, #1
 80086fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3308      	adds	r3, #8
 8008704:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008706:	647a      	str	r2, [r7, #68]	@ 0x44
 8008708:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800870c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800870e:	e841 2300 	strex	r3, r2, [r1]
 8008712:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1e5      	bne.n	80086e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2220      	movs	r2, #32
 800871e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a33      	ldr	r2, [pc, #204]	@ (8008800 <UART_RxISR_8BIT+0x1b4>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d01f      	beq.n	8008778 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d018      	beq.n	8008778 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	623b      	str	r3, [r7, #32]
   return(result);
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800875a:	663b      	str	r3, [r7, #96]	@ 0x60
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008764:	633b      	str	r3, [r7, #48]	@ 0x30
 8008766:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800876a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e6      	bne.n	8008746 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800877c:	2b01      	cmp	r3, #1
 800877e:	d12e      	bne.n	80087de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	e853 3f00 	ldrex	r3, [r3]
 8008792:	60fb      	str	r3, [r7, #12]
   return(result);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f023 0310 	bic.w	r3, r3, #16
 800879a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087a4:	61fb      	str	r3, [r7, #28]
 80087a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	69b9      	ldr	r1, [r7, #24]
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	e841 2300 	strex	r3, r2, [r1]
 80087b0:	617b      	str	r3, [r7, #20]
   return(result);
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1e6      	bne.n	8008786 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	f003 0310 	and.w	r3, r3, #16
 80087c2:	2b10      	cmp	r3, #16
 80087c4:	d103      	bne.n	80087ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2210      	movs	r2, #16
 80087cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7fe fe40 	bl	800745c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087dc:	e00b      	b.n	80087f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7f8 fb02 	bl	8000de8 <HAL_UART_RxCpltCallback>
}
 80087e4:	e007      	b.n	80087f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	699a      	ldr	r2, [r3, #24]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f042 0208 	orr.w	r2, r2, #8
 80087f4:	619a      	str	r2, [r3, #24]
}
 80087f6:	bf00      	nop
 80087f8:	3770      	adds	r7, #112	@ 0x70
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	58000c00 	.word	0x58000c00

08008804 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b09c      	sub	sp, #112	@ 0x70
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008812:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800881c:	2b22      	cmp	r3, #34	@ 0x22
 800881e:	f040 80be 	bne.w	800899e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008828:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008830:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008832:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008836:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800883a:	4013      	ands	r3, r2
 800883c:	b29a      	uxth	r2, r3
 800883e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008840:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008846:	1c9a      	adds	r2, r3, #2
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008852:	b29b      	uxth	r3, r3
 8008854:	3b01      	subs	r3, #1
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	f040 80a1 	bne.w	80089ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800887a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800887c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008880:	667b      	str	r3, [r7, #100]	@ 0x64
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800888a:	657b      	str	r3, [r7, #84]	@ 0x54
 800888c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008890:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e6      	bne.n	800886c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3308      	adds	r3, #8
 80088a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	f023 0301 	bic.w	r3, r3, #1
 80088b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3308      	adds	r3, #8
 80088bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80088be:	643a      	str	r2, [r7, #64]	@ 0x40
 80088c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e5      	bne.n	800889e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a33      	ldr	r2, [pc, #204]	@ (80089b8 <UART_RxISR_16BIT+0x1b4>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d01f      	beq.n	8008930 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d018      	beq.n	8008930 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	e853 3f00 	ldrex	r3, [r3]
 800890a:	61fb      	str	r3, [r7, #28]
   return(result);
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008912:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	461a      	mov	r2, r3
 800891a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800891c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800891e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008924:	e841 2300 	strex	r3, r2, [r1]
 8008928:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e6      	bne.n	80088fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008934:	2b01      	cmp	r3, #1
 8008936:	d12e      	bne.n	8008996 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	e853 3f00 	ldrex	r3, [r3]
 800894a:	60bb      	str	r3, [r7, #8]
   return(result);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f023 0310 	bic.w	r3, r3, #16
 8008952:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	461a      	mov	r2, r3
 800895a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800895c:	61bb      	str	r3, [r7, #24]
 800895e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008960:	6979      	ldr	r1, [r7, #20]
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	e841 2300 	strex	r3, r2, [r1]
 8008968:	613b      	str	r3, [r7, #16]
   return(result);
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e6      	bne.n	800893e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	f003 0310 	and.w	r3, r3, #16
 800897a:	2b10      	cmp	r3, #16
 800897c:	d103      	bne.n	8008986 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2210      	movs	r2, #16
 8008984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7fe fd64 	bl	800745c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008994:	e00b      	b.n	80089ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7f8 fa26 	bl	8000de8 <HAL_UART_RxCpltCallback>
}
 800899c:	e007      	b.n	80089ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0208 	orr.w	r2, r2, #8
 80089ac:	619a      	str	r2, [r3, #24]
}
 80089ae:	bf00      	nop
 80089b0:	3770      	adds	r7, #112	@ 0x70
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	58000c00 	.word	0x58000c00

080089bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b0ac      	sub	sp, #176	@ 0xb0
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089f2:	2b22      	cmp	r3, #34	@ 0x22
 80089f4:	f040 8180 	bne.w	8008cf8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80089fe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a02:	e123      	b.n	8008c4c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a0e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008a12:	b2d9      	uxtb	r1, r3
 8008a14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a1e:	400a      	ands	r2, r1
 8008a20:	b2d2      	uxtb	r2, r2
 8008a22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d053      	beq.n	8008afe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d011      	beq.n	8008a86 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2201      	movs	r2, #1
 8008a74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a7c:	f043 0201 	orr.w	r2, r3, #1
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d011      	beq.n	8008ab6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aac:	f043 0204 	orr.w	r2, r3, #4
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d011      	beq.n	8008ae6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008adc:	f043 0202 	orr.w	r2, r3, #2
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d006      	beq.n	8008afe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7fe fca9 	bl	8007448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f040 80a0 	bne.w	8008c4c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b14:	e853 3f00 	ldrex	r3, [r3]
 8008b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b30:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008b34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008b3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e4      	bne.n	8008b0c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008b52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b54:	4b6e      	ldr	r3, [pc, #440]	@ (8008d10 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8008b56:	4013      	ands	r3, r2
 8008b58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3308      	adds	r3, #8
 8008b62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b66:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008b68:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008b6c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008b74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e3      	bne.n	8008b42 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a60      	ldr	r2, [pc, #384]	@ (8008d14 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d021      	beq.n	8008bdc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01a      	beq.n	8008bdc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008bc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008bce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008bd0:	e841 2300 	strex	r3, r2, [r1]
 8008bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e4      	bne.n	8008ba6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d130      	bne.n	8008c46 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	f023 0310 	bic.w	r3, r3, #16
 8008bfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e4      	bne.n	8008bea <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	f003 0310 	and.w	r3, r3, #16
 8008c2a:	2b10      	cmp	r3, #16
 8008c2c:	d103      	bne.n	8008c36 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2210      	movs	r2, #16
 8008c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7fe fc0c 	bl	800745c <HAL_UARTEx_RxEventCallback>
 8008c44:	e002      	b.n	8008c4c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7f8 f8ce 	bl	8000de8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c4c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d006      	beq.n	8008c62 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c58:	f003 0320 	and.w	r3, r3, #32
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f47f aed1 	bne.w	8008a04 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d049      	beq.n	8008d08 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d242      	bcs.n	8008d08 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e3      	bne.n	8008c82 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a16      	ldr	r2, [pc, #88]	@ (8008d18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008cbe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f043 0320 	orr.w	r3, r3, #32
 8008cd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ce2:	61bb      	str	r3, [r7, #24]
 8008ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	6979      	ldr	r1, [r7, #20]
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e4      	bne.n	8008cc0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cf6:	e007      	b.n	8008d08 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0208 	orr.w	r2, r2, #8
 8008d06:	619a      	str	r2, [r3, #24]
}
 8008d08:	bf00      	nop
 8008d0a:	37b0      	adds	r7, #176	@ 0xb0
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	effffffe 	.word	0xeffffffe
 8008d14:	58000c00 	.word	0x58000c00
 8008d18:	0800864d 	.word	0x0800864d

08008d1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b0ae      	sub	sp, #184	@ 0xb8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d2a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d52:	2b22      	cmp	r3, #34	@ 0x22
 8008d54:	f040 8184 	bne.w	8009060 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008d5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d62:	e127      	b.n	8008fb4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008d76:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008d7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008d7e:	4013      	ands	r3, r2
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d8c:	1c9a      	adds	r2, r3, #2
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008db2:	f003 0307 	and.w	r3, r3, #7
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d053      	beq.n	8008e62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d011      	beq.n	8008dea <UART_RxISR_16BIT_FIFOEN+0xce>
 8008dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00b      	beq.n	8008dea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de0:	f043 0201 	orr.w	r2, r3, #1
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d011      	beq.n	8008e1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00b      	beq.n	8008e1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2202      	movs	r2, #2
 8008e08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e10:	f043 0204 	orr.w	r2, r3, #4
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e1e:	f003 0304 	and.w	r3, r3, #4
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d011      	beq.n	8008e4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2204      	movs	r2, #4
 8008e38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e40:	f043 0202 	orr.w	r2, r3, #2
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d006      	beq.n	8008e62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7fe faf7 	bl	8007448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f040 80a2 	bne.w	8008fb4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e96:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ea4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e2      	bne.n	8008e70 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008eba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008ebc:	4b6e      	ldr	r3, [pc, #440]	@ (8009078 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3308      	adds	r3, #8
 8008eca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008ece:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ed4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e3      	bne.n	8008eaa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a60      	ldr	r2, [pc, #384]	@ (800907c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d021      	beq.n	8008f44 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d01a      	beq.n	8008f44 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008f30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f32:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e4      	bne.n	8008f0e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d130      	bne.n	8008fae <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5a:	e853 3f00 	ldrex	r3, [r3]
 8008f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f62:	f023 0310 	bic.w	r3, r3, #16
 8008f66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e4      	bne.n	8008f52 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f003 0310 	and.w	r3, r3, #16
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d103      	bne.n	8008f9e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2210      	movs	r2, #16
 8008f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fe fa58 	bl	800745c <HAL_UARTEx_RxEventCallback>
 8008fac:	e002      	b.n	8008fb4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7f7 ff1a 	bl	8000de8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fb4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d006      	beq.n	8008fca <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008fbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f47f aecd 	bne.w	8008d64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fd0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008fd4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d049      	beq.n	8009070 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008fe2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d242      	bcs.n	8009070 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3308      	adds	r3, #8
 800900a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800900e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009010:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800901c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e3      	bne.n	8008fea <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a16      	ldr	r2, [pc, #88]	@ (8009080 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009026:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	60fb      	str	r3, [r7, #12]
   return(result);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f043 0320 	orr.w	r3, r3, #32
 800903c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	461a      	mov	r2, r3
 8009046:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800904a:	61fb      	str	r3, [r7, #28]
 800904c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	69b9      	ldr	r1, [r7, #24]
 8009050:	69fa      	ldr	r2, [r7, #28]
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	617b      	str	r3, [r7, #20]
   return(result);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e4      	bne.n	8009028 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800905e:	e007      	b.n	8009070 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0208 	orr.w	r2, r2, #8
 800906e:	619a      	str	r2, [r3, #24]
}
 8009070:	bf00      	nop
 8009072:	37b8      	adds	r7, #184	@ 0xb8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	effffffe 	.word	0xeffffffe
 800907c:	58000c00 	.word	0x58000c00
 8009080:	08008805 	.word	0x08008805

08009084 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e027      	b.n	8009126 <HAL_UARTEx_DisableFifoMode+0x66>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2224      	movs	r2, #36	@ 0x24
 80090e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0201 	bic.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009104:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009142:	2b01      	cmp	r3, #1
 8009144:	d101      	bne.n	800914a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009146:	2302      	movs	r3, #2
 8009148:	e02d      	b.n	80091a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2224      	movs	r2, #36	@ 0x24
 8009156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0201 	bic.w	r2, r2, #1
 8009170:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	430a      	orrs	r2, r1
 8009184:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f850 	bl	800922c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091c2:	2302      	movs	r3, #2
 80091c4:	e02d      	b.n	8009222 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2224      	movs	r2, #36	@ 0x24
 80091d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0201 	bic.w	r2, r2, #1
 80091ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f812 	bl	800922c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2220      	movs	r2, #32
 8009214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009238:	2b00      	cmp	r3, #0
 800923a:	d108      	bne.n	800924e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800924c:	e031      	b.n	80092b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800924e:	2310      	movs	r3, #16
 8009250:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009252:	2310      	movs	r3, #16
 8009254:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	0e5b      	lsrs	r3, r3, #25
 800925e:	b2db      	uxtb	r3, r3
 8009260:	f003 0307 	and.w	r3, r3, #7
 8009264:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	0f5b      	lsrs	r3, r3, #29
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	7b3a      	ldrb	r2, [r7, #12]
 800927a:	4911      	ldr	r1, [pc, #68]	@ (80092c0 <UARTEx_SetNbDataToProcess+0x94>)
 800927c:	5c8a      	ldrb	r2, [r1, r2]
 800927e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009282:	7b3a      	ldrb	r2, [r7, #12]
 8009284:	490f      	ldr	r1, [pc, #60]	@ (80092c4 <UARTEx_SetNbDataToProcess+0x98>)
 8009286:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009288:	fb93 f3f2 	sdiv	r3, r3, r2
 800928c:	b29a      	uxth	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	7b7a      	ldrb	r2, [r7, #13]
 8009298:	4909      	ldr	r1, [pc, #36]	@ (80092c0 <UARTEx_SetNbDataToProcess+0x94>)
 800929a:	5c8a      	ldrb	r2, [r1, r2]
 800929c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092a0:	7b7a      	ldrb	r2, [r7, #13]
 80092a2:	4908      	ldr	r1, [pc, #32]	@ (80092c4 <UARTEx_SetNbDataToProcess+0x98>)
 80092a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80092b2:	bf00      	nop
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	0800a420 	.word	0x0800a420
 80092c4:	0800a428 	.word	0x0800a428

080092c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092c8:	b084      	sub	sp, #16
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b084      	sub	sp, #16
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	f107 001c 	add.w	r0, r7, #28
 80092d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d121      	bne.n	8009326 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68da      	ldr	r2, [r3, #12]
 80092f2:	4b2c      	ldr	r3, [pc, #176]	@ (80093a4 <USB_CoreInit+0xdc>)
 80092f4:	4013      	ands	r3, r2
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009306:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800930a:	2b01      	cmp	r3, #1
 800930c:	d105      	bne.n	800931a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 faaa 	bl	8009874 <USB_CoreReset>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]
 8009324:	e01b      	b.n	800935e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa9e 	bl	8009874 <USB_CoreReset>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800933c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009340:	2b00      	cmp	r3, #0
 8009342:	d106      	bne.n	8009352 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009348:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009350:	e005      	b.n	800935e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009356:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800935e:	7fbb      	ldrb	r3, [r7, #30]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d116      	bne.n	8009392 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009368:	b29a      	uxth	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009372:	4b0d      	ldr	r3, [pc, #52]	@ (80093a8 <USB_CoreInit+0xe0>)
 8009374:	4313      	orrs	r3, r2
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f043 0206 	orr.w	r2, r3, #6
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f043 0220 	orr.w	r2, r3, #32
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009392:	7bfb      	ldrb	r3, [r7, #15]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800939e:	b004      	add	sp, #16
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	ffbdffbf 	.word	0xffbdffbf
 80093a8:	03ee0000 	.word	0x03ee0000

080093ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f023 0201 	bic.w	r2, r3, #1
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b084      	sub	sp, #16
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d115      	bne.n	800941c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093fc:	200a      	movs	r0, #10
 80093fe:	f7f8 f90b 	bl	8001618 <HAL_Delay>
      ms += 10U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	330a      	adds	r3, #10
 8009406:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fa25 	bl	8009858 <USB_GetMode>
 800940e:	4603      	mov	r3, r0
 8009410:	2b01      	cmp	r3, #1
 8009412:	d01e      	beq.n	8009452 <USB_SetCurrentMode+0x84>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2bc7      	cmp	r3, #199	@ 0xc7
 8009418:	d9f0      	bls.n	80093fc <USB_SetCurrentMode+0x2e>
 800941a:	e01a      	b.n	8009452 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d115      	bne.n	800944e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800942e:	200a      	movs	r0, #10
 8009430:	f7f8 f8f2 	bl	8001618 <HAL_Delay>
      ms += 10U;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	330a      	adds	r3, #10
 8009438:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fa0c 	bl	8009858 <USB_GetMode>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d005      	beq.n	8009452 <USB_SetCurrentMode+0x84>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2bc7      	cmp	r3, #199	@ 0xc7
 800944a:	d9f0      	bls.n	800942e <USB_SetCurrentMode+0x60>
 800944c:	e001      	b.n	8009452 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e005      	b.n	800945e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2bc8      	cmp	r3, #200	@ 0xc8
 8009456:	d101      	bne.n	800945c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e000      	b.n	800945e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009468:	b084      	sub	sp, #16
 800946a:	b580      	push	{r7, lr}
 800946c:	b086      	sub	sp, #24
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009482:	2300      	movs	r3, #0
 8009484:	613b      	str	r3, [r7, #16]
 8009486:	e009      	b.n	800949c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	3340      	adds	r3, #64	@ 0x40
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	2200      	movs	r2, #0
 8009494:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	3301      	adds	r3, #1
 800949a:	613b      	str	r3, [r7, #16]
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	2b0e      	cmp	r3, #14
 80094a0:	d9f2      	bls.n	8009488 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80094a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d11c      	bne.n	80094e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094b8:	f043 0302 	orr.w	r3, r3, #2
 80094bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	601a      	str	r2, [r3, #0]
 80094e2:	e005      	b.n	80094f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094f6:	461a      	mov	r2, r3
 80094f8:	2300      	movs	r3, #0
 80094fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009500:	2b01      	cmp	r3, #1
 8009502:	d10d      	bne.n	8009520 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009508:	2b00      	cmp	r3, #0
 800950a:	d104      	bne.n	8009516 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800950c:	2100      	movs	r1, #0
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f968 	bl	80097e4 <USB_SetDevSpeed>
 8009514:	e008      	b.n	8009528 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009516:	2101      	movs	r1, #1
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f963 	bl	80097e4 <USB_SetDevSpeed>
 800951e:	e003      	b.n	8009528 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009520:	2103      	movs	r1, #3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f95e 	bl	80097e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009528:	2110      	movs	r1, #16
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f8fa 	bl	8009724 <USB_FlushTxFifo>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f924 	bl	8009788 <USB_FlushRxFifo>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009550:	461a      	mov	r2, r3
 8009552:	2300      	movs	r3, #0
 8009554:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800955c:	461a      	mov	r2, r3
 800955e:	2300      	movs	r3, #0
 8009560:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009568:	461a      	mov	r2, r3
 800956a:	2300      	movs	r3, #0
 800956c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800956e:	2300      	movs	r3, #0
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	e043      	b.n	80095fc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800958a:	d118      	bne.n	80095be <USB_DevInit+0x156>
    {
      if (i == 0U)
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800959e:	461a      	mov	r2, r3
 80095a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	e013      	b.n	80095d0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095b4:	461a      	mov	r2, r3
 80095b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	e008      	b.n	80095d0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ca:	461a      	mov	r2, r3
 80095cc:	2300      	movs	r3, #0
 80095ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095dc:	461a      	mov	r2, r3
 80095de:	2300      	movs	r3, #0
 80095e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ee:	461a      	mov	r2, r3
 80095f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80095f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	3301      	adds	r3, #1
 80095fa:	613b      	str	r3, [r7, #16]
 80095fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009600:	461a      	mov	r2, r3
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	4293      	cmp	r3, r2
 8009606:	d3b5      	bcc.n	8009574 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009608:	2300      	movs	r3, #0
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	e043      	b.n	8009696 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009624:	d118      	bne.n	8009658 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009638:	461a      	mov	r2, r3
 800963a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800963e:	6013      	str	r3, [r2, #0]
 8009640:	e013      	b.n	800966a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4413      	add	r3, r2
 800964a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800964e:	461a      	mov	r2, r3
 8009650:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	e008      	b.n	800966a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009664:	461a      	mov	r2, r3
 8009666:	2300      	movs	r3, #0
 8009668:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009676:	461a      	mov	r2, r3
 8009678:	2300      	movs	r3, #0
 800967a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009688:	461a      	mov	r2, r3
 800968a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800968e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	3301      	adds	r3, #1
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800969a:	461a      	mov	r2, r3
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	4293      	cmp	r3, r2
 80096a0:	d3b5      	bcc.n	800960e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80096c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80096c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d105      	bne.n	80096d8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f043 0210 	orr.w	r2, r3, #16
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699a      	ldr	r2, [r3, #24]
 80096dc:	4b0f      	ldr	r3, [pc, #60]	@ (800971c <USB_DevInit+0x2b4>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	f043 0208 	orr.w	r2, r3, #8
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d105      	bne.n	800970c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699a      	ldr	r2, [r3, #24]
 8009704:	4b06      	ldr	r3, [pc, #24]	@ (8009720 <USB_DevInit+0x2b8>)
 8009706:	4313      	orrs	r3, r2
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800970c:	7dfb      	ldrb	r3, [r7, #23]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009718:	b004      	add	sp, #16
 800971a:	4770      	bx	lr
 800971c:	803c3800 	.word	0x803c3800
 8009720:	40000004 	.word	0x40000004

08009724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3301      	adds	r3, #1
 8009736:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800973e:	d901      	bls.n	8009744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e01b      	b.n	800977c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	daf2      	bge.n	8009732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	019b      	lsls	r3, r3, #6
 8009754:	f043 0220 	orr.w	r2, r3, #32
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009768:	d901      	bls.n	800976e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e006      	b.n	800977c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	f003 0320 	and.w	r3, r3, #32
 8009776:	2b20      	cmp	r3, #32
 8009778:	d0f0      	beq.n	800975c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3301      	adds	r3, #1
 8009798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097a0:	d901      	bls.n	80097a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e018      	b.n	80097d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	daf2      	bge.n	8009794 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2210      	movs	r2, #16
 80097b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3301      	adds	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097c4:	d901      	bls.n	80097ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e006      	b.n	80097d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	f003 0310 	and.w	r3, r3, #16
 80097d2:	2b10      	cmp	r3, #16
 80097d4:	d0f0      	beq.n	80097b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	78fb      	ldrb	r3, [r7, #3]
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009804:	4313      	orrs	r3, r2
 8009806:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009816:	b480      	push	{r7}
 8009818:	b085      	sub	sp, #20
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009830:	f023 0303 	bic.w	r3, r3, #3
 8009834:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009844:	f043 0302 	orr.w	r3, r3, #2
 8009848:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	f003 0301 	and.w	r3, r3, #1
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	3301      	adds	r3, #1
 8009884:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800988c:	d901      	bls.n	8009892 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e01b      	b.n	80098ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	daf2      	bge.n	8009880 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	f043 0201 	orr.w	r2, r3, #1
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098b6:	d901      	bls.n	80098bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e006      	b.n	80098ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d0f0      	beq.n	80098aa <USB_CoreReset+0x36>

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
	...

080098d8 <_strtol_l.constprop.0>:
 80098d8:	2b24      	cmp	r3, #36	@ 0x24
 80098da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098de:	4686      	mov	lr, r0
 80098e0:	4690      	mov	r8, r2
 80098e2:	d801      	bhi.n	80098e8 <_strtol_l.constprop.0+0x10>
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d106      	bne.n	80098f6 <_strtol_l.constprop.0+0x1e>
 80098e8:	f000 f8b4 	bl	8009a54 <__errno>
 80098ec:	2316      	movs	r3, #22
 80098ee:	6003      	str	r3, [r0, #0]
 80098f0:	2000      	movs	r0, #0
 80098f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f6:	4834      	ldr	r0, [pc, #208]	@ (80099c8 <_strtol_l.constprop.0+0xf0>)
 80098f8:	460d      	mov	r5, r1
 80098fa:	462a      	mov	r2, r5
 80098fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009900:	5d06      	ldrb	r6, [r0, r4]
 8009902:	f016 0608 	ands.w	r6, r6, #8
 8009906:	d1f8      	bne.n	80098fa <_strtol_l.constprop.0+0x22>
 8009908:	2c2d      	cmp	r4, #45	@ 0x2d
 800990a:	d12d      	bne.n	8009968 <_strtol_l.constprop.0+0x90>
 800990c:	782c      	ldrb	r4, [r5, #0]
 800990e:	2601      	movs	r6, #1
 8009910:	1c95      	adds	r5, r2, #2
 8009912:	f033 0210 	bics.w	r2, r3, #16
 8009916:	d109      	bne.n	800992c <_strtol_l.constprop.0+0x54>
 8009918:	2c30      	cmp	r4, #48	@ 0x30
 800991a:	d12a      	bne.n	8009972 <_strtol_l.constprop.0+0x9a>
 800991c:	782a      	ldrb	r2, [r5, #0]
 800991e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009922:	2a58      	cmp	r2, #88	@ 0x58
 8009924:	d125      	bne.n	8009972 <_strtol_l.constprop.0+0x9a>
 8009926:	786c      	ldrb	r4, [r5, #1]
 8009928:	2310      	movs	r3, #16
 800992a:	3502      	adds	r5, #2
 800992c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009930:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009934:	2200      	movs	r2, #0
 8009936:	fbbc f9f3 	udiv	r9, ip, r3
 800993a:	4610      	mov	r0, r2
 800993c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009940:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009944:	2f09      	cmp	r7, #9
 8009946:	d81b      	bhi.n	8009980 <_strtol_l.constprop.0+0xa8>
 8009948:	463c      	mov	r4, r7
 800994a:	42a3      	cmp	r3, r4
 800994c:	dd27      	ble.n	800999e <_strtol_l.constprop.0+0xc6>
 800994e:	1c57      	adds	r7, r2, #1
 8009950:	d007      	beq.n	8009962 <_strtol_l.constprop.0+0x8a>
 8009952:	4581      	cmp	r9, r0
 8009954:	d320      	bcc.n	8009998 <_strtol_l.constprop.0+0xc0>
 8009956:	d101      	bne.n	800995c <_strtol_l.constprop.0+0x84>
 8009958:	45a2      	cmp	sl, r4
 800995a:	db1d      	blt.n	8009998 <_strtol_l.constprop.0+0xc0>
 800995c:	fb00 4003 	mla	r0, r0, r3, r4
 8009960:	2201      	movs	r2, #1
 8009962:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009966:	e7eb      	b.n	8009940 <_strtol_l.constprop.0+0x68>
 8009968:	2c2b      	cmp	r4, #43	@ 0x2b
 800996a:	bf04      	itt	eq
 800996c:	782c      	ldrbeq	r4, [r5, #0]
 800996e:	1c95      	addeq	r5, r2, #2
 8009970:	e7cf      	b.n	8009912 <_strtol_l.constprop.0+0x3a>
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1da      	bne.n	800992c <_strtol_l.constprop.0+0x54>
 8009976:	2c30      	cmp	r4, #48	@ 0x30
 8009978:	bf0c      	ite	eq
 800997a:	2308      	moveq	r3, #8
 800997c:	230a      	movne	r3, #10
 800997e:	e7d5      	b.n	800992c <_strtol_l.constprop.0+0x54>
 8009980:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009984:	2f19      	cmp	r7, #25
 8009986:	d801      	bhi.n	800998c <_strtol_l.constprop.0+0xb4>
 8009988:	3c37      	subs	r4, #55	@ 0x37
 800998a:	e7de      	b.n	800994a <_strtol_l.constprop.0+0x72>
 800998c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009990:	2f19      	cmp	r7, #25
 8009992:	d804      	bhi.n	800999e <_strtol_l.constprop.0+0xc6>
 8009994:	3c57      	subs	r4, #87	@ 0x57
 8009996:	e7d8      	b.n	800994a <_strtol_l.constprop.0+0x72>
 8009998:	f04f 32ff 	mov.w	r2, #4294967295
 800999c:	e7e1      	b.n	8009962 <_strtol_l.constprop.0+0x8a>
 800999e:	1c53      	adds	r3, r2, #1
 80099a0:	d108      	bne.n	80099b4 <_strtol_l.constprop.0+0xdc>
 80099a2:	2322      	movs	r3, #34	@ 0x22
 80099a4:	f8ce 3000 	str.w	r3, [lr]
 80099a8:	4660      	mov	r0, ip
 80099aa:	f1b8 0f00 	cmp.w	r8, #0
 80099ae:	d0a0      	beq.n	80098f2 <_strtol_l.constprop.0+0x1a>
 80099b0:	1e69      	subs	r1, r5, #1
 80099b2:	e006      	b.n	80099c2 <_strtol_l.constprop.0+0xea>
 80099b4:	b106      	cbz	r6, 80099b8 <_strtol_l.constprop.0+0xe0>
 80099b6:	4240      	negs	r0, r0
 80099b8:	f1b8 0f00 	cmp.w	r8, #0
 80099bc:	d099      	beq.n	80098f2 <_strtol_l.constprop.0+0x1a>
 80099be:	2a00      	cmp	r2, #0
 80099c0:	d1f6      	bne.n	80099b0 <_strtol_l.constprop.0+0xd8>
 80099c2:	f8c8 1000 	str.w	r1, [r8]
 80099c6:	e794      	b.n	80098f2 <_strtol_l.constprop.0+0x1a>
 80099c8:	0800a431 	.word	0x0800a431

080099cc <strtol>:
 80099cc:	4613      	mov	r3, r2
 80099ce:	460a      	mov	r2, r1
 80099d0:	4601      	mov	r1, r0
 80099d2:	4802      	ldr	r0, [pc, #8]	@ (80099dc <strtol+0x10>)
 80099d4:	6800      	ldr	r0, [r0, #0]
 80099d6:	f7ff bf7f 	b.w	80098d8 <_strtol_l.constprop.0>
 80099da:	bf00      	nop
 80099dc:	24000010 	.word	0x24000010

080099e0 <siprintf>:
 80099e0:	b40e      	push	{r1, r2, r3}
 80099e2:	b500      	push	{lr}
 80099e4:	b09c      	sub	sp, #112	@ 0x70
 80099e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80099e8:	9002      	str	r0, [sp, #8]
 80099ea:	9006      	str	r0, [sp, #24]
 80099ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80099f0:	4809      	ldr	r0, [pc, #36]	@ (8009a18 <siprintf+0x38>)
 80099f2:	9107      	str	r1, [sp, #28]
 80099f4:	9104      	str	r1, [sp, #16]
 80099f6:	4909      	ldr	r1, [pc, #36]	@ (8009a1c <siprintf+0x3c>)
 80099f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fc:	9105      	str	r1, [sp, #20]
 80099fe:	6800      	ldr	r0, [r0, #0]
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	a902      	add	r1, sp, #8
 8009a04:	f000 f9a6 	bl	8009d54 <_svfiprintf_r>
 8009a08:	9b02      	ldr	r3, [sp, #8]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	b01c      	add	sp, #112	@ 0x70
 8009a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a14:	b003      	add	sp, #12
 8009a16:	4770      	bx	lr
 8009a18:	24000010 	.word	0x24000010
 8009a1c:	ffff0208 	.word	0xffff0208

08009a20 <memset>:
 8009a20:	4402      	add	r2, r0
 8009a22:	4603      	mov	r3, r0
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d100      	bne.n	8009a2a <memset+0xa>
 8009a28:	4770      	bx	lr
 8009a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a2e:	e7f9      	b.n	8009a24 <memset+0x4>

08009a30 <strncmp>:
 8009a30:	b510      	push	{r4, lr}
 8009a32:	b16a      	cbz	r2, 8009a50 <strncmp+0x20>
 8009a34:	3901      	subs	r1, #1
 8009a36:	1884      	adds	r4, r0, r2
 8009a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d103      	bne.n	8009a4c <strncmp+0x1c>
 8009a44:	42a0      	cmp	r0, r4
 8009a46:	d001      	beq.n	8009a4c <strncmp+0x1c>
 8009a48:	2a00      	cmp	r2, #0
 8009a4a:	d1f5      	bne.n	8009a38 <strncmp+0x8>
 8009a4c:	1ad0      	subs	r0, r2, r3
 8009a4e:	bd10      	pop	{r4, pc}
 8009a50:	4610      	mov	r0, r2
 8009a52:	e7fc      	b.n	8009a4e <strncmp+0x1e>

08009a54 <__errno>:
 8009a54:	4b01      	ldr	r3, [pc, #4]	@ (8009a5c <__errno+0x8>)
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	24000010 	.word	0x24000010

08009a60 <__libc_init_array>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	4d0d      	ldr	r5, [pc, #52]	@ (8009a98 <__libc_init_array+0x38>)
 8009a64:	4c0d      	ldr	r4, [pc, #52]	@ (8009a9c <__libc_init_array+0x3c>)
 8009a66:	1b64      	subs	r4, r4, r5
 8009a68:	10a4      	asrs	r4, r4, #2
 8009a6a:	2600      	movs	r6, #0
 8009a6c:	42a6      	cmp	r6, r4
 8009a6e:	d109      	bne.n	8009a84 <__libc_init_array+0x24>
 8009a70:	4d0b      	ldr	r5, [pc, #44]	@ (8009aa0 <__libc_init_array+0x40>)
 8009a72:	4c0c      	ldr	r4, [pc, #48]	@ (8009aa4 <__libc_init_array+0x44>)
 8009a74:	f000 fc66 	bl	800a344 <_init>
 8009a78:	1b64      	subs	r4, r4, r5
 8009a7a:	10a4      	asrs	r4, r4, #2
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	42a6      	cmp	r6, r4
 8009a80:	d105      	bne.n	8009a8e <__libc_init_array+0x2e>
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a88:	4798      	blx	r3
 8009a8a:	3601      	adds	r6, #1
 8009a8c:	e7ee      	b.n	8009a6c <__libc_init_array+0xc>
 8009a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a92:	4798      	blx	r3
 8009a94:	3601      	adds	r6, #1
 8009a96:	e7f2      	b.n	8009a7e <__libc_init_array+0x1e>
 8009a98:	0800a56c 	.word	0x0800a56c
 8009a9c:	0800a56c 	.word	0x0800a56c
 8009aa0:	0800a56c 	.word	0x0800a56c
 8009aa4:	0800a570 	.word	0x0800a570

08009aa8 <__retarget_lock_acquire_recursive>:
 8009aa8:	4770      	bx	lr

08009aaa <__retarget_lock_release_recursive>:
 8009aaa:	4770      	bx	lr

08009aac <_free_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4605      	mov	r5, r0
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	d041      	beq.n	8009b38 <_free_r+0x8c>
 8009ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab8:	1f0c      	subs	r4, r1, #4
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	bfb8      	it	lt
 8009abe:	18e4      	addlt	r4, r4, r3
 8009ac0:	f000 f8e0 	bl	8009c84 <__malloc_lock>
 8009ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8009b3c <_free_r+0x90>)
 8009ac6:	6813      	ldr	r3, [r2, #0]
 8009ac8:	b933      	cbnz	r3, 8009ad8 <_free_r+0x2c>
 8009aca:	6063      	str	r3, [r4, #4]
 8009acc:	6014      	str	r4, [r2, #0]
 8009ace:	4628      	mov	r0, r5
 8009ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad4:	f000 b8dc 	b.w	8009c90 <__malloc_unlock>
 8009ad8:	42a3      	cmp	r3, r4
 8009ada:	d908      	bls.n	8009aee <_free_r+0x42>
 8009adc:	6820      	ldr	r0, [r4, #0]
 8009ade:	1821      	adds	r1, r4, r0
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	bf01      	itttt	eq
 8009ae4:	6819      	ldreq	r1, [r3, #0]
 8009ae6:	685b      	ldreq	r3, [r3, #4]
 8009ae8:	1809      	addeq	r1, r1, r0
 8009aea:	6021      	streq	r1, [r4, #0]
 8009aec:	e7ed      	b.n	8009aca <_free_r+0x1e>
 8009aee:	461a      	mov	r2, r3
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	b10b      	cbz	r3, 8009af8 <_free_r+0x4c>
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	d9fa      	bls.n	8009aee <_free_r+0x42>
 8009af8:	6811      	ldr	r1, [r2, #0]
 8009afa:	1850      	adds	r0, r2, r1
 8009afc:	42a0      	cmp	r0, r4
 8009afe:	d10b      	bne.n	8009b18 <_free_r+0x6c>
 8009b00:	6820      	ldr	r0, [r4, #0]
 8009b02:	4401      	add	r1, r0
 8009b04:	1850      	adds	r0, r2, r1
 8009b06:	4283      	cmp	r3, r0
 8009b08:	6011      	str	r1, [r2, #0]
 8009b0a:	d1e0      	bne.n	8009ace <_free_r+0x22>
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	6053      	str	r3, [r2, #4]
 8009b12:	4408      	add	r0, r1
 8009b14:	6010      	str	r0, [r2, #0]
 8009b16:	e7da      	b.n	8009ace <_free_r+0x22>
 8009b18:	d902      	bls.n	8009b20 <_free_r+0x74>
 8009b1a:	230c      	movs	r3, #12
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	e7d6      	b.n	8009ace <_free_r+0x22>
 8009b20:	6820      	ldr	r0, [r4, #0]
 8009b22:	1821      	adds	r1, r4, r0
 8009b24:	428b      	cmp	r3, r1
 8009b26:	bf04      	itt	eq
 8009b28:	6819      	ldreq	r1, [r3, #0]
 8009b2a:	685b      	ldreq	r3, [r3, #4]
 8009b2c:	6063      	str	r3, [r4, #4]
 8009b2e:	bf04      	itt	eq
 8009b30:	1809      	addeq	r1, r1, r0
 8009b32:	6021      	streq	r1, [r4, #0]
 8009b34:	6054      	str	r4, [r2, #4]
 8009b36:	e7ca      	b.n	8009ace <_free_r+0x22>
 8009b38:	bd38      	pop	{r3, r4, r5, pc}
 8009b3a:	bf00      	nop
 8009b3c:	24000954 	.word	0x24000954

08009b40 <sbrk_aligned>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	4e0f      	ldr	r6, [pc, #60]	@ (8009b80 <sbrk_aligned+0x40>)
 8009b44:	460c      	mov	r4, r1
 8009b46:	6831      	ldr	r1, [r6, #0]
 8009b48:	4605      	mov	r5, r0
 8009b4a:	b911      	cbnz	r1, 8009b52 <sbrk_aligned+0x12>
 8009b4c:	f000 fba6 	bl	800a29c <_sbrk_r>
 8009b50:	6030      	str	r0, [r6, #0]
 8009b52:	4621      	mov	r1, r4
 8009b54:	4628      	mov	r0, r5
 8009b56:	f000 fba1 	bl	800a29c <_sbrk_r>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	d103      	bne.n	8009b66 <sbrk_aligned+0x26>
 8009b5e:	f04f 34ff 	mov.w	r4, #4294967295
 8009b62:	4620      	mov	r0, r4
 8009b64:	bd70      	pop	{r4, r5, r6, pc}
 8009b66:	1cc4      	adds	r4, r0, #3
 8009b68:	f024 0403 	bic.w	r4, r4, #3
 8009b6c:	42a0      	cmp	r0, r4
 8009b6e:	d0f8      	beq.n	8009b62 <sbrk_aligned+0x22>
 8009b70:	1a21      	subs	r1, r4, r0
 8009b72:	4628      	mov	r0, r5
 8009b74:	f000 fb92 	bl	800a29c <_sbrk_r>
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d1f2      	bne.n	8009b62 <sbrk_aligned+0x22>
 8009b7c:	e7ef      	b.n	8009b5e <sbrk_aligned+0x1e>
 8009b7e:	bf00      	nop
 8009b80:	24000950 	.word	0x24000950

08009b84 <_malloc_r>:
 8009b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b88:	1ccd      	adds	r5, r1, #3
 8009b8a:	f025 0503 	bic.w	r5, r5, #3
 8009b8e:	3508      	adds	r5, #8
 8009b90:	2d0c      	cmp	r5, #12
 8009b92:	bf38      	it	cc
 8009b94:	250c      	movcc	r5, #12
 8009b96:	2d00      	cmp	r5, #0
 8009b98:	4606      	mov	r6, r0
 8009b9a:	db01      	blt.n	8009ba0 <_malloc_r+0x1c>
 8009b9c:	42a9      	cmp	r1, r5
 8009b9e:	d904      	bls.n	8009baa <_malloc_r+0x26>
 8009ba0:	230c      	movs	r3, #12
 8009ba2:	6033      	str	r3, [r6, #0]
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009baa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c80 <_malloc_r+0xfc>
 8009bae:	f000 f869 	bl	8009c84 <__malloc_lock>
 8009bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb6:	461c      	mov	r4, r3
 8009bb8:	bb44      	cbnz	r4, 8009c0c <_malloc_r+0x88>
 8009bba:	4629      	mov	r1, r5
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f7ff ffbf 	bl	8009b40 <sbrk_aligned>
 8009bc2:	1c43      	adds	r3, r0, #1
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	d158      	bne.n	8009c7a <_malloc_r+0xf6>
 8009bc8:	f8d8 4000 	ldr.w	r4, [r8]
 8009bcc:	4627      	mov	r7, r4
 8009bce:	2f00      	cmp	r7, #0
 8009bd0:	d143      	bne.n	8009c5a <_malloc_r+0xd6>
 8009bd2:	2c00      	cmp	r4, #0
 8009bd4:	d04b      	beq.n	8009c6e <_malloc_r+0xea>
 8009bd6:	6823      	ldr	r3, [r4, #0]
 8009bd8:	4639      	mov	r1, r7
 8009bda:	4630      	mov	r0, r6
 8009bdc:	eb04 0903 	add.w	r9, r4, r3
 8009be0:	f000 fb5c 	bl	800a29c <_sbrk_r>
 8009be4:	4581      	cmp	r9, r0
 8009be6:	d142      	bne.n	8009c6e <_malloc_r+0xea>
 8009be8:	6821      	ldr	r1, [r4, #0]
 8009bea:	1a6d      	subs	r5, r5, r1
 8009bec:	4629      	mov	r1, r5
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f7ff ffa6 	bl	8009b40 <sbrk_aligned>
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d03a      	beq.n	8009c6e <_malloc_r+0xea>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	442b      	add	r3, r5
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	bb62      	cbnz	r2, 8009c60 <_malloc_r+0xdc>
 8009c06:	f8c8 7000 	str.w	r7, [r8]
 8009c0a:	e00f      	b.n	8009c2c <_malloc_r+0xa8>
 8009c0c:	6822      	ldr	r2, [r4, #0]
 8009c0e:	1b52      	subs	r2, r2, r5
 8009c10:	d420      	bmi.n	8009c54 <_malloc_r+0xd0>
 8009c12:	2a0b      	cmp	r2, #11
 8009c14:	d917      	bls.n	8009c46 <_malloc_r+0xc2>
 8009c16:	1961      	adds	r1, r4, r5
 8009c18:	42a3      	cmp	r3, r4
 8009c1a:	6025      	str	r5, [r4, #0]
 8009c1c:	bf18      	it	ne
 8009c1e:	6059      	strne	r1, [r3, #4]
 8009c20:	6863      	ldr	r3, [r4, #4]
 8009c22:	bf08      	it	eq
 8009c24:	f8c8 1000 	streq.w	r1, [r8]
 8009c28:	5162      	str	r2, [r4, r5]
 8009c2a:	604b      	str	r3, [r1, #4]
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f000 f82f 	bl	8009c90 <__malloc_unlock>
 8009c32:	f104 000b 	add.w	r0, r4, #11
 8009c36:	1d23      	adds	r3, r4, #4
 8009c38:	f020 0007 	bic.w	r0, r0, #7
 8009c3c:	1ac2      	subs	r2, r0, r3
 8009c3e:	bf1c      	itt	ne
 8009c40:	1a1b      	subne	r3, r3, r0
 8009c42:	50a3      	strne	r3, [r4, r2]
 8009c44:	e7af      	b.n	8009ba6 <_malloc_r+0x22>
 8009c46:	6862      	ldr	r2, [r4, #4]
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	bf0c      	ite	eq
 8009c4c:	f8c8 2000 	streq.w	r2, [r8]
 8009c50:	605a      	strne	r2, [r3, #4]
 8009c52:	e7eb      	b.n	8009c2c <_malloc_r+0xa8>
 8009c54:	4623      	mov	r3, r4
 8009c56:	6864      	ldr	r4, [r4, #4]
 8009c58:	e7ae      	b.n	8009bb8 <_malloc_r+0x34>
 8009c5a:	463c      	mov	r4, r7
 8009c5c:	687f      	ldr	r7, [r7, #4]
 8009c5e:	e7b6      	b.n	8009bce <_malloc_r+0x4a>
 8009c60:	461a      	mov	r2, r3
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	42a3      	cmp	r3, r4
 8009c66:	d1fb      	bne.n	8009c60 <_malloc_r+0xdc>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	6053      	str	r3, [r2, #4]
 8009c6c:	e7de      	b.n	8009c2c <_malloc_r+0xa8>
 8009c6e:	230c      	movs	r3, #12
 8009c70:	6033      	str	r3, [r6, #0]
 8009c72:	4630      	mov	r0, r6
 8009c74:	f000 f80c 	bl	8009c90 <__malloc_unlock>
 8009c78:	e794      	b.n	8009ba4 <_malloc_r+0x20>
 8009c7a:	6005      	str	r5, [r0, #0]
 8009c7c:	e7d6      	b.n	8009c2c <_malloc_r+0xa8>
 8009c7e:	bf00      	nop
 8009c80:	24000954 	.word	0x24000954

08009c84 <__malloc_lock>:
 8009c84:	4801      	ldr	r0, [pc, #4]	@ (8009c8c <__malloc_lock+0x8>)
 8009c86:	f7ff bf0f 	b.w	8009aa8 <__retarget_lock_acquire_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	2400094c 	.word	0x2400094c

08009c90 <__malloc_unlock>:
 8009c90:	4801      	ldr	r0, [pc, #4]	@ (8009c98 <__malloc_unlock+0x8>)
 8009c92:	f7ff bf0a 	b.w	8009aaa <__retarget_lock_release_recursive>
 8009c96:	bf00      	nop
 8009c98:	2400094c 	.word	0x2400094c

08009c9c <__ssputs_r>:
 8009c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	688e      	ldr	r6, [r1, #8]
 8009ca2:	461f      	mov	r7, r3
 8009ca4:	42be      	cmp	r6, r7
 8009ca6:	680b      	ldr	r3, [r1, #0]
 8009ca8:	4682      	mov	sl, r0
 8009caa:	460c      	mov	r4, r1
 8009cac:	4690      	mov	r8, r2
 8009cae:	d82d      	bhi.n	8009d0c <__ssputs_r+0x70>
 8009cb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cb8:	d026      	beq.n	8009d08 <__ssputs_r+0x6c>
 8009cba:	6965      	ldr	r5, [r4, #20]
 8009cbc:	6909      	ldr	r1, [r1, #16]
 8009cbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cc2:	eba3 0901 	sub.w	r9, r3, r1
 8009cc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cca:	1c7b      	adds	r3, r7, #1
 8009ccc:	444b      	add	r3, r9
 8009cce:	106d      	asrs	r5, r5, #1
 8009cd0:	429d      	cmp	r5, r3
 8009cd2:	bf38      	it	cc
 8009cd4:	461d      	movcc	r5, r3
 8009cd6:	0553      	lsls	r3, r2, #21
 8009cd8:	d527      	bpl.n	8009d2a <__ssputs_r+0x8e>
 8009cda:	4629      	mov	r1, r5
 8009cdc:	f7ff ff52 	bl	8009b84 <_malloc_r>
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	b360      	cbz	r0, 8009d3e <__ssputs_r+0xa2>
 8009ce4:	6921      	ldr	r1, [r4, #16]
 8009ce6:	464a      	mov	r2, r9
 8009ce8:	f000 fae8 	bl	800a2bc <memcpy>
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cf6:	81a3      	strh	r3, [r4, #12]
 8009cf8:	6126      	str	r6, [r4, #16]
 8009cfa:	6165      	str	r5, [r4, #20]
 8009cfc:	444e      	add	r6, r9
 8009cfe:	eba5 0509 	sub.w	r5, r5, r9
 8009d02:	6026      	str	r6, [r4, #0]
 8009d04:	60a5      	str	r5, [r4, #8]
 8009d06:	463e      	mov	r6, r7
 8009d08:	42be      	cmp	r6, r7
 8009d0a:	d900      	bls.n	8009d0e <__ssputs_r+0x72>
 8009d0c:	463e      	mov	r6, r7
 8009d0e:	6820      	ldr	r0, [r4, #0]
 8009d10:	4632      	mov	r2, r6
 8009d12:	4641      	mov	r1, r8
 8009d14:	f000 faa8 	bl	800a268 <memmove>
 8009d18:	68a3      	ldr	r3, [r4, #8]
 8009d1a:	1b9b      	subs	r3, r3, r6
 8009d1c:	60a3      	str	r3, [r4, #8]
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	4433      	add	r3, r6
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	2000      	movs	r0, #0
 8009d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2a:	462a      	mov	r2, r5
 8009d2c:	f000 fad4 	bl	800a2d8 <_realloc_r>
 8009d30:	4606      	mov	r6, r0
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d1e0      	bne.n	8009cf8 <__ssputs_r+0x5c>
 8009d36:	6921      	ldr	r1, [r4, #16]
 8009d38:	4650      	mov	r0, sl
 8009d3a:	f7ff feb7 	bl	8009aac <_free_r>
 8009d3e:	230c      	movs	r3, #12
 8009d40:	f8ca 3000 	str.w	r3, [sl]
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	e7e9      	b.n	8009d26 <__ssputs_r+0x8a>
	...

08009d54 <_svfiprintf_r>:
 8009d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d58:	4698      	mov	r8, r3
 8009d5a:	898b      	ldrh	r3, [r1, #12]
 8009d5c:	061b      	lsls	r3, r3, #24
 8009d5e:	b09d      	sub	sp, #116	@ 0x74
 8009d60:	4607      	mov	r7, r0
 8009d62:	460d      	mov	r5, r1
 8009d64:	4614      	mov	r4, r2
 8009d66:	d510      	bpl.n	8009d8a <_svfiprintf_r+0x36>
 8009d68:	690b      	ldr	r3, [r1, #16]
 8009d6a:	b973      	cbnz	r3, 8009d8a <_svfiprintf_r+0x36>
 8009d6c:	2140      	movs	r1, #64	@ 0x40
 8009d6e:	f7ff ff09 	bl	8009b84 <_malloc_r>
 8009d72:	6028      	str	r0, [r5, #0]
 8009d74:	6128      	str	r0, [r5, #16]
 8009d76:	b930      	cbnz	r0, 8009d86 <_svfiprintf_r+0x32>
 8009d78:	230c      	movs	r3, #12
 8009d7a:	603b      	str	r3, [r7, #0]
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d80:	b01d      	add	sp, #116	@ 0x74
 8009d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d86:	2340      	movs	r3, #64	@ 0x40
 8009d88:	616b      	str	r3, [r5, #20]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d8e:	2320      	movs	r3, #32
 8009d90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d98:	2330      	movs	r3, #48	@ 0x30
 8009d9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f38 <_svfiprintf_r+0x1e4>
 8009d9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009da2:	f04f 0901 	mov.w	r9, #1
 8009da6:	4623      	mov	r3, r4
 8009da8:	469a      	mov	sl, r3
 8009daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dae:	b10a      	cbz	r2, 8009db4 <_svfiprintf_r+0x60>
 8009db0:	2a25      	cmp	r2, #37	@ 0x25
 8009db2:	d1f9      	bne.n	8009da8 <_svfiprintf_r+0x54>
 8009db4:	ebba 0b04 	subs.w	fp, sl, r4
 8009db8:	d00b      	beq.n	8009dd2 <_svfiprintf_r+0x7e>
 8009dba:	465b      	mov	r3, fp
 8009dbc:	4622      	mov	r2, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff ff6b 	bl	8009c9c <__ssputs_r>
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	f000 80a7 	beq.w	8009f1a <_svfiprintf_r+0x1c6>
 8009dcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dce:	445a      	add	r2, fp
 8009dd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 809f 	beq.w	8009f1a <_svfiprintf_r+0x1c6>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009de6:	f10a 0a01 	add.w	sl, sl, #1
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	9307      	str	r3, [sp, #28]
 8009dee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009df2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009df4:	4654      	mov	r4, sl
 8009df6:	2205      	movs	r2, #5
 8009df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfc:	484e      	ldr	r0, [pc, #312]	@ (8009f38 <_svfiprintf_r+0x1e4>)
 8009dfe:	f7f6 fa77 	bl	80002f0 <memchr>
 8009e02:	9a04      	ldr	r2, [sp, #16]
 8009e04:	b9d8      	cbnz	r0, 8009e3e <_svfiprintf_r+0xea>
 8009e06:	06d0      	lsls	r0, r2, #27
 8009e08:	bf44      	itt	mi
 8009e0a:	2320      	movmi	r3, #32
 8009e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e10:	0711      	lsls	r1, r2, #28
 8009e12:	bf44      	itt	mi
 8009e14:	232b      	movmi	r3, #43	@ 0x2b
 8009e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e20:	d015      	beq.n	8009e4e <_svfiprintf_r+0xfa>
 8009e22:	9a07      	ldr	r2, [sp, #28]
 8009e24:	4654      	mov	r4, sl
 8009e26:	2000      	movs	r0, #0
 8009e28:	f04f 0c0a 	mov.w	ip, #10
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e32:	3b30      	subs	r3, #48	@ 0x30
 8009e34:	2b09      	cmp	r3, #9
 8009e36:	d94b      	bls.n	8009ed0 <_svfiprintf_r+0x17c>
 8009e38:	b1b0      	cbz	r0, 8009e68 <_svfiprintf_r+0x114>
 8009e3a:	9207      	str	r2, [sp, #28]
 8009e3c:	e014      	b.n	8009e68 <_svfiprintf_r+0x114>
 8009e3e:	eba0 0308 	sub.w	r3, r0, r8
 8009e42:	fa09 f303 	lsl.w	r3, r9, r3
 8009e46:	4313      	orrs	r3, r2
 8009e48:	9304      	str	r3, [sp, #16]
 8009e4a:	46a2      	mov	sl, r4
 8009e4c:	e7d2      	b.n	8009df4 <_svfiprintf_r+0xa0>
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	1d19      	adds	r1, r3, #4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	9103      	str	r1, [sp, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	bfbb      	ittet	lt
 8009e5a:	425b      	neglt	r3, r3
 8009e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e60:	9307      	strge	r3, [sp, #28]
 8009e62:	9307      	strlt	r3, [sp, #28]
 8009e64:	bfb8      	it	lt
 8009e66:	9204      	strlt	r2, [sp, #16]
 8009e68:	7823      	ldrb	r3, [r4, #0]
 8009e6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e6c:	d10a      	bne.n	8009e84 <_svfiprintf_r+0x130>
 8009e6e:	7863      	ldrb	r3, [r4, #1]
 8009e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e72:	d132      	bne.n	8009eda <_svfiprintf_r+0x186>
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	1d1a      	adds	r2, r3, #4
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	9203      	str	r2, [sp, #12]
 8009e7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e80:	3402      	adds	r4, #2
 8009e82:	9305      	str	r3, [sp, #20]
 8009e84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f48 <_svfiprintf_r+0x1f4>
 8009e88:	7821      	ldrb	r1, [r4, #0]
 8009e8a:	2203      	movs	r2, #3
 8009e8c:	4650      	mov	r0, sl
 8009e8e:	f7f6 fa2f 	bl	80002f0 <memchr>
 8009e92:	b138      	cbz	r0, 8009ea4 <_svfiprintf_r+0x150>
 8009e94:	9b04      	ldr	r3, [sp, #16]
 8009e96:	eba0 000a 	sub.w	r0, r0, sl
 8009e9a:	2240      	movs	r2, #64	@ 0x40
 8009e9c:	4082      	lsls	r2, r0
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	3401      	adds	r4, #1
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea8:	4824      	ldr	r0, [pc, #144]	@ (8009f3c <_svfiprintf_r+0x1e8>)
 8009eaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009eae:	2206      	movs	r2, #6
 8009eb0:	f7f6 fa1e 	bl	80002f0 <memchr>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d036      	beq.n	8009f26 <_svfiprintf_r+0x1d2>
 8009eb8:	4b21      	ldr	r3, [pc, #132]	@ (8009f40 <_svfiprintf_r+0x1ec>)
 8009eba:	bb1b      	cbnz	r3, 8009f04 <_svfiprintf_r+0x1b0>
 8009ebc:	9b03      	ldr	r3, [sp, #12]
 8009ebe:	3307      	adds	r3, #7
 8009ec0:	f023 0307 	bic.w	r3, r3, #7
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	9303      	str	r3, [sp, #12]
 8009ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eca:	4433      	add	r3, r6
 8009ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ece:	e76a      	b.n	8009da6 <_svfiprintf_r+0x52>
 8009ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	e7a8      	b.n	8009e2c <_svfiprintf_r+0xd8>
 8009eda:	2300      	movs	r3, #0
 8009edc:	3401      	adds	r4, #1
 8009ede:	9305      	str	r3, [sp, #20]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	f04f 0c0a 	mov.w	ip, #10
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eec:	3a30      	subs	r2, #48	@ 0x30
 8009eee:	2a09      	cmp	r2, #9
 8009ef0:	d903      	bls.n	8009efa <_svfiprintf_r+0x1a6>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0c6      	beq.n	8009e84 <_svfiprintf_r+0x130>
 8009ef6:	9105      	str	r1, [sp, #20]
 8009ef8:	e7c4      	b.n	8009e84 <_svfiprintf_r+0x130>
 8009efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009efe:	4604      	mov	r4, r0
 8009f00:	2301      	movs	r3, #1
 8009f02:	e7f0      	b.n	8009ee6 <_svfiprintf_r+0x192>
 8009f04:	ab03      	add	r3, sp, #12
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	462a      	mov	r2, r5
 8009f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f44 <_svfiprintf_r+0x1f0>)
 8009f0c:	a904      	add	r1, sp, #16
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f3af 8000 	nop.w
 8009f14:	1c42      	adds	r2, r0, #1
 8009f16:	4606      	mov	r6, r0
 8009f18:	d1d6      	bne.n	8009ec8 <_svfiprintf_r+0x174>
 8009f1a:	89ab      	ldrh	r3, [r5, #12]
 8009f1c:	065b      	lsls	r3, r3, #25
 8009f1e:	f53f af2d 	bmi.w	8009d7c <_svfiprintf_r+0x28>
 8009f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f24:	e72c      	b.n	8009d80 <_svfiprintf_r+0x2c>
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	462a      	mov	r2, r5
 8009f2c:	4b05      	ldr	r3, [pc, #20]	@ (8009f44 <_svfiprintf_r+0x1f0>)
 8009f2e:	a904      	add	r1, sp, #16
 8009f30:	4638      	mov	r0, r7
 8009f32:	f000 f879 	bl	800a028 <_printf_i>
 8009f36:	e7ed      	b.n	8009f14 <_svfiprintf_r+0x1c0>
 8009f38:	0800a531 	.word	0x0800a531
 8009f3c:	0800a53b 	.word	0x0800a53b
 8009f40:	00000000 	.word	0x00000000
 8009f44:	08009c9d 	.word	0x08009c9d
 8009f48:	0800a537 	.word	0x0800a537

08009f4c <_printf_common>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	4616      	mov	r6, r2
 8009f52:	4698      	mov	r8, r3
 8009f54:	688a      	ldr	r2, [r1, #8]
 8009f56:	690b      	ldr	r3, [r1, #16]
 8009f58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	bfb8      	it	lt
 8009f60:	4613      	movlt	r3, r2
 8009f62:	6033      	str	r3, [r6, #0]
 8009f64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f68:	4607      	mov	r7, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	b10a      	cbz	r2, 8009f72 <_printf_common+0x26>
 8009f6e:	3301      	adds	r3, #1
 8009f70:	6033      	str	r3, [r6, #0]
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	0699      	lsls	r1, r3, #26
 8009f76:	bf42      	ittt	mi
 8009f78:	6833      	ldrmi	r3, [r6, #0]
 8009f7a:	3302      	addmi	r3, #2
 8009f7c:	6033      	strmi	r3, [r6, #0]
 8009f7e:	6825      	ldr	r5, [r4, #0]
 8009f80:	f015 0506 	ands.w	r5, r5, #6
 8009f84:	d106      	bne.n	8009f94 <_printf_common+0x48>
 8009f86:	f104 0a19 	add.w	sl, r4, #25
 8009f8a:	68e3      	ldr	r3, [r4, #12]
 8009f8c:	6832      	ldr	r2, [r6, #0]
 8009f8e:	1a9b      	subs	r3, r3, r2
 8009f90:	42ab      	cmp	r3, r5
 8009f92:	dc26      	bgt.n	8009fe2 <_printf_common+0x96>
 8009f94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f98:	6822      	ldr	r2, [r4, #0]
 8009f9a:	3b00      	subs	r3, #0
 8009f9c:	bf18      	it	ne
 8009f9e:	2301      	movne	r3, #1
 8009fa0:	0692      	lsls	r2, r2, #26
 8009fa2:	d42b      	bmi.n	8009ffc <_printf_common+0xb0>
 8009fa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fa8:	4641      	mov	r1, r8
 8009faa:	4638      	mov	r0, r7
 8009fac:	47c8      	blx	r9
 8009fae:	3001      	adds	r0, #1
 8009fb0:	d01e      	beq.n	8009ff0 <_printf_common+0xa4>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	6922      	ldr	r2, [r4, #16]
 8009fb6:	f003 0306 	and.w	r3, r3, #6
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	bf02      	ittt	eq
 8009fbe:	68e5      	ldreq	r5, [r4, #12]
 8009fc0:	6833      	ldreq	r3, [r6, #0]
 8009fc2:	1aed      	subeq	r5, r5, r3
 8009fc4:	68a3      	ldr	r3, [r4, #8]
 8009fc6:	bf0c      	ite	eq
 8009fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fcc:	2500      	movne	r5, #0
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	bfc4      	itt	gt
 8009fd2:	1a9b      	subgt	r3, r3, r2
 8009fd4:	18ed      	addgt	r5, r5, r3
 8009fd6:	2600      	movs	r6, #0
 8009fd8:	341a      	adds	r4, #26
 8009fda:	42b5      	cmp	r5, r6
 8009fdc:	d11a      	bne.n	800a014 <_printf_common+0xc8>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	e008      	b.n	8009ff4 <_printf_common+0xa8>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4652      	mov	r2, sl
 8009fe6:	4641      	mov	r1, r8
 8009fe8:	4638      	mov	r0, r7
 8009fea:	47c8      	blx	r9
 8009fec:	3001      	adds	r0, #1
 8009fee:	d103      	bne.n	8009ff8 <_printf_common+0xac>
 8009ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff8:	3501      	adds	r5, #1
 8009ffa:	e7c6      	b.n	8009f8a <_printf_common+0x3e>
 8009ffc:	18e1      	adds	r1, r4, r3
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	2030      	movs	r0, #48	@ 0x30
 800a002:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a006:	4422      	add	r2, r4
 800a008:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a00c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a010:	3302      	adds	r3, #2
 800a012:	e7c7      	b.n	8009fa4 <_printf_common+0x58>
 800a014:	2301      	movs	r3, #1
 800a016:	4622      	mov	r2, r4
 800a018:	4641      	mov	r1, r8
 800a01a:	4638      	mov	r0, r7
 800a01c:	47c8      	blx	r9
 800a01e:	3001      	adds	r0, #1
 800a020:	d0e6      	beq.n	8009ff0 <_printf_common+0xa4>
 800a022:	3601      	adds	r6, #1
 800a024:	e7d9      	b.n	8009fda <_printf_common+0x8e>
	...

0800a028 <_printf_i>:
 800a028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a02c:	7e0f      	ldrb	r7, [r1, #24]
 800a02e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a030:	2f78      	cmp	r7, #120	@ 0x78
 800a032:	4691      	mov	r9, r2
 800a034:	4680      	mov	r8, r0
 800a036:	460c      	mov	r4, r1
 800a038:	469a      	mov	sl, r3
 800a03a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a03e:	d807      	bhi.n	800a050 <_printf_i+0x28>
 800a040:	2f62      	cmp	r7, #98	@ 0x62
 800a042:	d80a      	bhi.n	800a05a <_printf_i+0x32>
 800a044:	2f00      	cmp	r7, #0
 800a046:	f000 80d2 	beq.w	800a1ee <_printf_i+0x1c6>
 800a04a:	2f58      	cmp	r7, #88	@ 0x58
 800a04c:	f000 80b9 	beq.w	800a1c2 <_printf_i+0x19a>
 800a050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a054:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a058:	e03a      	b.n	800a0d0 <_printf_i+0xa8>
 800a05a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a05e:	2b15      	cmp	r3, #21
 800a060:	d8f6      	bhi.n	800a050 <_printf_i+0x28>
 800a062:	a101      	add	r1, pc, #4	@ (adr r1, 800a068 <_printf_i+0x40>)
 800a064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a068:	0800a0c1 	.word	0x0800a0c1
 800a06c:	0800a0d5 	.word	0x0800a0d5
 800a070:	0800a051 	.word	0x0800a051
 800a074:	0800a051 	.word	0x0800a051
 800a078:	0800a051 	.word	0x0800a051
 800a07c:	0800a051 	.word	0x0800a051
 800a080:	0800a0d5 	.word	0x0800a0d5
 800a084:	0800a051 	.word	0x0800a051
 800a088:	0800a051 	.word	0x0800a051
 800a08c:	0800a051 	.word	0x0800a051
 800a090:	0800a051 	.word	0x0800a051
 800a094:	0800a1d5 	.word	0x0800a1d5
 800a098:	0800a0ff 	.word	0x0800a0ff
 800a09c:	0800a18f 	.word	0x0800a18f
 800a0a0:	0800a051 	.word	0x0800a051
 800a0a4:	0800a051 	.word	0x0800a051
 800a0a8:	0800a1f7 	.word	0x0800a1f7
 800a0ac:	0800a051 	.word	0x0800a051
 800a0b0:	0800a0ff 	.word	0x0800a0ff
 800a0b4:	0800a051 	.word	0x0800a051
 800a0b8:	0800a051 	.word	0x0800a051
 800a0bc:	0800a197 	.word	0x0800a197
 800a0c0:	6833      	ldr	r3, [r6, #0]
 800a0c2:	1d1a      	adds	r2, r3, #4
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6032      	str	r2, [r6, #0]
 800a0c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e09d      	b.n	800a210 <_printf_i+0x1e8>
 800a0d4:	6833      	ldr	r3, [r6, #0]
 800a0d6:	6820      	ldr	r0, [r4, #0]
 800a0d8:	1d19      	adds	r1, r3, #4
 800a0da:	6031      	str	r1, [r6, #0]
 800a0dc:	0606      	lsls	r6, r0, #24
 800a0de:	d501      	bpl.n	800a0e4 <_printf_i+0xbc>
 800a0e0:	681d      	ldr	r5, [r3, #0]
 800a0e2:	e003      	b.n	800a0ec <_printf_i+0xc4>
 800a0e4:	0645      	lsls	r5, r0, #25
 800a0e6:	d5fb      	bpl.n	800a0e0 <_printf_i+0xb8>
 800a0e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0ec:	2d00      	cmp	r5, #0
 800a0ee:	da03      	bge.n	800a0f8 <_printf_i+0xd0>
 800a0f0:	232d      	movs	r3, #45	@ 0x2d
 800a0f2:	426d      	negs	r5, r5
 800a0f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0f8:	4859      	ldr	r0, [pc, #356]	@ (800a260 <_printf_i+0x238>)
 800a0fa:	230a      	movs	r3, #10
 800a0fc:	e011      	b.n	800a122 <_printf_i+0xfa>
 800a0fe:	6821      	ldr	r1, [r4, #0]
 800a100:	6833      	ldr	r3, [r6, #0]
 800a102:	0608      	lsls	r0, r1, #24
 800a104:	f853 5b04 	ldr.w	r5, [r3], #4
 800a108:	d402      	bmi.n	800a110 <_printf_i+0xe8>
 800a10a:	0649      	lsls	r1, r1, #25
 800a10c:	bf48      	it	mi
 800a10e:	b2ad      	uxthmi	r5, r5
 800a110:	2f6f      	cmp	r7, #111	@ 0x6f
 800a112:	4853      	ldr	r0, [pc, #332]	@ (800a260 <_printf_i+0x238>)
 800a114:	6033      	str	r3, [r6, #0]
 800a116:	bf14      	ite	ne
 800a118:	230a      	movne	r3, #10
 800a11a:	2308      	moveq	r3, #8
 800a11c:	2100      	movs	r1, #0
 800a11e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a122:	6866      	ldr	r6, [r4, #4]
 800a124:	60a6      	str	r6, [r4, #8]
 800a126:	2e00      	cmp	r6, #0
 800a128:	bfa2      	ittt	ge
 800a12a:	6821      	ldrge	r1, [r4, #0]
 800a12c:	f021 0104 	bicge.w	r1, r1, #4
 800a130:	6021      	strge	r1, [r4, #0]
 800a132:	b90d      	cbnz	r5, 800a138 <_printf_i+0x110>
 800a134:	2e00      	cmp	r6, #0
 800a136:	d04b      	beq.n	800a1d0 <_printf_i+0x1a8>
 800a138:	4616      	mov	r6, r2
 800a13a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a13e:	fb03 5711 	mls	r7, r3, r1, r5
 800a142:	5dc7      	ldrb	r7, [r0, r7]
 800a144:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a148:	462f      	mov	r7, r5
 800a14a:	42bb      	cmp	r3, r7
 800a14c:	460d      	mov	r5, r1
 800a14e:	d9f4      	bls.n	800a13a <_printf_i+0x112>
 800a150:	2b08      	cmp	r3, #8
 800a152:	d10b      	bne.n	800a16c <_printf_i+0x144>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	07df      	lsls	r7, r3, #31
 800a158:	d508      	bpl.n	800a16c <_printf_i+0x144>
 800a15a:	6923      	ldr	r3, [r4, #16]
 800a15c:	6861      	ldr	r1, [r4, #4]
 800a15e:	4299      	cmp	r1, r3
 800a160:	bfde      	ittt	le
 800a162:	2330      	movle	r3, #48	@ 0x30
 800a164:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a168:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a16c:	1b92      	subs	r2, r2, r6
 800a16e:	6122      	str	r2, [r4, #16]
 800a170:	f8cd a000 	str.w	sl, [sp]
 800a174:	464b      	mov	r3, r9
 800a176:	aa03      	add	r2, sp, #12
 800a178:	4621      	mov	r1, r4
 800a17a:	4640      	mov	r0, r8
 800a17c:	f7ff fee6 	bl	8009f4c <_printf_common>
 800a180:	3001      	adds	r0, #1
 800a182:	d14a      	bne.n	800a21a <_printf_i+0x1f2>
 800a184:	f04f 30ff 	mov.w	r0, #4294967295
 800a188:	b004      	add	sp, #16
 800a18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	f043 0320 	orr.w	r3, r3, #32
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	4833      	ldr	r0, [pc, #204]	@ (800a264 <_printf_i+0x23c>)
 800a198:	2778      	movs	r7, #120	@ 0x78
 800a19a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	6831      	ldr	r1, [r6, #0]
 800a1a2:	061f      	lsls	r7, r3, #24
 800a1a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1a8:	d402      	bmi.n	800a1b0 <_printf_i+0x188>
 800a1aa:	065f      	lsls	r7, r3, #25
 800a1ac:	bf48      	it	mi
 800a1ae:	b2ad      	uxthmi	r5, r5
 800a1b0:	6031      	str	r1, [r6, #0]
 800a1b2:	07d9      	lsls	r1, r3, #31
 800a1b4:	bf44      	itt	mi
 800a1b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ba:	6023      	strmi	r3, [r4, #0]
 800a1bc:	b11d      	cbz	r5, 800a1c6 <_printf_i+0x19e>
 800a1be:	2310      	movs	r3, #16
 800a1c0:	e7ac      	b.n	800a11c <_printf_i+0xf4>
 800a1c2:	4827      	ldr	r0, [pc, #156]	@ (800a260 <_printf_i+0x238>)
 800a1c4:	e7e9      	b.n	800a19a <_printf_i+0x172>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	f023 0320 	bic.w	r3, r3, #32
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	e7f6      	b.n	800a1be <_printf_i+0x196>
 800a1d0:	4616      	mov	r6, r2
 800a1d2:	e7bd      	b.n	800a150 <_printf_i+0x128>
 800a1d4:	6833      	ldr	r3, [r6, #0]
 800a1d6:	6825      	ldr	r5, [r4, #0]
 800a1d8:	6961      	ldr	r1, [r4, #20]
 800a1da:	1d18      	adds	r0, r3, #4
 800a1dc:	6030      	str	r0, [r6, #0]
 800a1de:	062e      	lsls	r6, r5, #24
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	d501      	bpl.n	800a1e8 <_printf_i+0x1c0>
 800a1e4:	6019      	str	r1, [r3, #0]
 800a1e6:	e002      	b.n	800a1ee <_printf_i+0x1c6>
 800a1e8:	0668      	lsls	r0, r5, #25
 800a1ea:	d5fb      	bpl.n	800a1e4 <_printf_i+0x1bc>
 800a1ec:	8019      	strh	r1, [r3, #0]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	6123      	str	r3, [r4, #16]
 800a1f2:	4616      	mov	r6, r2
 800a1f4:	e7bc      	b.n	800a170 <_printf_i+0x148>
 800a1f6:	6833      	ldr	r3, [r6, #0]
 800a1f8:	1d1a      	adds	r2, r3, #4
 800a1fa:	6032      	str	r2, [r6, #0]
 800a1fc:	681e      	ldr	r6, [r3, #0]
 800a1fe:	6862      	ldr	r2, [r4, #4]
 800a200:	2100      	movs	r1, #0
 800a202:	4630      	mov	r0, r6
 800a204:	f7f6 f874 	bl	80002f0 <memchr>
 800a208:	b108      	cbz	r0, 800a20e <_printf_i+0x1e6>
 800a20a:	1b80      	subs	r0, r0, r6
 800a20c:	6060      	str	r0, [r4, #4]
 800a20e:	6863      	ldr	r3, [r4, #4]
 800a210:	6123      	str	r3, [r4, #16]
 800a212:	2300      	movs	r3, #0
 800a214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a218:	e7aa      	b.n	800a170 <_printf_i+0x148>
 800a21a:	6923      	ldr	r3, [r4, #16]
 800a21c:	4632      	mov	r2, r6
 800a21e:	4649      	mov	r1, r9
 800a220:	4640      	mov	r0, r8
 800a222:	47d0      	blx	sl
 800a224:	3001      	adds	r0, #1
 800a226:	d0ad      	beq.n	800a184 <_printf_i+0x15c>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	079b      	lsls	r3, r3, #30
 800a22c:	d413      	bmi.n	800a256 <_printf_i+0x22e>
 800a22e:	68e0      	ldr	r0, [r4, #12]
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	4298      	cmp	r0, r3
 800a234:	bfb8      	it	lt
 800a236:	4618      	movlt	r0, r3
 800a238:	e7a6      	b.n	800a188 <_printf_i+0x160>
 800a23a:	2301      	movs	r3, #1
 800a23c:	4632      	mov	r2, r6
 800a23e:	4649      	mov	r1, r9
 800a240:	4640      	mov	r0, r8
 800a242:	47d0      	blx	sl
 800a244:	3001      	adds	r0, #1
 800a246:	d09d      	beq.n	800a184 <_printf_i+0x15c>
 800a248:	3501      	adds	r5, #1
 800a24a:	68e3      	ldr	r3, [r4, #12]
 800a24c:	9903      	ldr	r1, [sp, #12]
 800a24e:	1a5b      	subs	r3, r3, r1
 800a250:	42ab      	cmp	r3, r5
 800a252:	dcf2      	bgt.n	800a23a <_printf_i+0x212>
 800a254:	e7eb      	b.n	800a22e <_printf_i+0x206>
 800a256:	2500      	movs	r5, #0
 800a258:	f104 0619 	add.w	r6, r4, #25
 800a25c:	e7f5      	b.n	800a24a <_printf_i+0x222>
 800a25e:	bf00      	nop
 800a260:	0800a542 	.word	0x0800a542
 800a264:	0800a553 	.word	0x0800a553

0800a268 <memmove>:
 800a268:	4288      	cmp	r0, r1
 800a26a:	b510      	push	{r4, lr}
 800a26c:	eb01 0402 	add.w	r4, r1, r2
 800a270:	d902      	bls.n	800a278 <memmove+0x10>
 800a272:	4284      	cmp	r4, r0
 800a274:	4623      	mov	r3, r4
 800a276:	d807      	bhi.n	800a288 <memmove+0x20>
 800a278:	1e43      	subs	r3, r0, #1
 800a27a:	42a1      	cmp	r1, r4
 800a27c:	d008      	beq.n	800a290 <memmove+0x28>
 800a27e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a282:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a286:	e7f8      	b.n	800a27a <memmove+0x12>
 800a288:	4402      	add	r2, r0
 800a28a:	4601      	mov	r1, r0
 800a28c:	428a      	cmp	r2, r1
 800a28e:	d100      	bne.n	800a292 <memmove+0x2a>
 800a290:	bd10      	pop	{r4, pc}
 800a292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a29a:	e7f7      	b.n	800a28c <memmove+0x24>

0800a29c <_sbrk_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d06      	ldr	r5, [pc, #24]	@ (800a2b8 <_sbrk_r+0x1c>)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	602b      	str	r3, [r5, #0]
 800a2a8:	f7f7 f83c 	bl	8001324 <_sbrk>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_sbrk_r+0x1a>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_sbrk_r+0x1a>
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	24000948 	.word	0x24000948

0800a2bc <memcpy>:
 800a2bc:	440a      	add	r2, r1
 800a2be:	4291      	cmp	r1, r2
 800a2c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2c4:	d100      	bne.n	800a2c8 <memcpy+0xc>
 800a2c6:	4770      	bx	lr
 800a2c8:	b510      	push	{r4, lr}
 800a2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2d2:	4291      	cmp	r1, r2
 800a2d4:	d1f9      	bne.n	800a2ca <memcpy+0xe>
 800a2d6:	bd10      	pop	{r4, pc}

0800a2d8 <_realloc_r>:
 800a2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2dc:	4680      	mov	r8, r0
 800a2de:	4615      	mov	r5, r2
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	b921      	cbnz	r1, 800a2ee <_realloc_r+0x16>
 800a2e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	f7ff bc4b 	b.w	8009b84 <_malloc_r>
 800a2ee:	b92a      	cbnz	r2, 800a2fc <_realloc_r+0x24>
 800a2f0:	f7ff fbdc 	bl	8009aac <_free_r>
 800a2f4:	2400      	movs	r4, #0
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2fc:	f000 f81a 	bl	800a334 <_malloc_usable_size_r>
 800a300:	4285      	cmp	r5, r0
 800a302:	4606      	mov	r6, r0
 800a304:	d802      	bhi.n	800a30c <_realloc_r+0x34>
 800a306:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a30a:	d8f4      	bhi.n	800a2f6 <_realloc_r+0x1e>
 800a30c:	4629      	mov	r1, r5
 800a30e:	4640      	mov	r0, r8
 800a310:	f7ff fc38 	bl	8009b84 <_malloc_r>
 800a314:	4607      	mov	r7, r0
 800a316:	2800      	cmp	r0, #0
 800a318:	d0ec      	beq.n	800a2f4 <_realloc_r+0x1c>
 800a31a:	42b5      	cmp	r5, r6
 800a31c:	462a      	mov	r2, r5
 800a31e:	4621      	mov	r1, r4
 800a320:	bf28      	it	cs
 800a322:	4632      	movcs	r2, r6
 800a324:	f7ff ffca 	bl	800a2bc <memcpy>
 800a328:	4621      	mov	r1, r4
 800a32a:	4640      	mov	r0, r8
 800a32c:	f7ff fbbe 	bl	8009aac <_free_r>
 800a330:	463c      	mov	r4, r7
 800a332:	e7e0      	b.n	800a2f6 <_realloc_r+0x1e>

0800a334 <_malloc_usable_size_r>:
 800a334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a338:	1f18      	subs	r0, r3, #4
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	bfbc      	itt	lt
 800a33e:	580b      	ldrlt	r3, [r1, r0]
 800a340:	18c0      	addlt	r0, r0, r3
 800a342:	4770      	bx	lr

0800a344 <_init>:
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a346:	bf00      	nop
 800a348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34a:	bc08      	pop	{r3}
 800a34c:	469e      	mov	lr, r3
 800a34e:	4770      	bx	lr

0800a350 <_fini>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	bf00      	nop
 800a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a356:	bc08      	pop	{r3}
 800a358:	469e      	mov	lr, r3
 800a35a:	4770      	bx	lr
